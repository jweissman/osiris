{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Util.ts","webpack:///./src/values/DeviceSize.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Machine.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/Painting.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Device.ts","webpack:///./src/models/Structure.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/strategies/Strategy.ts","webpack:///./src/actors/Building/BackgroundPatterns.ts","webpack:///./src/values/Scale.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Resources.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/SkyLayer.ts","webpack:///./src/actors/Planet/SkyLayers.ts","webpack:///./src/strategies/EatingStrategy.ts","webpack:///./src/strategies/WhenHungryEatingStrategy.ts","webpack:///./src/strategies/SleepingStrategy.ts","webpack:///./src/strategies/AnyBedSleepingStrategy.ts","webpack:///./src/strategies/ConstructionStrategy.ts","webpack:///./src/strategies/ProximityBasedConstruction.ts","webpack:///./src/values/InteractionRequest.ts","webpack:///./src/strategies/ProductionStrategy.ts","webpack:///./src/strategies/CapacityBasedProduction.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/actors/Hud/Modal.ts","webpack:///./src/actors/Hud/Palette.ts","webpack:///./src/actors/Hud/CardBody.ts","webpack:///./src/actors/Hud/CardTitle.ts","webpack:///./src/actors/Hud/Card.ts","webpack:///./src/actors/Hud/MusicPlayer.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MediumSurfaceRoomView.ts","webpack:///./src/actors/Building/MediumRoomThreeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/images/wood-panel-bg.png","webpack:///./src/images/ussf.png","webpack:///./src/images/window-bg.png","webpack:///./src/images/beige-bg.png","webpack:///./src/images/checker-bg.png","webpack:///./src/images/tech-bg.png","webpack:///./src/images/poster-wall-bg.png","webpack:///./src/images/books-bg.png","webpack:///./src/images/leafy-bg.png","webpack:///./src/images/raised-square-bg.png","webpack:///./src/images/lava-lamp-plain.svg","webpack:///./src/images/codex-plain.svg","webpack:///./src/images/statue-plain.svg","webpack:///./src/images/miner-plain.svg","webpack:///./src/images/solar-collector-plain.svg","webpack:///./src/images/couch-plain.svg","webpack:///./src/images/fabricator-plain.svg","webpack:///./src/images/mega-console-plain.svg","webpack:///./src/images/console-red-plain.svg","webpack:///./src/images/console-green-plain.svg","webpack:///./src/images/console-purple-plain.svg","webpack:///./src/images/console-plain.svg","webpack:///./src/images/workstation-plain.svg","webpack:///./src/images/houseplant-plain.svg","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/models/MechanicalOperation.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/sounds/future tense.mp3","webpack:///./src/sounds/understanding.mp3","webpack:///./src/sounds/indivision.mp3","webpack:///./src/sounds/assembler.mp3","webpack:///./src/sounds/crater-rock.mp3","webpack:///./src/images/sword.png","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","deleteByValueOnce","index","indexOf","eachCons","eachChunk","array","measureDistance","b","sleep","ms","Promise","resolve","setTimeout","shuffle","sort","zip","countOccurrences","counts","forEach","containsUniq","testElems","doesContain","arrCopy","missingItem_1","testElem","find","mixColors","factor","aFactor","bFactor","Color","g","t","DeviceSize","Scale_1","major","Scale","minor","Tiny","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","fourth","eighth","second","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","SurfaceRoadView_1","SurfaceRoadView","SmallDomeThreeView_1","SmallDomeThreeView","MidDomeView_1","MidDomeView","BigDomeView_1","BigDomeView","SmallRoomThreeView_1","SmallRoomThreeView","MediumRoomView_1","MediumRoomView","LargeRoomView_1","LargeRoomView","HugeRoomView_1","HugeRoomView","MediumRoomThreeView_1","MediumRoomThreeView","MediumSurfaceRoomView_1","MediumSurfaceRoomView","structureViews","PureValue","availableCapacity","market","supply","demand","Power","Oxygen","Water","Shelter","Hope","Joy","Wisdom","Wealth","Beauty","Wonder","allValues","emptyMarket","sumMarkets","ea","eb","newMarket","_a","sa","da","_b","equilibrium","every","ResourceBlock","Biomass","Ore","Idea","Meal","Data","Mineral","Bioplasma","Alloy","Algorithm","Argent","Aurum","Omnium","blockColors","Green","Blue","lighten","Red","Yellow","darken","cStep","Viridian","DarkGray","Gray","Orange","White","blockColor","block","desaturate","this","__extends","setPrototypeOf","__proto__","constructor","create","__assign","assign","arguments","Economy_1","DeviceSize_1","MechanicalOperation_1","Util_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","plant","workstation","console","consolePurple","consoleGreen","consoleRed","megaconsole","fabricator","couch","solar","miner","statue","codex","lavaLamp","Violet","store","mechanicalOperations","generate","recipe","spawn","accelerateTime","explore","Machine","description","color","LightGray","cost","operation","type","image","prereqs","economy","forDome","hide","isVehicle","tinySlots","concretize","onPlacement","device","CommandCenter","_super","_this","built","produceResource","building","populate","pos","add","MissionLog","OxygenExtractor","WaterCondensingMachine","SolarCell","LavaLamp","Table","Figurine","Statue","StudyMachine","Workstation","Desk","Codex","Bookshelf","Couch","Fridge","Stove","Bed","Houseplant","PersonnelRegistry","CloningVat","OrientationConsole","productionTime","AlgaeVat","DissolutionVat","PlasmaBank","Fabricator","LifeSciencesConsole","Botany","Miner","MetalStorage","ResearchServer","Orchard","Cabin","Arbor","MineralProcessor","ThinkingFountain","Mainframe","Megafabricator","MolecularEngine","fromHex","SilverForest","TimeCrystal","HoloProjector","SacredGrove","AtomicCompiler","MiningDrill","Preserve","LogicPool","Cathedral","Microcity","LogicCrystal","allMachines","Orientation","Left","Up","Right","Down","compass","flip","orientation","Error","Orientation_1","Game_1","Graph_1","SpaceFunction_1","Machine_1","BackgroundPatterns_1","Painting_1","DevicePlace","structure","planet","x","y","width","height","infra","Transparent","edgeWidth","placed","hover","showLabel","facing","hideBox","childrenBuildings","devices","active","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","some","currentlyViewing","toggleActive","collisionType","CollisionType","PreventCollision","nameLabel","Label","fontSize","poly","aabbPoly","draw","ctx","delta","drawRect","aabb","processedColor","spaceFunction","Game","debugPath","slots","slot","rect","nodes","node","devicePlaces","place","position","visibleSize","update","engine","tryProduce","emptyUnlessActive","isActive","machineEconomies","buildingEconomy","inUse","wasEquil","_i","allValues_1","localCap","globalCap","agg","constrainCursor","clone","reshape","afterConstruct","handleClick","_pos","getWidth","getHeight","deviceInteractionPlaces","graph","supergraph","Graph","rootNode","findOrCreate","child","parentSlot","edge","childNode","redeem","res","gather","debit","spend","elite","pathFromRect","angledRoofPoly","angleStartY","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","bldg","edgeColor","mainColor","colorBase","clr","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","closestBuildingByType","matchingSlot","compass_1","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","subEqual","updateFunction","machine","hasPlaceForDevice","nextDevicePlace","getDevices","tinyDevices","allTheMachines","machines","allSpaceFunctions","spaceFn","sf","text","background","BackgroundPattern","Grid","Actor","drawPatternedPoly","path","pattern","Black","gridPattern","getBackgroundPattern","save","translate","beginPath","moveTo","pt","lineTo","closePath","fillStyle","strokeStyle","stroke","restore","drawLine","lineWidth","toRGBA","drawPatternedRect","rectangle","filled","dashed","main","fillRect","setLineDash","strokeRect","drawPoly","drawStar","cx","cy","outerRadius","innerRadius","spikes","rot","PI","cos","sin","Resources_1","world","displayMode","DisplayMode","FullScreen","backgroundColor","start","loader","Loader","key","Resources","addResource","then","log","citizenSpeed","startHour","minuteTickMillis","Engine","Structure_1","Device","initialPos","product","imageLoaded","reserved","parentDevice","Image","onload","src","computeEconomy","globalAlpha","imageX","imageY","vel","scale","drawImage","iv","bx","by","yOff","produced","blockSize","assemble","citizen","isCarryingUnique","drop","progressBar","sent","label","interact","request","worked","op","recipe_1","carrying","it","consumes","includes","consumed","workTime","getEffectiveWorkTime","carry","produces","warn","requires","has","storeOrExplore","dispense","store_1","stores","getEffectiveOperationalCapacity","res_1","stored","origX","groundSpeed","driving","xOff","actions","asPromise","gathers","bonus","bonuses","capacity","workSpeed","round","resource","generationTime","generates","snap","snapTiny","allStructures","snapped","hasTinyPlace","spot","nextTinyPlace","tx0","ndx","addTinyDevice","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","medGroundVehicles","Structure","view","zoom","Corridor","Ladder","MainTunnel","fifth","MediumSurfaceRoom","SurfaceRoad","first","Dome","seventh","CommonArea","sixth","SmallRoomThree","SmallRoomTwo","SmallDome","MediumRoom","MediumRoomThree","LargeRoom","HugeRoom","SmallDomeThree","MidDome","LargeDome","Arcology","GroundVehiclePool","SpaceFunction","Beige","MissionControl","Window","LivingQuarters","Barracks","Kitchen","Checker","LifeSupportPod","Retreat","CloneMatrix","CloneReception","ReadingRoom","Library","Books","Study","Wood","ComputerLab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Leafy","Farm","Factory","ComputerCore","Tech","LifeSciencesLab","Refinery","Mine","HoloMatrix","TimeChamber","LivingRoom","Statuary","InteractionRequest_1","Strategy","pawn","sleepInterval","currentPlanet","findPoweredDevices","recipes","operations","explores","attempt","pause","gatherBlock","gathered","generatesDesiredBlock","gen","closestDeviceByType","storesDesiredBlock","visitDevice","waitTimes","retrieveResource","visit","workExploration","exploring","knowsHow","vehicle","explored","drive","driven","workRecipe","debug","knowsRecipe","maker","made","gatherIngredients","performRecipeTask","blocks","blocks_1","ingredient","tries","timesToAttempt","raisedSquare","leafy","bookish","posters","tech","checker","beige","ussf","wood","loadBg","loading","Poster","USSF","backgroundPatterns","bg","matrix","DOMMatrix","createPattern","setTransform","majorUnit","minorUnit","minorScale","empty","edges","edgesInverse","isEmpty","newNode","contains","testNode","measure","tolerance","dfs","dst","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","steps","srcIndex","reverse","sword","craterRock","assembler","indivision","understanding","futureTense","Sword","Texture","CraterRock","Sound","Assembler","Indivision","Understanding","FutureTense","ex","Player","setWidth","setHeight","PlanetBackground","MountainLayers","layers","skyColor","layerHeight","layerCount","peakCount","onInitialize","layerIndex","unshift","baseY","deltas","genPeaks","wc","sc","ls_1","layer","drawLayer","ox","oy","peakWidth","dMax","last","maxDiff","times","pick","Mountains","peaks","peakDistance","drift","baseColor","brightColor","yBase","peak","y0","mtnWidth","PlanetBackground_1","SkyLayer","lo","hi","mid","backMountainLayers","mountains","mountainLayers","setLoHi","SkyLayer_1","SkyLayers","c0","c1","setHi","EatingStrategy","EatingStrategy_1","WhenHungryEatingStrategy","canApply","isHungry","storedResources","desk","eat","SleepingStrategy","SleepingStrategy_1","AnyBedSleepingStrategy","isTired","hour","takeRest","Strategy_1","ConstructionStrategy","unbuiltDevice","findAllDevices","ProxmityBasedConstruction","constructDevice","resources","__awaiter","throw","done","__generator","trys","ops","return","Symbol","iterator","TypeError","pop","ProductionStrategy","storeBlock","tryStoreBlock","openStore","CapacityBasedProduction","findStore","findRecipe","explorer","findExplorer","storage_1","storage_2","explorers","CapacityBasedProduction_1","ProximityBasedConstruction_1","AnyBedSleepingStrategy_1","WhenHungryEatingStrategy_1","Citizen","home","isPlanning","workInProgress","sleeping","hunger","energy","currentBuilding","productionStrategy","constructionStrategy","sleepingStrategy","eatingStrategy","speedMultiplier","timeFactor","now","Date","getTime","progress","workStarted","workDuration","work","rotate","carried","saturate","pw","px","py","c_1","duration","reject","target","targetForDevice","pathBetweenPoints","followPath","glideTo","walkSpeed","all","choice","strategies","strat","thirtyMinuteTimer","Citizen_1","Population","citizens","increase","NavigationTree","seekPath","origin","dest","closestNode","abs","NavigationTree_1","Colony","currentlyConstructing","debugTree","navTree","gradient","createLinearGradient","addColorStop","placeBuilding","buildNavTree","structureTypes","st","pathBetween","destination","srcNode","destNode","machineTypes","ctrl","activeBuildings","Colony_1","Population_1","Device_1","SkyLayers_1","Planet","hud","onBuildingHover","onDeviceHover","w","depth","sky","createLayer","skyLayers","population","currentHour","setTime","time","nextHour","inc","oldC","skyColorForHour","newC","mixC","assignColors","colorMap","night","dawn","morning","afternoon","evening","set","buildingOrDevice","theLayer","theEconomy","popularDemand","resourceGathered","resourceExpended","maxPop","theEconomyWithoutPeople","values","val","closestDevice","acc","Modal","title","message","makeDialog","_element","left","canvas","offsetLeft","top_1","offsetTop","style","top","addButtons","buttonMap","entries","intent","btn","buttonFactory","onclick","appendChild","teardown","document","body","removeChild","createElement","display","flexWrap","border","textContent","fontFamily","fontWeight","textTransform","padding","margin","fg","modalButton","onmouseover","onmouseleave","Palette","onButtonClick","onButtonEnter","comprehend","comprehended","dragging","makePalette","updateBuilt","prereq","parentElement","addEventListener","clientX","clientY","onmouseenter","paletteButton","CardBody","entity","describeResources","freqs","keys","join","notes","fontStyle","FontStyle","Italic","footer","show","describeEconomy","resourceDescription","domeStatus","bonusMessages","econ","CardTitle","announce","CardTitle_1","CardBody_1","Card","x0","cardBody","ix","iy","present","MusicPlayer","playlist","paused","makePlayer","startMusic","_titleElem","currentTrack","play","advancePlaylist","_wrapper","textAlign","inlineBlock","iconFactory","handleAction","action","song","stop","trackNames","append","iconContent","icon","innerHTML","EconomicValue","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","val1","val2","addValue","updateView","updatedEconomy","Tooltip","messageLabel","ResourceListEntry","resourceBlock","hovering","tooltip","visible","credit","amt","UIActor","ResourceListEntry_1","ResourcesList","res1","res2","rx","ry","addEntry","entry","increment","decrement","ResourcesList_1","EconomyView_1","MusicPlayer_1","StatusAnalysisView","h","brand","ty","version","clock","popLabel","musicPlayer","Crater Rock","Future Tense","incrementResource","decrementResource","setMessage","showEconomy","showPopCap","cap","setClock","days","toString","hh","hours","minutes","ampm","padStart","StatusAnalysisView_1","Card_1","Palette_1","Modal_1","Hud","game","onBuildingSelect","onMachineSelect","onFunctionSelect","canvasWidth","canvasHeight","hidePalettes","modal","status","displayInfo","showCard","machinePalette","structurePalette","structuresForPalette","functionPalette","functionsForPalette","card","systemMessage","buttons","closeSystemMessage","showPalettes","setStatus","updateDetails","rebuildPalettes","updatePalettes","updateEconomy","updateMaxPop","updateBuildingPalette","updateMachinePalette","updateFunctionPalette","builtStructures","builtMachines","machinesForPalette","builtReifiedFunctions","builtFunctions","rf","devicePlaceSize","devicePlaceCount","floorHeight","sg","right","isGroundFloor","leftSlot","rightSlot","topSlot","theSlots","slotY","getTop","backgroundPattern","floorColor","floorEdgeHeight","flagX","flagY","flagpoleHeight","_1","originSlot","minHeight","pickingOrigin","maxHeight","drawShape","xoff","yoff","bezierCurveTo","halfWidth","slotHeights","heights","y1","btm","lst","slotCount","deviceSize","arc","originX","newCursor","input","output","Hud_1","Planet_1","player_1","Construct","defaultMessage","placingFunction","hasActiveModal","timeStepIntervalMillis","firstBuilding","buildIt","startConstructing","player","prepareNextBuilding","camera","addTimer","Timer","stepTime","dismiss","onActivate","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction_1","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","moveCam","direction","camMoveSpeed","dv","move","keyboard","Keys","H","Esc","W","A","S","D","onDeactivate","off","nextMissingStructureOrFunction","reqs","requiredStructuresAndFunctions","req","actualStructureNames","actualFunctionNames","actualNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","spawnFunction","anotherBuilding","assembleBuildingFromStructure","theStructure","Scene","World","colors","Cyan","Vermillion","Chartreuse","Rose","World_1","Construct_1","theWorld","construct","goToScene"],"mappings":"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uB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([106,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { getBackgroundPattern, BackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (elem: T) => Vector, predicate?: (elem: T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport const deleteByValueOnce = (arr, elem) => {\r\n  let index = arr.indexOf(elem);\r\n  if (index !== -1) arr.splice(index, 1);\r\n}\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport function eachChunk(a, n) {\r\n  return a.reduce(function (result, value, index, array) {\r\n    if (index % n === 0)\r\n      result.push(array.slice(index, index + n));\r\n    return result;\r\n  }, []);\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function shuffle(arr) {\r\n  return arr.sort(() => Math.random() > 0.5 ? 1 : -1)\r\n}\r\n\r\nexport const zip = (a, b) => a.map((e, i) => [e, b[i]])\r\n\r\nexport const countOccurrences = (arr) => {\r\n  let counts = {}\r\n  arr.forEach((elem) => {\r\n    counts[elem] = counts[elem] || 0\r\n    counts[elem] += 1\r\n  })\r\n  return counts\r\n}\r\n\r\nexport function containsUniq<T>(arr: T[], testElems: T[]) {\r\n  let doesContain = false\r\n  let arrCopy = arr.slice()\r\n  if (arr.length > 0) {\r\n    let missingItem = false\r\n    testElems.forEach(testElem => {\r\n      if (arrCopy.find(e => e === testElem)) {\r\n        deleteByValueOnce(arrCopy, testElem)\r\n      } else {\r\n        missingItem = true\r\n      }\r\n    })\r\n    doesContain = !missingItem\r\n  }\r\n  return doesContain\r\n}\r\n\r\n\r\nexport function mixColors(a: Color, b: Color, factor: number = 0.5): Color {\r\n  let aFactor = factor, bFactor = (1-factor)\r\n  return new Color(\r\n    (a.r * aFactor) + (b.r * bFactor),\r\n    (a.g * aFactor) + (b.g * bFactor),\r\n    (a.b * aFactor) + (b.b * bFactor),\r\n    1\r\n  )\r\n}","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Tiny,\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge,\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Tiny: sz = minor.third; break;\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.fourth; break;\r\n        case DeviceSize.Large: sz = major.eighth + major.second; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\nimport { SmallDomeThreeView } from './SmallDomeThreeView';\r\nimport { MidDomeView } from './MidDomeView';\r\nimport { BigDomeView } from './BigDomeView';\r\nimport { SmallRoomThreeView } from './SmallRoomThreeView';\r\nimport { MediumRoomView } from './MediumRoomView';\r\nimport { LargeRoomView } from './LargeRoomView';\r\nimport { HugeRoomView } from './HugeRoomView';\r\nimport { MediumRoomThreeView } from './MediumRoomThreeView';\r\nimport { MediumSurfaceRoomView } from './MediumSurfaceRoomView';\r\n\r\n\r\nconst structureViews: { [key: string]: typeof Building } = {\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n    MediumSurfaceRoomView,\r\n}\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n\r\n    MediumSurfaceRoomView,\r\n\r\n\r\n    structureViews\r\n\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport const allValues: PureValue[] = [\r\n    PureValue.Power,\r\n    PureValue.Oxygen,\r\n    PureValue.Water,\r\n    PureValue.Shelter,\r\n    PureValue.Hope,\r\n    PureValue.Joy,\r\n    PureValue.Wisdom,\r\n    PureValue.Wealth,\r\n    PureValue.Beauty,\r\n    PureValue.Wonder\r\n]\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return Math.floor(market[value].supply - market[value].demand)\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply,\r\n            demand,\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport const equilibrium: (e: Economy) => boolean = (e) => {\r\n    return allValues.every(value => availableCapacity(e, value) >= 0)\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Biomass = 'Biomass',\r\n    Ore = 'Ore',\r\n    Idea = 'Idea',\r\n\r\n    // derived\r\n    Meal = 'Meal',\r\n    Data = 'Data',\r\n    Mineral = 'Mineral',\r\n    Bioplasma = 'Bioplasma',\r\n\r\n    // higher-order\r\n    Alloy = \"Alloy\",\r\n    Algorithm = \"Algorithm\",\r\n\r\n    // superb\r\n    Argent = \"Argent\",\r\n    Aurum = \"Aurum\",\r\n\r\n    // hyperbolic\r\n    Omnium = \"Omnium\",\r\n}\r\n\r\nlet cStep = 0.3\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Biomass: Color.Green,\r\n    Data: Color.Blue.lighten(cStep),\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(cStep),\r\n    Idea: Color.Blue.lighten(cStep*2), //.desaturate(cStep),\r\n    Ore: Color.Red.darken(cStep),\r\n\r\n    Bioplasma: Color.Viridian,\r\n\r\n    Alloy: Color.DarkGray.darken(cStep), //(cStep),\r\n    Algorithm: Color.Blue.darken(cStep), //.desaturate(cStep),\r\n\r\n    Argent: Color.Gray.lighten(cStep),\r\n    Aurum: Color.Orange.lighten(cStep),\r\n\r\n    Omnium: Color.White,\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    return baseColor.desaturate(0.1) //.lighten(0.1) //.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Color, FontStyle, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { MechanicalOperation, mechanicalOperations } from \"./MechanicalOperation\";\r\nimport { shuffle, range, sample } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\nconst plant = require('../images/houseplant-plain.svg')\r\nconst workstation = require('../images/workstation-plain.svg')\r\n\r\nconst console = require('../images/console-plain.svg')\r\nconst consolePurple = require('../images/console-purple-plain.svg')\r\nconst consoleGreen = require('../images/console-green-plain.svg')\r\nconst consoleRed = require('../images/console-red-plain.svg')\r\nconst megaconsole = require('../images/mega-console-plain.svg')\r\n\r\nconst fabricator = require('../images/fabricator-plain.svg')\r\n\r\nconst couch = require('../images/couch-plain.svg')\r\nconst solar = require('../images/solar-collector-plain.svg')\r\nconst miner = require('../images/miner-plain.svg')\r\n\r\nconst statue = require('../images/statue-plain.svg')\r\nconst codex = require('../images/codex-plain.svg')\r\n\r\nconst lavaLamp = require('../images/lava-lamp-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n    plant,\r\n    workstation,\r\n\r\n    console,\r\n    consolePurple,\r\n    consoleGreen,\r\n    consoleRed,\r\n    megaconsole,\r\n\r\n    fabricator,\r\n\r\n    couch,\r\n    solar,\r\n    miner,\r\n    statue,\r\n\r\n    codex,\r\n    lavaLamp,\r\n}\r\n\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nlet { store, generate, recipe, spawn, accelerateTime, explore } = mechanicalOperations\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n\r\n    cost: ResourceBlock[] = [ResourceBlock.Mineral]\r\n\r\n    size: DeviceSize = DeviceSize.Small\r\n    operation: MechanicalOperation = { type: 'noop' }\r\n    image = images.vat\r\n    prereqs: (typeof Machine)[] = []\r\n    economy: Economy = emptyMarket()\r\n    forDome: boolean = false\r\n    hide: boolean = false\r\n\r\n    capacity: boolean\r\n\r\n    isVehicle: boolean = false\r\n\r\n    tinySlots: boolean = false\r\n\r\n    concretize(): Machine { return this; } \r\n\r\n    onPlacement(device: Device) {\r\n        // ...whatever we need to script here?\r\n    }\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command Console'\r\n    description = 'commander, we need your help'\r\n    operation = store(\r\n        [ResourceBlock.Mineral, ResourceBlock.Ore], //,ResourceBlock.Biomass],\r\n        24\r\n    )\r\n    image = images.megaconsole\r\n    size = DeviceSize.Medium\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 6, demand: 0 },\r\n        Oxygen: { supply: 16, demand: 0 },\r\n        Water: { supply: 1, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 },\r\n        Shelter: { supply: 1, demand: 0}\r\n    }\r\n\r\n    onPlacement(device: Device) {\r\n        device.built = true\r\n        for (let i in range(20)) {\r\n            device.produceResource(ResourceBlock.Mineral)\r\n        }\r\n        let { building } = device\r\n        building.populate(device.pos.add(building.pos), true)\r\n    }\r\n}\r\n\r\nexport class MissionLog extends Machine {\r\n    name = 'Mission Log'\r\n    description = 'gather data'\r\n    operation = store(\r\n        [ResourceBlock.Data],\r\n        8\r\n    )\r\n    image = images.consolePurple\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n//export class Energon extends Machine {\r\n//    name = 'Energon'\r\n//    description = 'food paste'\r\n//}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 6, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n    image = images.solar\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 10, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H2O Condenser'\r\n    description = 'have a drink'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 5, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n// tiny\r\nexport class LavaLamp extends Machine {\r\n    name = 'Lava Lamp'\r\n    description = 'mesmerizing'\r\n    size = DeviceSize.Tiny\r\n    prereqs = [ Table ]\r\n    image  = images.lavaLamp\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Joy: { supply: 1, demand: 0 },\r\n        Power: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\nexport class Figurine extends Machine {\r\n    name = 'Figurine'\r\n    description = 'not an action figure'\r\n    size = DeviceSize.Tiny\r\n    prereqs = [ Table ]\r\n    image = images.statue   \r\n    economy = {\r\n        ...emptyMarket(),\r\n        Beauty: { supply: 0.1, demand: 0 },\r\n    }\r\n}\r\n\r\n// /// small subsurface\r\n\r\nexport class Table extends Machine {\r\n    name = 'Table'\r\n    description = 'a simple table'\r\n    image = images.bench\r\n    // this device provides slots for tiny-sized deviecs\r\n    tinySlots = true\r\n}\r\n\r\nexport class Statue extends Machine {\r\n    name = 'Statue'\r\n    description = 'for honor'\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Hope: { supply: 0.1, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n    }\r\n    image = images.statue\r\n    prereqs = [ Figurine ]\r\n}\r\n\r\nexport class StudyMachine extends Machine {\r\n    operation = recipe(\r\n        [ ResourceBlock.Idea, ResourceBlock.Idea, ResourceBlock.Idea ],\r\n        ResourceBlock.Data\r\n    )\r\n    color = Blue\r\n    concretize(): Machine { return new (sample([Workstation, Desk]))() }\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    description = 'get to work'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Codex extends Machine {\r\n    name = 'Codex'\r\n    description = 'read it closely'\r\n    image = images.codex\r\n    prereqs = [ Bookshelf ]\r\n    operation = store([ResourceBlock.Data], 3)\r\n    color = Blue\r\n    // concretize() { return this }\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    description = 'hackety hack'\r\n    prereqs = [ Bookshelf ]\r\n    image = images.workstation\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Couch extends Machine {\r\n    name = 'Couch'\r\n    description = 'take it easy'\r\n    prereqs = []\r\n    image = images.couch\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Joy: { supply: 0.1, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    operation = generate(ResourceBlock.Idea)\r\n    image = images.bookshelf\r\n    prereqs = [ ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    operation = store([ResourceBlock.Meal], 6)\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    operation = recipe(\r\n        [ResourceBlock.Biomass, ResourceBlock.Biomass],\r\n        ResourceBlock.Meal\r\n    )\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    description = 'sweet dreams'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    description = 'so nice'\r\n    prereqs = [ Bed ]\r\n    // produces = ResourceBlock.Food\r\n    cost = [ ResourceBlock.Biomass ]\r\n    operation = generate(ResourceBlock.Biomass, 1)\r\n    color = Green\r\n    image = images.plant\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Water: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\nexport class PersonnelRegistry extends Machine {\r\n    name = 'Personnel Registry'\r\n    description = 'track everybody'\r\n    prereqs = [ CloningVat ]\r\n    operation = store([ResourceBlock.Data], 4)\r\n    color = Yellow\r\n    image = images.console\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Wisdom: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class OrientationConsole extends Machine {\r\n    name = 'Orientation Console'\r\n    description = 'welcome to the colony'\r\n    prereqs = [CloningVat]\r\n    operation = generate(ResourceBlock.Data, 1)\r\n    image = images.consoleRed\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'we all grow'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = spawn()\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class DissolutionVat extends Machine {\r\n    name = 'Dissolution Vat'\r\n    description = 'back to basics'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = recipe(\r\n        [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n        ResourceBlock.Bioplasma\r\n    )\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [PlasmaBank]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class PlasmaBank extends Machine {\r\n    name = 'Bioplasm Bank'\r\n    description = 'hold on'\r\n    operation = store([ ResourceBlock.Bioplasma ])\r\n    prereqs = [AlgaeVat]\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    description = 'you made that'\r\n    operation = recipe(\r\n        [ResourceBlock.Mineral, ResourceBlock.Mineral],\r\n         ResourceBlock.Alloy\r\n    )\r\n    size = DeviceSize.Small\r\n    color = Red\r\n    prereqs = [Workstation]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n    image = images.fabricator\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    description = 'where there is a will'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class LifeSciencesConsole extends Machine {\r\n    name = 'Life Sciences Console'\r\n    description = 'mind and body together'\r\n    operation = store([ResourceBlock.Biomass, ResourceBlock.Data], 5)\r\n    prereqs = [Houseplant, Botany]\r\n    color = Green\r\n    image = images.consoleGreen\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.2 },\r\n    }\r\n}\r\n\r\n// medium\r\n\r\nexport class Miner extends Machine {\r\n    name = 'Miner (Rover)'\r\n    description = 'mobile drill unit'\r\n\r\n    // gather actually takes the machine/citizen around?\r\n    operation = explore(ResourceBlock.Ore, 2)\r\n\r\n    color = Red\r\n    size = DeviceSize.Medium\r\n    isVehicle = true\r\n    image = images.miner\r\n}\r\n\r\nexport class MetalStorage extends Machine {\r\n    name = 'Metal Storage'\r\n    description = 'contain minerals and alloys?'\r\n    operation = store([ResourceBlock.Mineral, ResourceBlock.Alloy], 8)\r\n    prereqs = [Bookshelf]\r\n    color = Red\r\n    size = DeviceSize.Medium\r\n}\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    operation = store([ResourceBlock.Data, ResourceBlock.Algorithm], 10)\r\n    image = images.server\r\n    prereqs = [Bookshelf, Workstation]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   operation = generate(ResourceBlock.Biomass)\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Oxygen: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   description = 'home on the plains'\r\n   operation = recipe(\r\n       [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n       ResourceBlock.Meal\r\n   )\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    description = 'arbor around the clock'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    description = 'plant lab'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n\r\nexport class MineralProcessor extends Machine {\r\n    name = 'Mineral Processor'\r\n    description = 'wheat from the chaff'\r\n    operation = recipe(\r\n        [ResourceBlock.Ore, ResourceBlock.Ore, ResourceBlock.Ore],\r\n         ResourceBlock.Mineral\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation, Fabricator]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class ThinkingFountain extends Machine {\r\n    name = 'Thinking Fountain'\r\n    description = 'slowly growing'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Mainframe, Megafabricator, MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = generate(ResourceBlock.Aurum, 8)\r\n    cost = [ResourceBlock.Aurum]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class SilverForest extends Machine {\r\n    name = 'Silver Forest'\r\n    description = 'immense serenity'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Megafabricator, Mainframe ]\r\n    color = Color.fromHex('c0c0c0')\r\n    operation = store([ResourceBlock.Argent], 12)\r\n    cost = [ResourceBlock.Alloy, ResourceBlock.Algorithm]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Beauty: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n    forDome = true\r\n}\r\n\r\nexport class TimeCrystal extends Machine {\r\n    name = 'Time Crystal'\r\n    description = 'xlr8'\r\n    size = DeviceSize.Medium\r\n    color = Color.fromHex('e5e4e2')\r\n    operation = accelerateTime()\r\n    cost = [ResourceBlock.Omnium]\r\n    prereqs = [ Megafabricator, SilverForest ]\r\n}\r\n\r\nexport class HoloProjector extends Machine {\r\n    name = 'Holo Projector'\r\n    description = 'whatever your heart desires'\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    operation = generate(ResourceBlock.Data, 3)\r\n    cost = [ResourceBlock.Algorithm, ResourceBlock.Mineral]\r\n    prereqs = [ Mainframe ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 3, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class SacredGrove extends Machine {\r\n    name = 'Sacred Grove'\r\n    description = 'where the furies play'\r\n    size = DeviceSize.Medium\r\n    forDome = true\r\n    cost = [ ResourceBlock.Omnium ]\r\n    prereqs = [ AtomicCompiler ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 4, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class AtomicCompiler extends Machine {\r\n    name = 'Atomic Compiler'\r\n    description = 'super position'\r\n    operation = recipe(\r\n        [ ResourceBlock.Aurum, ResourceBlock.Argent ],\r\n        ResourceBlock.Omnium\r\n    )\r\n    cost = [ ResourceBlock.Argent, ResourceBlock.Algorithm ]\r\n    prereqs = [ ThinkingFountain, SilverForest ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n}\r\n\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    description = 'ore away'\r\n    operation = generate(ResourceBlock.Ore)\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    image = images.miner\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    operation = recipe(\r\n        [ResourceBlock.Alloy, ResourceBlock.Algorithm],\r\n        ResourceBlock.Argent\r\n    )\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class MolecularEngine extends Machine {\r\n    name = 'Molecular Engine'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Megafabricator ]\r\n    color = Violet\r\n    operation = recipe(\r\n        [ResourceBlock.Bioplasma, ResourceBlock.Algorithm],\r\n        ResourceBlock.Aurum\r\n    )\r\n    image = images.megaconsole\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n        Water: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Mainframe extends Machine {\r\n    name = 'Mainframe'\r\n    size = DeviceSize.Large\r\n    color = Blue\r\n    prereqs = [ResearchServer]\r\n    cost = [ ResourceBlock.Mineral, ResourceBlock.Mineral ]\r\n    operation = recipe(\r\n        [ ResourceBlock.Data, ResourceBlock.Data ],\r\n        ResourceBlock.Algorithm\r\n    )\r\n    image = images.server\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 6 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Nature Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    operation = generate(ResourceBlock.Biomass, 12)\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n        Oxygen: { supply: 12, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicPool extends Machine {\r\n    name = 'Logic Pool'\r\n    size = DeviceSize.Large\r\n    prereqs = [ MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = store([ResourceBlock.Aurum], 12)\r\n    cost = [ResourceBlock.Algorithm, ResourceBlock.Bioplasma]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class Cathedral extends Machine {\r\n    name = 'Cathedral'\r\n    description = 'first ultrahumanist'\r\n    size = DeviceSize.Large\r\n    prereqs = [ SacredGrove ]\r\n}\r\n\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n\r\n    MineralProcessor,\r\n    PlasmaBank,\r\n    DissolutionVat,\r\n    MetalStorage,\r\n    Mainframe,\r\n\r\n    PersonnelRegistry,\r\n    MolecularEngine,\r\n    ThinkingFountain,\r\n    SilverForest,\r\n\r\n    OrientationConsole,\r\n    LifeSciencesConsole,\r\n\r\n    TimeCrystal,\r\n    LogicPool,\r\n    HoloProjector,\r\n    Cathedral,\r\n    SacredGrove,\r\n    AtomicCompiler,\r\n\r\n    Couch,\r\n    Statue,\r\n    Codex,\r\n\r\n    Table,\r\n    LavaLamp,\r\n\r\n    Figurine,\r\n\r\n    Miner,\r\n]","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits, FontStyle } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, deleteByValue, containsUniq, flatSingle } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock, emptyMarket, Economy, sumMarkets, equilibrium, allValues, availableCapacity } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { World } from \"../../models/World\";\r\nimport { Machine, allMachines, CommandCenter, MissionLog, StudyMachine } from \"../../models/Machine\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { EconomicValue } from \"../Hud/EconomicValue\";\r\nimport { drawRect, pathFromRect } from \"../../Painting\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0\r\n\r\n    nameLabel: Label\r\n\r\n    placed: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    spaceFunction: SpaceFunction\r\n\r\n    private devices: Device[] = []\r\n    givenName: string\r\n\r\n    private active: boolean = true\r\n    // private built: boolean = false\r\n\r\n    constructor(pos: Vector, public structure: Structure, public planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          structure.infra ? planet.color.darken(0.3) : Color.Transparent\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            if (!this.devices.some(d => d.hover)) {\r\n                this.planet.currentlyViewing = this\r\n            }\r\n        })\r\n\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED BUILDING\", { building: this })\r\n            this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 9\r\n        // this.nameLabel.fontStyle = FontStyle.Italic\r\n        this.nameLabel.color = Color.White\r\n\r\n        if (this.structure.infra) { this.active = true }\r\n    }\r\n\r\n    poly() { return this.aabbPoly() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        // this.devices.forEach(device => device.draw(ctx, delta))\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.showLabel && this.spaceFunction) {\r\n            this.nameLabel.pos = this.pos.add(new Vector(28, 24)) //get getCenter().\r\n            // this.nameLabel.color = Color.White\r\n            // this.nameLabel.pos.x = this.getCenter().x //ctx.measureText(this.structure.name).width / 2\r\n            // this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n        }\r\n\r\n        // let debug = true;\r\n        if (Game.debugPath) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = true\r\n        if (showDevicePlaces && this.devicePlaces().length > 0 && this.devices.length < this.devicePlaces().length) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    0.1,\r\n                    Color.White,\r\n                    false,\r\n                    true\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n\r\n        let tryProduce = this.placed;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.tryProduce(this.step));\r\n        }\r\n\r\n        // this.devices.forEach(d => d.update(engine, delta))\r\n\r\n        this.step += 1\r\n    }\r\n\r\n    get name() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.name\r\n        } else {\r\n            return this.structure.name\r\n        }\r\n    }\r\n\r\n    get description() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.description\r\n        } else {\r\n            return this.structure.description\r\n        }\r\n    }\r\n\r\n    economy(emptyUnlessActive: boolean = true): Economy {\r\n        if (emptyUnlessActive && !this.isActive) {\r\n            return emptyMarket()\r\n        } else {\r\n            let machineEconomies = this.devices.map(d => d.economy)\r\n            //machine.economy)\r\n\r\n            let buildingEconomy = {\r\n                ...emptyMarket(),\r\n                Oxygen: { demand: 1, supply: 0 }, // structural demand\r\n                // Water: { demand: 0.1, supply: 0 },\r\n            }\r\n\r\n            let aggregate = [...machineEconomies, buildingEconomy]\r\n                .reduce(sumMarkets, emptyMarket())\r\n\r\n            return aggregate\r\n        }\r\n    }\r\n\r\n    private toggleActive() {\r\n        if (!this.structure.infra) {\r\n            if (this.active) {\r\n                if (this.devices.some(d => d.inUse)) { return }\r\n                let wasEquil = equilibrium(this.planet.economy)\r\n                this.active = false\r\n                if (wasEquil) {\r\n                    if (!equilibrium(this.planet.economy)) {\r\n                        this.active = true\r\n                        // return\r\n                    }\r\n                    // this.active = true\r\n                } else {\r\n                    // we weren't at equilibrium previously\r\n                    // permit it, if we don't have any supply that would go negative without us?\r\n                    // console.log(\"can we toggle?\")\r\n                    for (let value of allValues) {\r\n                        let localCap = availableCapacity(this.economy(false), value)\r\n                        let globalCap = availableCapacity(this.planet.economy, value)\r\n                        // console.log(\"value\", { value, localCap, globalCap})\r\n                        if (localCap > 0 && globalCap < 0) {\r\n                            // don't permit it to be turned off\r\n                            this.active = true\r\n                        }\r\n                    }\r\n                }\r\n            } else { // this.active is false now\r\n                let agg = [\r\n                    this.planet.economy,\r\n                    this.economy(false)\r\n                ].reduce(sumMarkets, emptyMarket())\r\n\r\n                if (equilibrium(agg)) {\r\n                    this.active = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get isActive() { return !!this.active }\r\n\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n\r\n    deviceInteractionPlaces(): Vector[] {\r\n        return this.devicePlaces().map(place => {\r\n            place.position.y += (place.visibleSize/2)\r\n            return place.position\r\n        })\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public debit(res: ResourceBlock) {\r\n        this.planet.spend(res)\r\n    }\r\n\r\n    public populate(pos: Vector, elite: boolean = false) {\r\n        this.planet.populate(pos, elite) //this.pos)\r\n    }\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected aabbPoly(): {x:number,y:number}[] {\r\n        return pathFromRect(this.aabb());\r\n\r\n    }\r\n\r\n    protected angledRoofPoly(): {x: number, y: number}[] {\r\n        let angleStartY = 1 * (this.getHeight() / 3) - 3\r\n        let angleStartX = 20 // 1 * (this.getWidth() / 10)\r\n        return [\r\n            // bottom-left\r\n            { x: this.pos.x, y: this.pos.y + this.getHeight() },\r\n\r\n            // upper-left\r\n            { x: this.pos.x, y: this.pos.y + angleStartY },\r\n            { x: this.pos.x + angleStartX, y: this.pos.y },\r\n\r\n            // upper-right\r\n            { x: this.pos.x + this.getWidth() - angleStartX, y: this.pos.y },\r\n            { x: this.pos.x + this.getWidth(), y: this.pos.y + angleStartY },\r\n\r\n            // bottom-right\r\n            { x: this.pos.x + this.getWidth(), y: this.pos.y + this.getHeight() },\r\n        ]\r\n            \r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.placed)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (!this.active) {\r\n            clr = clr.darken(0.8)\r\n        }\r\n\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        // device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        device.pos.subEqual(this.pos) // = this.devicePlaces()[0].position\r\n        // console.log(\"DEVICE IS AT\", { pos: device.pos })\r\n        this.add(device)\r\n        this.updateFunction()\r\n        device.machine.onPlacement(device)\r\n        this.toggleActive()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return [ ...this.devices, ...flatSingle(this.devices.map(d => d.tinyDevices)) ]\r\n    }\r\n\r\n    public updateFunction() {\r\n        let allTheMachines = [ StudyMachine, ...allMachines, CommandCenter, MissionLog ]\r\n        let machines = this.devices.map(\r\n            d => allTheMachines.find((m: typeof Machine) => d.machine instanceof m)\r\n        )\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let sf = new spaceFn()\r\n\r\n            return containsUniq(\r\n              machines,\r\n              sf.machines\r\n            );\r\n        })\r\n        if (fn) {\r\n            // console.log(\"Determined building function\", { fn })\r\n            let sf = new fn()\r\n            this.spaceFunction = sf\r\n            this.nameLabel.text = sf.name\r\n        } else {\r\n            // console.warn(\"Could not identify function!\")\r\n        }\r\n    }\r\n\r\n    get backgroundPattern() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.background\r\n        } else {\r\n            return BackgroundPattern.Grid\r\n        }\r\n    }\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { BackgroundPattern, getBackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\ntype PaintingPath = { x: number, y: number }[]\r\n\r\nexport function pathFromRect(rect: Rectangle): PaintingPath {\r\n  let pos = { x: rect.x, y: rect.y }\r\n  let path = [\r\n            // bottom-left\r\n            { x: pos.x, y: pos.y + rect.height }, // this.getHeight() },\r\n\r\n            // upper-left\r\n            { x: pos.x, y: pos.y },\r\n\r\n            // upper-right\r\n            { x: pos.x + rect.width, y: pos.y },\r\n\r\n            // bottom-right\r\n            { x: pos.x + rect.width, y: pos.y + rect.height },\r\n        ];\r\n\r\n  return path\r\n}\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, clr: Color = Color.White, lineWidth: number = 1) {\r\n  let c = clr.clone()\r\n  // c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawPatternedRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  if (gridPattern) {\r\n    drawPatternedPoly(ctx, pathFromRect(rect), pattern)\r\n    // let { x, y, width, height } = rect;\r\n    // ctx.fillStyle = gridPattern\r\n    // ctx.fillRect(x,y,width,height)\r\n\r\n    //ctx.lineWidth = 0\r\n    //ctx.setLineDash([])\r\n    //ctx.strokeStyle = Color.White.toRGBA()\r\n    //ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawPatternedPoly(\r\n  ctx: CanvasRenderingContext2D,\r\n  path: {x:number, y:number}[],\r\n  // rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid,\r\n  edgeColor: Color = Color.Black\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  if (gridPattern) {\r\n    ctx.save()\r\n    ctx.translate(path[0].x, path[0].y)\r\n    // ctx.moveTo(0, 0)\r\n    ctx.beginPath()\r\n    ctx.moveTo(0,0) //path[0].x, path[0].y)\r\n    path.forEach(pt => ctx.lineTo(pt.x - path[0].x, pt.y-path[0].y))\r\n    ctx.lineTo(0,0) // path[0].x, path[0].y)\r\n    ctx.closePath()\r\n    // let { x, y, width, height } = rect;\r\n    ctx.fillStyle = gridPattern\r\n    ctx.fill()\r\n\r\n\r\n    ctx.strokeStyle = edgeColor.fillStyle()\r\n    ctx.stroke()\r\n    ctx.restore()\r\n    // ctx.fillRect(x,y,width,height)\r\n\r\n    // ctx.lineWidth = 2\r\n    // ctx.setLineDash([])\r\n    // ctx.strokeStyle = Color.White.toRGBA()\r\n    // ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true,\r\n  dashed: boolean = false\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  if (filled) {\r\n    let main = color.clone();\r\n    // main.a = 1\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White.clone();\r\n    ctx.strokeStyle = edge.toRGBA();\r\n    ctx.lineWidth=edgeWidth\r\n    if (dashed) { ctx.setLineDash([5, 10]) }\r\n    else { ctx.setLineDash([]) }\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}\r\n\r\nexport function drawPoly(\r\n  ctx: CanvasRenderingContext2D,\r\n  path: {x:number, y:number}[],\r\n  color: Color\r\n  // rect: Rectangle,\r\n  // pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  // const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  // if (gridPattern) {\r\n    ctx.beginPath()\r\n    ctx.moveTo(path[0].x, path[0].y)\r\n    path.forEach(pt => ctx.lineTo(pt.x, pt.y))\r\n    ctx.lineTo(path[0].x, path[0].y)\r\n    ctx.closePath()\r\n    // let { x, y, width, height } = rect;\r\n    ctx.fillStyle = color.fillStyle()\r\n    ctx.fill()\r\n    // ctx.fillRect(x,y,width,height)\r\n\r\n    // ctx.lineWidth = 2\r\n    // ctx.setLineDash([])\r\n    // ctx.strokeStyle = Color.White.toRGBA()\r\n    // ctx.strokeRect(x,y,width,height)\r\n  // }\r\n}\r\n\r\nexport function drawStar(ctx, cx, cy, outerRadius=3.6, innerRadius=1.4, spikes=5, ) {\r\n    var rot = Math.PI / 2 * 3;\r\n    var x = cx;\r\n    var y = cy;\r\n    var step = Math.PI / spikes;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(cx, cy - outerRadius)\r\n    for (let i = 0; i < spikes; i++) {\r\n        x = cx + Math.cos(rot) * outerRadius;\r\n        y = cy + Math.sin(rot) * outerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n\r\n        x = cx + Math.cos(rot) * innerRadius;\r\n        y = cy + Math.sin(rot) * innerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n    }\r\n    ctx.lineTo(cx, cy - outerRadius);\r\n    ctx.closePath();\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = 'yellow';\r\n    ctx.stroke();\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.fill();\r\n}","import { Engine, DisplayMode, Loader, Timer, Color } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n  static citizenSpeed: number = 100\r\n  static debugPath: boolean = false\r\n  static startHour: number = 8\r\n\r\n  static minuteTickMillis: number = 1000\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: Color.Black //world.skyColor\r\n    });\r\n  }\r\n\r\n  public start() {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n\r\n    return super.start(loader).then(() => {\r\n      console.log(\"Osiris running.\")\r\n    });\r\n  }\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor, emptyMarket, sumMarkets } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize, DeviceSize } from \"../values/DeviceSize\";\r\nimport { Recipe, ResourceStorage, MechanicalOperation, ResourceGenerator, ExploreForResource } from \"../models/MechanicalOperation\";\r\nimport { range, deleteByValueOnce, closest } from \"../Util\";\r\nimport { drawRect } from \"../Painting\";\r\nimport { InteractionRequest, retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Game } from \"../Game\";\r\n\r\nexport class Device extends Actor {\r\n    // constructionMaterials: ResourceBlock[] = []\r\n\r\n    // could also use for storage?\r\n    product: ResourceBlock[] = []\r\n    nameLabel: Label\r\n    image: HTMLImageElement\r\n    building: Building\r\n    inUse: boolean = false\r\n    hover: boolean = false\r\n\r\n    imageLoaded: boolean = false\r\n\r\n    built: boolean = false\r\n    reserved: boolean = false\r\n\r\n    constructor(\r\n        public machine: Machine,\r\n        initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            Color.Transparent\r\n            // machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = this.machine.size === DeviceSize.Tiny ? 2 : 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = () => { this.imageLoaded = true }\r\n        this.image.src = machine.image\r\n\r\n        this.on('pointerenter', () => {\r\n            console.log(\"HOVER OVER\", { machine: this.machine })\r\n            this.hover = true\r\n            let tinyDevices = this.tinyDevices.length > 0 &&\r\n              this.tinyDevices.some(d => d.hover)\r\n            if (this.building && !tinyDevices) {\r\n                this.building.planet.currentlyViewing = this\r\n            }\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n            if (this.building && this.building.planet.currentlyViewing === this) {\r\n                this.building.planet.currentlyViewing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    get imageX() { return this.pos.x - this.getWidth() / 2 }\r\n    get imageY() { return this.pos.y - this.getHeight() / 2 } //- 10 }\r\n\r\n    get economy() { return this.built ? this.computeEconomy() : emptyMarket() }\r\n\r\n    private computeEconomy() {\r\n        let econs = [ this.machine.economy, ...this.tinyDevices.map(d => d.economy) ]\r\n        return econs.reduce(sumMarkets, emptyMarket())\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (this.imageLoaded) {\r\n            ctx.save()\r\n            if (!this.built) { ctx.globalAlpha = 0.5 }\r\n            ctx.translate(this.imageX, this.imageY)\r\n            if (this.vel.x > 0) {\r\n                // flip? (assume we're drawn facing left)\r\n                ctx.translate(this.getWidth(), 0)\r\n                ctx.scale(-1,1)\r\n            }\r\n            ctx.drawImage(\r\n                this.image,\r\n                0,\r\n                0, //this.imageY,\r\n\r\n                this.getWidth(),\r\n                this.getHeight()\r\n            )\r\n            // if (!this.built) { ctx.globalAlpha = 1.0 }\r\n\r\n            if (this.hover) {\r\n                let c = Color.White.clone()\r\n                c.a = 0.6\r\n                drawRect(\r\n                    ctx,\r\n                    { x: 0, y: 0, width: this.getWidth(), height: this.getHeight() },\r\n                    0,\r\n                    c\r\n                )\r\n            }\r\n            ctx.restore()\r\n        }\r\n\r\n        let iv = new Vector(this.imageX, this.imageY + this.getHeight() / 8)\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = iv\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let { x: bx, y: by } = iv\r\n        let blockSize = 5\r\n        let yOff = this.nameLabel.fontSize\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).toRGBA()\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize + yOff, blockSize-1, blockSize-1)\r\n        })\r\n\r\n        super.draw(ctx ,delta)\r\n        // this.tinyDevices.forEach(d => d.draw(ctx, delta))\r\n    }\r\n\r\n    get name() { return this.machine.name }\r\n    get description() { return this.machine.description }\r\n    get size() { return this.machine.size }\r\n    get operation() { return this.machine.operation }\r\n\r\n    async assemble(citizen: Citizen) {\r\n        if (citizen.isCarryingUnique(this.machine.cost)) {\r\n            for (let res of this.machine.cost) {\r\n                citizen.drop(res)\r\n                await citizen.progressBar(3000)\r\n            }\r\n            this.built = true\r\n        }\r\n    }\r\n\r\n    async interact(citizen: Citizen, request: InteractionRequest): Promise<boolean> {\r\n        if (this.inUse || !this.built) {\r\n            return false\r\n        }\r\n\r\n        let worked = false\r\n        let op = this.operation\r\n        if (op.type === 'recipe' && request.type === 'work') {\r\n            let recipe: Recipe = op\r\n            // do we have all the things?\r\n            if (citizen.carrying.some(it => recipe.consumes.includes(it))) {\r\n                this.inUse = true\r\n                if (citizen.isCarryingUnique(recipe.consumes)) {\r\n                    recipe.consumes.forEach(consumed => citizen.drop(consumed))\r\n                    let workTime = this.getEffectiveWorkTime(recipe)\r\n                    await citizen.progressBar(workTime) // recipe.workTime)\r\n                    citizen.carry(recipe.produces)\r\n\r\n                    worked = true\r\n                } else {\r\n                    console.warn(\"not carrying all requirements?\", { requires: recipe.consumes, has: citizen.carrying })\r\n                }\r\n                this.inUse = false\r\n            }\r\n        } else if ((op.type === 'store' || op.type === 'explore') && (request.type === 'retrieve' || request.type === 'store')) {\r\n            // accept it! (whatever you have that matches...?)\r\n            let storeOrExplore: ResourceStorage | ExploreForResource = op\r\n            if (request && request.type === 'retrieve') { // assume dispense request for now?\r\n                this.inUse = true\r\n                await citizen.progressBar(1000)\r\n                worked = this.dispense(citizen, request)\r\n                //if (worked) {\r\n                //    await citizen.progressBar(500)\r\n                //}\r\n                this.inUse = false\r\n            } else {\r\n                if (storeOrExplore.type === 'store') {\r\n                    let store: ResourceStorage = storeOrExplore\r\n                    if (request.type === 'store' &&\r\n                        citizen.carrying.some(it => store.stores.includes(it))) { // maybe trying to store?\r\n                        if (this.product.length < this.getEffectiveOperationalCapacity(store)) { // store.capacity) {\r\n                            let res = null\r\n                            if (store.stores.some(stored => { res = citizen.drop(stored); return res })) {\r\n                                if (res) {\r\n                                    this.produceResource(res)\r\n                                    // this.product.push(res)\r\n                                    // this.building.redeem(res)\r\n                                    worked = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.warn(\"no capacity in this store!!\")\r\n                    worked = false\r\n                }\r\n            }\r\n        } else if (op.type === 'generator') {\r\n            this.inUse = true\r\n            worked = this.dispense(citizen, request)\r\n            if (worked) {\r\n                await citizen.progressBar(500)\r\n            }\r\n            this.inUse = false\r\n        } else if (op.type === 'explore') {\r\n            this.inUse = true\r\n            // this.add(citizen)\r\n            // if (this.product.length < this.getEffectiveOperationalCapacity(op)) {\r\n            let origX = this.pos.x\r\n            let groundSpeed = Game.citizenSpeed * 3\r\n            citizen.driving = this\r\n            // let oldAnchor = citizen.anchor\r\n            // citizen.anchor = this.anchor\r\n            let xOff = 5000 * (Math.random() > 0.5 ? -1 : 1)\r\n            await this.actions.moveTo(this.pos.x + xOff, this.pos.y, groundSpeed).asPromise()\r\n            // for (let times in range(op.capacity)) {\r\n            this.produceResource(op.gathers)\r\n            // }\r\n            await this.actions.moveTo(origX, this.pos.y, groundSpeed).asPromise()\r\n            worked = true\r\n            citizen.driving = null\r\n            // citizen.anchor = oldAnchor\r\n\r\n            this.inUse = false\r\n\r\n            //await this.interact(citizen, retrieveResource(op.gathers))\r\n            // }\r\n            // this.remove(citizen)\r\n        }\r\n\r\n        return worked\r\n    }\r\n\r\n\r\n\r\n    getEffectiveOperationalCapacity(op: ResourceGenerator | ResourceStorage | ExploreForResource) {\r\n        let bonus = this.building.spaceFunction\r\n            ? this.building.spaceFunction.bonuses.capacity \r\n        : 0\r\n        return op.capacity + bonus\r\n    }\r\n\r\n    getEffectiveWorkTime(op: Recipe) {\r\n        let bonus = this.building.spaceFunction \r\n         ? this.building.spaceFunction.bonuses.workSpeed\r\n         : 1\r\n\r\n        return Math.round(op.workTime * (1/bonus))\r\n    } \r\n\r\n\r\n    private dispense(citizen: Citizen, request: InteractionRequest) {\r\n        if (request && request.type === 'retrieve') {\r\n            let canFulfill = this.product.find(p => p === request.resource)\r\n            if (canFulfill) {\r\n                deleteByValueOnce(this.product, request.resource)\r\n                citizen.carry(request.resource)\r\n                this.building.debit(request.resource)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    public tryProduce(step: number) {\r\n        if (this.building.isActive && this.built) {\r\n            if (this.machine.operation.type === 'generator') {\r\n                if (step % this.machine.operation.generationTime === 0) {\r\n                    if (this.product.length < this.machine.operation.capacity) {\r\n                        this.produceResource(this.machine.operation.generates)\r\n                    }\r\n                }\r\n\r\n            } else if (this.machine.operation.type === 'spawn') {\r\n                if (step % 1000 == 0) {\r\n                    // console.log(\"WOULD SPAWN\")\r\n                    setTimeout(() => this.building.populate(this.pos.add(this.building.pos)), 100)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public produceResource(res: ResourceBlock) {\r\n        this.product.push(res)\r\n        this.building.redeem(res)\r\n    }\r\n\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        if (this.size === DeviceSize.Tiny) {\r\n            return this.snapTiny(planet, pos)\r\n        } else {\r\n            let bldg = planet.colony.closestBuildingByType(pos,\r\n                allStructures,\r\n                (bldg: Building) => {\r\n                    let hasSpace = bldg.hasPlaceForDevice()\r\n                    return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n                }\r\n            )\r\n\r\n            let snapped = false\r\n            if (bldg) {\r\n                let spot = bldg.nextDevicePlace().position\r\n                let d = spot.distance(pos)\r\n                snapped = d < 150\r\n            }\r\n\r\n            if (snapped) {\r\n                this.building = bldg;\r\n                this.pos = this.building.nextDevicePlace().position\r\n            } else {\r\n                this.pos = pos\r\n            }\r\n\r\n            return snapped\r\n        }\r\n    }\r\n\r\n    private snapTiny(planet: Planet, pos: Vector) {\r\n        // okay, we need the closest building with any built machine that HAS a tiny slot\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            allStructures,\r\n            (bldg: Building) => bldg.getDevices().some(\r\n                (device: Device) => device.built && device.hasTinyPlace()\r\n            )\r\n        )\r\n\r\n        // todo look at all devices? (closest bldg may not house closest device!!)\r\n        let device: Device = closest(\r\n            pos,\r\n            bldg.getDevices().filter((d: Device) => d.built && d.hasTinyPlace()),\r\n            (d: Device) => d.pos,\r\n        )\r\n\r\n        this.pos = pos\r\n        let snapped = false\r\n        if (device) {\r\n            let spot = device.nextTinyPlace().add(device.pos).add(device.building.pos)\r\n            let d = spot.distance(pos)\r\n            snapped = d < 50\r\n\r\n            if (snapped) {\r\n                this.building = device.building\r\n                this.parentDevice = device\r\n                this.pos = spot\r\n            }\r\n        }\r\n\r\n        return snapped\r\n    }\r\n\r\n    public parentDevice: Device = null\r\n    tinyDevices: Device[] = []\r\n    private hasTinyPlace() {\r\n        if (!this.machine.tinySlots) {\r\n            return false\r\n        } else {\r\n            return this.tinyDevices.length < 3\r\n        }\r\n    }\r\n\r\n    private nextTinyPlace() {\r\n        let tx0 = -this.getWidth()/3, ty0 = -3\r\n        let ndx = this.tinyDevices.length\r\n        return new Vector(tx0 + (ndx * 14), ty0)\r\n    }\r\n\r\n    public addTinyDevice(device: Device) {\r\n        console.log(\"ADD TINY DEVICE\", { device: device.machine })\r\n        device.pos = this.nextTinyPlace() //.add(this.pos)\r\n        // device.pos.addEqual(this.pos.add(this.nextTinyPlace()))\r\n        this.tinyDevices.push(device)\r\n        this.add(device)\r\n    }\r\n}","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome && !(new machine()).isVehicle)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst medGroundVehicles = mediumMachines.filter(machine => (new machine()).isVehicle)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    color: Color = Color.Gray\r\n    infra: boolean = false\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n\r\n    hide: boolean = false\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.fifth\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MediumSurfaceRoom ],\r\n        [Orientation.Right]: [  Dome, MediumSurfaceRoom ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.seventh\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea,\r\n            Ladder,\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea,\r\n            Ladder,\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n    infra = true\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.sixth\r\n    height = 20 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n    infra = true\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    description: string = 'Biome sweet biome';\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.sixth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n\r\n    prereqs = [\r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    height = major.fifth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    height = major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 2 * major.eighth\r\n    machines = midBelow\r\n}\r\n\r\nexport class MediumRoomThree extends CommonArea {\r\n    name = 'Mid Room (3)'\r\n    prereqs = [ MediumRoom ]\r\n    view = 'MediumRoomThreeView'\r\n    width = 3 * major.eighth\r\n    height = major.eighth\r\n\r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 4 * major.eighth\r\n    height = 2*major.eighth\r\n    machines = largeBelow\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class MediumSurfaceRoom extends Dome {\r\n    name = 'Mid Surf Bldg'\r\n    description = 'home away from home';\r\n\r\n    view: string = 'MediumSurfaceRoomView';\r\n\r\n    width: number = 4 * major.eighth\r\n    height: number = major.seventh\r\n\r\n    zoom = 0.1\r\n\r\n    prereqs = [ SmallDome ]\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel, MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ MainTunnel, MediumSurfaceRoom ],\r\n    }\r\n\r\n    machines = midBelow\r\n\r\n    // hide = false // need another one which cares about connecting to roads...\r\n}\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = major.eighth\r\n    height = major.fifth\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 3 * major.fifth\r\n    height = 2*major.fifth\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 3 * major.seventh\r\n    height = 2 * major.seventh\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n\r\n}\r\n\r\n/// vehicles...!\r\n\r\nexport class GroundVehiclePool extends Dome {\r\n    name = 'Veh. Pool'\r\n    // view = 'G'\r\n    width = 2 * major.eighth\r\n    height = minor.second\r\n    machines = medGroundVehicles\r\n}\r\n\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n        MediumSurfaceRoom,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        MediumRoomThree,\r\n        LargeRoom,\r\n        HugeRoom,\r\n\r\n        GroundVehiclePool,\r\n    ]\r\n\r\n\r\n","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine, Mainframe, CommandCenter, MissionLog, Botany, OrientationConsole, PersonnelRegistry, MineralProcessor, MiningDrill, HoloProjector, TimeCrystal, Couch, Statue } from './Machine';\r\nimport { Color } from 'excalibur';\r\nimport { Structure, MediumSurfaceRoom } from './Structure';\r\nimport { BackgroundPattern } from '../actors/Building/BackgroundPatterns';\r\n\r\nexport class SpaceFunction {\r\n     name: string = '(generic)'\r\n     description: string = '(generic description)'\r\n     machines: (typeof Machine)[] = []\r\n     color: Color = Color.Gray\r\n\r\n     prereqs: (typeof SpaceFunction)[] =  [] \r\n\r\n     structure: typeof Structure = null\r\n     hide: boolean = false\r\n     background: BackgroundPattern = BackgroundPattern.Beige\r\n\r\n     bonuses: {\r\n          capacity: number, // every store/generator gets this??\r\n          workSpeed: number, // 2 should double work speed (dur *= 1/multiplier)\r\n     } = {\r\n          capacity: 0, // boost cap by one\r\n          workSpeed: 1.00 // 20% bonus to work speed\r\n     }\r\n}\r\n\r\nexport class MissionControl extends SpaceFunction {\r\n     hide = true\r\n     name = 'Mission Control'\r\n     description = 'keeping everything on track'\r\n     structure = MediumSurfaceRoom\r\n     prereqs = [] //ComputerCore, Factory, Farm ]\r\n     machines = [ CommandCenter, MissionLog ]\r\n     background = BackgroundPattern.Window\r\n}\r\n\r\nexport class LivingQuarters extends SpaceFunction {\r\n     name = 'Living Quarters'\r\n     description = 'good night'\r\n     machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n     name = 'Barracks'\r\n     description = 'sleep tight'\r\n     machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nexport class Kitchen extends SpaceFunction {\r\n     name = 'Kitchen'\r\n     description = 'stay together'\r\n     machines = [ Stove, Fridge ]\r\n     bonuses = {\r\n          capacity: 2,\r\n          workSpeed: 1.1\r\n     }\r\n     background = BackgroundPattern.Checker\r\n}\r\n\r\nexport class LifeSupportPod extends SpaceFunction {\r\n     name = 'Life Support'\r\n     description = 'keep it going'\r\n     machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n     name = 'Retreat'\r\n     description = 'take it easy'\r\n     machines = [ Cabin, Cabin ]\r\n}\r\n\r\nexport class CloneMatrix extends SpaceFunction {\r\n     name = 'Clone Matrix'\r\n     description = 'clone home'\r\n     machines = [ CloningVat, CloningVat ]\r\n}\r\n\r\nexport class CloneReception extends SpaceFunction {\r\n     name = 'Clone Reception'\r\n     description = 'welcome clone'\r\n     machines = [ CloningVat, OrientationConsole, PersonnelRegistry ]\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n     name = 'Reading Room'\r\n     description = 'butterflies in the sky'\r\n     machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nexport class Library extends SpaceFunction {\r\n     name = 'Library'\r\n     description = 'take a look'\r\n     machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n     background = BackgroundPattern.Books\r\n}\r\n\r\nexport class Study extends SpaceFunction {\r\n     name = 'Study'\r\n     description = 'plan it out'\r\n     machines = [ StudyMachine, Bookshelf ]\r\n     background = BackgroundPattern.Wood\r\n}\r\n\r\nclass ComputerLab extends SpaceFunction {\r\n     name = 'Computer Lab'\r\n     description = 'make it happen'\r\n     machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nexport class Archive extends SpaceFunction {\r\n     name = 'Archive'\r\n     description = 'write it down'\r\n     machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n     name = 'Arboretum'\r\n     description = 'walk it out'\r\n     machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n     name = 'Algae Farm'\r\n     description = 'make do'\r\n     machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nexport class SolarArray extends SpaceFunction {\r\n     name = 'Solar Array'\r\n     description = 'warm up'\r\n     machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nexport class Workshop extends SpaceFunction {\r\n     name = 'Workshop'\r\n     description = 'take form'\r\n     machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\nclass Nursery extends SpaceFunction {\r\n     name = 'Nursery'\r\n     description = 'quiet please'\r\n     machines = [ Houseplant, Houseplant, Houseplant ]\r\n     background = BackgroundPattern.Leafy\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n     name = 'Farm'\r\n     description = 'food for the masses'\r\n     machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n     name = 'Factory'\r\n     description = 'production lines'\r\n     machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\n\r\nexport class ComputerCore extends SpaceFunction {\r\n     name = 'Computer Core'\r\n     description = 'let us calculate'\r\n     machines = [ Mainframe, Mainframe ]\r\n     background = BackgroundPattern.Tech\r\n}\r\n\r\nexport class LifeSciencesLab extends SpaceFunction {\r\n     name = 'Life Sciences Lab'\r\n     description = 'where do i come from'\r\n     machines = [ Botany, Botany ]\r\n}\r\n\r\nexport class Refinery extends SpaceFunction {\r\n     name = 'Refinery'\r\n     description = 'separation'\r\n     machines = [ MineralProcessor ]\r\n}\r\n\r\nexport class Mine extends SpaceFunction {\r\n     name = 'Mine'\r\n     description = 'ore from the stone'\r\n     machines = [ MiningDrill ]\r\n}\r\n\r\nexport class HoloMatrix extends SpaceFunction {\r\n     name = 'Hologram Matrix'\r\n     description = 'dream it'\r\n     machines = [ HoloProjector, HoloProjector ]\r\n}\r\n\r\nexport class TimeChamber extends SpaceFunction {\r\n     name = 'Time Chamber'\r\n     description = 'believe it'\r\n     machines = [ TimeCrystal, TimeCrystal ]\r\n}\r\n\r\n// export class DreamMatrix extends \r\n\r\nexport class LivingRoom extends SpaceFunction {\r\n     name = 'Living Room'\r\n     description = 'just relax'\r\n     machines = [ Couch, Couch ]\r\n}\r\n\r\nexport class Statuary extends SpaceFunction {\r\n     name = 'Statuary'\r\n     description = 'to remember'\r\n     machines = [ Statue, Statue, Statue ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    ComputerLab,\r\n\r\n    ComputerCore,\r\n\r\n    MissionControl,\r\n    LifeSciencesLab,\r\n\r\n    CloneReception,\r\n    \r\n    Refinery,\r\n    Mine,\r\n    HoloMatrix,\r\n    TimeChamber,\r\n\r\n    LivingRoom,\r\n    Statuary,\r\n]","import { Citizen } from \"../actors/Citizen\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { sleep } from \"../Util\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource, drive } from \"../values/InteractionRequest\";\r\nimport { Recipe, MechanicalOperation, ExploreForResource } from \"../models/MechanicalOperation\";\r\n\r\nexport abstract class Strategy {\r\n    private sleepInterval: number = 150\r\n    protected isActive: boolean = false;\r\n    constructor(protected pawn: Citizen) { }\r\n\r\n    protected abstract async apply();\r\n    abstract canApply(): boolean;\r\n\r\n    protected get planet(): Planet { return this.pawn.currentPlanet; }\r\n    protected get devices(): Device[] { return this.planet.colony.findPoweredDevices(); }\r\n    protected get operations(): MechanicalOperation[] { return this.devices.map(d => d.operation); }\r\n    protected get recipes(): Recipe[] {\r\n        let recipes: Recipe[] = [];\r\n        this.operations.forEach(op => {\r\n            if (op.type === 'recipe') {\r\n                recipes.push(op);\r\n            }\r\n        });\r\n        return recipes;\r\n    }\r\n\r\n    protected get explorers(): ExploreForResource[] {\r\n        let explores: ExploreForResource[] = []\r\n        this.operations.forEach(op => {\r\n            if (op.type === 'explore') {\r\n                explores.push(op)\r\n            }\r\n        })\r\n        return explores;\r\n    }\r\n\r\n\r\n    async attempt(): Promise<void> {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n        if (!this.isActive) {\r\n            this.isActive = true\r\n            // note apply will need to set this.isActive around its critical section\r\n            await this.apply();\r\n            this.isActive = false\r\n        }\r\n\r\n        // await this.pause()\r\n        // setInterval(() => { this.attempt() }, this.sleepInterval)\r\n    }\r\n\r\n    protected async pause() {\r\n        await sleep(this.sleepInterval)\r\n    }\r\n\r\n    protected async gatherBlock(res: ResourceBlock): Promise<boolean> {\r\n        let gathered = false\r\n        let generatesDesiredBlock = (d: Device) => (d.operation.type === 'generator') &&\r\n            d.product.some(stored => res === stored) //&& !d.inUse\r\n        let gen: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], generatesDesiredBlock)\r\n\r\n        let storesDesiredBlock = (d: Device) => (d.operation.type === 'store') &&\r\n              d.product.some(stored => res === stored) //&& !d.inUse\r\n        let store: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n\r\n        let device: Device = gen || store\r\n\r\n        if (device) {\r\n            // device.inUse = true\r\n            await this.visitDevice(device)\r\n\r\n            if (device.inUse) {\r\n                // at least wait a bit and try again?\r\n                let waitTimes = 0\r\n                while (device.inUse) {\r\n                    await this.pause() //sleep(5000) //this.pause()\r\n                    if (waitTimes++ > 10) {\r\n                        return false \r\n                    }\r\n                }\r\n            }\r\n\r\n            if (await device.interact(this.pawn, retrieveResource(res))) {\r\n                gathered = true\r\n            }\r\n        } else {\r\n            console.warn(\"Didn't gather...\")\r\n            // don't work sub-recipes??\r\n            // let recipe = this.recipes.find(recipe => recipe.produces === res);\r\n            // if (recipe) {\r\n                // gathered = await this.workRecipe(recipe);\r\n                // gathered = true\r\n            // }\r\n        }\r\n\r\n        return gathered\r\n    }\r\n\r\n    protected async visitDevice(device: Device) {\r\n        await this.pawn.visit(device)\r\n    }\r\n\r\n    protected async workExploration(exploring: ExploreForResource): Promise<boolean> {\r\n        let knowsHow = (d: Device) => d.operation === exploring && !d.reserved\r\n        let vehicle = this.planet.colony.closestDeviceByType(this.pawn.pos, [], knowsHow)\r\n        let explored = false\r\n        if (vehicle) {\r\n            vehicle.reserved = true\r\n            if (await this.drive(vehicle, exploring)) {\r\n                explored = true\r\n            }\r\n\r\n            vehicle.reserved = false\r\n        }\r\n        return explored\r\n    }\r\n\r\n    private async drive(vehicle: Device, exploring: ExploreForResource) {\r\n        let driven = false\r\n        if (!vehicle.machine.isVehicle) {\r\n            throw new Error(\"Tried to drive a device that wasn't a vehicle!\")\r\n        } else {\r\n            await this.visitDevice(vehicle)\r\n            if (await vehicle.interact(this.pawn, drive())) {\r\n                if (await vehicle.interact(this.pawn, retrieveResource(exploring.gathers))) {\r\n                    driven = true\r\n                }\r\n            }\r\n        }\r\n        return driven\r\n    }\r\n\r\n    protected async workRecipe(recipe: Recipe): Promise<boolean> {\r\n        console.debug(\"Working recipe\", { product: recipe.produces })\r\n        let knowsRecipe = (d: Device) => d.operation === recipe && !d.reserved\r\n        let maker = this.planet.colony.closestDeviceByType(this.pawn.pos, [], knowsRecipe)\r\n        let made = false\r\n        if (maker) {\r\n            maker.reserved = true\r\n            // maker.inUse = true\r\n            if (await this.gatherIngredients(recipe.consumes)) {\r\n                await this.visitDevice(maker)\r\n                if (await this.performRecipeTask(maker, recipe)) {\r\n                    made = true\r\n                }\r\n            }\r\n            maker.reserved = false\r\n            // maker.inUse = false\r\n        }\r\n        // await this.pause()\r\n        // await this.workRecipe(recipe);\r\n        return made\r\n    }\r\n\r\n    protected async gatherIngredients(blocks: ResourceBlock[]): Promise<boolean> {\r\n        if (!this.pawn.isCarryingUnique(blocks)) {\r\n            console.debug(\"Gathering blocks...\")\r\n            for (let ingredient of blocks) {\r\n                let tries = 0\r\n                let gathered = false\r\n                while (!gathered && tries < 20) {\r\n                    tries += 1\r\n                    if (await this.gatherBlock(ingredient)) {\r\n                        gathered = true\r\n                    } else {\r\n                        await this.pause()\r\n                    }\r\n                }\r\n\r\n                if (!gathered) {\r\n                    console.warn(\"couldn't gather one of the ingredients!!\")\r\n                    return false\r\n                }\r\n                //else {\r\n                //    console.warn(\"didn't gather it!\")\r\n                //    return false\r\n                //}\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    protected async performRecipeTask(maker: Device, recipe: Recipe, timesToAttempt: number = 5) {\r\n        console.debug(\"Try to perform recipe task...\", { produces: recipe.produces })\r\n        let worked = await maker.interact(this.pawn, { type: 'work', recipe })\r\n        if (!worked) {\r\n            // await this.pause()\r\n            console.warn(\"waiting for machine to become available...\")\r\n            for (let i = 0; i < timesToAttempt; i ++) {\r\n                await this.pause()\r\n                if (await this.performRecipeTask(maker, recipe)) {\r\n                    worked = true\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return worked\r\n    }\r\n}","const raisedSquare = require('../../images/raised-square-bg.png')\r\nconst leafy = require('../../images/leafy-bg.png')\r\nconst bookish = require('../../images/books-bg.png')\r\nconst posters = require('../../images/poster-wall-bg.png')\r\nconst tech = require('../../images/tech-bg.png')\r\nconst checker = require('../../images/checker-bg.png')\r\nconst beige = require('../../images/beige-bg.png')\r\nconst window = require('../../images/window-bg.png')\r\nconst ussf = require('../../images/ussf.png')\r\nconst wood = require('../../images/wood-panel-bg.png')\r\n\r\ninterface Background {\r\n    image: HTMLImageElement\r\n    pattern: CanvasPattern\r\n    loading: boolean\r\n}\r\n\r\nconst loadBg = (path, scale = 1) => {\r\n    let background: Background = { image: null, pattern: null, loading: true }\r\n    background.image = new Image();\r\n    background.image.src = path\r\n    background.image.onload = function () {\r\n      background.loading = false\r\n    }\r\n    return { background, scale }\r\n}\r\n\r\nexport enum BackgroundPattern {\r\n    Leafy = 'Leafy',\r\n    Grid = 'Grid',\r\n    Books = 'Books',\r\n    Poster = 'Poster',\r\n    Tech = 'Tech',\r\n    Checker = 'Checker',\r\n    Beige = 'Beige',\r\n    Window = 'Window',\r\n    USSF = 'USSF',\r\n    Wood = 'Wood',\r\n}\r\n\r\nconst backgroundPatterns: { [ key in BackgroundPattern ]: { background: Background, scale: number } } = {\r\n    Leafy: loadBg(leafy),\r\n    Grid: loadBg(raisedSquare),\r\n    Books: loadBg(bookish),\r\n    Poster: loadBg(posters),\r\n    Tech: loadBg(tech),\r\n    Checker: loadBg(checker),\r\n    Beige: loadBg(beige),\r\n    Window: loadBg(window),\r\n    USSF: loadBg(ussf, 0.5),\r\n    Wood: loadBg(wood),\r\n}\r\n\r\nexport const getBackgroundPattern = (ctx: CanvasRenderingContext2D, p: BackgroundPattern) => {\r\n    let pattern = backgroundPatterns[p]\r\n    let bg = pattern.background\r\n    if (!bg.loading) {\r\n        if (!bg.pattern) {\r\n            let matrix = new DOMMatrix() //bg.pattern.cre //ctx. // new SVGMatrix()\r\n\r\n            // bg.image.scal\r\n            // bg.image.scale\r\n            bg.pattern = ctx.createPattern(bg.image, 'repeat');\r\n            bg.pattern.setTransform(matrix.scale(pattern.scale)) //0.5))\r\n\r\n        }\r\n        return bg.pattern\r\n    }\r\n}","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        let tries = 0\r\n        while (visited.length < this.nodes.length && tries++ < this.nodes.length * 20) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Texture, Sound } from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\nconst craterRock = require('./sounds/crater-rock.mp3')\r\nconst assembler = require('./sounds/assembler.mp3')\r\nconst indivision = require('./sounds/indivision.mp3')\r\nconst understanding = require('./sounds/understanding.mp3')\r\nconst futureTense = require('./sounds/future tense.mp3')\r\n// const isomer = require('./sounds/isomer.mp3')\r\n// const outbound = require('./sounds/outbound.mp3')\r\n\r\nlet Resources = {\r\n    Sword: new Texture(sword),\r\n\r\n    CraterRock: new Sound(craterRock),\r\n    Assembler: new Sound(assembler),\r\n    Indivision: new Sound(indivision),\r\n    Understanding: new Sound(understanding),\r\n    FutureTense: new Sound(futureTense),\r\n    // Isomer: new Sound(isomer),\r\n    // Outbound: new Sound(outbound),\r\n\r\n\r\n}\r\n\r\nexport { Resources }\r\n","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range, mixColors } from '../../Util';\r\nimport { drawRect } from '../../Painting';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 1500, color)\r\n    }\r\n}\r\n\r\nexport class MountainLayers extends PlanetBackground {\r\n    layers: {\r\n        baseY: number,\r\n        // color: Color,\r\n        deltas: number[]\r\n    }[] = []\r\n\r\n    skyColor: Color = Color.Blue.clone()\r\n    layerHeight: number = 200\r\n    layerCount = 1\r\n    peakCount = 400\r\n\r\n    get peakWidth() {\r\n        return Math.floor(this.getWidth() / this.peakCount)\r\n    }\r\n\r\n    onInitialize() {\r\n        let min = -this.layerHeight\r\n        for (let layerIndex of range(this.layerCount)) {\r\n            this.layers.unshift({\r\n                baseY: -this.layerHeight - (10 * layerIndex),\r\n                deltas: this.genPeaks(layerIndex)\r\n            })\r\n        }\r\n    }\r\n\r\n    draw(ctx, delta) {\r\n        let wc = this.color.clone() //.lighten(0.1)\r\n        let sc = this.skyColor.clone() //.lighten(0.1)\r\n\r\n        let ndx = 1\r\n        let ls = this.layers.slice()\r\n        for (let layer of ls) {\r\n            let c = mixColors(wc, sc, (ndx / (this.layers.length)))\r\n            this.drawLayer(ctx, layer, c) //.lighten(0.1))\r\n            ndx += 1\r\n        }\r\n    }\r\n\r\n    private drawLayer(ctx, layer, color) {\r\n        let ox = -this.getWidth()/2, oy = this.pos.y + layer.baseY \r\n        let c = color.clone()\r\n\r\n        ctx.beginPath()\r\n        ctx.moveTo(ox, oy)\r\n        let ndx = 0\r\n        for (let delta of layer.deltas) {\r\n            ctx.lineTo(ox + (ndx * this.peakWidth), oy + delta)\r\n            ndx += 1\r\n        }\r\n        ctx.lineTo(ox + (this.peakCount * this.peakWidth), oy)\r\n        ctx.lineTo(ox + (this.peakCount * this.peakWidth), oy + this.layerHeight)\r\n        ctx.lineTo(ox, oy+this.layerHeight)\r\n        ctx.closePath()\r\n        c.a = 1\r\n        ctx.fillStyle = c.toRGBA()\r\n        ctx.fill()\r\n    }\r\n\r\n    private genPeaks(n) {\r\n        let dMax = 2*(this.layerHeight/3)\r\n        let deltas = []\r\n        let randomDelta = () => (Math.random() * (dMax)) - (dMax/2)\r\n        let last = 0\r\n        let maxDiff = 5 + (n*2)\r\n        for (let times in range(this.peakCount)) {\r\n            let curr = randomDelta()\r\n            let pick = Math.max(\r\n                   last - maxDiff,\r\n                   Math.min(curr, last + maxDiff),\r\n               )\r\n            deltas.push(\r\n               pick\r\n            )\r\n            last = pick\r\n        }\r\n        return deltas\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 3\r\n        let peakHeight = 4800\r\n        let xOff = this.getWidth() / 2\r\n        let peakDistance = this.getWidth() / peakCount\r\n        for (let times of range(2)) {\r\n            let heightRange = 100\r\n            let drift = 3 * (peakDistance / 2)\r\n            for (let i of range(peakCount)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 200 + (Math.random() * peakHeight) + ((Math.random() * heightRange) - (heightRange / 2))) //(Util.randomIntInRange(-160,160))\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.35)\r\n        let brightColor = baseColor.lighten(0.1)\r\n        ctx.fillStyle = baseColor.toRGBA()\r\n        let yBase = this.pos.y-3\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA()\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA()\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import { Actor, Color } from 'excalibur';\r\nimport { mixColors } from '../../Util';\r\nimport { Mountains, MountainLayers } from './PlanetBackground';\r\nexport class SkyLayer extends Actor {\r\n    mountains: Mountains;\r\n    mountainLayers: MountainLayers;\r\n    backMountainLayers: MountainLayers;\r\n    constructor(y: number, width: number, lo: Color, hi: Color) {\r\n        super(0, y, width, 1500); //width,1500) //height)\r\n        let mid = mixColors(lo, hi);\r\n        this.backMountainLayers = new MountainLayers(-100, width, mid);\r\n        this.backMountainLayers.skyColor = hi;\r\n        this.add(this.backMountainLayers);\r\n        this.mountains = new Mountains(0, width, mid);\r\n        this.add(this.mountains);\r\n        this.mountainLayers = new MountainLayers(0, this.getWidth(), lo);\r\n        this.mountainLayers.skyColor = mid;\r\n        this.add(this.mountainLayers);\r\n    }\r\n    setLoHi(lo: Color, hi: Color) {\r\n        let mid = mixColors(lo, hi);\r\n        this.backMountainLayers.color = mid;\r\n        this.backMountainLayers.skyColor = hi;\r\n        this.mountains.color = mid;\r\n        this.mountainLayers.color = lo;\r\n        this.mountainLayers.skyColor = mid;\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range, mixColors } from '../../Util';\r\nimport { SkyLayer } from \"./SkyLayer\";\r\nexport class SkyLayers extends Actor {\r\n    layers: SkyLayer[] = [];\r\n    constructor(y: number, width: number, private lo: Color, hi: Color, private layerCount: number = 5) {\r\n        super(0, y, width, 1500);\r\n        for (let i of range(layerCount)) {\r\n            let c0 = mixColors(lo, hi, (i / (layerCount + 1)));\r\n            let c1 = mixColors(lo, hi, ((i + 1) / (layerCount + 1)));\r\n            let layer = new SkyLayer(-200 * (layerCount - i - 1), this.getWidth(), c1, c0);\r\n            this.layers.push(layer);\r\n            this.add(layer);\r\n        }\r\n    }\r\n    setHi(hi: Color) {\r\n        let lo = this.lo;\r\n        for (let i of range(this.layerCount)) {\r\n            let c0 = mixColors(lo, hi, (i / (this.layerCount + 1)));\r\n            let c1 = mixColors(lo, hi, ((i + 1) / (this.layerCount + 1)));\r\n            this.layers[i].setLoHi(c1, c0);\r\n            // let layer = new SkyLayer(-100 * (layerCount-i-1), this.getWidth(), c1, c0)\r\n        }\r\n    }\r\n}\r\n","import { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class EatingStrategy extends Strategy {}","import { EatingStrategy } from \"./EatingStrategy\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { Fridge, Desk } from \"../models/Machine\";\r\n\r\nexport class WhenHungryEatingStrategy extends EatingStrategy {\r\n    canApply(): boolean {\r\n        return this.pawn.isHungry &&\r\n            this.planet.storedResources.includes(ResourceBlock.Meal)\r\n        // hunger > 0.6\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    protected async apply() {\r\n        // find the store with the food! reserve it maybe?\r\n        let fridge = this.devices.find(d => d.machine.operation.type === 'store' &&\r\n          d.machine.operation.stores.includes(ResourceBlock.Meal) &&\r\n          d.product.includes(ResourceBlock.Meal) &&\r\n          !d.reserved\r\n        )\r\n\r\n        if (fridge) {\r\n            fridge.reserved = true\r\n            // take the meal to a desk? (maybe need table here... or eatingSurface aspect?)\r\n            await this.visitDevice(fridge)\r\n            await fridge.interact(this.pawn, { type: 'retrieve', resource: ResourceBlock.Meal })\r\n            fridge.reserved = false\r\n\r\n            let desk = this.devices.find(d => d.machine instanceof Desk)\r\n            if (desk) {\r\n                await this.visitDevice(desk)\r\n            }\r\n            await this.pawn.eat()\r\n            // fridge.interac\r\n            // this.pawn.interact()\r\n        }\r\n    }\r\n    \r\n    \r\n}","import { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class SleepingStrategy extends Strategy {\r\n\r\n}","import { SleepingStrategy } from \"./SleepingStrategy\";\r\nimport { Bed } from \"../models/Machine\";\r\nimport { shuffle } from \"../Util\";\r\n\r\nexport class AnyBedSleepingStrategy extends SleepingStrategy {\r\n    canApply(): boolean {\r\n        if (!this.pawn.isTired) {\r\n            return false\r\n        }\r\n\r\n        let bedtime = this.planet.hour > 21 || this.planet.hour < 4\r\n        return bedtime\r\n    }\r\n\r\n    protected async apply() {\r\n        // find a bed\r\n        let bed = shuffle(this.devices).find(d => d.machine instanceof Bed && !d.inUse)\r\n        if (bed) {\r\n            bed.inUse = true\r\n            await this.visitDevice(bed)\r\n        }\r\n        await this.pawn.takeRest() //1000 * 24)\r\n        if (bed) { \r\n            bed.inUse = false\r\n        }\r\n        return true\r\n    }\r\n\r\n}","import { Strategy } from \"./Strategy\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { containsUniq } from \"../Util\";\r\n\r\nexport abstract class ConstructionStrategy extends Strategy {\r\n    canApply(): boolean {\r\n        return !!this.unbuiltDevice\r\n    }\r\n\r\n    get unbuiltDevice() {\r\n        const isUnbuilt = (d: Device) => !d.built && !d.inUse && d.building.isActive &&\r\n          // the player can TRY to build it, we don't have to hang forever on it though\r\n          containsUniq(this.planet.storedResources, d.machine.cost)\r\n        return this.planet.colony.findAllDevices().find(isUnbuilt)\r\n    }\r\n}","import { ConstructionStrategy } from \"./ConstructionStrategy\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nexport class ProxmityBasedConstruction extends ConstructionStrategy {\r\n    async apply() {\r\n        if (this.unbuiltDevice && this.unbuiltDevice.building) {\r\n            await this.constructDevice(this.unbuiltDevice)\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n    private async constructDevice(device: Device) {\r\n        device.inUse = true\r\n        let resources = device.machine.cost\r\n        if (await this.gatherIngredients(resources)) {\r\n            await this.visitDevice(device)\r\n            await device.assemble(this.pawn)\r\n        } \r\n\r\n        device.inUse = false\r\n    }\r\n}","import { ResourceBlock } from \"../models/Economy\";\r\n\r\nimport { Recipe } from \"../models/MechanicalOperation\";\r\n\r\nexport interface RetrieveResource {\r\n    type: 'retrieve'\r\n    resource: ResourceBlock\r\n    // count: number\r\n}\r\n\r\nexport interface WorkRecipe {\r\n    type: 'work'\r\n    recipe: Recipe\r\n}\r\n\r\nexport interface StoreResource {\r\n    type: 'store'\r\n    resource: ResourceBlock\r\n}\r\n\r\nexport interface DriveAround {\r\n    type: 'drive'\r\n}\r\n\r\nexport function retrieveResource(res: ResourceBlock): RetrieveResource {\r\n    return {\r\n        type: 'retrieve',\r\n        resource: res,\r\n        // count: 1\r\n    }\r\n}\r\n\r\nexport function drive(): DriveAround {\r\n    return { type: 'drive' }\r\n}\r\n\r\nexport type InteractionRequest = StoreResource | RetrieveResource | WorkRecipe | DriveAround\r\n\r\n","import { Device } from \"../actors/Device\";\r\nimport { MechanicalOperation, Recipe } from \"../models/MechanicalOperation\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class ProductionStrategy extends Strategy {\r\n\r\n    protected async storeBlock(res: ResourceBlock) {\r\n        let stored = false\r\n        let tries = 0\r\n        while (!stored && tries < 30) {\r\n            tries++\r\n            if (await this.tryStoreBlock(res)) {\r\n                stored = true\r\n            } else {\r\n                await this.pause()\r\n            }\r\n        }\r\n    }\r\n\r\n    private async tryStoreBlock(res: ResourceBlock): Promise<boolean> {\r\n        let storesDesiredBlock = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) && //operation.capacity &&\r\n            d.operation.stores.includes(res)\r\n        let openStore = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n        let stored = false\r\n        if (openStore) {\r\n            await this.visitDevice(openStore)\r\n            if (await openStore.interact(this.pawn, { type: 'store', resource: res })) {\r\n                stored = true\r\n            }\r\n        }\r\n\r\n        //if (!stored) {\r\n        //    await this.pause()\r\n        //    // should try agi\r\n        //    // await this.storeBlock(res)\r\n        //}\r\n\r\n        return stored\r\n    }\r\n\r\n}\r\n","import { shuffle, containsUniq } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Recipe, ResourceStorage, ExploreForResource } from \"../models/MechanicalOperation\";\r\nimport { ProductionStrategy } from \"./ProductionStrategy\";\r\nimport { Resource } from \"excalibur\";\r\n\r\nexport class CapacityBasedProduction extends ProductionStrategy {\r\n    canApply(): boolean {\r\n        let hasOpenStore = !!(this.findStore())\r\n        return hasOpenStore\r\n    }\r\n\r\n    async apply() {\r\n        let store = this.findStore()\r\n        let recipe = this.findRecipe(store)\r\n        let explorer = this.findExplorer(store)\r\n\r\n\r\n        if (recipe && containsUniq(this.planet.storedResources, recipe.consumes)) {\r\n            if (await this.workRecipe(recipe)) {\r\n                await this.storeBlock(recipe.produces)\r\n            }\r\n        } else if (explorer) {\r\n            if (await this.workExploration(explorer)) {\r\n                await this.storeBlock(explorer.gathers)\r\n            }\r\n        } else {\r\n            // console.warn(\"No recipe or explorer!\")\r\n        }\r\n    }\r\n\r\n    private findStore() {\r\n        const storeWithCapacity = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) //&&\r\n        let store: Device = shuffle(this.devices).find(storeWithCapacity)\r\n        return store\r\n    }\r\n\r\n\r\n    private findRecipe(store: Device): Recipe {\r\n        if (store && store.operation.type === 'store') {\r\n            const storage: ResourceStorage = store.operation\r\n            const recipeForStoredResource = (r: Recipe) => storage.stores.some(stored => r.produces === stored)\r\n            let recipe: Recipe = shuffle(this.recipes).find(recipeForStoredResource)\r\n            return recipe\r\n        }\r\n    }\r\n\r\n    private findExplorer(store: Device): ExploreForResource {\r\n        if (store && store.operation.type === 'store') {\r\n            const storage: ResourceStorage = store.operation\r\n            // console.log(\"Looking for explorer for\", { stored: storage.stores })\r\n            const explorerForStored = (e: ExploreForResource) => storage.stores.some(stored => e.gathers === stored)\r\n            let explorer: ExploreForResource = shuffle(this.explorers).find(explorerForStored)\r\n            // console.log(\"Looked for explorer, found: \", { explorer })\r\n            return explorer\r\n        }\r\n    }\r\n}\r\n","import { Actor, Color, Traits, Vector, VisibleEvent } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons, deleteByValueOnce, sleep, containsUniq, deleteByValue } from \"../Util\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { ProductionStrategy } from \"../strategies/ProductionStrategy\";\r\nimport { CapacityBasedProduction } from \"../strategies/CapacityBasedProduction\";\r\nimport { drawStar, drawRect } from \"../Painting\";\r\nimport { ConstructionStrategy } from \"../strategies/ConstructionStrategy\";\r\nimport { ProxmityBasedConstruction } from \"../strategies/ProximityBasedConstruction\";\r\nimport { SleepingStrategy } from \"../strategies/SleepingStrategy\";\r\nimport { AnyBedSleepingStrategy } from \"../strategies/AnyBedSleepingStrategy\";\r\nimport { EatingStrategy } from \"../strategies/EatingStrategy\";\r\nimport { WhenHungryEatingStrategy } from \"../strategies/WhenHungryEatingStrategy\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../values/DeviceSize\";\r\n\r\nexport class Citizen extends Actor {\r\n    isPlanning: boolean = false // \r\n\r\n    // walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock[] = [] // null\r\n    path: Vector[] = []\r\n\r\n    private workInProgress: boolean = false\r\n    private workStarted: number\r\n    private workDuration: number\r\n    private progress: number\r\n\r\n    private sleeping: boolean = false\r\n\r\n\r\n    private productionStrategy: ProductionStrategy\r\n    private constructionStrategy: ConstructionStrategy\r\n    private sleepingStrategy: SleepingStrategy\r\n    private eatingStrategy: EatingStrategy\r\n\r\n    private hunger: number = 0.0;\r\n    private energy: number = 100\r\n\r\n    driving: Device = null\r\n\r\n    constructor(private home: Vector, protected planet: Planet, private elite: boolean = false) {\r\n        super(home.x, home.y, Scale.minor.first, Scale.minor.fourth, Color.White.clone())\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.productionStrategy = new CapacityBasedProduction(this)\r\n        this.constructionStrategy = new ProxmityBasedConstruction(this)\r\n        this.sleepingStrategy = new AnyBedSleepingStrategy(this)\r\n        this.eatingStrategy = new WhenHungryEatingStrategy(this)\r\n    }\r\n\r\n    get isHungry() { return this.hunger > 0.6 }\r\n    get isTired()  { return this.energy < 90 }\r\n\r\n    // get isWorking() { return this.isWorking }\r\n    get currentPlanet() { return this.planet }\r\n\r\n    get walkSpeed() {\r\n        let speedMultiplier = this.planet.timeFactor * (this.elite ? 1.6 : 1)\r\n        return Game.citizenSpeed * speedMultiplier\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = \r\n              Math.min(\r\n                  (now - this.workStarted) / this.workDuration,\r\n                  1\r\n              )\r\n\r\n            this.energy -= 0.1\r\n            this.hunger += 0.001\r\n        } else if (this.path.length > 0) {\r\n            // we have a non-empty path\r\n        } else {\r\n\r\n            // we aren't working or walking -- make sure we are busy!\r\n            this.work()\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let { x, y } = this\r\n        if (this.driving) {\r\n\r\n            x = this.driving.pos.add(this.driving.building.pos).x //- getVisibleDeviceSize(this.driving.size)/2\r\n            y = this.driving.pos.add(this.driving.building.pos).y // - 14\r\n        } \r\n\r\n        ctx.save()\r\n        // ctx.globalAlpha = 1.0\r\n        ctx.translate(x, y - this.getHeight()/2 - 5)\r\n        if (this.sleeping) {\r\n            ctx.rotate(-Math.PI / 2);\r\n            ctx.translate(5, -10)\r\n        }\r\n        // ctx.globalAlpha = 1.0 //?\r\n        drawRect(\r\n            ctx,\r\n            { x: 0, y: 0, width: this.getWidth(), height: this.getHeight() },\r\n            0,\r\n            Color.White\r\n        )\r\n\r\n        if (this.elite) {\r\n            // draw a little star?\r\n            drawStar(ctx, 8, -5)\r\n        }\r\n\r\n        // super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            let dx = 5\r\n            // if (this.vel.x < 0) { dx = -5 }\r\n            this.carrying.forEach((carried, idx) => {\r\n                ctx.fillStyle = blockColor(carried).clone().saturate(0.2).toRGBA()\r\n                ctx.fillRect(dx, 2 - 4 * idx, 5, 5)\r\n            })\r\n        }\r\n        ctx.restore()\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10 + Math.floor(this.workDuration / 1000), ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            ctx.strokeRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n        }\r\n\r\n        // let debugPath = true\r\n        if (this.path && Game.debugPath) {\r\n            let c = Color.White.clone().lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 4\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        this.workInProgress = false\r\n    }\r\n\r\n\r\n    carry(c: ResourceBlock) {\r\n        this.carrying.push(c);\r\n    }\r\n\r\n    isCarryingUnique(resources: ResourceBlock[]): boolean {\r\n        let isCarrying = containsUniq(this.carrying, resources)\r\n        return isCarrying\r\n    }\r\n\r\n    drop(res: ResourceBlock): ResourceBlock {\r\n        if (this.carrying.length > 0) {\r\n            if (this.carrying.find(r => r === res)) {\r\n                deleteByValueOnce(this.carrying, res)\r\n                return res\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    currentBuilding: Building = null\r\n    async visit(device: Device) {\r\n        let target = this.targetForDevice(device)\r\n        if (this.currentBuilding != device.building) {\r\n            const path = this.planet.pathBetweenPoints(this.pos.clone(), target)\r\n            await this.followPath(path)\r\n        }\r\n        await this.glideTo(target)\r\n        this.currentBuilding = device.building\r\n    }\r\n\r\n    private targetForDevice(device: Device) {\r\n        let target = device.pos.add(device.building.pos)\r\n        if (device.parentDevice) {\r\n            target = (device.parentDevice.pos).add(device.building.pos)\r\n            target.x += device.pos.x\r\n            target.y += getVisibleDeviceSize(device.parentDevice.size) / 2\r\n        } else {\r\n            target.y += getVisibleDeviceSize(device.size) / 2\r\n        }\r\n        return target\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        if (pos) {\r\n            return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n        }\r\n    }\r\n\r\n    async followPath(path: Vector[]) {\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = []\r\n        }\r\n    }\r\n    \r\n    protected get strategies() {\r\n        return [\r\n            this.sleepingStrategy,\r\n            this.eatingStrategy,\r\n            this.constructionStrategy,\r\n            this.productionStrategy\r\n        ]\r\n    }\r\n\r\n    async work() {\r\n        if (this.isPlanning || this.sleeping) { return }\r\n\r\n        this.isPlanning = true\r\n        // just get rid of it??\r\n        if (this.carrying.length > 0) { this.carrying = [] }\r\n        let choice = this.strategies.find(strat => strat.canApply())\r\n        if (choice) {\r\n            await choice.attempt()\r\n            this.energy -= 1\r\n            this.hunger += 0.01\r\n        }\r\n        this.isPlanning = false\r\n    }\r\n\r\n    async takeRest(duration: number = 8 * 60 * Game.minuteTickMillis) {\r\n        console.log(\"Citizen taking a well-deserved rest!!\")\r\n        this.sleeping = true\r\n        await this.progressBar(duration)\r\n        this.energy = 100\r\n        this.sleeping = false\r\n    }\r\n\r\n    async eat() {\r\n        console.log(\"Citizen eating a meal!\")\r\n        // this.eating = true\r\n        let thirtyMinuteTimer = 30 * Game.minuteTickMillis\r\n        await this.progressBar(thirtyMinuteTimer)\r\n        deleteByValueOnce(this.carrying, ResourceBlock.Meal)\r\n        this.hunger = 0\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(pos, elite: boolean = false) {\r\n        let citizen = new Citizen(pos, this.planet, elite);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { Game } from '../../Game';\r\n\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = Game.debugPath\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.placed = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0] //.length > 1 ? destination.nodes()[1] : destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination; //.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        // console.log(\"PATH FOUND BTWN POINTS\", { srcNode, destNode, path })\r\n        return path;\r\n    }\r\n\r\n\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findPoweredDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d.pos.add(d.building.pos))\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings[0] //.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices(): Device[] {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n\r\n    findPoweredDevices(): Device[] {\r\n        return flatSingle(this.activeBuildings.map(b => b.getDevices()))\r\n            .filter(d => d.built) /// ....\r\n    }\r\n\r\n    protected get activeBuildings() {\r\n        return this.buildings.filter(b => b.isActive)\r\n    }\r\n}\r\n","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range, flatSingle, mixColors } from '../../Util';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { MechanicalOperation } from '../../models/MechanicalOperation';\r\nimport { World } from '../../models/World';\r\nimport { Colorize } from 'excalibur/dist/Drawing/SpriteEffects';\r\nimport { SkyLayers } from './SkyLayers';\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n    // baseColor: Color\r\n    sky: Actor\r\n    skyLayers: SkyLayers\r\n\r\n    constructor(\r\n        public world: World,\r\n        public hud: Hud,\r\n        // public color: Color,\r\n        private onBuildingHover: (b: Building) => any,\r\n        private onDeviceHover: (d: Device) => any,\r\n        private w: number = 100000,\r\n        private depth: number = 40000,\r\n    ) {\r\n        super(0, depth / 2, w, depth, world.color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        this.sky = new Actor(0, -depth, w, depth, world.skyColor)\r\n        this.add(this.sky)\r\n\r\n        let yBase = -depth / 2\r\n        let crustHeight = 40\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.45))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount\r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight / 2) + (layerHeight * (i + 1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n        let c = this.color.clone()\r\n\r\n        this.skyLayers =new SkyLayers(\r\n            -depth/2,\r\n            this.getWidth(),\r\n            this.color.lighten(0.04),\r\n            world.skyColor,\r\n            2\r\n        )\r\n        this.add(this.skyLayers)\r\n\r\n        this.colony = new Colony(0, -depth / 2)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n\r\n    }\r\n\r\n\r\n    private currentHour: number\r\n    get hour() { return this.currentHour }\r\n\r\n    setTime(time: number) {\r\n        this.hour = (Math.floor(time / 60)) % 24\r\n\r\n        let nextHour = this.hour + 1\r\n\r\n        let minute = Math.floor(time % 60)\r\n        let inc = (minute / 60)\r\n        // console.log({ hour: this.hour, nextHour: nextHour, minute, inc })\r\n\r\n        let oldC = this.skyColorForHour(this.hour),\r\n            newC = this.skyColorForHour(nextHour)\r\n\r\n        let mixC = mixColors(newC, oldC, inc)\r\n\r\n        this.assignColors(mixC)\r\n    }\r\n\r\n    private assignColors(skyColor: Color) {\r\n        this.sky.color = skyColor\r\n\r\n        let inc = 0.04\r\n\r\n        let c = mixColors(\r\n            this.sky.color.lighten(5 * inc), //.lighten(3*inc).saturate(5*inc),\r\n            this.color.darken(5 * inc), //.lighten(2*inc)\r\n            0.7\r\n        )\r\n\r\n        this.skyLayers.setHi(c)\r\n\r\n        // this.skyLayer.mountainLayers.color = this.color.lighten(inc) //0.1)\r\n        // this.skyLayer.mountainLayers.skyColor = c.lighten(inc)\r\n        // this.skyLayer.mountains.color = c.lighten(inc)\r\n        // this.skyLayer.backMountainLayers.color = c.lighten(inc)\r\n        // this.skyLayer.backMountainLayers.skyColor = c.lighten(inc * 3).desaturate(inc)\r\n    }\r\n\r\n    skyColorForHour(hour: number) {\r\n        let c = this.world.skyColor.clone().darken(0.2).desaturate(0.1)\r\n\r\n        let colorMap = {\r\n            night: c.darken(0.7),\r\n            dawn: c.darken(0.2),\r\n            morning: c.lighten(0.1),\r\n            afternoon: c.lighten(0.2).desaturate(0.1),\r\n            evening: c,\r\n        }\r\n\r\n        let result: Color = null\r\n        if (hour >= 5 && hour < 8) { // dawn\r\n            let inc = (hour - 6) / 5\r\n            result = colorMap.dawn.lighten(inc)\r\n        } else if (hour >= 8 && hour < 12) { // morning\r\n            let inc = (hour - 8) / 24\r\n            result = colorMap.morning.lighten(inc)\r\n        } else if (hour >= 12 && hour < 14) { // early afternoon\r\n            result = colorMap.afternoon //.darken(inc)\r\n        } else if (hour >= 14 && hour < 18) {  // late afternoon\r\n            let inc = (hour - 14) / 16\r\n            result = colorMap.afternoon.darken(inc)\r\n        } else if (hour >= 18 && hour < 23) { // evening\r\n            let inc = (hour - 18) / 10\r\n            result = colorMap.evening.darken(inc)\r\n        } else if (hour >= 23) { // late night\r\n            result = colorMap.night\r\n        } else if (hour < 5) { // early morning\r\n            result = colorMap.night\r\n        }\r\n        return result\r\n    }\r\n\r\n    set hour(hour: number) {\r\n        this.currentHour = hour\r\n    }\r\n\r\n    set currentlyViewing(buildingOrDevice: Building | Device) {\r\n        if (buildingOrDevice instanceof Building) {\r\n            let b: Building = buildingOrDevice\r\n            this.onBuildingHover(b)\r\n        } else if (buildingOrDevice instanceof Device) {\r\n            let d: Device = buildingOrDevice\r\n            this.onDeviceHover(d)\r\n        }\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        // let devices = this.colony.findPoweredDevices()\r\n        // let economies = devices.map((d: Device) => d.machine.economy)\r\n\r\n        let buildings = this.colony.buildings\r\n        let economies = buildings.map(b => b.economy())\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    spend(resource: ResourceBlock): any {\r\n        this.hud.resourceExpended(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector, elite: boolean = false) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            // console.log(\"POPULATIN'!\")\r\n            // let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(pos, elite) //home)\r\n        } else {\r\n            console.warn(\"too many citizens already to populate more!\")\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [PureValue.Shelter, PureValue.Water, PureValue.Oxygen]\r\n        return Math.max(0, Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        ))\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = () => true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n        return this.colony.pathBetweenPoints(origin, destination)\r\n    }\r\n\r\n    get timeFactor() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let ops: MechanicalOperation[] = devices.map(d => d.operation) //.filter(op => op.type === 'accelerate')\r\n        return ops\r\n            .map(op => op.type === 'accelerate' ? op.factor : 1)\r\n            .reduce((acc, val) => val * acc, 1.0)\r\n    }\r\n\r\n    get storedResources(): ResourceBlock[] {\r\n        let devices = this.colony.findAllDevices()\r\n        return flatSingle(devices.map(d => d.product))\r\n    }\r\n}","import { Color } from \"excalibur\";\r\nexport class Modal {\r\n    private _element: HTMLDivElement;\r\n    // private titleLabel: Label\r\n    // private messageLabel: Label\r\n    constructor(private title: string, private message: string, private x: number, private y: number) {\r\n        this.makeDialog();\r\n        // super(x,y,200,200, Color.DarkGray)\r\n    }\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        // console.log(\"DRAW MODAL\")\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    addButtons(buttonMap: {\r\n        [intent: string]: () => any;\r\n    }) {\r\n        // throw new Error(\"Method not implemented.\");\r\n        Object.entries(buttonMap).forEach(([intent, cb]) => {\r\n            let btn = this.buttonFactory(intent)\r\n            btn.onclick = cb\r\n            this._element.appendChild(btn)\r\n        })\r\n    }\r\n\r\n    teardown() {\r\n        document.body.removeChild(this._element)\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    private makeDialog() {\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.display = 'flex';\r\n        this._element.style.flexWrap = 'wrap';\r\n        this._element.style.width = '200px';\r\n        this._element.style.border = 'none'; //1px solid black'; //0.5px solid white';\r\n        document.body.appendChild(this._element);\r\n\r\n        let title = document.createElement('div');\r\n        title.textContent = this.title;\r\n        title.style.fontFamily = 'Verdana';\r\n        title.style.fontSize = '8pt';\r\n        title.style.fontWeight = '700';\r\n        title.style.textTransform = 'uppercase';\r\n        title.style.width = '200px';\r\n        title.style.color = Color.White.toRGBA();\r\n        title.style.backgroundColor = Color.Violet.darken(0.92).toRGBA();\r\n        title.style.padding = '4px';\r\n        title.style.margin = '0px';\r\n        this._element.appendChild(title);\r\n\r\n        let body = document.createElement('div');\r\n        body.textContent = this.message;\r\n        body.style.fontFamily = 'Verdana';\r\n        body.style.fontSize = '7pt';\r\n        body.style.fontWeight = '400';\r\n        body.style.width = '200px';\r\n        body.style.color = Color.White.toRGBA();\r\n        body.style.backgroundColor = Color.Violet.darken(0.92).toRGBA();\r\n        body.style.padding = '4px';\r\n        body.style.margin = '0px';\r\n        this._element.appendChild(body);\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color = Color.DarkGray) {\r\n        let bg = color.darken(0.5).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let modalButton = document.createElement('button');\r\n        modalButton.textContent = label;\r\n        modalButton.style.display = 'block';\r\n        modalButton.style.fontSize = '6pt';\r\n        modalButton.style.fontFamily = 'Verdana';\r\n        modalButton.style.fontWeight = '500';\r\n        modalButton.style.padding = '2px';\r\n        modalButton.style.width = '100px';\r\n        modalButton.style.textTransform = 'uppercase';\r\n        modalButton.style.border = 'none'; //1px solid rgba(255,255,255,0.08)';\r\n        modalButton.style.background = bg.toRGBA();\r\n        modalButton.style.color = fg.toRGBA();\r\n        modalButton.onmouseover = () => {\r\n            modalButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            modalButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        modalButton.onmouseleave = () => {\r\n            modalButton.style.background = bg.toRGBA();\r\n            modalButton.style.color = fg.toRGBA();\r\n        };\r\n        return modalButton;\r\n    }\r\n}\r\n","import { Color } from \"excalibur\";\r\nimport { EntityKind } from \"../../values/Entity\";\r\n\r\nclass PaletteGroup {\r\n\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(private name: string, private all: EntityKind[], private comprehend = true) {\r\n    }\r\n}\r\n\r\nexport class Palette {\r\n    private _element: HTMLDivElement;\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(\r\n        private name: string,\r\n        private x: number,\r\n        private y: number,\r\n        private all: EntityKind[],\r\n        private onButtonClick: (EntityKind) => any = null,\r\n        private onButtonEnter: (EntityKind) => any = null,\r\n        private comprehend = true \r\n    ) {\r\n        this.makePalette();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    updateBuilt(built: (EntityKind)[]) {\r\n        this.built = built;\r\n        if (this.comprehend) {\r\n            this.comprehended = this.all.filter((e: EntityKind) => {\r\n                let s = new e();\r\n                let prereqs: (EntityKind)[] = s.prereqs;\r\n                return prereqs.every((prereq: EntityKind) => {\r\n                    let built = this.built.some((s: EntityKind) => s === prereq);\r\n                    return built;\r\n                });\r\n            });\r\n        } else {\r\n            this.comprehended = this.built\r\n        }\r\n        this.makePalette();\r\n    }\r\n\r\n    dragging: boolean = false\r\n    private makePalette() {\r\n        if (this._element) {\r\n            this._element.parentElement.removeChild(this._element);\r\n        }\r\n        if (!(this.comprehended.length > 0)) { return }\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.display = 'flex';\r\n        this._element.style.flexWrap = 'wrap';\r\n        this._element.style.width = '200px';\r\n        this._element.style.border = 'none'; //1px solid black'; //0.5px solid white';\r\n\r\n        this._element.addEventListener('mousedown', (e) => { //.onmousedown = (e) => {\r\n            // alert('click palette')\r\n            this.dragging = true\r\n            console.log(\"START DRAG\")\r\n        })\r\n        document.addEventListener('onmousemove', (e: MouseEvent) => {\r\n            if (this.dragging) {\r\n                this.x = e.clientX\r\n                this.y = e.clientY\r\n            }\r\n        })\r\n\r\n        document.addEventListener('onmouseup', (e) => {\r\n            if (this.dragging) { this.dragging = false }\r\n        })\r\n        // title.onmousemove = (e) => {\r\n        //     if (this.dragging) {\r\n        //         this.x = e.clientX\r\n        //         this.y = e.clientY\r\n        //     }\r\n        // }\r\n        // this._element.onmouseup = (e) => {\r\n        //     this.dragging = false\r\n        //     console.log(\"DRAG END\") \r\n        // }\r\n\r\n        document.body.appendChild(this._element);\r\n\r\n        if (this.name) {\r\n            let title = document.createElement('div')\r\n            title.textContent = this.name\r\n            title.style.fontFamily = 'Verdana'\r\n            title.style.fontSize = '7pt'\r\n            title.style.fontWeight = '400'\r\n            title.style.width = '200px'\r\n            title.style.color = Color.White.toRGBA()\r\n            title.style.backgroundColor = Color.Violet.darken(0.92).toRGBA()\r\n            title.style.padding = '4px'\r\n            title.style.margin = '0px'\r\n            \r\n            this._element.appendChild(\r\n                title\r\n            )\r\n        }\r\n\r\n        this.comprehended\r\n            .map((elem: EntityKind) => new elem())\r\n            .sort((a, b) => a.color > b.color ? -1 : 1)\r\n            .forEach(elem => {\r\n                if (elem.hide) { return }\r\n                let label = elem.name;\r\n                if (!this.built.map(m => new m().name).includes(elem.name)) {\r\n                    label += ' *';\r\n                }\r\n                let clr = elem.color;\r\n                let btn = this.buttonFactory(label, clr);\r\n                this._element.appendChild(btn);\r\n                if (this.onButtonEnter) {\r\n                    btn.onmouseenter = () => { this.onButtonEnter(elem); };\r\n                }\r\n                if (this.onButtonClick) {\r\n                    btn.onclick = () => { this.onButtonClick(elem); };\r\n                }\r\n            });\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.5).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = label;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '6pt';\r\n        paletteButton.style.fontFamily = 'Verdana';\r\n        paletteButton.style.fontWeight = '500';\r\n        paletteButton.style.padding = '2px';\r\n        paletteButton.style.width = '100px';\r\n        paletteButton.style.textTransform = 'uppercase';\r\n        paletteButton.style.border = 'none' //1px solid rgba(255,255,255,0.08)';\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA();\r\n            paletteButton.style.color = fg.toRGBA();\r\n        };\r\n        return paletteButton;\r\n    }\r\n}\r\n","import { Label, Actor, FontStyle, Color } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { PureValue, Economy, ResourceBlock } from \"../../models/Economy\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nimport { countOccurrences, flatSingle } from \"../../Util\";\r\n\r\nexport class CardBody extends Actor {\r\n    description: Label\r\n    values: Label\r\n    notes: Label\r\n    footer: Label\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 0, 0)\r\n        // resources / recipes\r\n\r\n        this.values = new Label('')\r\n        this.values.fontSize = 10\r\n        this.add(this.values)\r\n\r\n        this.notes = new Label('behavioral notes', 0, 30)\r\n        this.notes.fontSize = 11\r\n        this.add(this.notes)\r\n\r\n        this.description = new Label('description', 0, 60)\r\n        this.description.fontSize = 12\r\n        this.description.fontStyle = FontStyle.Italic\r\n        this.description.color = Color.DarkGray\r\n        this.add(this.description)\r\n\r\n        this.footer = new Label('footer', 20, 80)\r\n        this.footer.fontSize = 10\r\n        this.footer.fontStyle = FontStyle.Italic\r\n        this.add(this.footer)\r\n\r\n        this.show(entity)\r\n    }\r\n\r\n    describeResources = (arr: ResourceBlock[]) => {\r\n        let freqs = countOccurrences(arr)\r\n        return Object.keys(freqs)\r\n            .map(elem => `${elem} x${freqs[elem]}`)\r\n            .join(' + ')\r\n    }\r\n\r\n    show(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        if (entity) {\r\n            this.description.text = entity.description;\r\n\r\n            if (entity instanceof Machine || entity instanceof Device) {\r\n                this.values.text =  this.describeEconomy(entity.economy)\r\n                // let footerNotes = []\r\n                let resourceDescription = entity instanceof Machine\r\n                    ? `Cost: ${this.describeResources(entity.cost)}`\r\n                    : (entity.built ? this.describeResources(entity.product) : 'under construction')\r\n                let forDome = entity instanceof Machine ? entity.forDome : entity.machine.forDome\r\n                let domeStatus = `For Dome: ${forDome ? 'Yes' : 'No'}`\r\n                this.footer.text = resourceDescription === ''\r\n                    ? domeStatus\r\n                    : [resourceDescription, domeStatus].join(' | ') \r\n                this.notes.text = '' //\r\n                let op = entity.operation\r\n                if (op) {\r\n                    if (op.type === 'recipe') {\r\n                        this.notes.text = `Turns ${op.consumes.join(' + ')} -> ${op.produces}.`\r\n                    } else if (op.type === 'generator') {\r\n                        this.notes.text = `Generates ${op.generates}.`\r\n                    } else if (op.type === 'store') {\r\n                        this.notes.text = `Stores ${op.stores.join(' + ')}`\r\n                    } else if (op.type === 'spawn') {\r\n                        this.notes.text = 'Decants clones.'\r\n                    }\r\n                }\r\n            } else if (entity instanceof SpaceFunction) {\r\n                let { capacity, workSpeed } = entity.bonuses\r\n                let bonusMessages = [];\r\n                if (capacity > 0) {\r\n                    bonusMessages.push(`+${capacity} cap`)\r\n                }\r\n                if (workSpeed > 1.0) {\r\n                    bonusMessages.push(`+${Math.floor((workSpeed*100)-100)}% efficiency` )\r\n                }\r\n                this.values.text = bonusMessages.join('; ') \r\n                this.notes.text = entity.machines.map(m => (new m()).name).join(' + ')\r\n                this.footer.text = ''\r\n            } else if (entity instanceof Building) {\r\n                this.values.text =  this.describeEconomy(entity.economy(false))\r\n                this.notes.text = entity.getDevices().map(d => d.machine.name).join(' + ')\r\n\r\n                let product = entity.getDevices()\r\n                    .map(d => d.product)\r\n                    .reduce((a, b) => a.concat(b), [])\r\n                this.footer.text = product.length > 0\r\n                    ? \"Currently contains: \" + this.describeResources(product)\r\n                    : ''\r\n            } else {\r\n                this.values.text = ''\r\n                this.notes.text = ''\r\n                this.footer.text = ''\r\n            }\r\n\r\n        }\r\n        // other bonuses? behaviors?\r\n    }\r\n\r\n    private describeEconomy(e: Economy): string {\r\n        let values = []\r\n        let econ = e // entity.economy\r\n        for (let value in PureValue) {\r\n            let { supply, demand } = econ[value]\r\n            let delta = supply - demand\r\n            if (delta > 0) {\r\n                values.push(`+${delta} ${value}`)\r\n            } else if (delta < 0) {\r\n                values.push(`${delta} ${value}`)\r\n            }\r\n        }\r\n        return values.join(' | ')\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nexport class CardTitle extends Actor {\r\n    \r\n    name: Label;\r\n    type: Label;\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 14, 32, entity && entity.color || Color.Gray);\r\n        this.name = new Label(entity && entity.name || '..', 20, 16)\r\n        this.name.fontSize = 28\r\n        this.name.color = Color.Black\r\n        this.add(this.name)\r\n\r\n        this.type = new Label('..', 220, 18)\r\n        this.type.fontSize = 10\r\n        this.type.color = Color.Gray\r\n        this.type.fontStyle = FontStyle.Italic\r\n        this.add(this.type)\r\n\r\n        if (entity) {\r\n            this.announce(entity)\r\n        }\r\n    }\r\n\r\n    announce(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.name.text = entity.name\r\n        this.color = entity.color.desaturate(0.5).darken(0.2)\r\n        if (entity instanceof Machine) { this.type.text = `${DeviceSize[entity.size]} Machine Type` }\r\n        if (entity instanceof Structure) { this.type.text = 'Structure' }\r\n        if (entity instanceof SpaceFunction) { this.type.text = 'Function' }\r\n        if (entity instanceof Building) { this.type.text = 'Building' }\r\n        if (entity instanceof Device) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { CardTitle } from \"./CardTitle\";\r\nimport { CardBody } from \"./CardBody\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\n\r\nexport class Card extends Actor {\r\n    title: CardTitle\r\n    cardBody: CardBody\r\n    image: HTMLImageElement\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x + 160, y + 90, 320, 180, Color.White);\r\n        let x0 = -150, y0 = -50;\r\n        this.title = new CardTitle(entity, x0 - 3, y0); //x, y)\r\n        this.add(this.title);\r\n        this.cardBody = new CardBody(entity, x0 + 14, y0 + 40)\r\n        this.add(this.cardBody)\r\n\r\n        this.image = new Image();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        if (this.entity) {\r\n            if (this.entity instanceof Machine || this.entity instanceof Device) {\r\n                // if (this.image.src !== null) {\r\n                    let ix = this.pos.x + 48, iy = this.pos.y - 16\r\n                    let isz = 92\r\n\r\n                    // maybe try-fail around this? something for painting?\r\n                    ctx.drawImage(this.image, ix, iy, isz, isz)\r\n                // }\r\n            }\r\n        }\r\n    }\r\n\r\n    present(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.title.announce(entity)\r\n        this.cardBody.show(entity)\r\n\r\n        this.entity = entity\r\n        let src = null\r\n        if (this.entity instanceof Machine) { //} || this.entity instanceof Device) {\r\n            src = this.entity.image\r\n        } else if (this.entity instanceof Device) {\r\n            src = this.entity.machine.image\r\n        }\r\n        // console.log(\"img src\", { src })\r\n        if (src) {\r\n            this.image.src = src\r\n        }\r\n    }\r\n\r\n}\r\n","import { Sound, Color } from \"excalibur\";\r\nimport { sample } from \"../../Util\";\r\n\r\ninterface MusicPlayerPlay { type: 'play'}\r\ninterface MusicPlayerPause { type: 'pause'}\r\ninterface MusicPlayerStop { type: 'stop'}\r\ninterface MusicPlayerNext { type: 'next'}\r\ntype MusicPlayerAction = MusicPlayerPlay | MusicPlayerPause | MusicPlayerStop | MusicPlayerNext\r\n\r\nexport class MusicPlayer {\r\n    private _wrapper: HTMLDivElement;\r\n    private _element: HTMLDivElement;\r\n    private _titleElem: HTMLSpanElement;\r\n\r\n    currentTrack: string\r\n    paused: boolean = false\r\n\r\n    constructor(private x: number, private y: number, private playlist: {\r\n        [track: string]: Sound;\r\n    }) {\r\n        this.makePlayer();\r\n        setTimeout(() => { this.startMusic() }, 3000)\r\n        this._titleElem.textContent = `Getting ready...`;\r\n        this.currentTrack = sample(Object.keys(this.playlist)); //[0];\r\n    }\r\n\r\n    startMusic() {\r\n        this._titleElem.textContent = `Playing: ${this.currentTrack}`;\r\n        this.playlist[this.currentTrack].play()\r\n        .then(() => {\r\n                this.advancePlaylist()\r\n        })\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._wrapper.style.left = `${left + this.x}px`;\r\n            this._wrapper.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    private makePlayer() {\r\n        this._wrapper = document.createElement('div')\r\n        this._wrapper.style.position = 'absolute'\r\n        this._wrapper.style.width = '20%'\r\n        this._wrapper.style.textAlign = 'left'\r\n        this._wrapper.style.border = 'none';\r\n        document.body.appendChild(this._wrapper);\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.display = 'inline-block';\r\n        this._element.style.border = 'none';\r\n        this._wrapper.appendChild(this._element)\r\n\r\n        this._titleElem = document.createElement('span');\r\n        this._titleElem.style.fontFamily = 'Verdana';\r\n        this._titleElem.style.fontSize = '7pt';\r\n        this._titleElem.style.padding = '24px'\r\n        this._titleElem.style.color = 'white';\r\n        this._wrapper.appendChild(this.inlineBlock(this._titleElem));\r\n\r\n        let play = this.iconFactory({ type: 'play' }, '&#9655;')\r\n        this._wrapper.appendChild(this.inlineBlock(play));\r\n\r\n        let pause = this.iconFactory({ type: 'pause' }, '&#10072; &#10072;')\r\n        this._wrapper.appendChild(this.inlineBlock(pause))\r\n\r\n        let next = this.iconFactory({ type: 'next' }, '&rarr;')\r\n        this._wrapper.appendChild(this.inlineBlock(next))\r\n\r\n    }\r\n\r\n    handleAction(action: MusicPlayerAction) {\r\n        if (action.type === 'pause') {\r\n            this.song.pause()\r\n            this.paused = true\r\n            this._titleElem.textContent = `Paused: ${this.currentTrack}`;\r\n        } else if (action.type === 'play') {\r\n            this.song.play()\r\n            this.paused = false\r\n            this._titleElem.textContent = `Playing: ${this.currentTrack}`;\r\n        } else if (action.type === 'next') {\r\n            if (this.paused) {\r\n                this.song.play()\r\n                this.paused = false\r\n            }\r\n            this.song.stop()\r\n        }\r\n    }\r\n\r\n    advancePlaylist() {\r\n        let ndx = this.trackNames.indexOf(this.currentTrack)\r\n        ndx = (ndx + 1) % this.trackNames.length\r\n        this.currentTrack = this.trackNames[ndx]\r\n        this.startMusic()\r\n    }\r\n\r\n    get trackNames() { return Object.keys(this.playlist) }\r\n    get song() { return this.playlist[this.currentTrack] }\r\n\r\n    private inlineBlock(elem) {\r\n        let block = document.createElement('div');\r\n        block.style.display = 'inline-block';\r\n        block.style.border = 'none';\r\n        block.append(elem)\r\n        return block\r\n    }\r\n\r\n    private iconFactory(\r\n        action: MusicPlayerAction,\r\n        iconContent: string,\r\n    ) {\r\n        let bg = Color.Transparent\r\n        let fg = Color.White\r\n        let icon = document.createElement('button')\r\n        icon.innerHTML = iconContent\r\n        icon.style.display = 'block';\r\n        icon.style.fontSize = '7pt';\r\n        icon.style.fontFamily = 'Verdana';\r\n        icon.style.border = 'none'\r\n        icon.style.padding = '4px'\r\n        icon.style.background = bg.toRGBA();\r\n        icon.style.color = fg.toRGBA();\r\n        icon.onclick = () => { this.handleAction(action) }\r\n        return icon\r\n    }\r\n\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor, Color } from \"excalibur\";\r\nimport { Economy, PureValue, availableCapacity, allValues } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\nimport { eachChunk } from \"../../Util\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0) //Color.DarkGray.clone().darken(0.5));\r\n\r\n        let index = 0\r\n        for (let [val1, val2] of eachChunk(allValues, 2)) {\r\n            this.addValue(index * 32, 0, val1)\r\n            this.addValue(index * 32, 7, val2)\r\n            index += 1\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    private addValue(x: number, y: number, value: PureValue) {\r\n        let valueLabel: EconomicValue = new EconomicValue(value, x, y)\r\n        this.valueLabels[value] = valueLabel\r\n        this.add(valueLabel)\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value of allValues) {\r\n            this.valueLabels[value].setCount(\r\n                availableCapacity(market, value)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor, UIActor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nclass Tooltip extends Actor {\r\n    messageLabel: Label\r\n    constructor(x: number, y: number, message: string) {\r\n        super(x, y, 60, 16, Color.Black)\r\n        this.messageLabel = new Label(message, -16, 6, 'Verdana')\r\n        this.messageLabel.color = Color.White\r\n        this.add(this.messageLabel)\r\n    }\r\n}\r\n\r\nexport class ResourceListEntry extends UIActor {\r\n    icon: Actor;\r\n    count: Label;\r\n    hovering: boolean = false\r\n    tooltip: Tooltip\r\n\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x-5, y-5, 20, 10)\r\n        let icon = new Actor(5, 5, 10, 10, blockColor(resourceBlock));\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, 15, 10, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n\r\n        this.tooltip = new Tooltip(0, 5, ResourceBlock[resourceBlock])\r\n        this.tooltip.visible = false\r\n        this.add(this.tooltip)\r\n\r\n\r\n        this.on('pointerenter', () => {\r\n            this.tooltip.visible = true\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.tooltip.visible = false\r\n        })\r\n    }\r\n\r\n\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n\r\n    debit(amt: number) {\r\n        this.value -= amt\r\n        this.count.text = `x${this.value}`\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nimport { eachCons, eachChunk } from \"../../Util\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            [ResourceBlock.Biomass]: null,\r\n            [ResourceBlock.Idea]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n            [ResourceBlock.Alloy]: null,\r\n            [ResourceBlock.Bioplasma]: null,\r\n            [ResourceBlock.Algorithm]: null,\r\n            [ResourceBlock.Argent]: null,\r\n            [ResourceBlock.Aurum]: null,\r\n            [ResourceBlock.Omnium]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x,y,0,0); // 200, 60, Color.Green.clone().darken(0.8));\r\n        let rx0 = 0, ry0 = -5;\r\n        let resources = [\r\n            ResourceBlock.Meal,\r\n            ResourceBlock.Bioplasma,\r\n\r\n            ResourceBlock.Data,\r\n            ResourceBlock.Algorithm,\r\n\r\n            ResourceBlock.Mineral,\r\n            ResourceBlock.Alloy,\r\n\r\n            ResourceBlock.Argent,\r\n            ResourceBlock.Aurum,\r\n        ];\r\n\r\n        eachChunk(resources, 2).forEach(([res1, res2], index) => {\r\n            let rx = rx0 + index * 36, ry = ry0 + index * 0;\r\n            this.addEntry(rx, ry, res1)\r\n            this.addEntry(rx, ry + 14, res2)\r\n        });\r\n    }\r\n\r\n    private addEntry(x: number, y: number, res: ResourceBlock) {\r\n        let entry = new ResourceListEntry(x, y, res, 0);\r\n        this.add(entry);\r\n        this.entries[res] = entry;\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n\r\n    decrement(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.debit(1)\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\nimport { MusicPlayer } from \"./MusicPlayer\";\r\nimport { Resources } from \"../../Resources\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n    private musicPlayer: MusicPlayer\r\n    private clock: Label\r\n\r\n    constructor(market: Economy, w: number, h: number) {\r\n        super(0,0, w*2,h, Color.DarkGray.clone().darken(0.92));\r\n\r\n        let ty = 14\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+18)\r\n        brand.fontSize = 28\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.1\", 100, ty + 14)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(130, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 280, ty)\r\n        this.add(this.economy)\r\n\r\n        this.clock = new Label('current time', 600, ty, 'Verdana')\r\n        this.clock.color = Color.White // 'white'\r\n        this.add(this.clock)\r\n\r\n        this.popLabel = new Label(\"\", 600, ty + 14, 'Verdana')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 750, ty, 'Verdana')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.messageLabel.fontStyle = FontStyle.Italic\r\n        this.add(this.messageLabel)\r\n\r\n        this.musicPlayer = new MusicPlayer(726, 12, {\r\n            'Crater Rock': Resources.CraterRock,\r\n            'Indivision': Resources.Indivision,\r\n            'Future Tense': Resources.FutureTense,\r\n            // 'Isomer': Resources.Isomer,\r\n            'Understanding': Resources.Understanding,\r\n            // 'Outbound': Resources.Outbound,\r\n            'Assembler': Resources.Assembler,\r\n        })\r\n// // enable propagating pointer events\r\n// this.enableCapturePointer = true;\r\n// // // enable move events, warning: performance intensive!\r\n// this.capturePointer.captureMoveEvents = true;\r\n//         this.on('pointerenter', () => { alert('hover!')})\r\n    }\r\n\r\n    draw(ctx, delta) {\r\n        super.draw(ctx, delta)\r\n        this.musicPlayer.draw(ctx)\r\n        // drawRect(\r\n        //     ctx,\r\n        //     {x: this.x, y: this.y, width: this.getWidth(), height: this.getHeight() },\r\n        //     0,\r\n        //     Color.Magenta\r\n        // )\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    decrementResource(res: ResourceBlock) {\r\n        this.resources.decrement(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n\r\n    setClock(time: number = 0) {\r\n        let days = (Math.floor(time / (60 * 24))+1).toString()\r\n        let hh = Math.floor(time / 60) % 24\r\n        let hours = Math.floor((hh + 11) % 12 + 1).toString()\r\n        let minutes = Math.floor(time % 60).toString()\r\n        let ampm = hh < 12 ? 'AM' : 'PM'\r\n        this.clock.text = `Day ${days}. ${hours}:${minutes.padStart(2, '0')} ${ampm}`\r\n    }\r\n    \r\n}\r\n","import { UIActor, Label } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, PureValue } from \"../../models/Economy\";\r\nimport { Machine, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Card } from \"./Card\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Palette } from \"./Palette\";\r\nimport { Building } from \"../Building\";\r\nimport { Modal } from \"./Modal\";\r\n\r\nexport class Hud extends UIActor {\r\n    // private hint: Label\r\n\r\n    private hidePalettes: boolean = true\r\n    private structurePalette: Palette\r\n    private machinePalette: Palette\r\n    private functionPalette: Palette\r\n    private card: Card\r\n    private status: StatusAnalysisView\r\n\r\n    private modal: Modal = null\r\n\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n    static machinesForPalette = allMachines\r\n    static functionsForPalette = allSpaceFunctions\r\n\r\n    constructor(\r\n        game: Game,\r\n        protected onBuildingSelect = null,\r\n        protected onMachineSelect = null,\r\n        protected onFunctionSelect = null\r\n    ) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.status = new StatusAnalysisView(emptyMarket(), game.canvasWidth, 64);\r\n        this.add(this.status)\r\n\r\n        let displayInfo = (e) => this.showCard(e)\r\n        this.machinePalette = new Palette('Machine', 20, 55, allMachines, onMachineSelect, displayInfo) // (e) => this.showCard(e))\r\n        this.structurePalette = new Palette('Structure', 20, 300, Hud.structuresForPalette, onBuildingSelect, displayInfo)\r\n        this.functionPalette = new Palette('Function', 20, 435, Hud.functionsForPalette, onFunctionSelect, displayInfo, false)\r\n\r\n        this.card = new Card(null, 20, game.canvas.height - 200)\r\n        this.add(this.card)\r\n\r\n\r\n    }\r\n\r\n    // breakingNews()\r\n    // showModal: boolean = false\r\n    // modal: { message: string, title: string } = null\r\n    systemMessage(message: string, title: string = 'Commander, a message for you',\r\n      buttons: { [intent: string]: () => any }) { //} = { dismiss: () => this.closeSystemMessage() }) {\r\n        // console.log(\"SET MODAL\", { message })\r\n        this.modal = new Modal(title, message, this.getWidth()/2 - 100, this.getHeight()/2 - 200)\r\n        this.modal.addButtons(buttons)\r\n\r\n        // this.showModal = true\r\n        // this.modal = {\r\n            // message, title\r\n        // }\r\n    }\r\n\r\n    closeSystemMessage() {\r\n        console.log(\"hide system message\")\r\n        this.modal.teardown()\r\n        this.modal = null\r\n    }\r\n\r\n\r\n    showPalettes() {\r\n        this.hidePalettes = false\r\n    }\r\n\r\n    setStatus(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (!this.hidePalettes) {\r\n            this.structurePalette.draw(ctx)\r\n            this.machinePalette.draw(ctx)\r\n            this.functionPalette.draw(ctx)\r\n        }\r\n\r\n        if (this.modal) {\r\n            // console.log(\"okay, we have modal!!\")\r\n            this.modal.draw(ctx)\r\n        } else {\r\n            // console.log(\"no modal\")\r\n        }\r\n        // if (this.showModal)\r\n    }\r\n\r\n    update(game: Game, delta: number) {\r\n        super.update(game, delta)\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    resourceExpended(resource: ResourceBlock) {\r\n        this.status.decrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true, time: number = 0) {\r\n        if (!planet) { return }\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n\r\n        this.status.setClock(time)\r\n    }\r\n\r\n    showCard(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        this.card.present(entity)\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n        this.updateFunctionPalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        let builtStructures =\r\n            Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n        if (!builtStructures.every(s => this.structurePalette.built.includes(s))) {\r\n            this.structurePalette.updateBuilt(builtStructures)\r\n        }\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let devices = colony.findAllDevices()\r\n        let builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine && d.built))\r\n        if (!builtMachines.every(machine => this.machinePalette.built.includes(machine))) {\r\n            this.machinePalette.updateBuilt(builtMachines)\r\n        }\r\n    }\r\n\r\n    private updateFunctionPalette(colony: Colony) {\r\n        let builtReifiedFunctions = flatSingle(colony.buildings.map(b => b.spaceFunction))\r\n        let builtFunctions = Hud.functionsForPalette.filter((fn) => builtReifiedFunctions.some(rf => rf instanceof fn))\r\n        if (!builtFunctions.every(fn => this.functionPalette.built.includes(fn))) {\r\n            this.functionPalette.updateBuilt(builtFunctions)\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawPatternedRect, drawRect, drawPatternedPoly, drawPoly } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\n// import { drawPatternedRect, drawRect } from \"../../Util\";\r\n\r\nexport class MediumSurfaceRoomView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n    // hideLabe\r\n\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n    get floorHeight() { return this.getHeight() / 6 }\r\n\r\n   nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight() - 16\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 12 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n    }\r\n\r\n    //deviceInteractionPlaces() {\r\n\r\n    //}\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        // draw from left slot to each device place to right slot?\r\n        let devices = this.deviceInteractionPlaces().map(p => find(p)) //d.position))\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n\r\n        if (this.isGroundFloor) {\r\n            let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length - 1])\r\n            g.edge(leftSlot, devices[0])\r\n            g.edge(devices[devices.length - 1], rightSlot)\r\n        } else {\r\n            let topSlot = find(slots[1])\r\n            g.edge(devices[1], topSlot)\r\n        }\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        // g.edge(devices[1], find(slots[1]))\r\n\r\n        return g\r\n    }\r\n\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        let slotY = this.getHeight() - this.floorHeight;\r\n\r\n        if (this.isGroundFloor) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, this.pos.y + slotY,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(), // + (2*this.floorHeight),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y - 1, // + this.getHeight(),\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n\r\n        if (this.isGroundFloor) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    this.pos.y + slotY,\r\n                    Orientation.Right\r\n                )\r\n            )\r\n        }\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    get isGroundFloor() {\r\n        return !this.parentSlot || !(this.parentSlot.parent instanceof MediumSurfaceRoomView)\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.planet.colony.buildings.length === 0) {\r\n            cursor.y = this.planet.getTop();\r\n        } // else {\r\n            // this.alignToSlot(cursor)\r\n        // }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.planet.colony.buildings.length === 0) {\r\n            this.pos = cursor\r\n            this.pos.y -= this.getHeight() - 2 - this.floorHeight // hm\r\n        } else {\r\n            this.alignToSlot(cursor)\r\n\r\n        }\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor()\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n\r\n        // ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n        // let rect = \r\n            // { x: this.pos.x, y: this.pos.y, width: this.getWidth(), height: this.getHeight() };\r\n        drawPatternedPoly(\r\n            ctx,\r\n            this.angledRoofPoly(),\r\n            this.backgroundPattern,\r\n            this.mainColor()\r\n        )\r\n\r\n\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black.clone()\r\n            c.a = 0.6\r\n            drawPoly(ctx, this.angledRoofPoly(), c)\r\n        }\r\n\r\n        // floor\r\n        let floorColor = this.planet.color.darken(0.6)\r\n        let floorEdgeHeight = 12 // 6\r\n        let floorOff = -5\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorEdgeHeight,\r\n              width: this.getWidth(), height: floorEdgeHeight - floorOff },\r\n              0,\r\n              floorColor.lighten(0.4)\r\n        )\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorOff,\r\n              width: this.getWidth(), height: this.floorHeight + floorOff },\r\n              0,\r\n              floorColor\r\n        )\r\n\r\n        // a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n\r\n        ctx.fillStyle = Color.Black.fillStyle()\r\n        ctx.fillRect(flagX, flagY-1, 1, flagpoleHeight+1)\r\n        drawPatternedRect(\r\n            ctx,\r\n            { x: flagX, y: flagY, width: 10, height: 6 },\r\n            BackgroundPattern.USSF\r\n        )\r\n        // ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.clone(); }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MediumRoomThreeView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    poly() { return this.angledRoofPoly() }\r\n\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Huge\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Large\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 2\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaceCount = 3\r\n    poly() { return this.angledRoofPoly() }\r\n    //devicePlaces() {\r\n    //    let w = this.getWidth()/2\r\n    //    let x = this.pos.x + w;\r\n    //    let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n    //    let ds = [\r\n    //        new Vector(x - w / 2, y),\r\n    //        new Vector(x, y),\r\n    //        new Vector(x + w / 2, y),\r\n    //    ]\r\n\r\n    //    return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    //}\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaceCount = 3\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - 20\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    // }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaceCount = 3\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - 20\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaceCount = 3\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - 6\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    // }\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    minHeight: number = 50\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(this.minHeight, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(this.minHeight, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { range, eachCons, measureDistance } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.planet.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        // super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            // this.alignToSlot(cursor)\r\n        } else {\r\n            // cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        // this.pos.y = this.planet.getTop() + 2\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n          this.setHeight(\r\n             (100 * Math.floor(Math.abs(cursor.y - this.planet.getTop()) / 100)) - 5\r\n          )\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length-1])\r\n        let devices = this.deviceInteractionPlaces().map(position => find(position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n\r\n        return g\r\n\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.clone().darken(0.05); } \r\n\r\n    deviceSize = DeviceSize.Small\r\n    devicePlaceCount = 2\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(this.deviceSize)/3 // - 16\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            ...(this.devicePlaceCount === 3 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.deviceSize)) // DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector, Color } from \"excalibur\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n// import { drawRect, drawPatternedRect } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { drawPatternedRect, drawRect, drawPatternedPoly, drawPoly } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    get floorHeight() { return this.getHeight() / 6 }\r\n    // floorHeight: number = 10\r\n    edgeWidth: number = 0 //.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    poly() { return this.aabbPoly() } //angledRoofPoly() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n\r\n        drawPatternedPoly(\r\n            ctx,\r\n            this.poly(),\r\n            this.backgroundPattern,\r\n            this.mainColor()\r\n        )\r\n\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black.clone()\r\n            c.a = 0.6\r\n            drawPoly(ctx, this.poly(), c)\r\n        }\r\n\r\n        let floorEdgeHeight = 12 // 6\r\n        let floorColor = this.planet.color.darken(0.6)\r\n        let floorOff = -5\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorEdgeHeight,\r\n              width: this.getWidth(), height: floorEdgeHeight - floorOff },\r\n              0,\r\n              floorColor.lighten(0.4)\r\n        )\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorOff,\r\n              width: this.getWidth(), height: this.floorHeight + floorOff },\r\n              0,\r\n              floorColor\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let slots: Slot[] = this.slots()\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        let leftSlot = find(slots[0].pos), rightSlot = find(slots[1].pos)\r\n        let devices = this.deviceInteractionPlaces().map(p => find(p))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        return g\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    devicePlaceSize: DeviceSize = DeviceSize.Small\r\n    devicePlaceCount: number = 2\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n   nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"0a266eded2bf27831b18735ffc081448.png\";","module.exports = __webpack_public_path__ + \"2475589a97ba4901bfa7ab53b5487778.png\";","module.exports = __webpack_public_path__ + \"98240dde9344ac8d071d076ac951e15d.png\";","module.exports = __webpack_public_path__ + \"da31cf43235263c1c3e0ad45a46360a1.png\";","module.exports = __webpack_public_path__ + \"a6a38278ac501400c6199e0df9e1bf84.png\";","module.exports = __webpack_public_path__ + \"ece1d5d5858bc048d2d949ecc3f5e9bc.png\";","module.exports = __webpack_public_path__ + \"3654f0489813e0668743efde017c9653.png\";","module.exports = __webpack_public_path__ + \"3abbdabf07943966f102ac7345a59986.png\";","module.exports = __webpack_public_path__ + \"d1b4690b9f5fa4957f98602afc8cfdb6.png\";","module.exports = __webpack_public_path__ + \"0eb7a15ea04678b14a2b88b5965aabeb.png\";","module.exports = __webpack_public_path__ + \"824e22e59890ae78258b54985e42ca6d.svg\";","module.exports = __webpack_public_path__ + \"dfe6e4db2f0c22d18befa85c1e163369.svg\";","module.exports = __webpack_public_path__ + \"9a947d50110c1d1db07c76a4bba2e653.svg\";","module.exports = __webpack_public_path__ + \"4976b6042ef557ca6085c8d0168251f4.svg\";","module.exports = __webpack_public_path__ + \"46418cf15643d9b1b171c1b64160a5af.svg\";","module.exports = __webpack_public_path__ + \"36a02c2483b688be86ce07bea4bd7295.svg\";","module.exports = __webpack_public_path__ + \"29c5f1be64c99bbc14d5063eea2f0953.svg\";","module.exports = __webpack_public_path__ + \"502f86b65239e20806bbae8bc77a6116.svg\";","module.exports = __webpack_public_path__ + \"5289b20985e3c3a98081267a2da1772e.svg\";","module.exports = __webpack_public_path__ + \"1d893905e4eea3bbc48b0e129e318ea6.svg\";","module.exports = __webpack_public_path__ + \"bd556d00e484db4e52d198d0bf39d0f2.svg\";","module.exports = __webpack_public_path__ + \"650cd431226df0755357c71d61bef1f2.svg\";","module.exports = __webpack_public_path__ + \"f12c591f538ab3026bf13e93f3fa9485.svg\";","module.exports = __webpack_public_path__ + \"3aeb9dd24809ba3fbd4eeb31a28c3b19.svg\";","module.exports = __webpack_public_path__ + \"6cc6f6773bb6eb26fcef87b9629f7b87.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"24611230ec712ba7ee38b99561aedd87.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { ResourceBlock } from \"./Economy\";\r\n\r\nexport type MechanicalOperation =\r\n    Recipe |\r\n    ResourceGenerator |\r\n    ResourceStorage |\r\n    SpawnClone |\r\n    AccelerateTime |\r\n    ExploreForResource |\r\n    Noop\r\n\r\nexport interface Noop {\r\n    type: 'noop'\r\n}\r\n\r\nexport interface Recipe {\r\n    type: 'recipe'\r\n    consumes: ResourceBlock[]\r\n    produces: ResourceBlock\r\n    workTime: number\r\n}\r\n\r\nexport interface ResourceGenerator {\r\n    type: 'generator'\r\n    generates: ResourceBlock\r\n    generationTime: number\r\n    capacity: number\r\n}\r\n\r\nexport interface ResourceStorage {\r\n    type: 'store'\r\n    stores: ResourceBlock[]\r\n    capacity: number\r\n}\r\n\r\nexport interface SpawnClone {\r\n    type: 'spawn'\r\n}\r\n\r\nexport interface AccelerateTime {\r\n    type: 'accelerate'\r\n    factor: number\r\n}\r\n\r\nexport interface ExploreForResource {\r\n    type: 'explore'\r\n    gathers: ResourceBlock\r\n    capacity: number\r\n}\r\n\r\nfunction store(res: ResourceBlock[], capacity: number = 10): ResourceStorage {\r\n    return {\r\n        type: 'store',\r\n        stores: res,\r\n        capacity\r\n    }\r\n}\r\n\r\nfunction generate(res: ResourceBlock, cap: number = 4): ResourceGenerator {\r\n    return {\r\n        type: 'generator',\r\n        generates: res,\r\n        generationTime: 1000,\r\n        capacity: cap\r\n    }\r\n}\r\n\r\nfunction recipe(input: ResourceBlock[], output: ResourceBlock): Recipe {\r\n    return {\r\n        type: 'recipe',\r\n        consumes: input,\r\n        produces: output,\r\n        workTime: 1000,\r\n    }\r\n}\r\n\r\nfunction spawn(): SpawnClone {\r\n    return {\r\n        type: 'spawn',\r\n    }\r\n}\r\n\r\nfunction accelerateTime(): AccelerateTime {\r\n    return {\r\n        type: 'accelerate',\r\n        factor: 2\r\n    }\r\n}\r\n\r\nfunction explore(block: ResourceBlock, cap: number = 4): ExploreForResource {\r\n    return {\r\n        type: 'explore',\r\n        gathers: block,\r\n        capacity: cap\r\n    }\r\n}\r\n\r\nexport const mechanicalOperations = {\r\n    store,\r\n    generate,\r\n    recipe,\r\n    spawn,\r\n    accelerateTime,\r\n    explore,\r\n}","import { Input, Scene, Timer, Vector } from \"excalibur\";\r\nimport { Building, structureViews } from \"../actors/Building\";\r\nimport { DevicePlace } from \"../actors/Building/Building\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Game } from \"../Game\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { LivingQuarters, MissionControl, SolarArray, SpaceFunction, CloneReception, Kitchen, Workshop, Archive, Refinery, Mine } from \"../models/SpaceFunction\";\r\nimport { Corridor, HugeRoom, LargeRoom, MainTunnel, MediumRoomThree, SmallDome, SmallRoomThree, Structure, SurfaceRoad } from \"../models/Structure\";\r\nimport { flatSingle, zip } from \"../Util\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { Orientation } from \"../values/Orientation\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    placingFunction: SpaceFunction = null\r\n\r\n    time: number = Game.startHour*60\r\n\r\n    hasActiveModal: boolean = false\r\n\r\n    static requiredStructuresAndFunctions: (typeof SpaceFunction | typeof Structure)[] = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        SolarArray,\r\n        MainTunnel,\r\n        Corridor,\r\n        LivingQuarters,\r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, true, this.time)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        let buildIt = (e) => this.startConstructing(e)\r\n\r\n        this.hud = new Hud(game, buildIt, buildIt, buildIt)\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(\r\n            game.world,\r\n            this.hud,\r\n            (b) => this.hud.showCard(b),\r\n            (d) => this.hud.showCard(d)\r\n        )\r\n\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.pos.y = this.planet.getTop() - 1000\r\n        this.camera.zoom(0.05)\r\n        this.camera.zoom(0.5, 10000)\r\n\r\n        this.addTimer(\r\n            new Timer(() => { this.stepTime() }, this.timeStepIntervalMillis, true)\r\n        )\r\n\r\n        this.systemMessage(\r\n            \"Welcome to the Colony, sir... \"\r\n            + \"We are what is left of the crew of the Osiris. \"\r\n            + \"Can you help us build a functioning society? \"\r\n            + \"First, choose a location for the Command post. \"\r\n            + \"Then we'll lay out some infrastructure.\"\r\n        )\r\n    }\r\n\r\n    systemMessage(message: string) {\r\n        this.hasActiveModal = true\r\n        this.hud.systemMessage(message, \"commander, a moment\", {\r\n            dismiss: () => { this.closeSystemMessage() }\r\n        })\r\n        //, () => {\r\n        //    this.hasActiveModal = false\r\n        //})\r\n    }\r\n\r\n    private closeSystemMessage() {\r\n        this.hud.closeSystemMessage()\r\n        this.hasActiveModal = false\r\n    }\r\n\r\n\r\n    timeStepIntervalMillis: number = 50\r\n    private stepTime() { \r\n        this.time += this.timeStepIntervalMillis / Game.minuteTickMillis  /// this.timeStepIntervalMillis //  0.125 //.25\r\n        this.planet.setTime(this.time) \r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.hasActiveModal) { return }\r\n\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (this.hasActiveModal) { return }\r\n\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n\r\n                            if (this.placingFunction) {\r\n                                let fn = this.placingFunction\r\n                                // console.log({ fn, bldg: buildingUnderConstruction })\r\n                                zip(fn.machines, buildingUnderConstruction.devicePlaces()).forEach(([machine, place]: [typeof Machine, DevicePlace]) => {\r\n                                    console.log(\"would add machine\", { machine, place })\r\n                                    let m = (new machine()).concretize()\r\n                                    let device = new Device(m, place.position)\r\n                                    buildingUnderConstruction.addDevice(device)\r\n                                })\r\n                                this.placingFunction = null\r\n                            }\r\n\r\n                            this.hud.setStatus(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            // this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            if (deviceUnderConstruction.size === DeviceSize.Tiny) {\r\n                                let parent = deviceUnderConstruction.parentDevice\r\n                                parent.addTinyDevice(deviceUnderConstruction)\r\n                            } else {\r\n                                let bldg = deviceUnderConstruction.building\r\n                                bldg.addDevice(deviceUnderConstruction)\r\n                            }\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setStatus(this.defaultMessage)\r\n                            // this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            if (this.hasActiveModal) { return }\r\n\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        let { Up, Down, Left, Right } = Orientation;\r\n        let moveCam = (direction: Orientation) => {\r\n            let camMoveSpeed = 10 * (1/this.camera.getZoom())\r\n            let dv = new Vector(0,0)\r\n            switch(direction) {\r\n            case Left: dv.x = -camMoveSpeed; break\r\n            case Right: dv.x = camMoveSpeed; break\r\n            case Up: dv.y = -camMoveSpeed; break\r\n            case Down: dv.y = camMoveSpeed; break\r\n            }\r\n            // console.log(\"MOVING CAM\", { direction, dv, camMoveSpeed })\r\n            this.camera.move(this.camera.pos.add(dv), 0) //pos.addEqual(dv)\r\n        }\r\n\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                this.planet.colony.currentlyConstructing = null\r\n                this.placingFunction = null\r\n                this.hud.setStatus(this.defaultMessage); //'Welcome to the Colony, Commander.')\r\n            } else if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                moveCam(Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                moveCam(Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                moveCam(Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                moveCam(Right)\r\n            }\r\n        })\r\n        this.game.input.keyboard.on('hold', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                moveCam(Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                moveCam(Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                moveCam(Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                moveCam(Right)\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingStructureOrFunction(): Structure | SpaceFunction {\r\n        let reqs = Construct.requiredStructuresAndFunctions.map(req => new req())\r\n\r\n        let actualStructureNames = this.buildings.map(building => building.structure.name)\r\n        let actualFunctionNames = flatSingle(\r\n            this.buildings.map(building => building.spaceFunction && building.spaceFunction.name)\r\n        )\r\n        let actualNames = [...actualStructureNames, ...actualFunctionNames]\r\n        return reqs.find(req => !actualNames.includes(req.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingStructureOrFunction() //this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.systemMessage(`Now we need to build a ${structure.name}...`)\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            // this.systemMessage(`Now we need to build a ${structure.name}...`)\r\n            this.hud.showPalettes()\r\n        }\r\n    }\r\n\r\n    firstBuilding: boolean = true\r\n    startConstructing(structureOrMachine: Structure | Machine | SpaceFunction, pos: Vector = new Vector(0, 0)) {\r\n        this.hud.showCard(structureOrMachine)\r\n        \r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            this.hud.setStatus(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            if (this.firstBuilding) {\r\n                this.camera.zoom(structure.zoom, 250)\r\n                this.camera.pos = theNextOne.pos\r\n                this.firstBuilding = false\r\n            } \r\n        } else if (structureOrMachine instanceof Machine) {\r\n            let machine = structureOrMachine\r\n            this.hud.setStatus(`Install ${machine.name} (${machine.description})`)\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            // this.camera.zoom(1.5, 250)\r\n        } else if (structureOrMachine instanceof SpaceFunction) {\r\n            let fn: SpaceFunction = structureOrMachine\r\n            this.hud.setStatus(`Place ${fn.name} (${fn.description})`)\r\n            theNextOne = this.spawnFunction(fn, pos)\r\n            this.placingFunction = fn\r\n\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        if (device.snap(this.planet)) {\r\n            this.camera.pos = device.pos\r\n \r\n        }\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n\r\n    protected spawnFunction(fn: SpaceFunction, pos: Vector): Building {\r\n        let theStructure: Structure = (fn.structure && new fn.structure()) // || new SmallRoomThree()\r\n        if (!theStructure) {\r\n            theStructure = new SmallRoomThree()\r\n            let machines = fn.machines.map(m => new m())\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Medium)) {\r\n                theStructure = new MediumRoomThree()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Large)) {\r\n                theStructure = new LargeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Huge)) {\r\n                theStructure = new HugeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.forDome)) {\r\n                theStructure = new SmallDome()\r\n            }\r\n        }\r\n\r\n        // console.log(\"SPAWN FUNCTION\", { fn, structure: theStructure })\r\n        let building = this.assembleBuildingFromStructure(theStructure, pos)\r\n        building.reshape(building.constrainCursor(building.pos))\r\n        return building\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Orange, Color.Red, Color.Blue, Color.Green] //, Color.Violet] //, Color.White]\r\n\r\n  color: Color = sample(World.colors).\r\n      clone().\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample(\r\n    //   [ Color.Blue ]\r\n      [Color.Cyan, Color.Vermillion, Color.Violet, Color.Chartreuse, Color.Orange, Color.Rose]\r\n  ).\r\n        clone().\r\n        lighten(0.15).\r\n        desaturate(0.8) //65)\r\n\r\n}","module.exports = __webpack_public_path__ + \"37914c496c3c503f7a53d7c9a1457b53.mp3\";","module.exports = __webpack_public_path__ + \"1b8e735649248c4c552a84996e61f241.mp3\";","module.exports = __webpack_public_path__ + \"1a607294aebce07746d6f25ffa517d80.mp3\";","module.exports = __webpack_public_path__ + \"22bdefc1e8515661fdeb8e8076820641.mp3\";","module.exports = __webpack_public_path__ + \"cf150ab26eba01503f4f6dc3d9ab47f7.mp3\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\nimport { Resources } from './Resources';\r\nimport { Sound } from 'excalibur';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n  // setTimeout(() => {\r\n  //   console.log(\"let's jam!\");\r\n  //   let jam: Sound = Resources.CraterRock //play();\r\n  //   jam.play()\r\n  // }, 1500)\r\n  // jam.oncomplete = () => jam.play()\r\n});\r\n"],"sourceRoot":""}