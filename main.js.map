{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/values/DeviceSize.ts","webpack:///./src/Util.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Machine.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/models/Structure.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/actors/Device.ts","webpack:///./src/values/Scale.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Hud/Palette.ts","webpack:///./src/actors/Hud/CardBody.ts","webpack:///./src/actors/Hud/CardTitle.ts","webpack:///./src/actors/Hud/Card.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MediumRoomThreeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/MissionControlView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/actors/player.ts","webpack:///./src/strategies/ProductionStrategy.ts","webpack:///./src/strategies/CapacityBasedProduction.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/images/workstation-plain.svg","webpack:///./src/images/houseplant-plain.svg","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/models/MechanicalOperation.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","fifth","eighth","excalibur_1","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","deleteByValueOnce","index","indexOf","eachCons","measureDistance","b","drawLine","ctx","lineWidth","Color","White","beginPath","moveTo","x","y","lineTo","strokeStyle","toRGBA","stroke","drawRect","rectangle","edgeWidth","color","filled","width","height","main","fillStyle","fillRect","edge","strokeRect","sleep","ms","Promise","resolve","setTimeout","shuffle","sort","zip","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","MissionControlView_1","MissionControlView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","SurfaceRoadView_1","SurfaceRoadView","SmallDomeThreeView_1","SmallDomeThreeView","MidDomeView_1","MidDomeView","BigDomeView_1","BigDomeView","SmallRoomThreeView_1","SmallRoomThreeView","MediumRoomView_1","MediumRoomView","LargeRoomView_1","LargeRoomView","HugeRoomView_1","HugeRoomView","MediumRoomThreeView_1","MediumRoomThreeView","structureViews","Orientation_1","Util_1","Graph_1","SpaceFunction_1","DeviceSize_1","DevicePlace","pos","this","_super","structure","planet","_this","built","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","level","devices","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","currentlyViewing","collisionType","CollisionType","PreventCollision","nameLabel","Label","levelLabel","fontSize","darken","__extends","levelUp","text","spaceFunction","description","draw","delta","aabb","processedColor","forEach","device","getCenter","measureText","update","engine","produce","constrainCursor","clone","reshape","afterConstruct","handleClick","_pos","slots","nodes","getWidth","getHeight","devicePlaces","graph","supergraph","Graph","g","rootNode","findOrCreate","_i","_a","child","slot","parentSlot","childNode","redeem","res","gather","populate","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","find","bldg","edgeColor","lighten","mainColor","colorBase","clr","Red","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","closestBuildingByType","building","matchingSlot","compass_1","compass","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","updateName","hasPlaceForDevice","nextDevicePlace","getDevices","allSpaceFunctions","spaceFn","matched","unseenDevices","machines","machine","matchingDevice","sf","Actor","PureValue","Power","Oxygen","Water","Shelter","Hope","Joy","Wisdom","Wealth","Beauty","Wonder","allValues","emptyMarket","supply","demand","availableCapacity","market","sumMarkets","ea","eb","newMarket","sa","da","_b","ResourceBlock","Biomass","Ore","Data","Meal","Idea","Mineral","Bioplasma","Alloy","Algorithm","Argent","Aurum","blockColors","Green","Blue","Yellow","cStep","Viridian","DarkGray","LightGray","Orange","blockColor","block","desaturate","t","setPrototypeOf","__proto__","constructor","create","__assign","assign","arguments","Economy_1","MechanicalOperation_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","plant","workstation","Violet","store","mechanicalOperations","generate","recipe","spawn","Machine","operation","type","image","prereqs","economy","forDome","concretize","CommandCenter","OxygenExtractor","WaterCondensingMachine","SolarCell","StudyMachine","Workstation","Desk","Bookshelf","Fridge","Stove","Bed","Houseplant","capacity","MetalStorage","ResearchServer","Orchard","AlgaeVat","Cabin","Arbor","Botany","CloningVat","productionTime","DissolutionVat","PlasmaBank","Fabricator","OreRefinery","MiningDrill","Megafabricator","Mainframe","Preserve","Microcity","LogicCrystal","allMachines","Left","Up","Down","orientation","Error","Machine_1","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","Structure","view","zoom","Gray","Corridor","Ladder","MainTunnel","second","MissionControl","SurfaceRoad","first","Dome","CommonArea","SmallRoomThree","SmallRoomTwo","SmallDome","MediumRoom","MediumRoomThree","LargeRoom","HugeRoom","SmallDomeThree","seventh","MidDome","LargeDome","Arcology","sixth","allStructures","SpaceFunction","LivingQuarters","Barracks","Kitchen","LifeSupportPod","Retreat","CloneMatrix","ReadingRoom","Library","Study","Lab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Farm","Factory","ComputerCore","Structure_1","retrieveResource","resource","Device","initialPos","product","inUse","imageLoaded","Image","onload","src","drawImage","imageX","imageY","iv","bx","by","yOff","produced","blockSize","interact","citizen","request","worked","op","recipe_1","carrying","some","it","consumes","includes","isCarryingUnique","consumed","drop","progressBar","workTime","sent","carry","produces","console","warn","requires","has","label","store_1","dispense","stores","res_1","stored","generationTime","generates","snap","snapped","position","majorUnit","fourth","minorUnit","minorScale","empty","edges","edgesInverse","isEmpty","node","newNode","contains","testNode","measure","tolerance","dfs","dst","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","path","steps","srcIndex","reverse","Resources_1","Game","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","start","loader","Loader","key","Resources","addResource","citizenSpeed","Engine","Palette","all","onButtonClick","onButtonEnter","comprehend","comprehended","makePalette","_element","left","canvas","offsetLeft","top_1","offsetTop","style","top","updateBuilt","every","prereq","parentElement","removeChild","document","createElement","border","body","appendChild","btn","buttonFactory","onmouseenter","onclick","bg","fg","paletteButton","textContent","display","fontFamily","fontWeight","padding","textTransform","background","onmouseover","saturate","onmouseleave","CardBody","entity","values","add","notes","fontStyle","FontStyle","Italic","show","econ","join","CardTitle","Black","announce","CardTitle_1","CardBody_1","Card","title","x0","cardBody","y0","ix","iy","present","EconomicValue","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","allValues_1","updateView","updatedEconomy","allValues_2","ResourceListEntry","resourceBlock","icon","credit","amt","ResourceListEntry_1","ResourcesList","entries","rx","ry","entry","increment","ResourcesList_1","EconomyView_1","StatusAnalysisView","w","h","brand","ty","version","resources","popLabel","messageLabel","incrementResource","setMessage","showEconomy","showPopCap","cap","StatusAnalysisView_1","Card_1","Palette_1","Hud","game","onBuildingSelect","onMachineSelect","onFunctionSelect","canvasWidth","canvasHeight","status","displayInfo","showCard","structurePalette","structuresForPalette","machinePalette","functionPalette","functionsForPalette","card","resourceGathered","updateDetails","rebuildPalettes","updatePalettes","updateEconomy","updateMaxPop","maxPop","updateBuildingPalette","updateMachinePalette","updateFunctionPalette","builtStructures","findAllDevices","builtMachines","machinesForPalette","builtReifiedFunctions","builtFunctions","rf","UIActor","_1","devicePlaceSize","devicePlaceCount","floorHeight","originSlot","pickingOrigin","maxHeight","getTop","setHeight","drawShape","xoff","yoff","bezierCurveTo","rect","halfWidth","slotHeights","heights","y1","btm","lst","right","slotCount","theSlots","Device_1","machine_1","place","theDevice","slotY","flagX","flagY","arc","PI","closePath","wallColor","floorColor","leftSlot","rightSlot","originX","newCursor","setWidth","abs","ex","Player","ProductionStrategy","pawn","isActive","sleepInterval","currentPlanet","recipes","operations","attempt","pause","setInterval","workRecipe","ingredient","gatherBlock","knowsRecipe","maker","closestDeviceByType","visitDevice","performRecipeTask","storeBlock","storesDesiredBlock","openStore","gathered","generatesDesiredBlock","gen","pathTo","glideTo","CapacityBasedProduction","storeWithCapacity","storage_1","recipeForStoredResource","Game_1","CapacityBasedProduction_1","Citizen","walkSpeed","workInProgress","productionStrategy","isWorking","work","now","Date","getTime","progress","workStarted","workDuration","carried","px","pw","py","isCarrying","carryingCopy","resToFind","actions","asPromise","duration","reject","pathBetween","pop","Citizen_1","Population","citizens","increase","home","NavigationTree","seekPath","origin","dest","closestNode","input","output","NavigationTree_1","Colony","currentlyConstructing","navTree","placeBuilding","buildNavTree","structureTypes","st","destination","srcNode","destNode","machineTypes","ctrl","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","yBase","peak","mtnWidth","PlanetBackground","PlanetBackground_1","Colony_1","Population_1","Planet","hud","onBuildingHover","depth","createLayer","layerHeight","population","set","theLayer","theEconomy","popularDemand","closestDevice","theEconomyWithoutPeople","val","Planet_1","player_1","Hud_1","Construct","dragging","defaultMessage","placingFunction","buildIt","startConstructing","player","prepareNextBuilding","camera","onActivate","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction_1","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","Esc","onDeactivate","off","nextMissingStructureOrFunction","reqs","requiredStructuresAndFunctions","req","actualStructureNames","actualFunctionNames","actualNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","spawnFunction","anotherBuilding","assembleBuildingFromStructure","theStructure","requiredStructureList","Scene","World","colors","Cyan","Vermillion","bestowName","sword","Sword","Texture","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([65,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.fifth; break;\r\n        case DeviceSize.Large: sz = major.eighth + major.third; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport const deleteByValueOnce = (arr, elem) => {\r\n  let index = arr.indexOf(elem);\r\n  if (index !== -1) arr.splice(index, 1);\r\n}\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  // if (edgeWidth > 0) {\r\n  //   let edge = Color.White;\r\n  //   ctx.fillStyle = edge.toRGBA();\r\n  //   ctx.fillRect(x, y, width, height)\r\n  // }\r\n\r\n  if (filled) {\r\n    let main = color;\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x, //+ edgeWidth,\r\n      y, //+ edgeWidth,\r\n      width, // - edgeWidth * 2,\r\n      height // - edgeWidth * 2\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White;\r\n    ctx.strokeStyle = edge.toRGBA();\r\n    ctx.lineWidth=edgeWidth\r\n    // ctx.strokeStyle = Stroke.So\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}\r\n\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function shuffle(arr) {\r\n   return arr.sort(() => Math.random() > 0.5 ? 1 : -1) \r\n}\r\n\r\nexport const zip = (a, b) => a.map((e,i) => [e, b[i]])","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { MissionControlView } from './MissionControlView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\nimport { SmallDomeThreeView } from './SmallDomeThreeView';\r\nimport { MidDomeView } from './MidDomeView';\r\nimport { BigDomeView } from './BigDomeView';\r\nimport { SmallRoomThreeView } from './SmallRoomThreeView';\r\nimport { MediumRoomView } from './MediumRoomView';\r\nimport { LargeRoomView } from './LargeRoomView';\r\nimport { HugeRoomView } from './HugeRoomView';\r\nimport { MediumRoomThreeView } from './MediumRoomThreeView';\r\n\r\n\r\nconst structureViews: { [key: string]: typeof Building } = {\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    MissionControlView,\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n}\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    MissionControlView,\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n    //CorridorView,\r\n    //CommonAreaView,\r\n    //DomeView,\r\n    //MissionControlView,\r\n    //TunnelView,\r\n    //ArcologyView,\r\n    //LadderView,\r\n    //MineView,\r\n    //SurfaceRoadView,\r\n\r\n    structureViews\r\n\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, drawRect, deleteByValue } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { World } from \"../../models/World\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0 //.1\r\n\r\n    nameLabel: Label\r\n    levelLabel: Label\r\n\r\n    built: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    level: number = 1\r\n\r\n    spaceFunction: SpaceFunction\r\n\r\n    private devices: Device[] = []\r\n    givenName: string\r\n\r\n    constructor(pos: Vector, public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            this.planet.currentlyViewing = this\r\n            // console.log(\"HOVER ON\", { building: this })\r\n        })\r\n\r\n        // this.on('pointerdown', () => {\r\n        //     console.log(\"CLICKED BUILDING\", { building: this })\r\n        //     this.levelUp();\r\n        // })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        // this.nameLabel.fontSize = 11\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.levelLabel = new Label(`Lvl. ${this.level}`, 0, 0, 'Helvetica')\r\n        this.levelLabel.fontSize = 6\r\n        this.levelLabel.color = Color.White.darken(0.2)\r\n\r\n        // this.givenName = World.bestowName() \r\n    }\r\n\r\n    levelUp() {\r\n        this.level += 1\r\n        this.levelLabel.text = `Lvl. ${this.level}`\r\n    }\r\n\r\n    get name() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.name // `${this.givenName} ${this.spaceFunction.name}`;\r\n        } else {\r\n            return this.structure.name //`${this.givenName} ${this.structure.name}`;\r\n        }\r\n    }\r\n\r\n    get description() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.description\r\n        } else {\r\n            return this.structure.description\r\n        }\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        this.devices.forEach(device => device.draw(ctx, delta))\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n            // this.levelLabel.text = `Lvl. ${this.level}`\r\n            // this.levelLabel.pos = this.getCenter()\r\n            // this.levelLabel.pos.y += 10\r\n            // this.levelLabel.pos.x -= ctx.measureText(this.structure.name).width / 4\r\n            // this.levelLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let debug = false;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = false\r\n        if (showDevicePlaces && this.devicePlaces().length > 0) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    1,\r\n                    Color.White,\r\n                    false\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n        let tryProduce = this.built;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.produce(this.step));\r\n        }\r\n        this.step += 1\r\n    }\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public populate(pos: Vector) {\r\n        this.planet.populate(pos) //this.pos)\r\n    }\r\n\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        // device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        this.updateName()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices\r\n    }\r\n\r\n    private updateName() {\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let matched = true;\r\n            let unseenDevices = this.devices.slice()\r\n\r\n            let sf = new spaceFn()\r\n            sf.machines.forEach(machine => {\r\n                let matchingDevice = unseenDevices.find(d => d.machine instanceof machine)\r\n                if (!matchingDevice) { matched = false; }\r\n                unseenDevices = deleteByValue(unseenDevices, matchingDevice)\r\n                // return true\r\n            })\r\n            return matched;\r\n        })\r\n        if (fn) {\r\n            let sf = new fn()\r\n            this.spaceFunction = sf\r\n            this.nameLabel.text = sf.name //label\r\n        }\r\n    }\r\n\r\n    // get function() { }\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport const allValues = [\r\n    PureValue.Power,\r\n    PureValue.Oxygen,\r\n    PureValue.Water,\r\n    PureValue.Shelter,\r\n    PureValue.Hope,\r\n    PureValue.Wisdom,\r\n    PureValue.Wealth,\r\n    PureValue.Beauty,\r\n    PureValue.Wonder\r\n]\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return Math.floor(market[value].supply - market[value].demand)\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply,\r\n            demand,\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Biomass = 'Biomass',\r\n    Ore = 'Ore',\r\n    Data = 'Data',\r\n    // derived\r\n    Meal = 'Meal',\r\n    Idea = 'Idea',\r\n    Mineral = 'Mineral',\r\n    Bioplasma = 'Bioplasma',\r\n    // higher-order\r\n    Alloy = \"Alloy\",\r\n    Algorithm = \"Algorithm\",\r\n\r\n    // superb\r\n    Argent = \"Argent\",\r\n    Aurum = \"Aurum\",\r\n}\r\n\r\nlet cStep = 0.3\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Biomass: Color.Green,\r\n    Data: Color.Blue.lighten(cStep),\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(cStep),\r\n    Idea: Color.Blue.lighten(cStep*2), //.desaturate(cStep),\r\n    Ore: Color.Red.darken(cStep),\r\n\r\n    Bioplasma: Color.Viridian,\r\n\r\n    Alloy: Color.DarkGray.darken(cStep), //(cStep),\r\n    Algorithm: Color.Blue.darken(cStep), //.desaturate(cStep),\r\n\r\n    Argent: Color.LightGray.lighten(cStep),\r\n    Aurum: Color.Orange.lighten(cStep),\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    return baseColor.desaturate(0.1) //.lighten(0.1) //.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Color, FontStyle, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { MechanicalOperation, mechanicalOperations } from \"./MechanicalOperation\";\r\nimport { shuffle } from \"../Util\";\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\nconst plant = require('../images/houseplant-plain.svg')\r\nconst workstation = require('../images/workstation-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n    plant,\r\n    workstation,\r\n}\r\n\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nlet { store, generate, recipe, spawn } = mechanicalOperations\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n    size: DeviceSize = DeviceSize.Small\r\n    operation: MechanicalOperation = { type: 'noop' }\r\n    image = images.vat\r\n    prereqs: (typeof Machine)[] = []\r\n    economy: Economy = emptyMarket()\r\n    forDome: boolean = false\r\n\r\n    concretize(): Machine { return this; } //return shuffle(allMachines)[0] }\r\n    // concretions: Machine[] = []\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command Console'\r\n    description = 'gather resources...'\r\n    operation = store(\r\n        [ResourceBlock.Data, ResourceBlock.Ore],\r\n        // ResourceBlock.Meal,\r\n        // ResourceBlock.Mineral\r\n    )\r\n    image = images.bench\r\n    size = DeviceSize.Medium\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 1, demand: 0 },\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 3, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 5, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H20 Condenser'\r\n    description = 'have a drink'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 4, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n/// small subsurface\r\nexport class StudyMachine extends Machine {\r\n    operation = recipe(\r\n        [ ResourceBlock.Idea, ResourceBlock.Idea, ResourceBlock.Idea ],\r\n        ResourceBlock.Data\r\n    )\r\n    // concretions: Machine[] = [Workstation, Desk]\r\n\r\n    concretize(): Machine { return new (shuffle([Workstation, Desk])[0])() }\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    description = 'get to work'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n\r\n    // color = Blue\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    description = 'hackety hack'\r\n    prereqs = [ Bookshelf ]\r\n    color = Blue\r\n    image = images.workstation\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n\r\n    concretize() { return this }\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    operation = generate(ResourceBlock.Idea)\r\n    image = images.bookshelf\r\n    prereqs = [ OxygenExtractor, Desk ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    operation = store([ResourceBlock.Meal], 6)\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    operation = recipe(\r\n        [ResourceBlock.Biomass, ResourceBlock.Biomass],\r\n        ResourceBlock.Meal\r\n    )\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    description = 'sweet dreams'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    description = 'so nice'\r\n    prereqs = [ Bed ]\r\n    // produces = ResourceBlock.Food\r\n    operation = generate(ResourceBlock.Biomass)\r\n    capacity = 1\r\n    color = Green\r\n    image = images.plant\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Water: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\n// medium\r\n\r\nexport class MetalStorage extends Machine {\r\n    name = 'Metal Storage'\r\n    description = 'contain minerals and alloys?'\r\n    operation = store([ResourceBlock.Mineral, ResourceBlock.Alloy], 8)\r\n    prereqs = [Bookshelf]\r\n    color = Red\r\n    size = DeviceSize.Medium\r\n}\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    operation = store([ResourceBlock.Data, ResourceBlock.Algorithm], 10)\r\n    image = images.server\r\n    prereqs = [Bookshelf]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   operation = generate(ResourceBlock.Biomass)\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Oxygen: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   description = 'home on the plains'\r\n   operation = recipe(\r\n       [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n       ResourceBlock.Meal\r\n   )\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    description = 'arbor around the clock'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    description = 'where there is a will'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    description = 'plant lab'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'we all grow'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = spawn()\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class DissolutionVat extends Machine {\r\n    name = 'Dissolution Vat'\r\n    description = 'back to basics'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = recipe(\r\n        [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n        ResourceBlock.Bioplasma\r\n    )\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [PlasmaBank]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class PlasmaBank extends Machine {\r\n    name = 'Bioplasm Bank'\r\n    description = 'hold on'\r\n    operation = store([ ResourceBlock.Bioplasma ])\r\n    prereqs = [AlgaeVat]\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    description = 'you made that'\r\n    operation = recipe(\r\n        [ResourceBlock.Mineral, ResourceBlock.Mineral],\r\n         ResourceBlock.Alloy\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n}\r\n\r\nexport class OreRefinery extends Machine {\r\n    name = 'Refinery'\r\n    description = 'wheat from the chaff'\r\n    operation = recipe(\r\n        [ResourceBlock.Ore, ResourceBlock.Ore, ResourceBlock.Ore],\r\n         ResourceBlock.Mineral\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation, Fabricator]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\n\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    description = 'ore away'\r\n    operation = generate(ResourceBlock.Ore)\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    operation = recipe(\r\n        [ResourceBlock.Alloy, ResourceBlock.Algorithm],\r\n        ResourceBlock.Argent\r\n    )\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class Mainframe extends Machine {\r\n    name = 'Mainframe'\r\n    size = DeviceSize.Large\r\n    color = Blue\r\n    prereqs = [ResearchServer]\r\n    operation = recipe(\r\n        [ ResourceBlock.Data, ResourceBlock.Data ],\r\n        ResourceBlock.Algorithm\r\n    )\r\n    image = images.server\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 6 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    // operation = generate()\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n        Oxygen: { supply: 12, demand: 0 },\r\n    }\r\n}\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n\r\n    OreRefinery,\r\n    PlasmaBank,\r\n    DissolutionVat,\r\n    MetalStorage,\r\n    Mainframe,\r\n]","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    color: Color = Color.Gray\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MissionControl ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MissionControl ],\r\n        [Orientation.Right]: [  Dome, MissionControl ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    description: string = 'Biome sweet biome';\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.eighth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n\r\n    prereqs = [\r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n    // two small slots\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 2 * major.eighth\r\n    height = 2 * major.third\r\n    // two medium slots...\r\n    \r\n    machines = midBelow\r\n}\r\n\r\nexport class MediumRoomThree extends CommonArea {\r\n    name = 'Mid Room (3)'\r\n    prereqs = [ MediumRoom ]\r\n    view = 'MediumRoomThreeView'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.third\r\n\r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 4 * major.eighth\r\n    height = 3 * major.fifth\r\n\r\n    // two big slots?\r\n    machines = largeBelow\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.eighth\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 4 * major.seventh\r\n    height = 3 * major.seventh\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 6 * major.eighth\r\n    height = 5 * major.eighth\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 8 * major.eighth\r\n    height = 6 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n\r\n}\r\n\r\n//////\r\n\r\nexport class MissionControl extends Structure {\r\n    name: string = 'Mission Control';\r\n    description: string = 'Keeping everything on track';\r\n    view: string = 'MissionControlView';\r\n    width: number = 6 * major.eighth\r\n    height: number = 1 * major.sixth\r\n    zoom = 0.1\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = [ CommandCenter ]\r\n}\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        MediumRoomThree,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine, Mainframe } from './Machine';\r\nimport { Color } from 'excalibur';\r\n\r\nexport class SpaceFunction {\r\n     name: string = '(generic)'\r\n     description: string = '(generic description)'\r\n     machines: (typeof Machine)[] = []\r\n     color: Color = Color.Gray\r\n\r\n     prereqs: (typeof SpaceFunction)[] =  [] \r\n}\r\n\r\nexport class LivingQuarters extends SpaceFunction {\r\n     name = 'Living Quarters'\r\n     description = 'good night'\r\n     machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n     name = 'Barracks'\r\n     description = 'sleep tight'\r\n     machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nexport class Kitchen extends SpaceFunction {\r\n     name = 'Kitchen'\r\n     description = 'stay together'\r\n     machines = [ Stove, Fridge ]\r\n}\r\n\r\nexport class LifeSupportPod extends SpaceFunction {\r\n     name = 'Life Support'\r\n     description = 'keep it going'\r\n     machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n     name = 'Retreat'\r\n     description = 'take it easy'\r\n     machines = [ Cabin, Cabin ]\r\n}\r\n\r\nexport class CloneMatrix extends SpaceFunction {\r\n     name = 'Clone Matrix'\r\n     description = 'clone home'\r\n     machines = [ CloningVat, CloningVat ]\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n     name = 'Reading Room'\r\n     description = 'butterflies in the sky'\r\n     machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nexport class Library extends SpaceFunction {\r\n     name = 'Library'\r\n     description = 'take a look'\r\n     machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n}\r\n\r\nclass Study extends SpaceFunction {\r\n     name = 'Study'\r\n     description = 'plan it out'\r\n     machines = [ StudyMachine, Bookshelf ]\r\n}\r\n\r\nclass Lab extends SpaceFunction {\r\n     name = 'Lab'\r\n     description = 'make it happen'\r\n     machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nexport class Archive extends SpaceFunction {\r\n     name = 'Archive'\r\n     description = 'write it down'\r\n     machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n     name = 'Arboretum'\r\n     description = 'walk it out'\r\n     machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n     name = 'Algae Farm'\r\n     description = 'make do'\r\n     machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nclass SolarArray extends SpaceFunction {\r\n     name = 'Solar Array'\r\n     description = 'warm up'\r\n     machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nclass Workshop extends SpaceFunction {\r\n     name = 'Workshop'\r\n     description = 'take form'\r\n     machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\nclass Nursery extends SpaceFunction {\r\n     name = 'Nursery'\r\n     description = 'quiet please'\r\n     machines = [ Houseplant, Houseplant, Houseplant ]\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n     name = 'Farm'\r\n     description = 'food for the masses'\r\n     machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n     name = 'Factory'\r\n     description = 'production lines'\r\n     machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\n\r\nexport class ComputerCore extends SpaceFunction {\r\n     name = 'Computer Core'\r\n     description = 'let us calculate'\r\n     machines = [ Mainframe, Mainframe ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    Lab,\r\n\r\n    ComputerCore,\r\n]","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\nimport { Recipe, ResourceStorage } from \"../models/MechanicalOperation\";\r\nimport { range, deleteByValueOnce, drawRect } from \"../Util\";\r\n\r\ninterface RetrieveResource {\r\n    type: 'retrieve'\r\n    resource: ResourceBlock\r\n    // count: number\r\n}\r\n\r\ninterface WorkRecipe {\r\n    type: 'work'\r\n    recipe: Recipe\r\n}\r\n\r\ninterface StoreResource {\r\n    type: 'store'\r\n    resource: ResourceBlock\r\n}\r\n\r\nexport function retrieveResource(res: ResourceBlock): RetrieveResource {\r\n    return {\r\n        type: 'retrieve',\r\n        resource: res,\r\n        // count: 1\r\n    }\r\n}\r\n\r\nexport type InteractionRequest = StoreResource | RetrieveResource | WorkRecipe // | ...\r\n\r\nexport class Device extends Actor {\r\n    // could also use for storage?\r\n    product: ResourceBlock[] = []\r\n    nameLabel: Label\r\n    image: any\r\n    building: Building\r\n    inUse: boolean = false\r\n\r\n    imageLoaded: boolean = false\r\n\r\n    constructor(\r\n        public machine: Machine,\r\n        initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = () => { this.imageLoaded = true }\r\n        this.image.src = machine.image\r\n    }\r\n\r\n    get imageX() { return this.pos.x - this.getWidth() / 2 }\r\n    get imageY() { return this.pos.y - this.getHeight() / 2 - 10 }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (this.imageLoaded) {\r\n            // drawRect(\r\n            //     ctx,\r\n            //     { x: this.imageX, y: this.imageY, width: this.getWidth(), height: this.getHeight ()},\r\n            //     2,\r\n            //     Color.Green\r\n            // )\r\n\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.imageX,\r\n                this.imageY,\r\n\r\n                // this.pos.y - this.getHeight() / 2 - 10,\r\n                this.getWidth(),\r\n                this.getHeight()\r\n            )\r\n        }\r\n\r\n        let iv = new Vector(this.imageX, this.imageY) //this.pos //getCenter()\r\n        // iv.y += this.getHeight() / 2\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = iv // this.getCenter()\r\n            // this.nameLabel.pos.x -= 10\r\n            // this.nameLabel.pos.y += 8 + this.getHeight()/2\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let { x: bx, y: by } = iv //bx = this.x - this.getWidth()/2 + 5, by = this.y - 23\r\n        let blockSize = 5\r\n        let yOff = this.nameLabel.fontSize\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).toRGBA()\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize + yOff, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get operation() { return this.machine.operation }\r\n\r\n    async interact(citizen: Citizen, request: InteractionRequest): Promise<boolean> {\r\n        if (this.inUse) {\r\n            return false\r\n        }\r\n\r\n        let worked = false\r\n        let op = this.operation\r\n        if (op.type === 'recipe' && request.type === 'work') {\r\n            let recipe: Recipe = op\r\n            // do we have all the things?\r\n            if (citizen.carrying.some(it => recipe.consumes.includes(it))) {\r\n                this.inUse = true\r\n                if (citizen.isCarryingUnique(recipe.consumes)) {\r\n                    recipe.consumes.forEach(consumed => citizen.drop(consumed))\r\n                    await citizen.progressBar(recipe.workTime)\r\n                    citizen.carry(recipe.produces)\r\n\r\n                    worked = true\r\n                } else {\r\n                    console.warn(\"not carrying all requirements?\", { requires: recipe.consumes, has: citizen.carrying })\r\n                }\r\n                this.inUse = false\r\n            }\r\n        } else if (op.type === 'store') {\r\n            // accept it! (whatever you have that matches...?)\r\n            let store: ResourceStorage = op\r\n            if (request && request.type === 'retrieve') { // assume dispense request for now?\r\n                this.inUse = true\r\n                worked = this.dispense(citizen, request)\r\n                if (worked) {\r\n                    await citizen.progressBar(500)\r\n                }\r\n                this.inUse = false\r\n            } else if (request && request.type === 'store' &&\r\n                citizen.carrying.some(it => store.stores.includes(it))) { // maybe trying to store?\r\n                if (this.product.length < store.capacity) {\r\n                    let res = null\r\n                    if (store.stores.some(stored => { res = citizen.drop(stored); return res })) {\r\n                        if (res) {\r\n                            this.product.push(res)\r\n                            this.building.redeem(res)\r\n                            worked = true\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.warn(\"no capacity in this store!!\")\r\n                    worked = false\r\n                }\r\n            }\r\n        } else if (op.type === 'generator') {\r\n            this.inUse = true\r\n            worked = this.dispense(citizen, request)\r\n            if (worked) {\r\n                await citizen.progressBar(500)\r\n            }\r\n            this.inUse = false\r\n        }\r\n\r\n        return worked\r\n    }\r\n\r\n    private dispense(citizen: Citizen, request: InteractionRequest) {\r\n        if (request && request.type === 'retrieve') {\r\n            let canFulfill = this.product.find(p => p === request.resource)\r\n            if (canFulfill) {\r\n                deleteByValueOnce(this.product, request.resource)\r\n                citizen.carry(request.resource)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    public produce(step: number) {\r\n        if (this.machine.operation.type === 'generator') {\r\n            if (step % this.machine.operation.generationTime === 0) {\r\n                if (this.product.length < this.machine.operation.capacity) {\r\n                    this.product.push(this.machine.operation.generates)\r\n                }\r\n            }\r\n\r\n        } else if (this.machine.operation.type === 'spawn') {\r\n            setTimeout(() => this.building.populate(this.pos), 100)\r\n        }\r\n    }\r\n\r\n    // todo only snap when close enough? try to prevent some mis-clicks?\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            // hmmm\r\n            allStructures,\r\n            // machines count < device slots count\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        let snapped = false\r\n        if (bldg) {\r\n            let spot = bldg.nextDevicePlace().position\r\n            let d = spot.distance(pos)\r\n            snapped = d < 150\r\n        }\r\n\r\n        if (snapped) {  //bldg && d < 300) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n            //devicePlaces()[\r\n            //    this.building.devices.length\r\n            //]\r\n        } else {\r\n            this.pos = pos\r\n        }\r\n\r\n        return snapped //!!bldg;\r\n    }\r\n\r\n    // finalize() {\r\n    // this.building.devices.push(this)\r\n    // }\r\n}","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 100\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { Color } from \"excalibur\";\r\nimport { EntityKind } from \"../../values/Entity\";\r\n\r\nexport class Palette {\r\n    private _element: HTMLDivElement;\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(\r\n        private x: number,\r\n        private y: number,\r\n        private all: EntityKind[],\r\n        private onButtonClick: (EntityKind) => any = null,\r\n        private onButtonEnter: (EntityKind) => any = null,\r\n        private comprehend = true \r\n    ) {\r\n        this.makePalette();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    updateBuilt(built: (EntityKind)[]) {\r\n        this.built = built;\r\n        if (this.comprehend) {\r\n            this.comprehended = this.all.filter((e: EntityKind) => {\r\n                let s = new e();\r\n                let prereqs: (EntityKind)[] = s.prereqs;\r\n                return prereqs.every((prereq: EntityKind) => {\r\n                    let built = this.built.some((s: EntityKind) => s === prereq);\r\n                    return built;\r\n                });\r\n            });\r\n        } else {\r\n            this.comprehended = this.built\r\n        }\r\n        this.makePalette();\r\n    }\r\n\r\n    private makePalette() {\r\n        if (this._element) {\r\n            this._element.parentElement.removeChild(this._element);\r\n        }\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.border = '1px solid white';\r\n        document.body.appendChild(this._element);\r\n        this.comprehended\r\n            .map((elem: EntityKind) => new elem())\r\n            .sort((a, b) => a.color > b.color ? -1 : 1)\r\n            .forEach(elem => {\r\n                let label = elem.name;\r\n                if (!this.built.map(m => new m().name).includes(elem.name)) {\r\n                    label += ' *';\r\n                }\r\n                let clr = elem.color;\r\n                let btn = this.buttonFactory(label, clr);\r\n                this._element.appendChild(btn);\r\n                if (this.onButtonEnter) {\r\n                    btn.onmouseenter = () => { this.onButtonEnter(elem); };\r\n                }\r\n                if (this.onButtonClick) {\r\n                    btn.onclick = () => { this.onButtonClick(elem); };\r\n                }\r\n            });\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.6).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = label;\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '9pt';\r\n        paletteButton.style.fontFamily = 'Helvetica';\r\n        paletteButton.style.fontWeight = '600';\r\n        paletteButton.style.padding = '2px';\r\n        paletteButton.style.width = '160px';\r\n        paletteButton.style.textTransform = 'uppercase';\r\n        paletteButton.style.border = '1px solid rgba(255,255,255,0.08)';\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA();\r\n            paletteButton.style.color = fg.toRGBA();\r\n        };\r\n        return paletteButton;\r\n    }\r\n}\r\n","import { Label, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { PureValue } from \"../../models/Economy\";\r\nimport { SmallDomeThreeView } from \"../Building/SmallDomeThreeView\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\n\r\nexport class CardBody extends Actor {\r\n    description: Label\r\n    values: Label\r\n    notes: Label\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building, x: number, y: number) {\r\n        super(x, y, 0, 0)\r\n        // resources / recipes\r\n\r\n        this.values = new Label('')\r\n        this.values.fontSize = 10\r\n        this.add(this.values)\r\n\r\n        this.notes = new Label('behavioral notes', 0, 30)\r\n        this.notes.fontSize = 11\r\n        this.add(this.notes)\r\n\r\n        this.description = new Label('description', 0, 60)\r\n        this.description.fontSize = 12\r\n        this.description.fontStyle = FontStyle.Italic\r\n        this.add(this.description)\r\n\r\n        this.show(entity)\r\n    }\r\n\r\n    show(entity: Machine | Structure | SpaceFunction | Building) {\r\n        if (entity) {\r\n            this.description.text = entity.description;\r\n\r\n            if (entity instanceof Machine) {\r\n                let values = []\r\n                let econ = entity.economy\r\n                for (let value in PureValue) {\r\n                    let { supply, demand } = econ[value]\r\n                    let delta = supply - demand\r\n                    if (delta > 0) {\r\n                        values.push(`+${delta} ${value}`)\r\n                    } else if (delta < 0) {\r\n                        values.push(`${delta} ${value}`)\r\n                    }\r\n                }\r\n                this.values.text = values.join(' | ')\r\n\r\n                // let theNotes = []\r\n                this.notes.text = ''\r\n                let op = entity.operation\r\n                if (op) {\r\n                    if (op.type === 'recipe') {\r\n                        this.notes.text = `Turns ${op.consumes.join(' + ')} -> ${op.produces}.`\r\n                    } else if (op.type === 'generator') {\r\n                        this.notes.text = `Generates ${op.generates}.`\r\n                    } else if (op.type === 'store') {\r\n                        this.notes.text = `Stores ${op.stores.join(' + ')}`\r\n                    } else if (op.type === 'spawn') {\r\n                        this.notes.text = 'Decants clones.'\r\n                    }\r\n                }\r\n                \r\n                // if (entity.consumes && entity.produces) {\r\n                //     this.notes.text = `Turns ${entity.consumes} into ${entity.produces}.`\r\n                // } else if (entity.produces) {\r\n                //     this.notes.text = `Generates ${entity.produces}.`\r\n                // } // if entity.stores...?\r\n            } else { //} if (entity instanceof Structure) {\r\n                this.values.text = ''\r\n                this.notes.text = ''\r\n            }\r\n\r\n        }\r\n        // other bonuses? behaviors?\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nexport class CardTitle extends Actor {\r\n    \r\n    name: Label;\r\n    type: Label;\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building, x: number, y: number) {\r\n        super(x, y, 14, 32, entity && entity.color || Color.Gray);\r\n        this.name = new Label(entity && entity.name || '..', 20, 16)\r\n        this.name.fontSize = 28\r\n        this.name.color = Color.Black\r\n        this.add(this.name)\r\n\r\n        this.type = new Label('..', 232, 16)\r\n        this.type.fontSize = 10\r\n        this.type.color = Color.Gray\r\n        this.type.fontStyle = FontStyle.Italic\r\n        this.add(this.type)\r\n\r\n        if (entity) {\r\n            this.announce(entity)\r\n        }\r\n    }\r\n\r\n    announce(entity: Machine | Structure | SpaceFunction | Building): any {\r\n        this.name.text = entity.name\r\n        this.color = entity.color.desaturate(0.5).darken(0.2)\r\n        if (entity instanceof Machine) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n        if (entity instanceof Structure) { this.type.text = 'Structure' }\r\n        if (entity instanceof SpaceFunction) { this.type.text = 'Function' }\r\n        if (entity instanceof Building) { this.type.text = 'Building' }\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { CardTitle } from \"./CardTitle\";\r\nimport { CardBody } from \"./CardBody\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\n\r\nexport class Card extends Actor {\r\n    title: CardTitle\r\n    cardBody: CardBody\r\n    image: any\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building, x: number, y: number) {\r\n        super(x + 160, y + 90, 320, 180, Color.White);\r\n        let x0 = -150, y0 = -50;\r\n        this.title = new CardTitle(entity, x0 - 3, y0); //x, y)\r\n        this.add(this.title);\r\n        this.cardBody = new CardBody(entity, x0 + 14, y0 + 40)\r\n        this.add(this.cardBody)\r\n\r\n        this.image = new Image();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        if (this.entity) {\r\n            if (this.entity instanceof Machine) {\r\n                let ix = this.pos.x + 48, iy = this.pos.y - 16\r\n                let isz = 92\r\n                ctx.drawImage(this.image, ix, iy, isz, isz)\r\n            }\r\n        }\r\n    }\r\n\r\n    present(entity: Machine | Structure | SpaceFunction | Building): any {\r\n        this.title.announce(entity)\r\n        this.cardBody.show(entity)\r\n\r\n        this.entity = entity\r\n        if (this.entity instanceof Machine) {\r\n            this.image.src = this.entity.image\r\n        }\r\n    }\r\n\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor } from \"excalibur\";\r\nimport { Economy, PureValue, availableCapacity, allValues } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n\r\n        let index = 0\r\n        for (let value of allValues) {\r\n            let valueLabel: EconomicValue =  new EconomicValue(value, (index++ * 34), 0)\r\n            this.valueLabels[value] = valueLabel\r\n            this.add(valueLabel)\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value of allValues) {\r\n            this.valueLabels[value].setCount(\r\n                availableCapacity(market, value)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 6, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            [ResourceBlock.Biomass]: null,\r\n            [ResourceBlock.Idea]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n            [ResourceBlock.Alloy]: null,\r\n            [ResourceBlock.Bioplasma]: null,\r\n            [ResourceBlock.Algorithm]: null,\r\n            [ResourceBlock.Argent]: null,\r\n            [ResourceBlock.Aurum]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0, Color.DarkGray.darken(0.8));\r\n        let rx0 = 0, ry0 = -2.5;\r\n        let resources = [\r\n            ResourceBlock.Meal,\r\n            ResourceBlock.Data,\r\n            ResourceBlock.Mineral,\r\n\r\n            ResourceBlock.Bioplasma,\r\n            ResourceBlock.Alloy,\r\n            ResourceBlock.Algorithm,\r\n        ];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0 + index * 16, ry = ry0 + index * 0;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n\r\n    constructor(market: Economy, w: number = 10000, h: number = 36) {\r\n        super(0,0, w, h, Color.DarkGray.darken(0.8));\r\n\r\n        let ty = 14\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+2)\r\n        brand.fontSize = 12\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.0.1\", 48, ty + 2)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(80, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 300, ty)\r\n        this.add(this.economy)\r\n\r\n        this.popLabel = new Label(\"\", 900, ty, 'Helvetica')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 1000, ty, 'Helvetica')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.messageLabel.fontStyle = FontStyle.Italic\r\n        this.add(this.messageLabel)\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n    \r\n}\r\n","import { UIActor, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, SmallRoomThree, SmallRoomTwo, MediumRoom, MidDome, SmallDome, LargeRoom, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, sumMarkets, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { Desk, Bookshelf, Machine, CloningVat, WaterCondensingMachine, OxygenExtractor, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Cabin, Orchard, SolarCell, Megafabricator, Arbor, Fabricator, MiningDrill, Preserve, Workstation, Houseplant, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Card } from \"./Card\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Palette } from \"./Palette\";\r\nimport { Building } from \"../Building\";\r\n\r\nexport class Hud extends UIActor {\r\n    private structurePalette: Palette //<Structure> \r\n    private machinePalette: Palette //<Machine>\r\n    private functionPalette: Palette\r\n    private card: Card\r\n\r\n    private status: StatusAnalysisView\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n    static machinesForPalette = allMachines\r\n    static functionsForPalette = allSpaceFunctions\r\n\r\n    constructor(\r\n        private game: Game,\r\n        protected onBuildingSelect = null,\r\n        protected onMachineSelect = null,\r\n        protected onFunctionSelect = null\r\n    ) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.status = new StatusAnalysisView(emptyMarket());\r\n        this.add(this.status)\r\n\r\n        let displayInfo = (e) => this.showCard(e)\r\n        this.structurePalette = new Palette(20, 35, Hud.structuresForPalette, onBuildingSelect, displayInfo)\r\n        this.machinePalette = new Palette(20, 300, allMachines, onMachineSelect, displayInfo) // (e) => this.showCard(e))\r\n        this.functionPalette = new Palette(220, 35, Hud.functionsForPalette, onFunctionSelect, displayInfo, false)\r\n\r\n        this.card = new Card(null, 20, 800) // game.canvasHeight - 200)\r\n        this.add(this.card)\r\n    }\r\n\r\n    setMessage(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        this.structurePalette.draw(ctx)\r\n        this.machinePalette.draw(ctx)\r\n        this.functionPalette.draw(ctx)\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true) {\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n    }\r\n\r\n    showCard(entity: Machine | Structure | SpaceFunction | Building) {\r\n        this.card.present(entity)\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n        this.updateFunctionPalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        let builtStructures =\r\n            Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n\r\n        this.structurePalette.updateBuilt(builtStructures)\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let devices = colony.findAllDevices()\r\n        let builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine))\r\n        this.machinePalette.updateBuilt(builtMachines)\r\n    }\r\n\r\n    private updateFunctionPalette(colony: Colony) {\r\n        let builtReifiedFunctions = flatSingle(colony.buildings.map(b => b.spaceFunction))\r\n        let builtFunctions = Hud.functionsForPalette.filter((fn) => builtReifiedFunctions.some(rf => rf instanceof fn))\r\n        this.functionPalette.updateBuilt(builtFunctions)\r\n    }\r\n\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomThreeView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Huge\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Large\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 2\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaceCount = 3\r\n    //devicePlaces() {\r\n    //    let w = this.getWidth()/2\r\n    //    let x = this.pos.x + w;\r\n    //    let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n    //    let ds = [\r\n    //        new Vector(x - w / 2, y),\r\n    //        new Vector(x, y),\r\n    //        new Vector(x + w / 2, y),\r\n    //    ]\r\n\r\n    //    return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    //}\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { MissionControl } from \"../../models/Structure\";\r\nimport { range, eachCons, measureDistance, drawRect } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MissionControlView extends Building {\r\n    hideBox = true\r\n\r\n    devicePlaces() {\r\n        return this.nodes().map(n => {\r\n            n.y -= 20\r\n            return new DevicePlace(n, DeviceSize.Medium)\r\n        }) \r\n    }\r\n\r\n    afterConstruct() {\r\n        let { machines } = this.structure;\r\n        if (machines && machines.length > 0) {\r\n            let machine = new machines[0]();\r\n            this.devicePlaces().forEach(place => {\r\n                let theDevice = new Device(machine, place.position)\r\n                this.addDevice(theDevice)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor()\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        // a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawRect } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 12\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        let wallColor = this.processedColor() //.darken(0.4)\r\n        let floorColor = this.processedColor().darken(0.4)\r\n\r\n        drawRect(ctx, this.aabb(), 0.5, wallColor)\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight,\r\n              width: this.getWidth(), height: this.floorHeight },\r\n              0.2,\r\n              floorColor\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    devicePlaceSize: DeviceSize = DeviceSize.Small\r\n    devicePlaceCount: number = 2\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Planet } from \"../actors/Planet/Planet\";\r\nimport { Device, retrieveResource } from \"../actors/Device\";\r\nimport { MechanicalOperation, Recipe } from \"../models/MechanicalOperation\";\r\nimport { Citizen } from \"../actors/Citizen\";\r\nimport { sleep } from \"../Util\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nexport abstract class ProductionStrategy {\r\n    protected isActive: boolean = false;\r\n    constructor(protected pawn: Citizen) { }\r\n    protected abstract async apply();\r\n    protected get planet(): Planet { return this.pawn.currentPlanet; }\r\n    protected get devices(): Device[] { return this.planet.colony.findAllDevices(); }\r\n    protected get operations(): MechanicalOperation[] { return this.devices.map(d => d.operation); }\r\n    protected get recipes(): Recipe[] {\r\n        let recipes: Recipe[] = [];\r\n        this.operations.forEach(op => {\r\n            if (op.type === 'recipe') {\r\n                recipes.push(op);\r\n            }\r\n        });\r\n        return recipes;\r\n    }\r\n\r\n    async attempt(): Promise<void> {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n        if (!this.isActive) {\r\n            // note apply will need to set this.isActive around its critical section\r\n            await this.apply();\r\n        }\r\n\r\n        await this.pause()\r\n        setInterval(() => { this.attempt() }, this.sleepInterval)\r\n    }\r\n\r\n    sleepInterval: number = 250\r\n    protected async pause() {\r\n        await sleep(this.sleepInterval)\r\n    }\r\n\r\n    protected async workRecipe(recipe: Recipe) {\r\n        for (let ingredient of recipe.consumes) {\r\n            await this.gatherBlock(ingredient);\r\n        }\r\n        let knowsRecipe = (d: Device) => d.operation === recipe\r\n        let maker = this.planet.colony.closestDeviceByType(this.pawn.pos, [], knowsRecipe)\r\n        if (maker) {\r\n            await this.visitDevice(maker)\r\n            await this.performRecipeTask(maker, recipe)\r\n        } else {\r\n            await this.pause()\r\n            await this.workRecipe(recipe);\r\n        }\r\n    }\r\n\r\n    protected async performRecipeTask(maker: Device, recipe: Recipe) {\r\n      let worked = await maker.interact(this.pawn, { type: 'work', recipe })\r\n      if (!worked) {\r\n          await this.pause()\r\n          console.warn(\"waiting for machine to become available...\")\r\n          await this.performRecipeTask(maker, recipe)\r\n      }\r\n    }\r\n\r\n\r\n    protected async storeBlock(res: ResourceBlock) {\r\n\r\n        let storesDesiredBlock = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.operation.capacity &&\r\n            d.operation.stores.includes(res)\r\n        let openStore = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n        let stored = false\r\n        if (openStore) {\r\n            await this.visitDevice(openStore)\r\n            if (await openStore.interact(this.pawn, { type: 'store', resource: res })) {\r\n                stored = true\r\n            }\r\n        }\r\n\r\n        if (!stored) {\r\n            await this.pause()\r\n            await this.storeBlock(res)\r\n        }\r\n    }\r\n\r\n    protected async gatherBlock(res: ResourceBlock) {\r\n        let gathered = false\r\n        let generatesDesiredBlock = (d: Device) => (d.operation.type === 'generator') &&\r\n            d.product.some(stored => res === stored)\r\n\r\n        let gen: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], generatesDesiredBlock)\r\n        if (gen) {\r\n            await this.visitDevice(gen)\r\n            if (await gen.interact(this.pawn, retrieveResource(res))) {\r\n                gathered = true\r\n            }\r\n        }\r\n        else {\r\n            let recipe = this.recipes.find(recipe => recipe.produces === res);\r\n            if (recipe) {\r\n                await this.workRecipe(recipe);\r\n                gathered = true\r\n            }\r\n        }\r\n\r\n        if (!gathered) {\r\n            await this.pause() // sleep(1000)\r\n            await this.gatherBlock(res)\r\n        }\r\n    }\r\n\r\n    private async visitDevice(device: Device) {\r\n        await this.pawn.pathTo(device.building)\r\n        await this.pawn.glideTo(device.pos)\r\n    }\r\n}\r\n","import { shuffle } from \"../Util\";\r\nimport { Device, retrieveResource as retrieveResource } from \"../actors/Device\";\r\nimport { Recipe, ResourceStorage } from \"../models/MechanicalOperation\";\r\nimport { ProductionStrategy } from \"./ProductionStrategy\";\r\n\r\nexport class CapacityBasedProduction extends ProductionStrategy {\r\n    async apply() {\r\n        if (this.isActive) { return; }\r\n        this.isActive = true\r\n        const storeWithCapacity = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.operation.capacity\r\n        const store: Device = shuffle(this.devices).find(storeWithCapacity)\r\n        if (store && store.operation.type === 'store') {\r\n            const storage: ResourceStorage = store.operation\r\n            const recipeForStoredResource = (r: Recipe) => storage.stores.some(stored => r.produces === stored)\r\n            let recipe = shuffle(this.recipes).find(recipeForStoredResource)\r\n            if (recipe) {\r\n                await this.workRecipe(recipe)\r\n                await this.storeBlock(recipe.produces)\r\n            }\r\n        }\r\n        await this.pause()\r\n        this.isActive = false\r\n    }\r\n\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons, deleteByValueOnce, sleep } from \"../Util\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { ProductionStrategy } from \"../strategies/ProductionStrategy\";\r\nimport { CapacityBasedProduction } from \"../strategies/CapacityBasedProduction\";\r\n\r\nexport class Citizen extends Actor {\r\n\r\n    walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock[] = [] // null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    private productionStrategy: ProductionStrategy\r\n\r\n    constructor(private device: Device, protected planet: Planet) {\r\n        super(device.x, device.y, Scale.minor.first, Scale.minor.third, Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.productionStrategy = new CapacityBasedProduction(this)\r\n    }\r\n\r\n    get isWorking() { return this.isWorking }\r\n    get currentPlanet() { return this.planet }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // make sure we are busy!\r\n        this.work()\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = (now - this.workStarted) / this.workDuration\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            this.carrying.forEach((carried, idx) => {\r\n                ctx.fillStyle = blockColor(carried).toRGBA()\r\n                ctx.fillRect(this.x + 4, this.y - 3 * idx, 5, 5)\r\n            })\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            ctx.strokeRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n        }\r\n\r\n        let debugPath = false\r\n        if (this.path && debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 10\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    carry(c: ResourceBlock) {\r\n        this.carrying.push(c);\r\n    }\r\n\r\n    isCarryingUnique(resources: ResourceBlock[]): boolean {\r\n        let isCarrying = true\r\n        let carryingCopy = this.carrying.slice()\r\n        if (this.carrying.length > 0) {\r\n            resources.forEach(resToFind => {\r\n                if (carryingCopy.find(res => res === resToFind)) {\r\n                    deleteByValueOnce(carryingCopy, resToFind)\r\n                } else {\r\n                    isCarrying = false;\r\n                }\r\n            })\r\n        }\r\n        return isCarrying\r\n    }\r\n\r\n    drop(res: ResourceBlock): ResourceBlock {\r\n        if (this.carrying.length > 0) {\r\n            if (this.carrying.find(r => r === res)) {\r\n                deleteByValueOnce(this.carrying, res)\r\n                return res\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        this.workInProgress = false\r\n    }\r\n\r\n    async pathTo(building: Building) {\r\n        if (this.path.length > 0) {\r\n            throw new Error(\"Already pathing!!\")\r\n        }\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            path.pop()\r\n            path.shift()\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = []\r\n        }\r\n        return true;\r\n    }\r\n\r\n    work() {\r\n        this.productionStrategy.attempt()\r\n    }\r\n\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(home: Device) {\r\n        let citizen = new Citizen(home, this.planet);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","module.exports = __webpack_public_path__ + \"9ed5e1137b47b9fc3d2bbf4534777307.svg\";","module.exports = __webpack_public_path__ + \"3aeb9dd24809ba3fbd4eeb31a28c3b19.svg\";","module.exports = __webpack_public_path__ + \"6cc6f6773bb6eb26fcef87b9629f7b87.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"24611230ec712ba7ee38b99561aedd87.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { ResourceBlock } from \"./Economy\";\r\n\r\nexport type MechanicalOperation = Recipe | Generator | ResourceStorage | SpawnClone | Noop;\r\n\r\nexport interface Noop {\r\n    type: 'noop'\r\n}\r\n\r\nexport interface Recipe {\r\n    type: 'recipe'\r\n    consumes: ResourceBlock[]\r\n    produces: ResourceBlock\r\n    workTime: number\r\n}\r\n\r\nexport interface Generator {\r\n    type: 'generator'\r\n    generates: ResourceBlock\r\n    generationTime: number\r\n    capacity: number\r\n}\r\n\r\nexport interface ResourceStorage {\r\n    type: 'store'\r\n    stores: ResourceBlock[]\r\n    capacity: number\r\n}\r\n\r\nexport interface SpawnClone {\r\n    type: 'spawn'\r\n}\r\n\r\nfunction store(res: ResourceBlock[], capacity: number = 10): ResourceStorage {\r\n    return {\r\n        type: 'store',\r\n        stores: res,\r\n        capacity\r\n    }\r\n}\r\n\r\nfunction generate(res: ResourceBlock): Generator {\r\n    return {\r\n        type: 'generator',\r\n        generates: res,\r\n        generationTime: 1000,\r\n        capacity: 4\r\n    }\r\n}\r\n\r\nfunction recipe(input: ResourceBlock[], output: ResourceBlock): Recipe {\r\n    return {\r\n        type: 'recipe',\r\n        consumes: input,\r\n        produces: output,\r\n        workTime: 1000,\r\n    }\r\n}\r\n\r\nfunction spawn(): SpawnClone {\r\n    return {\r\n        type: 'spawn',\r\n    }\r\n}\r\n\r\nexport const mechanicalOperations = {\r\n    store,\r\n    generate,\r\n    recipe,\r\n    spawn\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure, MissionControl } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = false\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findAllDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d)\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices(): Device[] {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\n\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n\r\n    constructor(\r\n        public hud: Hud,\r\n        public color: Color,\r\n        private onBuildingHover: (b: Building) => any,\r\n        private w: number = 2000000,\r\n        private depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, w, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n    }\r\n\r\n    set currentlyViewing(building: Building) {\r\n        this.onBuildingHover(building)\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        let devices = this.colony.findAllDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(home)\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        let devices = this.colony.findAllDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [ PureValue.Shelter, PureValue.Water, PureValue.Oxygen ]\r\n        return Math.max(0, Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        ))\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n}","import { Scene, Input, Vector } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MissionControl, MainTunnel, Corridor, SurfaceRoad, SmallDome, SmallRoomTwo, SmallDomeThree, SmallRoomThree, MediumRoom, MediumRoomThree, LargeRoom, HugeRoom } from \"../models/Structure\";\r\nimport { Building, DomeView, CorridorView, CommonAreaView, TunnelView, MissionControlView, LadderView, ArcologyView, structureViews, } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { SurfaceRoadView } from \"../actors/Building/SurfaceRoadView\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { SmallRoomThreeView } from \"../actors/Building/SmallRoomThreeView\";\r\nimport { MidDomeView } from \"../actors/Building/MidDomeView\";\r\nimport { MediumRoomView } from \"../actors/Building/MediumRoomView\";\r\nimport { LargeRoomView } from \"../actors/Building/LargeRoomView\";\r\nimport { HugeRoomView } from \"../actors/Building/HugeRoomView\";\r\nimport { BigDomeView } from \"../actors/Building/BigDomeView\";\r\nimport { SmallDomeThreeView } from \"../actors/Building/SmallDomeThreeView\";\r\nimport { SpaceFunction, CloneMatrix, Kitchen, LivingQuarters, LifeSupportPod, Library, Archive, ComputerCore } from \"../models/SpaceFunction\";\r\nimport { flatSingle, zip } from \"../Util\";\r\nimport { DevicePlace } from \"../actors/Building/Building\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    placingFunction: SpaceFunction = null\r\n\r\n    // static structureViews: { [key: string]: typeof Building } = {\r\n    //     CorridorView,\r\n    //     LadderView,\r\n    //     TunnelView,\r\n    //     SurfaceRoadView,\r\n\r\n    //     DomeView, // small dome 2\r\n    //     SmallDomeThreeView,\r\n    //     MidDomeView,\r\n    //     BigDomeView,\r\n\r\n    //     MissionControlView,\r\n    //     SmallRoomThreeView,\r\n\r\n    //     CommonAreaView,\r\n    //     MediumRoomView,\r\n    //     LargeRoomView,\r\n    //     HugeRoomView,\r\n\r\n    //     ArcologyView,\r\n    // }\r\n\r\n    static requiredStructureList: Array<typeof Structure> = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        SmallDomeThree,\r\n        MainTunnel,\r\n        Corridor,\r\n        SmallRoomTwo,\r\n    ]\r\n\r\n    //static requiredFunctionList: Array<typeof SpaceFunction> = [\r\n    //    LifeSupportPod,\r\n    //    LivingQuarters,\r\n    //    Kitchen,\r\n    //    CloneMatrix,\r\n    //]\r\n\r\n    static requiredStructuresAndFunctions: (typeof SpaceFunction | typeof Structure)[] = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        LifeSupportPod,\r\n        MainTunnel,\r\n        Corridor,\r\n        Kitchen,\r\n        LivingQuarters,\r\n        CloneMatrix,\r\n        Library,\r\n        Archive,\r\n        ComputerCore,\r\n        \r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, false)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        let buildIt = (e) => this.startConstructing(e)\r\n\r\n        this.hud = new Hud(game, buildIt, buildIt, buildIt)\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(this.hud, game.world.color, (b) => this.hud.showCard(b))\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(2, 10000)\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n\r\n                            if (this.placingFunction) {\r\n                                let fn = this.placingFunction\r\n                                zip(fn.machines, buildingUnderConstruction.devicePlaces()).forEach(([machine, place]: [typeof Machine, DevicePlace]) => {\r\n                                    // console.log(\"would add machine\", { machine, place })\r\n                                    let m = (new machine()).concretize()\r\n                                    let device = new Device(m, place.position)\r\n                                    buildingUnderConstruction.addDevice(device)\r\n                                })\r\n                                this.placingFunction = null\r\n                            }\r\n\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                this.planet.colony.currentlyConstructing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingStructureOrFunction(): Structure | SpaceFunction {\r\n        let reqs = Construct.requiredStructuresAndFunctions.map(req => new req())\r\n\r\n        let actualStructureNames = this.buildings.map(building => building.structure.name)\r\n        let actualFunctionNames = flatSingle(\r\n            this.buildings.map(building => building.spaceFunction && building.spaceFunction.name)\r\n        )\r\n        let actualNames = [...actualStructureNames, ...actualFunctionNames]\r\n        return reqs.find(req => !actualNames.includes(req.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingStructureOrFunction() //this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        }\r\n    }\r\n\r\n    startConstructing(structureOrMachine: Structure | Machine | SpaceFunction, pos: Vector = new Vector(0, 0)) {\r\n        this.hud.showCard(structureOrMachine)\r\n        \r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            this.hud.setMessage(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            this.camera.zoom(structure.zoom, 250)\r\n            this.camera.pos = theNextOne.pos\r\n        } else if (structureOrMachine instanceof Machine) {\r\n            let machine = structureOrMachine\r\n            this.hud.setMessage(`Install ${machine.name} (${machine.description})`)\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            // this.camera.zoom(1.5, 250)\r\n        } else if (structureOrMachine instanceof SpaceFunction) {\r\n            let fn: SpaceFunction = structureOrMachine\r\n            this.hud.setMessage(`Place ${fn.name} (${fn.description})`)\r\n            theNextOne = this.spawnFunction(fn, pos)\r\n            this.placingFunction = fn\r\n\r\n            // need to gen a building with the required machines?\r\n            // alert(\"start building function!\")\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        if (device.snap(this.planet)) {\r\n            this.camera.pos = device.pos\r\n \r\n        }\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(anotherBuilding.pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n\r\n    protected spawnFunction(fn: SpaceFunction, pos: Vector): Building {\r\n        let theStructure: Structure = new SmallRoomThree()\r\n        let machines = fn.machines.map(m => new m())\r\n\r\n        if (machines.some(m => m.size === DeviceSize.Medium)) {\r\n            theStructure = new MediumRoomThree()\r\n        }\r\n\r\n        if (machines.some(m => m.size === DeviceSize.Large)) {\r\n            theStructure = new LargeRoom()\r\n        }\r\n\r\n        if (machines.some(m => m.size === DeviceSize.Huge)) {\r\n            theStructure = new HugeRoom()\r\n        }\r\n\r\n        if (machines.some(m => m.forDome)) {\r\n            theStructure = new SmallDome()\r\n        }\r\n\r\n        let building = this.assembleBuildingFromStructure(theStructure, pos)\r\n        building.reshape(building.constrainCursor(building.pos))\r\n        return building\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Orange] //Red, Color.Blue, Color.Green]\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ).\r\n        lighten(0.15).\r\n        desaturate(0.65)\r\n\r\n  \r\n    static bestowName(): any {\r\n        let nameList = [\r\n            'Aragorn',\r\n            'Anodyne',\r\n            'Carolyn',\r\n            'Exeter',\r\n            'Colwreath',\r\n            'India',\r\n            'Comma',\r\n            'Terabithia'\r\n        ]\r\n        return sample(nameList)\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword),\r\n\r\n}\r\n\r\nexport { Resources }\r\n","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}