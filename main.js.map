{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/models/Structure.ts","webpack:///./src/Util.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/values/Graph.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Hud.ts","webpack:///./src/actors/Building/LivingQuartersView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/MissionControlView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/AccessTunnelView.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/Game.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","Structure","[object Object]","origin","Vector","this","description","view","width","height","zoom","MissionControl","MainTunnel","Dome","AccessTunnel","CommonArea","LivingQuarters","SurfaceRoad","t","e","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","distanceToCursor","elem","distance","flatSingle","concat","deleteByValue","eachCons","measureDistance","b","Orientation","Left","Up","Right","Down","flip","orientation","ex","Orientation_1","Util_1","Graph_1","Building","Actor","structure","planet","super","x","y","color","built","hover","facing","edgeWidth","hideBox","childrenBuildings","step","product","capacity","anchor","console","log","setup","traits","trait","Traits","OffscreenCulling","on","collisionType","CollisionType","PreventCollision","add","Label","clone","pos","getWidth","getHeight","supergraph","Graph","g","nodes","rootNode","findOrCreate","child","slot","parentSlot","edge","childNode","graph","citizen","ctx","delta","drawRect","aabb","engine","update","produce","rectangle","edgeColor","fillStyle","toRGBA","fillRect","main","mainColor","other","rect1","rect2","buildings","find","bldg","overlaps","processedColor","lighten","darken","clr","colorBase","overlapsAny","Color","Red","validConnectingStructures","closestBuildingByType","slotList","building","slots","some","ourSlot","theSlot","findSlot","matchingSlot","offset","sub","addEqual","parent","Building_1","AccessTunnelView_1","AccessTunnelView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","MissionControlView_1","MissionControlView","TunnelView_1","TunnelView","LivingQuartersView_1","LivingQuartersView","empty","edges","edgesInverse","size","newNode","contains","testNode","includes","measure","tolerance","dfs","node","src","dst","indexOf","otherGraph","edgeList","forEach","theEdges","index","otherIndex","otherNode","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","cb","bfsIndex","halt","visitedNode","adj","adjacentNode","maxStep","prevStep","dstIndex","bfs","prev","curr","path","steps","srcIndex","reverse","_1","Structure_1","SurfaceRoadView","Citizen","White","walkSpeed","carrying","draw","actions","moveTo","asPromise","onArrival","pathBetween","Promise","all","glideTo","otherStructure","walkTo","patrol","workshop","store","interact","Hud","UIActor","message","onBuildingSelect","label","fontSize","_makePalette","_paletteElement","document","createElement","style","position","body","appendChild","_paletteButton","buttonFactory","onclick","stopPropagation","textContent","display","fontFamily","padding","background","Black","text","left","canvas","offsetLeft","top","offsetTop","pickingOrigin","halfWidth","first","slotHeights","y0","y1","btm","right","slotCount","heights","theSlots","buildSlot","alignToSlot","getTop","setHeight","slotY","drop","flagX","flagY","carry","Green","pop","beginPath","arc","PI","closePath","produced","floorHeight","leftSlot","rightSlot","originX","reshape","constrainCursor","newCursor","setWidth","abs","Player","NavigationTree","dest","shortestPath","Mountains","peaks","xOff","peakDistance","times","heightRange","drift","baseColor","desaturate","brightColor","saturate","yBase","peak","mtnWidth","lineTo","PlanetBackground_1","NavigationTree_1","Planet","depth","createLayer","layerHeight","theLayer","buildNavTree","structureType","vec","destination","navTree","srcNode","closestNode","destNode","seekPath","ctrl","Planet_1","player_1","Hud_1","Citizen_1","SurfaceRoadView_1","Construct","Scene","currentBuildingListIndex","people","dragging","game","world","player","hud","currentlyBuilding","remove","startConstructing","prepareNextBuilding","input","pointers","primary","camera","dragOrigin","currentBuilding","constrained","button","Input","PointerButton","placementValid","handleClick","placeBuilding","Middle","z","getZoom","deltaY","keyboard","key","Keys","H","move","off","requiredStructures","requiredStructureList","actualStructureNames","structureList","nextMissing","nextMissingRequiredStructure","theNextOne","spawnBuilding","spawnCitizen","home","work","anotherBuilding","assembleBuildingFromStructure","structureViews","firstStructure","secondStructure","Colony","structures","World","colors","skyColor","Cyan","Vermillion","colony","Blue","sword","Resources","Sword","Texture","Resources_1","Game","Engine","displayMode","DisplayMode","FullScreen","backgroundColor","loader","Loader","addResource","start","Game_1","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"aACA,SAAAA,EAAAC,GAOA,IANA,IAKAC,EAAAC,EALAC,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAGAM,EAAA,EAAAC,KACQD,EAAAH,EAAAK,OAAoBF,IAC5BJ,EAAAC,EAAAG,GACAG,EAAAP,IACAK,EAAAG,KAAAD,EAAAP,GAAA,IAEAO,EAAAP,GAAA,EAEA,IAAAD,KAAAG,EACAO,OAAAC,UAAAC,eAAAC,KAAAV,EAAAH,KACAc,EAAAd,GAAAG,EAAAH,IAIA,IADAe,KAAAhB,GACAO,EAAAC,QACAD,EAAAU,OAAAV,GAOA,OAHAW,EAAAR,KAAAS,MAAAD,EAAAb,OAGAe,IAEA,SAAAA,IAEA,IADA,IAAAC,EACAf,EAAA,EAAiBA,EAAAY,EAAAV,OAA4BF,IAAA,CAG7C,IAFA,IAAAgB,EAAAJ,EAAAZ,GACAiB,KACAC,EAAA,EAAkBA,EAAAF,EAAAd,OAA2BgB,IAAA,CAC7C,IAAAC,EAAAH,EAAAE,GACA,IAAAf,EAAAgB,KAAAF,MAEAA,IACAL,EAAAQ,OAAApB,IAAA,GACAe,EAAAM,IAAAC,EAAAN,EAAA,KAGA,OAAAD,EAIA,IAAAQ,KAKApB,GACAqB,EAAA,GAGAZ,KAGA,SAAAS,EAAA1B,GAGA,GAAA4B,EAAA5B,GACA,OAAA4B,EAAA5B,GAAA8B,QAGA,IAAAC,EAAAH,EAAA5B,IACAK,EAAAL,EACAgC,KACAF,YAUA,OANAhB,EAAAd,GAAAa,KAAAkB,EAAAD,QAAAC,IAAAD,QAAAJ,GAGAK,EAAAC,KAGAD,EAAAD,QAKAJ,EAAAO,EAAAnB,EAGAY,EAAAQ,EAAAN,EAGAF,EAAAS,EAAA,SAAAL,EAAAM,EAAAC,GACAX,EAAAY,EAAAR,EAAAM,IACA1B,OAAA6B,eAAAT,EAAAM,GACAI,gBACAC,cACAC,IAAAL,KAMAX,EAAAiB,EAAA,SAAAb,GACApB,OAAA6B,eAAAT,EAAA,cAAiDc,YAIjDlB,EAAAmB,EAAA,SAAAd,GACA,IAAAM,EAAAN,KAAAe,WACA,WAA2B,OAAAf,EAAAgB,SAC3B,WAAiC,OAAAhB,GAEjC,OADAL,EAAAS,EAAAE,EAAA,IAAAA,GACAA,GAIAX,EAAAY,EAAA,SAAAU,EAAAC,GAAsD,OAAAvC,OAAAC,UAAAC,eAAAC,KAAAmC,EAAAC,IAGtDvB,EAAAwB,EAAA,GAEA,IAAAC,EAAAC,OAAAC,aAAAD,OAAAC,iBACAC,EAAAH,EAAA1C,KAAA8C,KAAAJ,GACAA,EAAA1C,KAAAX,EACAqD,IAAAK,QACA,QAAAnD,EAAA,EAAgBA,EAAA8C,EAAA5C,OAAuBF,IAAAP,EAAAqD,EAAA9C,IACvC,IAAAU,EAAAuC,EAIArC,EAAAR,MAAA,OAEAU,qFCrIA,MAAAsC,EAAA/B,EAAA,SAEagC,EAOTC,YAAmBC,EAAiB,IAAIH,EAAAI,OAAO,EAAG,IAA/BC,KAAAF,SANnBE,KAAA1B,KAAe,2BACf0B,KAAAC,YAAsB,kCACtBD,KAAAE,KAAe,wCACfF,KAAAG,MAAgB,GAChBH,KAAAI,OAAiB,GACjBJ,KAAAK,KAAe,GANnBrC,EAAA4B,YAUA5B,EAAAsC,6BAAoCV,EAApCC,kCACIG,KAAA1B,KAAe,kBACf0B,KAAAC,YAAsB,8BACtBD,KAAAE,KAAe,qBACfF,KAAAG,MAAgB,GAChBH,KAAAI,OAAiB,GACjBJ,KAAAK,KAAO,KAGXrC,EAAAuC,yBAAgCX,EAAhCC,kCACIG,KAAA1B,KAAe,cACf0B,KAAAC,YAAsB,YACtBD,KAAAE,KAAe,aACfF,KAAAG,MAAgB,GAChBH,KAAAI,OAAiB,IACjBJ,KAAAK,KAAO,MAGXrC,EAAAwC,mBAA0BZ,EAA1BC,kCACIG,KAAA1B,KAAe,UACf0B,KAAAC,YAAsB,oBACtBD,KAAAE,KAAe,WACfF,KAAAG,MAAgB,GAChBH,KAAAI,OAAiB,GACjBJ,KAAAK,KAAO,KAGXrC,EAAAyC,2BAAkCb,EAAlCC,kCACIG,KAAA1B,KAAe,gBACf0B,KAAAC,YAAsB,iBACtBD,KAAAE,KAAe,mBACfF,KAAAG,MAAgB,GAChBH,KAAAI,OAAiB,IAGrBpC,EAAA0C,yBAAgCd,EAAhCC,kCACIG,KAAA1B,KAAe,cACf0B,KAAAC,YAAsB,cACtBD,KAAAE,KAAe,iBACfF,KAAAG,MAAgB,IAChBH,KAAAI,OAAiB,KAGrBpC,EAAA2C,6BAAoCf,EAApCC,kCACIG,KAAA1B,KAAe,kBACf0B,KAAAC,YAAsB,cACtBD,KAAAE,KAAe,qBACfF,KAAAG,MAAgB,GAChBH,KAAAI,OAAiB,KAGrBpC,EAAA4C,0BAAiChB,EAAjCC,kCACIG,KAAA1B,KAAe,eACf0B,KAAAC,YAAsB,gBACtBD,KAAAE,KAAe,kBACfF,KAAAG,MAAgB,GAChBH,KAAAI,OAAiB,cAAAS,EAAAC,EAAAvE,GAAA,aAAAK,OAAA6B,eAAAqC,EAAA,cAAAhC,OAAA,IClErB,MAAMiC,EAAa,CAACC,EAAKC,EAAOC,IACvBF,EAAIG,OAAO,SAASC,EAAMC,GAC/B,IAAIC,GAASL,EAAMI,GAAOA,GAC1B,OAAKD,GAEMF,EAAS9D,MAAM,MAAQgE,EAAK,GAAIE,EAAK,MAASF,EAAK,GACpDA,EAFAE,GAMV,MAAM,GAgCV,SAASC,EAAUC,EAAGjF,EAAGwC,GAEvB,IADA,IAAIF,KACKpB,EAAI,EAAGA,EAAIsB,EAAGtB,IACrBoB,EAAElC,KAAK6E,EAAEjF,EAAIkB,IAEf,OAAOoB,EAlCIb,EAAAyD,MAAQ,EAACT,EAAKU,IAAOX,EAAWC,EAAKU,EAAIC,KAAKC,MAC9C5D,EAAA6D,MAAQ,EAACb,EAAKU,IAAOX,EAAWC,EAAKU,EAAIC,KAAKG,MAG9C9D,EAAA+D,OAAS,CAACf,GAAQA,EAAIW,KAAKK,MAAML,KAAKM,SAAWjB,EAAIvE,UAErDuB,EAAAkE,MAAQ,CAACnD,GAAMoD,MAAMpD,GAAGqD,KAAK,GAAGC,IAAI,CAACC,EAAKC,IAAQA,IAE/DvE,EAAAwE,QAAA,SAA2BC,EAAgBzB,EAAe0B,EAA0BC,GACjF,IAAIC,EAAqB5B,EAEzB,GADI2B,IAAa3B,EAAMA,EAAI6B,OAAOF,IAC9BC,EAAU,CACX,IAAIE,EAAoBC,GAAYN,EAAOO,SAASN,EAAUK,IAC9D,OAAO/E,EAAAyD,MAAMmB,EAAUE,KAIhB9E,EAAAiF,WAAajC,OAAUkC,UAAUlC,IAEjChD,EAAAmF,cAAgB,EAACnC,EAAK+B,IAAS/B,EAAI6B,OAAO/B,GAAKA,IAAMiC,IAElE/E,EAAAoF,SAAA,SAAyB5B,EAAGzC,GAE1B,IADA,IAAIF,KACKtC,EAAI,EAAGA,EAAIiF,EAAE/E,OAASsC,EAAI,EAAGxC,IACpCsC,EAAElC,KAAK4E,EAASC,EAAGjF,EAAGwC,IAExB,OAAOF,GAWIb,EAAAqF,gBAAkB,EAAC7B,EAAW8B,IAAc9B,EAAEwB,SAASM,kCCnDpE,IAAYC,mDAAZ,SAAYA,GAAcA,IAAAC,KAAA,UAAMD,IAAAE,GAAA,QAAIF,IAAAG,MAAA,WAAOH,IAAAI,KAAA,UAA3C,CAAYJ,EAAAvF,EAAAuF,cAAAvF,EAAAuF,iBAEZvF,EAAA4F,KAAA,SAAqBC,GACjB,OAAQA,GACJ,KAAKN,EAAYC,KAAM,OAAOD,EAAYG,MAC1C,KAAKH,EAAYG,MAAO,OAAOH,EAAYC,KAC3C,KAAKD,EAAYE,GAAI,OAAOF,EAAYI,KACxC,KAAKJ,EAAYI,KAAM,OAAOJ,EAAYE,oFCRlD,MAAA9D,EAAA/B,EAAA,GAGAkG,EAAAlG,EAAA,GAEAmG,EAAAnG,EAAA,GAIAoG,EAAApG,EAAA,GACAqG,EAAArG,EAAA,GAEAI,EAAAkG,uBAA8BvE,EAAAwE,MAW1BtE,YAAmBuE,EAAgCC,GAC/CC,MACEF,EAAUtE,OAAOyE,EACjBH,EAAUtE,OAAO0E,EACjBJ,EAAUjE,MACViE,EAAUhE,OACViE,EAAOI,OANMzE,KAAAoE,YAAgCpE,KAAAqE,SAVnDrE,KAAA0E,SACA1E,KAAA2E,SAEA3E,KAAA4E,OAAsBb,EAAAR,YAAYG,MAClC1D,KAAA6E,UAAoB,EACpB7E,KAAA8E,WAGA9E,KAAA+E,qBA0GA/E,KAAAgF,KAAe,EAULhF,KAAAiF,WACAjF,KAAAkF,SAAmB,EA3GzBlF,KAAKmF,OAAS,IAAIrB,EAAG/D,OAAO,EAAE,GAE9BqF,QAAQC,kBAAkBjB,EAAU9F,QAAUwB,OAAQsE,EAAUtE,OAAQK,MAAOiE,EAAUjE,MAAOC,OAAQgE,EAAUhE,SAClHJ,KAAKsF,QACLtF,KAAKuF,OAASvF,KAAKuF,OAAO1C,OAAO2C,KAAWA,aAAiB1B,EAAG2B,OAAOC,mBAEvE1F,KAAK2F,GAAG,eAAgB,KACpB3F,KAAK2E,WAGT3E,KAAK2F,GAAG,eAAgB,KACpB3F,KAAK2E,WAGT3E,KAAK4F,cAAgBjG,EAAAkG,cAAcC,iBAEnC9F,KAAK+F,IAAI,IAAIpG,EAAAqG,MAAMhG,KAAKoE,UAAU9F,OAGtCuB,SAEAA,gBAAgB4C,GACZ,OAAOA,EAAOwD,QAElBpG,QAAQ4C,GAEJzC,KAAKkG,IAAMzD,EAAOwD,QAOtBpG,YAAY4C,GAA2B,SAEvC5C,QACI,SAGJA,QACI,IAAI0E,EAAIvE,KAAKkG,IAAI3B,EAAIvE,KAAKmG,WAAW,EACjC3B,EAAIxE,KAAKkG,IAAI1B,EAAIxE,KAAKoG,YAC1B,OACI,IAAIzG,EAAAI,OAAO4B,KAAKK,MAAMuC,GAAI5C,KAAKK,MAAMwC,GAAG,IAIhD3E,MAAMwG,EAA4B,IAAIpC,EAAAqC,OAClC,IAAIC,EAAIF,EAEJG,EAAQxG,KAAKwG,QACbC,EAAWF,EAAEG,aAAaF,EAAM,GAAIxC,EAAAX,iBACxC,IAAK,IAAIsD,KAAS3G,KAAK+E,kBAAmB,CACtC,IAAI6B,EAAOL,EAAEG,aAAaC,EAAME,WAAWX,IAAKlC,EAAAX,iBAChDkD,EAAEO,KAAKL,EAAUG,GAEjB,IAAIG,EAAYR,EAAEG,aAAaC,EAAMH,QAAQ,GAAIxC,EAAAX,iBACjDkD,EAAEO,KAAKF,EAAMG,GAEbJ,EAAMK,MAAMT,GAEhB,OAAOA,EAGX1G,SAASoH,GAIL,SAGJpH,KAAKqH,EAA+BC,GAE3BnH,KAAK8E,SACN9E,KAAKoH,SAASF,EAAKlH,KAAKqH,OAAQrH,KAAK6E,WAuB7ChF,OAAOyH,EAAcH,GACjB7C,MAAMiD,OAAOD,EAAQH,GAEjBnH,KAAK0E,OAAS1E,KAAKgF,KAAO,IAAO,GAAKhF,KAAKiF,QAAQxI,OAASuD,KAAKkF,UACjElF,KAAKwH,QAAQxH,KAAKgF,MAEtBhF,KAAKgF,MAAQ,EAKPnF,QAAQmF,IAERnF,SAASqH,EAA+BO,EAAsB5C,EAAoB,EAAGJ,EAAe,MAC1G,IAAIF,EAAEA,EAACC,EAAEA,EAACrE,MAAEA,EAAKC,OAAEA,GAAWqH,EAE1BX,EAAOrC,GAASzE,KAAK0H,YACzBR,EAAIS,UAAYb,EAAKc,SACrBV,EAAIW,SAAStD,EAAGC,EAAGrE,EAAOC,GAE1B,IAAI0H,EAAOrD,GAASzE,KAAK+H,YACzBb,EAAIS,UAAYG,EAAKF,SACrBV,EAAIW,SACAtD,EAAIM,EACJL,EAAIK,EACJ1E,EAAkB,EAAV0E,EACRzE,EAAmB,EAAVyE,GAIPhF,OACN,OACI0E,EAAGvE,KAAKkG,IAAI3B,EACZC,EAAGxE,KAAKkG,IAAI1B,EACZrE,MAAOH,KAAKmG,WACZ/F,OAAQJ,KAAKoG,aAIXvG,SAASmI,GACf,IAAIC,EAAQjI,KAAKqH,OAAQa,EAAQF,EAAMX,OAOvC,SALIY,EAAM1D,EAAI2D,EAAM3D,EAAI2D,EAAM/H,OAC1B8H,EAAM1D,EAAI0D,EAAM9H,MAAQ+H,EAAM3D,GAC9B0D,EAAMzD,EAAI0D,EAAM1D,EAAI0D,EAAM9H,QAC1B6H,EAAMzD,EAAIyD,EAAM7H,OAAS8H,EAAM1D,GAKhC3E,cACH,QAASG,KAAKqE,OAAO8D,UAAUC,KAAKC,GAAQA,IAASrI,MAAQA,KAAKsI,SAASD,IAGrExI,YAEN,OADWG,KAAKuI,iBAAiBC,QAAQ,IAInC3I,YAEN,OADWG,KAAKuI,iBAAiBE,OAAO,KAIlC5I,YACN,OAAOG,KAAKyE,MAGN5E,iBACN,IAAI6I,EAAM1I,KAAK2I,YAAY1C,QAM3B,OALKjG,KAAK0E,QACF1E,KAAK4I,gBAAiBF,EAAM/I,EAAAkJ,MAAMC,KACtCJ,EAAIlH,EAAI,IAERxB,KAAK2E,QAAS+D,EAAIlH,EAAI,IACnBkH,EAGD7I,4BACN,SAGMA,SAASqG,GACf,IAAIiC,EAAYnI,KAAK+I,4BAA4B1G,IAAI+B,GACjDpE,KAAKqE,OAAO2E,sBAAsB9C,EAAK9B,IAEvC6E,EAAWjF,EAAAf,WAAWkF,EAAU9F,IAAI6G,GAAYA,EAAWA,EAASC,aAGxE,IADAF,EAAWA,EAASpG,OAAQ+D,GAAe5G,KAAKmJ,QAAQC,KAAMC,GAAkBzC,EAAKhC,SAAWb,EAAAH,KAAKyF,EAAQzE,WAChGnI,OAAS,EAClB,OAAOuH,EAAAxB,QAAQ0D,EAAK+C,EAAWrC,GAASA,EAAKV,KAI3CrG,YAAY4C,GAClB,IAAI6G,EAAUtJ,KAAKuJ,SAAS9G,GAC5B,GAAI6G,EAAS,CAET,IAAIE,EAAexJ,KAAKmJ,QAAQf,KAAKvK,GAAKA,EAAE+G,QAAUb,EAAAH,KAAK0F,EAAQ1E,SACnE,GAAI4E,EAAc,CACd,IAAIC,EAASH,EAAQpD,IAAIwD,IAAIF,EAAatD,KAI1C,OAHAlG,KAAKkG,IAAIyD,SAASF,GAElBzJ,KAAK6G,WAAayC,EACXA,IAKTzJ,UAAU0E,EAAWC,EAAWI,EAAsBb,EAAAR,YAAYG,OACxE,OACIwC,IAAK,IAAIvG,EAAAI,OAAOwE,EAAEC,GAClBI,SACAgF,OAAQ5J,uFCjPpB,MAAA6J,EAAAjM,EAAA,GAUII,EAAAkG,SAVK2F,EAAA3F,SAET,MAAA4F,EAAAlM,EAAA,IAUII,EAAA+L,iBAVKD,EAAAC,iBACT,MAAAC,EAAApM,EAAA,IAUII,EAAAiM,eAVKD,EAAAC,eACT,MAAAC,EAAAtM,EAAA,IAUII,EAAAmM,SAVKD,EAAAC,SACT,MAAAC,EAAAxM,EAAA,IAUII,EAAAqM,mBAVKD,EAAAC,mBACT,MAAAC,EAAA1M,EAAA,IAUII,EAAAuM,WAVKD,EAAAC,WACT,MAAAC,EAAA5M,EAAA,IAUII,EAAAyM,mBAVKD,EAAAC,kGCPT,MAAAzG,EAAApG,EAAA,GAEAI,EAAAsI,YAAAzG,cACYG,KAAA0K,SACD1K,KAAAwG,SACCxG,KAAA2K,SACA3K,KAAA4K,gBAED/K,UACH,OAAOG,KAAK0K,MAGhBG,WAAoB,OAAO7K,KAAKwG,MAAM/J,OAE/BoD,KAAKiL,GACR9K,KAAK0K,SACA1K,KAAK+K,SAASD,KACf1F,QAAQC,IAAI,mBAAqByF,YACjC9K,KAAKwG,MAAM7J,KAAKmO,IAIjBjL,SAASmL,GACZ,OAAOhL,KAAKwG,MAAMyE,SAASD,GAGxBnL,aAAamL,EAAaE,EAAiCC,EAAoB,GAClF,IAAI3E,EAAQxG,KAAKoL,MACb5I,EAAUwB,EAAAvC,MAAM+E,EAAQ6E,GAAYH,EAAQF,EAAUK,IAC1D,OAAI7I,GAAW0I,EAAQ1I,EAASwI,GAAYG,EACjC3I,EAEJwI,EAGJnL,KAAKyL,EAAQC,GAChBnG,QAAQC,IAAI,aAAeiG,MAAKC,QAChCvL,KAAKqL,KAAKC,GACVtL,KAAKqL,KAAKE,GAEV,IAAI1N,EAAImC,KAAKwL,QAAQF,GAAMjN,EAAI2B,KAAKwL,QAAQD,GAC5CvL,KAAK2K,MAAM9M,GAAKmC,KAAK2K,MAAM9M,OAC3BmC,KAAK2K,MAAM9M,GAAGlB,KAAK0B,GAEnB2B,KAAK4K,aAAavM,GAAK2B,KAAK4K,aAAavM,OACzC2B,KAAK4K,aAAavM,GAAG1B,KAAKkB,GAGvBgC,MAAM4L,GACVA,EAAWC,WAAWC,QAAQ,EAAEnK,EAAE8B,KAAOtD,KAAK8G,KAAKtF,EAAE8B,IAGjDzD,WACH,IAAI+L,KACJ,IAAK,IAAIP,KAAQrL,KAAKwG,MAAO,CACzB,IAAIqF,EAAQ7L,KAAKwL,QAAQH,GACzB,GAAIrL,KAAK2K,MAAMkB,GACX,IAAK,IAAIC,KAAc9L,KAAK2K,MAAMkB,GAAQ,CACtC,IAAIE,EAAY/L,KAAKwG,MAAMsF,GACtBF,EAASX,UAAUc,EAAWV,KAC/BO,EAASjP,MAAM0O,EAAMU,KAKrC,OAAOH,EAGJ/L,SAASmL,GACZ,IAAIa,EAAQ7L,KAAKwL,QAAQR,GAEzB,OADahL,KAAKgM,gBAAgBH,GACpBxJ,IAAKtD,GAAMiB,KAAKwG,MAAMzH,IAGhCc,gBAAgBoM,GACpB,IAAIC,EAAKlM,KAAK2K,MAAMsB,OAChBE,EAAQnM,KAAK4K,aAAaqB,OAE9B,UADiBC,KAAOC,GAIrBtM,IAAIuM,EAAO,KAAMC,MACpB,IAAIC,EAASF,EAAOpM,KAAKwL,QAAQY,GAAQ,EACzC,OAAOpM,KAAKuM,SAASD,GAAQjK,IAAItD,GAAKiB,KAAKwG,MAAMzH,IAG7Cc,SAAS2M,EAAiB,EAAGH,MASjC,OARAA,EAAQ1P,KAAK6P,GACExM,KAAKgM,gBAAgBQ,GAC3Bb,QAASc,IACTJ,EAAQpB,SAASwB,IAClBzM,KAAKuM,SAASE,EAAYJ,KAI3BA,EAGJxM,IAAIuM,EAAO,KAAMM,EAAqC,UACzD,IAAIJ,EAASF,EAAOpM,KAAKwL,QAAQY,GAAQ,EACzC,OAAOpM,KAAK2M,SAASL,EAAQI,GAAIrK,IAAItD,GAAKiB,KAAKwG,MAAMzH,IAGjDc,SAAS2M,EAAiB,KAAME,EAAwC,UAC5E,IAAIE,KACAP,KAEJ,IADAA,EAAQ1P,KAAK6P,GACNH,EAAQ5P,OAASuD,KAAKwG,MAAM/J,QAAQ,CACvC,IAAK,IAAIoQ,KAAeR,EAAS,CAC7B,IAAIS,EAAgB9M,KAAKgM,gBAAgBa,GACzC,IAAK,IAAIE,KAAgBD,EACrB,IAAKT,EAAQpB,SAAS8B,GAAe,CACjC,IAAKL,EAAGG,EAAaE,GAAe,CAChCH,KACA,MAEJP,EAAQ1P,KAAKoQ,GAGrB,GAAIH,EAAM,MAEd,GAAIA,EAAM,MAEd,OAAOP,EAGJxM,aAAayL,EAAQC,EAAQyB,EAAkB,KAClD,IAAIC,KACAC,EAAWlN,KAAKwL,QAAQD,GAC5BvL,KAAKmN,IAAI7B,EAAK,CAAC8B,EAAMC,KACjBJ,EAASI,GAAQD,EACVC,IAASH,IAEpB,IAAII,KACAD,EAAOH,EACPK,EAAQ,EACRC,EAAWxN,KAAKwL,QAAQF,GAC5B,MAAQgC,EAAKrC,SAASuC,IAAaD,EAAQP,GACvCM,EAAK3Q,KAAK0Q,GACVA,EAAOJ,EAASI,GAChBE,GAAS,EAGb,OADgBD,EAAKjL,IAAItD,GAAKiB,KAAKwG,MAAMzH,IACxB0O,UAGb5N,QAAQwL,GACZ,OAAOrL,KAAKwG,MAAMgF,QAAQH,oFCnJlC,MAAAqC,EAAA9P,EAAA,GACA+P,EAAA/P,EAAA,GAEAI,EAAA4P,8BAAqCF,EAAA3D,iBAGjClK,4BACI,OAAS8N,EAAArN,eAAgBqN,EAAAnN,sXCPjC,MAAAb,EAAA/B,EAAA,GAKAI,EAAA6P,sBAA6BlO,EAAAwE,MAKzBtE,YAAYqJ,EAA8B7E,GACtCC,MAAM4E,EAAS1C,QAAQ,GAAGjC,EAAE2E,EAAS1C,QAAQ,GAAGhC,EAAE,EAAE,GAAG7E,EAAAkJ,MAAMiF,OADvB9N,KAAAqE,SAJ1CrE,KAAA+N,UAAoB,IACpB/N,KAAAgO,SAAkB,KAClBhO,KAAAsN,QAOItN,KAAKuF,OAASvF,KAAKuF,OAAO1C,OAAO2C,KAAWA,aAAiB7F,EAAA8F,OAAOC,mBAGxE7F,KAAKqH,EAA+BC,GAChC7C,MAAM2J,KAAK/G,EAAKC,GACZnH,KAAKgO,WACL9G,EAAIS,UAAY3H,KAAKgO,SAASpG,SAC9BV,EAAIW,SAAS7H,KAAKuE,EAAE,EAAGvE,KAAKwE,EAAE,EAAG,EAAG,IAa5C3E,MAAMzB,GACF4B,KAAKgO,SAAW5P,EAGpByB,OACI,GAAIG,KAAKgO,SAAU,CACf,IAAI5P,EAAI4B,KAAKgO,SAAS/H,QAEtB,OADAjG,KAAKgO,SAAW,KACT5P,EAEX,SAGJyB,QAAQqG,GACJ,OAAOlG,KAAKkO,QAAQC,OAAOjI,EAAI3B,EAAG2B,EAAI1B,EAAGxE,KAAK+N,WAAWK,YAGvDvO,OAAOuE,EAA6BiK,2CACtC,IAAInF,EAAWlJ,KAAKqE,OAAO2E,sBAAsBhJ,KAAKkG,IAAK9B,GAC3DgB,QAAQC,IAAI,cAAgB6D,aAE5B,IAAIoE,EAAOtN,KAAKqE,OAAOiK,YAAYtO,KAAKkG,IAAID,QAASiD,GAarD,OAZA9D,QAAQC,IAAI,cAAeiI,GAGvBA,EAAK7Q,OAAS,IACduD,KAAKsN,KAAOA,QACNiB,QAAQC,IACVlB,EAAKjL,IAAI2C,GAAQhF,KAAKyO,QAAQzJ,KAElChF,KAAKsN,KAAO,KACZe,EAAUnF,SAgBZrJ,OAAOuE,EAA6BsK,EAAkCL,iDAClErO,KAAK2O,OAAOvK,EAAWiK,SAIvBrO,KAAK2O,OAAOD,EAAgBL,GAElCrO,KAAK4O,OAAOxK,EAAWsK,EAAgBL,KAO3CxO,KAAKgP,EAA4BC,GAC7B9O,KAAK4O,OAAOC,EAAUC,EAAQ5F,IAC1B9D,QAAQC,IAAI,cAAgB6D,aAC5BA,EAAS6F,SAAS/O,yFCnG9B,MAAAL,EAAA/B,EAAA,GACA+P,EAAA/P,EAAA,GAEAI,EAAAgR,kBAAyBrP,EAAAsP,QAErBpP,YAAYqP,EAAQ,oBAA+BC,EAAiB,MAChE7K,MAAM,EAAE,GADuCtE,KAAAmP,mBAE/CnP,KAAKoP,MAAQ,IAAIzP,EAAAqG,MAAMkJ,EAAS,GAAI,GAAI,aACxClP,KAAKoP,MAAMC,SAAW,GACtBrP,KAAKoP,MAAM3K,MAAQ9E,EAAAkJ,MAAMiF,MACzB9N,KAAK+F,IAAI/F,KAAKoP,OAEdpP,KAAKsP,aAAaH,GAKZtP,aAAa6B,GACnB1B,KAAKuP,gBAAkBC,SAASC,cAAc,OAC9CzP,KAAKuP,gBAAgBG,MAAMC,SAAW,WACtCH,SAASI,KAAKC,YAAY7P,KAAKuP,kBAI3B5B,EAAAnN,KAAMmN,EAAAlN,aAAckN,EAAAjN,WACpBiN,EAAAhN,eAAgBgN,EAAA/M,aAET+K,QAASvH,IAChB,IAAIvG,EAAI,IAAIuG,EACR0L,EAAiB9P,KAAK+P,cAAclS,GACxCmC,KAAKuP,gBAAgBM,YACjBC,GAIJA,EAAeE,QAAU,CAAClP,IAEtBY,EAAG7D,GACHiD,EAAEmP,sBAKNpQ,cAAchC,GAClB,IAAIiS,EAAiBN,SAASC,cAAc,UAS5C,OARAK,EAAeI,eAAiBrS,EAAES,OAClCwR,EAAeJ,MAAMS,QAAU,QAC/BL,EAAeJ,MAAML,SAAW,OAChCS,EAAeJ,MAAMU,WAAa,YAClCN,EAAeJ,MAAMW,QAAU,MAC/BP,EAAeJ,MAAMvP,MAAQ,QAC7B2P,EAAeJ,MAAMY,WAAa3Q,EAAAkJ,MAAMiF,MAAMrF,OAAO,KAAMb,SAC3DkI,EAAeJ,MAAMjL,MAAQ9E,EAAAkJ,MAAM0H,MAAM/H,QAAQ,KAAMZ,SAChDkI,EAGXjQ,QAAQ2Q,GAAgBxQ,KAAKoP,MAAMoB,KAAOA,EAE1C3Q,KAAKqH,EAA+BC,GAGhC,GAFA7C,MAAM2J,KAAK/G,EAAKC,GAEZnH,KAAKuP,gBAAiB,CAItB,IAAIkB,EAAOvJ,EAAIwJ,OAAOC,WAClBC,EAAM1J,EAAIwJ,OAAOG,UAGrB7Q,KAAKuP,gBAAgBG,MAAMe,QAAUA,EAAO,OAC5CzQ,KAAKuP,gBAAgBG,MAAMkB,OAASA,EAAM,qBAAA/P,EAAAC,EAAAvE,GAAA,aAAAK,OAAA6B,eAAAqC,EAAA,cAAAhC,OAAA,ICtEtD,MAAA4O,EAAA9P,EAAA,GAGAI,EAAAyM,iCAAwCiD,EAAAzD,eAAxCpK,kCACIG,KAAA6E,UAAoB,cAAAhE,EAAAC,EAAAvE,GAAA,aAAAK,OAAA6B,eAAAqC,EAAA,cAAAhC,OAAA,ICJxB,MAAAa,EAAA/B,EAAA,GACAiM,EAAAjM,EAAA,GACA+P,EAAA/P,EAAA,GACAoG,EAAApG,EAAA,GAEAmG,EAAAnG,EAAA,GACAqG,EAAArG,EAAA,GAEAI,EAAAuM,yBAAgCV,EAAA3F,SAAhCrE,kCACIG,KAAA8Q,iBAEAjR,QACI,IAAI0E,EAAIvE,KAAKkG,IAAI3B,EAAIvE,KAAKmG,WAAW,EACjC3B,EAAIxE,KAAKkG,IAAI1B,EACjB,OACI,IAAI7E,EAAAI,OAAO4B,KAAKK,MAAMuC,GAAIC,IAIlC3E,MAAMwG,EAA4B,IAAIpC,EAAAqC,OAClC,IAAIC,EAAIF,EAKJ0K,EAAY/Q,KAAKmG,WAAW,EAC5B5B,EAAIvE,KAAKkG,IAAI3B,EAAIwM,EAGjB3E,EAAO7F,EAAEG,aAAa1G,KAAKwG,QAAQ,GAAIxC,EAAAX,iBACvC2N,EAAQzK,EAAEG,aAAa,IAAI/G,EAAAI,OAAOwE,EAAEvE,KAAKiR,cAAc,IAAKjN,EAAAX,iBAChEkD,EAAEO,KAAKsF,EAAK4E,GAEZhN,EAAAZ,SAASpD,KAAKiR,cAAe,GAAGtF,QAAQ,EAAEuF,EAAGC,MACzC,IAAIP,EAAMrK,EAAEG,aAAa,IAAI/G,EAAAI,OAAOwE,EAAE2M,GAAKlN,EAAAX,iBACvC+N,EAAM7K,EAAEG,aAAa,IAAI/G,EAAAI,OAAOwE,EAAE4M,GAAKnN,EAAAX,iBAC3CkD,EAAEO,KAAK8J,EAAKQ,KAEhBpR,KAAKiR,cAActF,QAAQwF,IACvB,IAAIC,EAAM7K,EAAEG,aAAa,IAAI/G,EAAAI,OAAOwE,EAAE4M,GAAKnN,EAAAX,iBAEvCoN,EAAOlK,EAAEG,aAAa,IAAI/G,EAAAI,OAAOwE,EAAEwM,EAAUI,GAAKnN,EAAAX,iBACtDkD,EAAEO,KAAK2J,EAAKW,GAEZ,IAAIC,EAAQ9K,EAAEG,aAAa,IAAI/G,EAAAI,OAAOwE,EAAEwM,EAAUI,GAAKnN,EAAAX,iBACvDkD,EAAEO,KAAKsK,EAAIC,KAGf,IAAK,IAAI1K,KAAS3G,KAAK+E,kBAAmB,CACtC,IAAI6B,EAAOL,EAAEG,aAAaC,EAAME,WAAWX,IAAKlC,EAAAX,iBAC5C0D,EAAYR,EAAEG,aAAaC,EAAMH,QAAQ,GAAIxC,EAAAX,iBACjDkD,EAAEO,KAAKC,EAAWH,GAElBD,EAAMK,MAAMT,GAIhB,OAAOA,EAGH1G,cACJ,IACIyR,EAAY3P,KAAKK,OAAOhC,KAAKoG,YAAY,IAD9B,IAEXmL,KACJ,IAAK,IAAIhV,KAAKyH,EAAA9B,MAAMoP,GAChBC,EAAQ5U,KACJ,IAAMqD,KAAKkG,IAAI1B,EALR,GAKYjI,GAG3B,OAAOgV,EAGX1R,QAGI,IAAI2R,KAGJA,EAAS7U,KACLqD,KAAKyR,UACDzR,KAAKkG,IAAI3B,EAAIvE,KAAKmG,WAAW,EAC7BnG,KAAKkG,IAAI1B,EACTT,EAAAR,YAAYE,KAIpB,IAAK,IAAIe,KAAKxE,KAAKiR,cACfO,EAAS7U,KACLqD,KAAKyR,UACDzR,KAAKkG,IAAI3B,EAAGC,EAEZT,EAAAR,YAAYC,OAIpBgO,EAAS7U,KACLqD,KAAKyR,UACDzR,KAAKkG,IAAI3B,EAAIvE,KAAKmG,WAClB3B,EAEAT,EAAAR,YAAYG,QAKxB,OAAO8N,EAGX3R,4BAA8B,OAAS8N,EAAArN,gBAEvCT,YAAY4C,GAER,OAAIzC,KAAK8Q,gBAcG9Q,KAAK8Q,kBAAgB,GASrCjR,gBAAgB4C,GAkBZ,OAjBIzC,KAAK8Q,cAEL9Q,KAAK0R,YAAYjP,GAajBA,EAAO+B,EAAI7C,KAAKG,IAAI9B,KAAKqE,OAAOsN,SAAW,IAAKlP,EAAO+B,GAEpD/B,EAIX5C,QAAQ4C,GACJzC,KAAKkG,IAAI1B,EAAIxE,KAAKqE,OAAOsN,SAAW,EAC/B3R,KAAK8Q,eACR9Q,KAAK4R,UAAUnP,EAAO+B,EAAIxE,KAAKqE,OAAOsN,UAoB5C9R,YAAc,OAAOG,KAAKyE,MAAMgE,OAAO,gBAAA5H,EAAAC,EAAAvE,GAAA,aAAAK,OAAA6B,eAAAqC,EAAA,cAAAhC,OAAA,ICpL3C,MAAAa,EAAA/B,EAAA,GACAiM,EAAAjM,EAAA,GAIAmG,EAAAnG,EAAA,GAGAI,EAAAqM,iCAAwCR,EAAA3F,SAAxCrE,kCACIG,KAAA8E,WAEAjF,QACI,IAAI2R,KACJA,EAAS7U,KACLqD,KAAKyR,UACDzR,KAAKkG,IAAI3B,EAAIvE,KAAKmG,WAAW,EAC7BnG,KAAKkG,IAAI1B,EAAIxE,KAAKoG,YAClBrC,EAAAR,YAAYI,OAIpB,IAAIkO,EAAQ7R,KAAKoG,YAiBjB,OAhBAoL,EAAS7U,KACLqD,KAAKyR,UACDzR,KAAKkG,IAAI3B,EAAGvE,KAAKkG,IAAI1B,EAAIqN,EACzB9N,EAAAR,YAAYC,OAIpBgO,EAAS7U,KACLqD,KAAKyR,UACDzR,KAAKkG,IAAI3B,EAAIvE,KAAKmG,WAClBnG,KAAKkG,IAAI1B,EAAIqN,EACb9N,EAAAR,YAAYG,QAKb8N,EAGX3R,gBAAgB4C,GAGZ,OADAA,EAAO+B,EAAIxE,KAAKqE,OAAOsN,SAChBlP,EAGX5C,QAAQ4C,GACJzC,KAAKkG,IAAMzD,EACXzC,KAAKkG,IAAI1B,GAAKxE,KAAKoG,YAAc,EAGrCvG,SAASoH,GAEL,OADAA,EAAQ6K,UAKZjS,KAAKqH,EAA+BC,GAEhC,IAAI1C,EAAQzE,KAAK+H,YAEjBb,EAAIS,UAAYlD,EAAMmD,SAEtBV,EAAIW,SAAS7H,KAAKkG,IAAI3B,EAAGvE,KAAKkG,IAAI1B,EAAGxE,KAAKmG,WAAYnG,KAAKoG,aAG3D,IACI2L,EAAQ/R,KAAKkG,IAAI3B,EAAOvE,KAAKmG,WAAW,EAAnB,EACrB6L,EAAQhS,KAAKkG,IAAI1B,EAFA,GAGrB0C,EAAIW,SAASkK,EAAOC,EAAO,EAHN,IAIrB9K,EAAIW,SAASkK,EAAOC,EAAO,GAAI,GAE/B1N,MAAM2J,KAAK/G,EAAKC,GAMpBtH,YAAc,OAAOF,EAAAkJ,MAAMiF,uFC/E/B,MAAAnO,EAAA/B,EAAA,GACAiM,EAAAjM,EAAA,GAEAmG,EAAAnG,EAAA,GACA+P,EAAA/P,EAAA,GAGAI,EAAAmM,uBAA8BN,EAAA3F,SAA9BrE,kCACIG,KAAA8E,WAEAjF,QAEI,IAAI2R,KACAK,EAAQ7R,KAAKoG,YAkBjB,OAfAoL,EAAS7U,KACLqD,KAAKyR,UACDzR,KAAKkG,IAAI3B,EAAGvE,KAAKkG,IAAI1B,EAAIqN,EACzB9N,EAAAR,YAAYC,OAIpBgO,EAAS7U,KACLqD,KAAKyR,UACDzR,KAAKkG,IAAI3B,EAAIvE,KAAKmG,WAClBnG,KAAKkG,IAAI1B,EAAIqN,EACb9N,EAAAR,YAAYG,QAIb8N,EASX3R,QAAQ4C,GACJzC,KAAK0R,YAAYjP,GAIrB5C,SAASoH,GAML,OAJIjH,KAAKiF,QAAQxI,OAAS,IACtBwK,EAAQgL,MAAMtS,EAAAkJ,MAAMqJ,OACpBlS,KAAKiF,QAAQkN,UAMrBtS,QAAQmF,GACAA,EAAO,KAAQ,GACfhF,KAAKiF,QAAQtI,KAAKgD,EAAAkJ,MAAMqJ,OAKhCrS,KAAKqH,EAA+BC,GAGhC,IAAI1C,EAAezE,KAAK+H,YAExBb,EAAIkL,YACJlL,EAAImL,IACArS,KAAKkG,IAAI3B,EAAIvE,KAAKmG,WAAW,EAC7BnG,KAAKkG,IAAI1B,EAAIxE,KAAKoG,YAClBpG,KAAKoG,YAAY,IACjB,EACAzE,KAAK2Q,OAGTpL,EAAIqL,YACJrL,EAAIS,UAAYlD,EAAMmD,SACtBV,EAAI9E,OAEJpC,KAAKiF,QAAQ0G,QAAQ,CAAC6G,EAAU3G,KAC5B3E,EAAIS,UAAY6K,EAAS5K,SACzBV,EAAIW,SAAS7H,KAAKuE,EAAI,GAAKsH,EAAO7L,KAAKwE,EAAI,GAAI,GAAI,MAGvDF,MAAM2J,KAAK/G,EAAKC,GAGpBtH,YAAc,OAAOF,EAAAkJ,MAAMiF,MAAMrF,OAAO,KAExC5I,4BAA8B,OAAS8N,EAAA/M,8FC1F3C,MAAAiJ,EAAAjM,EAAA,GAGAmG,EAAAnG,EAAA,GACA+P,EAAA/P,EAAA,GAIAI,EAAAiM,6BAAoCJ,EAAA3F,SAApCrE,kCACIG,KAAAyS,YAAsB,EACtBzS,KAAA6E,UAAoB,EAGpBhF,QACI,IAAI2R,KACAK,EAAQ7R,KAAKoG,YAAcpG,KAAKyS,YAChCC,EAAiB1S,KAAKyR,UACtBzR,KAAKkG,IAAI3B,EACTvE,KAAKkG,IAAI1B,EAAIqN,EACb9N,EAAAR,YAAYC,MAEhBgO,EAAS7U,KAAK+V,GAEd,IAAIC,EAAkB3S,KAAKyR,UACvBzR,KAAKkG,IAAI3B,EAAIvE,KAAKmG,WAClBnG,KAAKkG,IAAI1B,EAAIqN,EACb9N,EAAAR,YAAYG,OAGhB,OADA8N,EAAS7U,KAAKgW,GACPnB,EAGX3R,QAAQ4C,GACJzC,KAAK0R,YAAYjP,GAGX5C,4BACN,OAAS8N,EAAAlN,+FCrCjB,MAAAoJ,EAAAjM,EAAA,GAEAmG,EAAAnG,EAAA,GACA+P,EAAA/P,EAAA,GAGAI,EAAA+L,+BAAsCF,EAAA3F,SAAtCrE,kCACIG,KAAA6E,UAAoB,EAEpB7E,KAAA8Q,iBACA9Q,KAAA4E,OAAsBb,EAAAR,YAAYC,KA+ClCxD,KAAA4S,QAAkB,EA7ClB/S,QAEI,IAAI2R,KACAK,EAAQ7R,KAAKoG,YAAc,EAkB/B,OAfAoL,EAAS7U,KACLqD,KAAKyR,UACDzR,KAAKkG,IAAI3B,EAAGvE,KAAKkG,IAAI1B,EAAIqN,EACzB9N,EAAAR,YAAYC,OAIpBgO,EAAS7U,KACLqD,KAAKyR,UACDzR,KAAKkG,IAAI3B,EAAIvE,KAAKmG,WAClBnG,KAAKkG,IAAI1B,EAAIqN,EACb9N,EAAAR,YAAYG,QAIb8N,EAIX3R,YAAY4C,GACR,OAAIzC,KAAK8Q,gBACL9Q,KAAK8Q,iBACL9Q,KAAK6S,QAAQ7S,KAAK8S,gBAAgBrQ,QAO1C5C,gBAAgB4C,GACZ,IAAIsQ,EAAYtQ,EAAOwD,QAMvB,OALIjG,KAAK8Q,gBAELiC,EAAUvO,EAAIxE,KAAKkG,IAAI1B,GAGpBuO,EAKXlT,QAAQ4C,GAEJ,GAAIzC,KAAK8Q,cAAe,CAUpB,IAAIxH,EAAUtJ,KAAK0R,YAAYjP,GAC/BzC,KAAK4E,OAAS0E,EAAQ1E,OAElB0E,GAAWtJ,KAAK4E,SAAWb,EAAAR,YAAYC,OACxCxD,KAAK4S,QAAUtJ,EAAQpD,IAAI3B,QAI1BvE,KAAK4E,SAAWb,EAAAR,YAAYC,MAC7BxD,KAAKgT,SAASrR,KAAKsR,IAAIjT,KAAK4S,QAAUnQ,EAAO8B,IAC7CvE,KAAKkG,IAAI3B,EAAIvE,KAAK4S,QAAU5S,KAAKmG,YAEhCnG,KAAKgT,SAASrR,KAAKsR,IAAIjT,KAAKkG,IAAI3B,EAAI9B,EAAO8B,IAKvD1E,4BACI,OAAS8N,EAAApN,WAAYoN,EAAAjN,WAAYiN,EAAAhN,iGCzFzC,MAAAmD,EAAAlG,EAAA,GAEAI,EAAAkV,qBAA4BpP,EAAGK,MAC7BtE,cACEyE,QACAtE,KAAKgT,SAAS,GACdhT,KAAK4R,UAAU,GACf5R,KAAKuE,EAAI,EACTvE,KAAKwE,EAAI,EACTxE,KAAKyE,MAAQ,IAAIX,EAAG+E,MAAM,IAAK,IAAK,iBAAAhI,EAAAC,EAAAvE,GAAA,aAAAK,OAAA6B,eAAAqC,EAAA,cAAAhC,OAAA,ICNxC,MAAAkF,EAAApG,EAAA,GAEAI,EAAAmV,qBAGGtT,YAAYuM,GACRpM,KAAKgH,MAAQoF,EAAKpF,QAGtBnH,SAASC,EAAgBsT,GACtB,OAAOpT,KAAKgH,MAAMqM,aAAavT,EAAQsT,GAG1CvT,YAAYmL,GACR,IAAIxE,EAAQxG,KAAKgH,MAAMoE,MAIvB,OAHcpH,EAAAvC,MAAM+E,EACf6E,GAAiB1J,KAAKsR,IAAIjI,EAAShI,SAASqI,OAE7C7I,KAGG,SAAA3B,EAAAC,EAAAvE,GAAA,aAAAK,OAAA6B,eAAAqC,EAAA,cAAAhC,OAAA,ICxBd,MAAAa,EAAA/B,EAAA,GACAoG,EAAApG,EAAA,GAQAI,EAAAsV,sCAN+B3T,EAAAwE,MAC3BtE,YAAY2E,EAAWrE,EAAesE,GAClCH,MAAM,EAAGE,EAAGrE,EAAO,IAAKsE,KAIhC5E,kCACIG,KAAAuT,SAIA1T,eACI,IAKI2T,EAAOxT,KAAKmG,WAAa,EACzBsN,EAAezT,KAAKmG,WANR,GAOhB,IAAK,IAAIuN,KAAS1P,EAAA9B,MAAM,IAAK,CACzB,IAAIyR,EAAc,IAAID,EAClBE,EAAQ,EAAIF,GAASD,EAAe,GACxC,IAAK,IAAIlX,KAAKyH,EAAA9B,MAVF,IAWRlC,KAAKuT,MAAM5W,MACP4H,EAAWhI,EAAIkX,EAAXD,GAA4B7R,KAAKM,SAAW2R,EAAUA,EAAQ,GAClExT,OAAQuB,KAAKG,IAAI,GAAmBH,KAAKM,SAAW0R,EAAcA,EAAY,EAZzE,OAiBjBvO,QAAQC,KAAMkO,MAAOvT,KAAKuT,QAG9B1T,KAAKqH,EAA+BC,GAChC,IAAI0M,EAAY7T,KAAKyE,MAAMqP,WAAW,KAElCC,EAAc/T,KAAKyE,MAAMuP,SAAS,IAAKxL,QAAQ,IAEnDtB,EAAIS,UAAYkM,EAAUjM,SAG1B,IAAIqM,EAAQjU,KAAKkG,IAAI1B,EAAE,EAEvBxE,KAAKuT,MAAM5H,QAAQuI,IACf,IAAIhD,EAAK+C,EAAQC,EAAK9T,OAClB+T,EAAyB,IAAdD,EAAK9T,OACpB8G,EAAIkL,YACJlL,EAAIiH,OAAO+F,EAAK3P,EAAG2M,GACnBhK,EAAIkN,OAAOF,EAAK3P,EAAI4P,EAAUF,GAC9B/M,EAAIkN,OAAOF,EAAK3P,EAAI4P,EAAUF,GAE9B/M,EAAIS,UAAYkM,EAAUjM,SAC1BV,EAAI9E,OAEJ8E,EAAIkL,YACJlL,EAAIiH,OAAO+F,EAAK3P,EAAG2M,GACnBhK,EAAIkN,OAAOF,EAAK3P,EAAO4P,EAAS,EAAZ,EAAgBF,GACpC/M,EAAIkN,OAAOF,EAAK3P,EAAI4P,EAAUF,GAC9B/M,EAAIS,UAAYoM,EAAYnM,SAC5BV,EAAI9E,0FC9DhB,MAAA0B,EAAAlG,EAAA,GACA+B,EAAA/B,EAAA,GAEAoG,EAAApG,EAAA,GAEAyW,EAAAzW,EAAA,IACA+P,EAAA/P,EAAA,GACA0W,EAAA1W,EAAA,IAEAI,EAAAuW,qBAA4B5U,EAAAwE,MAKxBtE,YAEW4E,EACAtE,EAAgB,IAChBqU,EAAgB,KAEvBlQ,MAAM,EAAGkQ,EAAM,EAAGrU,EAAOqU,EAAO/P,GAJzBzE,KAAAyE,QACAzE,KAAAG,QACAH,KAAAwU,QARXxU,KAAAmI,aAWInI,KAAKuF,OAASvF,KAAKuF,OAAO1C,OAAO2C,KAAWA,aAAiB1B,EAAG2B,OAAOC,mBAEvE,IAAIuO,GAASO,EAAM,EAGnBxU,KAAKyU,YAAYR,EADC,GACmBjU,KAAKyE,MAAM+D,QAAQ,MAGxD,IACIkM,EAAcF,EADD,GAEjB,IAAK,IAAIjY,KAAKyH,EAAA9B,MAFG,IAGblC,KAAKyU,YACDR,EARU,GAQaS,EAAY,EAAMA,GAAenY,EAAE,GAC1DmY,EACA1U,KAAKyE,MAAMgE,OAAO,IAAO,IAAOlM,IAIxCyD,KAAK+F,IAAI,IAAIsO,EAAAf,WAAWkB,EAAM,EAAGxU,KAAKmG,WAAYnG,KAAKyE,MAAM+D,QAAQ,OAGjE3I,YAAY2E,EAAWqG,EAAcpG,GACzC,IAAIkQ,EAAW,IAAIhV,EAAAwE,MAAM,EAAGK,EAAGxE,KAAKmG,WAAY0E,EAAMpG,GACtDzE,KAAK+F,IAAI4O,GAGb9U,KAAKqH,EAA+BC,GAChC7C,MAAM2J,KAAK/G,EAAKC,GAepBtH,cAAcqJ,GACVA,EAASxE,SAELwE,EAASrC,aACTqC,EAASrC,WAAW+C,OAAO7E,kBAAkBpI,KAAKuM,GAElDlJ,KAAK4U,gBAET5U,KAAKmI,UAAUxL,KAAKuM,GAIxBrJ,sBAAsB4C,EAAgBoS,GAClC,IAAIjS,EAAW5C,KAAKmI,UAAUtF,OAAOqG,GACjCA,EAAS9E,qBAAqByQ,GAGlC,GAAIjS,GAAYA,EAASnG,OAAS,EAAG,CACjC,IAAIqG,EAAoBgS,GAAQrS,EAAOO,SAAS8R,GAChD,OAAO9Q,EAAAvC,MAAMmB,EAAUE,IAI/BjD,YAAYC,EAAgBiV,GAInB/U,KAAKgV,SAAWhV,KAAK4U,eAE1B,IAAIK,EAAUjV,KAAKgV,QAAQE,YAAYpV,GACnCsT,EAAO2B,EAAYvO,QAAQ,GAC3B2O,EAAWnV,KAAKgV,QAAQE,YAAY9B,GAMxC,OAJWpT,KAAKgV,QAAQI,SAASH,EAASE,GAYtCtV,eACJ,IAAIwV,EAAOrV,KAAKmI,UAAUC,KAAKc,GAAYA,EAAS9E,qBAAqBuJ,EAAArN,gBACrE+U,IACJrV,KAAKgV,QAAU,IAAIV,EAAAnB,eAAekC,qFC/G1C,MAAA1V,EAAA/B,EAAA,GAEA0X,EAAA1X,EAAA,IACA2X,EAAA3X,EAAA,IACA+P,EAAA/P,EAAA,GACAiM,EAAAjM,EAAA,GACA4X,EAAA5X,EAAA,GACA6X,EAAA7X,EAAA,GACAoG,EAAApG,EAAA,GACA8X,EAAA9X,EAAA,SAGa+X,UAAkBhW,EAAAiW,MAA/B/V,kCAUYG,KAAA6V,yBAAmC,EAM3C7V,KAAAmI,aACAnI,KAAA8V,UAEA9V,KAAA+V,YAKOlW,aAAamW,GAChBhW,KAAKgW,KAAOA,EAEZhW,KAAKqE,OAAS,IAAIiR,EAAAf,OAAOyB,EAAKC,MAAMxR,OACpCzE,KAAK+F,IAAI/F,KAAKqE,QAEdrE,KAAKkW,OAAS,IAAIX,EAAArC,OAClBlT,KAAK+F,IAAI/F,KAAKkW,QAEdlW,KAAKmW,IAAM,IAAIX,EAAAxG,IAAI,KAAO5K,IAClBpE,KAAKoW,mBACLpW,KAAKqW,OAAOrW,KAAKoW,mBAErBpW,KAAKsW,kBAAkBlS,KAE3BpE,KAAK+F,IAAI/F,KAAKmW,KAEdnW,KAAKuW,sBAKF1W,aACHG,KAAKgW,KAAKQ,MAAMC,SAASC,QAAQ/Q,GAAG,OAAS7E,IACzC,GAAId,KAAK+V,SACL/V,KAAK2W,OAAOzQ,IAAMlG,KAAK2W,OAAOzQ,IAAIH,IAC9B/F,KAAK4W,WAAWlN,IAAI5I,EAAEoF,UAEvB,CACHlG,KAAKkW,OAAOhQ,IAAMpF,EAAEoF,IAEpB,IAAI2Q,EAAkB7W,KAAKoW,kBAC3B,GAAIS,EAAiB,CAEjB,IAAIC,EAAcD,EAAgB/D,gBAAgB9S,KAAKkW,OAAOhQ,KAC9DlG,KAAKkW,OAAOhQ,IAAM4Q,EAElBD,EAAgBhE,QAAQ7S,KAAKkW,OAAOhQ,SAOhDlG,KAAKgW,KAAKQ,MAAMC,SAASC,QAAQ/Q,GAAG,KAAO7E,IACnCd,KAAK+V,WAAY/V,KAAK+V,eAG9B/V,KAAKgW,KAAKQ,MAAMC,SAASC,QAAQ/Q,GAAG,OAAS7E,IACzC,GAAIA,EAAEiW,QAAUpX,EAAAqX,MAAMC,cAAczT,KAAM,CACtC,MAAMqT,EAA4B7W,KAAKoW,kBACvC,GAAIS,EAAiB,CACjB,IAAIK,GAAkBL,EAAgBjO,cAElCiO,GAAmBK,GAAkBL,EAAgBM,YAAYrW,EAAEoF,OAEnElG,KAAKqE,OAAO+S,cAAcP,GAC1B7W,KAAKuW,oBAAoBzV,EAAEoF,YAK5BpF,EAAEiW,SAAWpX,EAAAqX,MAAMC,cAAcI,SACxCrX,KAAK+V,YACL/V,KAAK4W,WAAa9V,EAAEoF,OAI5BlG,KAAKgW,KAAKQ,MAAMC,SAASC,QAAQ/Q,GAAG,QAAU7E,IAC1C,IAAIwW,EAAItX,KAAK2W,OAAOY,UAGhBzW,EAAE0W,OAAS,EACXxX,KAAK2W,OAAOtW,KAAKsB,KAAKC,IAAI0V,EAHnB,IACW,IAGXxW,EAAE0W,OAAS,GAClBxX,KAAK2W,OAAOtW,KAAKsB,KAAKG,IAAIwV,EALnB,IACD,QAQdtX,KAAKgW,KAAKQ,MAAMiB,SAAS9R,GAAG,QAAU7E,IAC9BA,EAAE4W,MAAQ/X,EAAAqX,MAAMW,KAAKC,GACjB5X,KAAKqE,OAAO8D,WAAanI,KAAKqE,OAAO8D,UAAU,KAC/CnI,KAAK2W,OAAOkB,KAAK7X,KAAKqE,OAAO8D,UAAU,GAAGjC,IAAK,KAC/ClG,KAAK2W,OAAOtW,KAAK,GAAK,QAM/BR,eACHG,KAAKgW,KAAKQ,MAAMC,SAASC,QAAQoB,IAAI,QACrC9X,KAAKgW,KAAKQ,MAAMC,SAASC,QAAQoB,IAAI,QACrC9X,KAAKgW,KAAKQ,MAAMC,SAASC,QAAQoB,IAAI,MACrC9X,KAAKgW,KAAKQ,MAAMC,SAASC,QAAQoB,IAAI,SAyBjCjY,+BACJ,IAAIkY,EAAkCpC,EAAUqC,sBAC5CC,EAAiCjY,KAAKmI,UAAU9F,IAAI6G,GAAYA,EAAS9E,UAAU9F,MAGvF,OAAOyZ,EAAmB3P,KAAKhE,IAAc6T,EAAqBhN,SAAS7G,EAAU9F,OAG/EuB,oBAAoBqG,EAAc,IAAIvG,EAAAI,OAAO,EAAE,IACrD,IAAIqE,EAAYuR,EAAUuC,cAAclY,KAAK6V,yBAA2BF,EAAUuC,cAAczb,QAC5F0b,EAAcnY,KAAKoY,+BACnBD,EAAe/T,EAAY+T,EACxBnY,KAAK6V,0BAA4B,EACxC7V,KAAKsW,kBAAkBlS,EAAW8B,GAGtCrG,kBAAkBuE,EAAsB8B,EAAc,IAAIvG,EAAAI,OAAO,EAAE,IAE/D,GADAC,KAAKoW,kBAAoB,KACrBhS,EAAW,CACXA,EAAUtE,OAASoG,EACnBlG,KAAKmW,IAAIjH,iBAAiB9K,EAAU9F,QACpC,IAAI+Z,EAAarY,KAAKsY,cAAclU,GACpCpE,KAAKoW,kBAAoBiC,EAEzBrY,KAAK2W,OAAOzQ,IAAMmS,EAAWnS,IAC7BlG,KAAK2W,OAAOtW,KAAK+D,EAAU/D,KAAM,SAC9B,CACHL,KAAKmW,IAAIjH,QAAQ,qBAGjB,IAAI,IAAI3S,KAAKyH,EAAA9B,MAAM,GAAIlC,KAAKuY,gBAM1B1Y,eAGN,IAAI2Y,EAAOxY,KAAKqE,OAAO2E,sBAAsBhJ,KAAKkW,OAAOhQ,IAAKyH,EAAAhN,gBAE1DsG,EAAU,IAAIwO,EAAA5H,QAAQ2K,EAAMxY,KAAKqE,QACrC4C,EAAQwR,KAAK9K,EAAAnN,KAAMmN,EAAArN,gBAGnBN,KAAK8V,OAAOnZ,KAAKsK,GACjBjH,KAAK+F,IAAIkB,GAMHpH,cAAcuE,GACpBgB,QAAQC,IAAI,SAAWjB,cACvB,IAAIsU,EAAkB1Y,KAAK2Y,8BAA8BvU,GAIzD,OAHAsU,EAAgB7F,QAAQ6F,EAAgB5F,gBAAgB4F,EAAgBxS,MACxElG,KAAK+F,IAAI2S,GACT1Y,KAAKmI,UAAUxL,KAAK+b,GACbA,EAGH7Y,8BAA8BuE,GAGlC,OADe,MADJuR,EAAUiD,eAAexU,EAAUlE,OACtBkE,EAAWpE,KAAKqE,SA5MrCsR,EAAAiD,gBACHrO,WAAAV,EAAAU,WACAF,mBAAAR,EAAAQ,mBACAF,SAAAN,EAAAM,SACAJ,iBAAAF,EAAAE,iBACAE,eAAAJ,EAAAI,eACAQ,mBAAAZ,EAAAY,mBACAmD,gBAAA8H,EAAA9H,iBAiHG+H,EAAAkD,eAAiB,IAAIlL,EAAArN,eACrBqV,EAAAmD,gBAAkB,IAAInL,EAAApN,WAEtBoV,EAAAqC,uBACH,IAAIrK,EAAArN,eAEJ,IAAIqN,EAAA/M,YACJ,IAAI+M,EAAAnN,KACJ,IAAImN,EAAApN,WACJ,IAAIoN,EAAAlN,aACJ,IAAIkN,EAAAhN,gBAIDgV,EAAAuC,iBAvIXla,EAAA2X,2FCZA,MAAAhW,EAAA/B,EAAA,GAEAoG,EAAApG,EAAA,SAEamb,EAAblZ,cAEIG,KAAAgZ,eAFJhb,EAAA+a,eAOaE,EAAbpZ,cAGEG,KAAAyE,MAAeT,EAAAjC,OAAOkX,EAAMC,QACxBzQ,OAAO,IACPqL,WAAW,IACf9T,KAAAmZ,SAAkBnV,EAAAjC,QAASpC,EAAAkJ,MAAMuQ,KAAMzZ,EAAAkJ,MAAMwQ,aACvC7Q,QAAQ,KACRsL,WAAW,KACjB9T,KAAAsZ,OAAiB,IAAIP,GARdE,EAAAC,QAAUvZ,EAAAkJ,MAAMC,IAAKnJ,EAAAkJ,MAAM0Q,KAAM5Z,EAAAkJ,MAAMqJ,OADhDlU,EAAAib,yBCXAhb,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAAyB,EAAAC,EAAAvE,GAAA,aAAAK,OAAA6B,eAAAqC,EAAA,cAAAhC,OAAA,ICAxC,MAAAgF,EAAAlG,EAAA,GACM4b,EAAQ5b,EAAQ,IAEtB,IAAI6b,GACAC,MAAO,IAAI5V,EAAG6V,QAAQH,IAGjBxb,EAAAyb,2FCPT,MAAA9Z,EAAA/B,EAAA,GAEAgc,EAAAhc,EAAA,IAEAI,EAAA6b,mBAA0Bla,EAAAma,OACxBja,YAAmBoW,GACjB3R,OACEnE,MAAO,IACPC,OAAQ,IACR2Z,YAAapa,EAAAqa,YAAYC,WACzBC,gBAAiBjE,EAAMkD,WALRnZ,KAAAiW,QAQZpW,QACL,IAAIsa,EAAS,IAAIxa,EAAAya,OACjB,IAAK,IAAI1C,KAAOkC,EAAAH,UACdU,EAAOE,YAAYT,EAAAH,UAAU/B,IAE/B,OAAOpT,MAAMgW,MAAMH,oFClBvB,MAAAI,EAAA3c,EAAA,IACA4c,EAAA5c,EAAA,IACA6c,EAAA7c,EAAA,IAEM8c,EAAW,IAAIF,EAAAvB,MACfjD,EAAO,IAAIuE,EAAAV,KAAKa,GAGhBC,EAAY,IAAIF,EAAA9E,UAAUK,GAChCA,EAAKjQ,IAAI,YAAa4U,GAEtB3E,EAAKsE,QAAQM,KAAK,KAChB5E,EAAK6E,UAAU","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([25,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Vector } from 'excalibur';\r\n\r\nexport class Structure {\r\n    name: string = '(default structure name)';\r\n    description: string = '(default structure description)';\r\n    view: string = '<add a default structure (room) view>';\r\n    width: number = 10;\r\n    height: number = 10;\r\n    zoom: number = 2 //.25\r\n    constructor(public origin: Vector = new Vector(0, 0)) { }\r\n}\r\n\r\nexport class MissionControl extends Structure {\r\n    name: string = 'Mission Control';\r\n    description: string = 'Keeping everything on track';\r\n    view: string = 'MissionControlView';\r\n    width: number = 90;\r\n    height: number = 24;\r\n    zoom = 0.5\r\n}\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = 30;\r\n    height: number = 100;\r\n    zoom = 0.25\r\n}\r\n\r\nexport class Dome extends Structure {\r\n    name: string = 'Biodome';\r\n    description: string = 'Biome sweet biome';\r\n    view: string = 'DomeView';\r\n    width: number = 60;\r\n    height: number = 50;\r\n    zoom = 0.2\r\n}\r\n\r\nexport class AccessTunnel extends Structure {\r\n    name: string = 'Access Tunnel'\r\n    description: string = 'in the hallway'\r\n    view: string = 'AccessTunnelView'\r\n    width: number = 10\r\n    height: number = 9\r\n}\r\n\r\nexport class CommonArea extends Structure {\r\n    name: string = 'Common Area'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = 120\r\n    height: number = 70\r\n}\r\n\r\nexport class LivingQuarters extends Structure {\r\n    name: string = 'Living Quarters'\r\n    description: string = 'sleepy time'\r\n    view: string = 'LivingQuartersView'\r\n    width: number = 80\r\n    height: number = 60\r\n}\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Surface Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = 20\r\n    height: number = 8\r\n}","import { Vector } from \"excalibur\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem)) //vec) => cursor.distance(vec)\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n}","import { Actor, Vector, CollisionType, Color, Label } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport * as ex from 'excalibur';\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, flatSingle, measureDistance } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class Building extends Actor {\r\n    built: boolean = false\r\n    hover: boolean = false\r\n\r\n    facing: Orientation = Orientation.Right\r\n    edgeWidth: number = 4\r\n    hideBox: boolean = false\r\n\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    constructor(public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          structure.origin.x, // + 20,\r\n          structure.origin.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new ex.Vector(0,0)\r\n\r\n        console.log(`CREATE NEW ${structure.name}`, { origin: structure.origin, width: structure.width, height: structure.height })\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.add(new Label(this.structure.name))\r\n    }\r\n\r\n    setup(): void {}\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    } \r\n    reshape(cursor: Vector): void {\r\n        // by default just follow the mouse\r\n        this.pos = cursor.clone()\r\n\r\n    }\r\n\r\n    // response is whether we're 'done'\r\n    // (in general this would be true, unless you need special handling\r\n    // -- multiple clicks for some reason...)\r\n    handleClick(cursor: Vector): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    interact(citizen: Citizen) {\r\n        // should we give this citizen an item?\r\n        // should we get a resource?\r\n        // etc\r\n        return true\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        // super.draw(ctx, delta)\r\n        if (!this.hideBox) {\r\n            this.drawRect(ctx, this.aabb(), this.edgeWidth)\r\n        }\r\n\r\n        let debug = false;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    this.drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n            if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    this.drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n\r\n        if (this.built && this.step % 10 === 0 && this.product.length < this.capacity) {\r\n            this.produce(this.step);\r\n        }\r\n        this.step += 1\r\n    }\r\n\r\n    protected product: Color[] = []\r\n    protected capacity: number = 4\r\n    protected produce(step: number) {}\r\n\r\n    protected drawRect(ctx: CanvasRenderingContext2D, rectangle: Rectangle, edgeWidth: number = 5, color: Color = null) {\r\n        let { x, y, width, height } = rectangle;\r\n\r\n        let edge = color || this.edgeColor();\r\n        ctx.fillStyle = edge.toRGBA();\r\n        ctx.fillRect(x, y, width, height) // this.getWidth(), this.getHeight())\r\n\r\n        let main = color || this.mainColor();\r\n        ctx.fillStyle = main.toRGBA();\r\n        ctx.fillRect(\r\n            x + edgeWidth,\r\n            y + edgeWidth,\r\n            width - edgeWidth*2,\r\n            height - edgeWidth*2\r\n        )\r\n    }\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.5);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    protected validConnectingStructures(): (typeof Structure)[] {\r\n        return [ ];\r\n    }\r\n\r\n    protected findSlot(pos: Vector): Slot {\r\n        let buildings = this.validConnectingStructures().map(structure =>\r\n            this.planet.closestBuildingByType(pos, structure)\r\n        )\r\n        let slotList = flatSingle(buildings.map(building => building ? building.slots() : []))\r\n        // select slots that COULD match one of our faces\r\n        slotList = slotList.filter((slot: Slot) => this.slots().some((ourSlot: Slot) => slot.facing === flip(ourSlot.facing)))\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(cursor: Vector) {\r\n        let theSlot = this.findSlot(cursor)\r\n        if (theSlot) {\r\n            // position us so our slot lines up\r\n            let matchingSlot = this.slots().find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n}","import { Building } from './Building';\r\n\r\nimport { AccessTunnelView } from './AccessTunnelView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { MissionControlView } from './MissionControlView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { LivingQuartersView } from './LivingQuartersView';\r\n\r\nexport {\r\n    Building,\r\n\r\n    AccessTunnelView,\r\n    CommonAreaView,\r\n    DomeView,\r\n    MissionControlView,\r\n    TunnelView,\r\n    LivingQuartersView,\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            console.log(\"create new node\", { newNode })\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        console.log(\"edge from\", { src, dst })\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { AccessTunnelView } from \".\";\r\nimport { MissionControl, Dome } from \"../../models/Structure\";\r\n\r\nexport class SurfaceRoadView extends AccessTunnelView {\r\n    edgeWidth: 0\r\n    // pickingOrigin: boolean = true\r\n    validConnectingStructures() {\r\n        return [ MissionControl, Dome ];\r\n    }\r\n}","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { Structure } from \"../models/Structure\";\r\n\r\nexport class Citizen extends Actor {\r\n    walkSpeed: number = 150\r\n    carrying: Color = null\r\n    path: Vector[] = []\r\n\r\n    constructor(building: Building, protected planet: Planet) {\r\n        super(building.nodes()[0].x,building.nodes()[0].y,4,10,Color.White)\r\n        // this.pos.y -= this.getHeight()\r\n        // this.walkSpeed += (Math.random()*20)-10\r\n\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            ctx.fillStyle = this.carrying.toRGBA()\r\n            ctx.fillRect(this.x+4, this.y-3, 5, 5)\r\n        }\r\n        // if (this.path) {\r\n        //     ctx.strokeStyle = Color.Blue.lighten(0.5).toRGBA()\r\n        //     ctx.beginPath()\r\n        //     ctx.moveTo(this.path[0].x, this.path[0].y)\r\n        //     this.path.forEach((step) => {\r\n        //         ctx.lineTo(step.x,step.y)\r\n        //     })\r\n        //     ctx.stroke()\r\n        // }\r\n    }\r\n\r\n    carry(c: Color) {\r\n        this.carrying = c;\r\n    }\r\n\r\n    drop() {\r\n        if (this.carrying) {\r\n            let c = this.carrying.clone();\r\n            this.carrying = null;\r\n            return c\r\n        }\r\n        return true\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async walkTo(structure: typeof Structure, onArrival: (Building) => any) {\r\n        let building = this.planet.closestBuildingByType(this.pos, structure)\r\n        console.log(\"walking to\", { building })\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n        console.log(\"lookup path\", path)\r\n\r\n        // this.path = path;\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = null\r\n            onArrival(building);\r\n        }\r\n\r\n        return true;\r\n\r\n        // await this.actions.moveTo(\r\n        //     building.nodes()[0].x, // + building.getWidth() / 2,\r\n        //     building.nodes()[0].y, // + building.getHeight() / 2,\r\n        //     //  0, \r\n        //     this.walkSpeed\r\n        // ).asPromise();\r\n\r\n        // onArrival(building);\r\n        // return true;\r\n    }\r\n\r\n    async patrol(structure: typeof Structure, otherStructure: typeof Structure, onArrival: (Building) => any) {\r\n        await this.walkTo(structure, onArrival) //.then(() => onArrival)\r\n        //(building) => {\r\n        //    onArrival(building)\r\n        //})\r\n        await this.walkTo(otherStructure, onArrival) //.then(() => onArrival(otherBuilding))\r\n\r\n        this.patrol(structure, otherStructure, onArrival)\r\n        //this.walkTo(building).then(() => {\r\n        //    onArrival(building);\r\n        //    this.walkTo(otherBuilding, building, onArrival);\r\n        //})\r\n    }\r\n\r\n    work(workshop: typeof Structure, store: typeof Structure) {\r\n        this.patrol(workshop, store, (building: Building) => {\r\n            console.log(\"arrived at\", { building })\r\n            building.interact(this)\r\n            // return true\r\n        })\r\n    }\r\n}","import { Label, UIActor, Color } from \"excalibur\";\r\nimport { Dome, Structure, AccessTunnel, CommonArea, LivingQuarters, SurfaceRoad } from \"../models/Structure\";\r\n\r\nexport class Hud extends UIActor {\r\n    label: Label\r\n    constructor(message='welcome to osiris', protected onBuildingSelect=null) {\r\n        super(0,0);\r\n        this.label = new Label(message, 10, 32, 'Helvetica')\r\n        this.label.fontSize = 32\r\n        this.label.color = Color.White\r\n        this.add(this.label)\r\n\r\n        this._makePalette(onBuildingSelect)\r\n    }\r\n    protected _paletteElement: HTMLDivElement\r\n    protected _paletteButton\r\n\r\n    protected _makePalette(fn: (Structure) => any) {\r\n        this._paletteElement = document.createElement('div') \r\n        this._paletteElement.style.position = 'absolute'\r\n        document.body.appendChild(this._paletteElement)\r\n\r\n        // buttons\r\n        let structures = [\r\n            Dome, AccessTunnel, CommonArea,\r\n            LivingQuarters, SurfaceRoad,\r\n        ];\r\n        structures.forEach((structure: typeof Structure) => {\r\n            let s = new structure()\r\n            let _paletteButton = this.buttonFactory(s);\r\n            this._paletteElement.appendChild(\r\n                _paletteButton\r\n            )\r\n\r\n\r\n            _paletteButton.onclick = (e) => {\r\n                // console.log(`${structure.name}`)\r\n                fn(s) //new structure())\r\n                e.stopPropagation()\r\n            }\r\n        });\r\n    }\r\n\r\n    private buttonFactory(s: Structure) {\r\n        let _paletteButton = document.createElement('button');\r\n        _paletteButton.textContent = `${s.name}`;\r\n        _paletteButton.style.display = 'block';\r\n        _paletteButton.style.fontSize = '13pt';\r\n        _paletteButton.style.fontFamily = 'Helvetica';\r\n        _paletteButton.style.padding = '8px';\r\n        _paletteButton.style.width = '100px';\r\n        _paletteButton.style.background = Color.White.darken(0.08).toRGBA();\r\n        _paletteButton.style.color = Color.Black.lighten(0.16).toRGBA();\r\n        return _paletteButton;\r\n    }\r\n\r\n    message(text: string) { this.label.text = text }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this._paletteElement) {\r\n            // let canvasHeight = this._engine.canvasHeight / window.devicePixelRatio;\r\n            // let canvasWidth = this._engine.canvasWidth / window.devicePixelRatio;\r\n\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            // let buttonWidth = this._playButton.clientWidth;\r\n            // let buttonHeight = this._playButton.clientHeight;\r\n            this._paletteElement.style.left = `${left + 20}px`;\r\n            this._paletteElement.style.top = `${top + 100}px`;\r\n\r\n        }\r\n    }\r\n\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LivingQuartersView extends CommonAreaView {\r\n    edgeWidth: number = 2\r\n\r\n    // constrainCursor(cursor: Vector) {\r\n    //     // okay, we want the nearest slots of the nearest building\r\n    //     // let closestCommon = this.planet.closestBuildingByType(cursor, CommonArea)\r\n    //     // if (closestCommon) {\r\n    //     //     if (closestCommon.slots(this.getWidth()).length > 0) {\r\n    //     //         let slots: Slot[] = closestCommon.slots(this.getWidth())\r\n    //     //         let closestSlot: Slot = closest(cursor, slots, s => s.pos)\r\n    //     //         // this.facing = -closestSlot.facing //.facing * 90\r\n    //     //         // this.aa\r\n    //     //         // this.getGeometry()\r\n    //     //         return closestSlot.pos\r\n    //     //     }\r\n    //     // }\r\n    //     // return cursor\r\n    // }\r\n\r\n    // draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n    //     super.draw(ctx, delta)\r\n    //     // ctx.save()\r\n    //     // let { x, y } = this.pos\r\n    //     // if (this.facing === Orientation.Up) { y -= this.getHeight() }\r\n    //     // if (this.facing === Orientation.Left) { x -= this.getWidth() }\r\n    //     // ctx.translate(x,y) //this.pos.x, this.pos.y)\r\n\r\n    //     // let theta = (this.facing * (Math.PI/2)) - (Math.PI/2)\r\n    //     // this.rotation = theta\r\n    //     // ctx.rotate(theta) \r\n\r\n    //     // let edge = this.edgeColor();\r\n    //     // ctx.fillStyle = edge.toRGBA();\r\n    //     // ctx.fillRect(\r\n    //     //     0,0,\r\n    //     //     // -this.getWidth()/2, -this.getHeight()/2,\r\n    //     //     this.getWidth(), this.getHeight()\r\n    //     // )\r\n\r\n    //     // let main = this.mainColor();\r\n    //     // ctx.fillStyle = main.toRGBA();\r\n    //     // ctx.fillRect(\r\n    //     //     this.edgeWidth, // - this.getWidth()/2,\r\n    //     //     this.edgeWidth, // - this.getHeight()/2,\r\n    //     //     this.getWidth() - this.edgeWidth*2,\r\n    //     //     this.getHeight() - this.edgeWidth*2\r\n    //     // )\r\n\r\n    //     // ctx.restore()\r\n    // }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { MissionControl } from \"../../models/Structure\";\r\nimport { range, eachCons, measureDistance } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y // + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), y) //, Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n        // super.graph(g)\r\n        // okay, so we need to connect our 'line' of nodes together\r\n        // we don't necessarily need to care if there IS a child node there\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        // connect node to first slot...\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        eachCons(this.slotHeights(), 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n        this.slotHeights().forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n\r\n            child.graph(g)\r\n        }\r\n        //  this.s\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 40\r\n        let slotCount = Math.floor((this.getHeight()-60) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                100 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        // let slotSize = 40\r\n        // let slotCount = Math.floor((this.getHeight()-60) / slotSize)\r\n        let theSlots: Slot[] = []\r\n\r\n        // one at the top pointing up??\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) { //range(slotCount)) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    // 100 + this.pos.y + i * slotSize,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    // 100 + this.pos.y + i * slotSize,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n        // console.log({theSlots})\r\n        return theSlots;\r\n    } \r\n\r\n    validConnectingStructures() { return [ MissionControl ] }\r\n\r\n    handleClick(cursor: Vector) {\r\n        // pick nearest mission ctrl as origin\r\n        if (this.pickingOrigin) {\r\n            //let theSlot = this.findSlot(cursor);\r\n            ////let lastCtrl: Building = this.planet.closestBuildingByType(\r\n            ////    this.pos, MissionControl // 'Mission Control'\r\n            ////)\r\n            //if (theSlot) {\r\n            //    this.pos = theSlot.pos\r\n            //    // let missionControlWidth = new MissionControl().width\r\n            //    // this.pos.x = slot.pos.x + missionControlWidth / 2 - this.getWidth() / 2 //[0].x\r\n            //    let matchingSlot = this.slots().find(s => s.facing == flip(theSlot.facing))\r\n            //    if (matchingSlot) {\r\n            //        let offset = this.pos.sub(matchingSlot.pos)\r\n            //        this.pos.addEqual(offset)\r\n\r\n                    this.pickingOrigin = false;\r\n                    return false;\r\n            //    }\r\n            //}\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // picking a depth for a tunnel first?\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n\r\n            this.alignToSlot(cursor)\r\n            //let theSlot = this.findSlot(cursor);\r\n            //if (theSlot) {\r\n            //    this.pos = theSlot.pos\r\n            //}\r\n            // snap to nearest mission ctrl?\r\n            //let lastCtrl: Building = this.planet.closestBuildingByType(\r\n            //    cursor, MissionControl //'Mission Control'\r\n            //)\r\n            //this.pos.x = lastCtrl.x + lastCtrl.getWidth() / 2 - this.getWidth() / 2 //[0].x\r\n\r\n        } else {\r\n            // we're determining depth of tunnel\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n    // draw(ctx: CanvasRenderingContext2D) {\r\n    //     let depth = this.getHeight()\r\n    //     let width = this.getWidth()\r\n    //     let edgeWidth = 4\r\n\r\n    //     let edgeColor = this.edgeColor()\r\n    //     let mainColor = this.mainColor()\r\n\r\n    //     ctx.fillStyle = edgeColor.toRGBA()\r\n    //     ctx.fillRect(this.x, this.y, width, depth)\r\n\r\n    //     if (this.pickingOrigin) { mainColor.a = 0.5 }\r\n    //     ctx.fillStyle = mainColor.toRGBA()\r\n    //     ctx.fillRect(this.x + edgeWidth, this.y, width - edgeWidth*2, depth)\r\n    // }\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n}","import { Actor, Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { SSL_OP_TLS_BLOCK_PADDING_BUG } from \"constants\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class MissionControlView extends Building {\r\n    hideBox = true\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight(); // / 2;\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n           \r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        // cursor.x = this.x //.getTop()\r\n        cursor.y = this.planet.getTop(); //Math.max(planet.getTop() + 100, cursor.y)\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor // x = cursor.x\r\n        this.pos.y -= this.getHeight() - 2 // + 1\r\n    }\r\n\r\n    interact(citizen: Citizen) {\r\n        citizen.drop()\r\n        return true\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        let color = this.mainColor(); //Color.White //.darken(0.3)\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n        // y is going to be surface height\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        // could draw a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3*(this.getWidth()/4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n        // shadow?\r\n        //ctx.fillStyle = this.color.darken(0.2).toRGBA()\r\n        //ctx.fillRect(this.x, this.y, this.getHeight())\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { SurfaceRoad } from \"../../models/Structure\";\r\n\r\n// we're constrained to the surface, so...\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots = [];\r\n        let slotY = this.getHeight(); // / 2;\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    // constrainCursor(cursor: Vector): Vector {\r\n    //     // cursor.x = this.x //.getTop()\r\n    //     cursor.y = this.planet.getTop() - this.getHeight() + 4; //Math.max(planet.getTop() + 100, cursor.y)\r\n    //     return cursor;\r\n    // }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n        // this.pos = cursor // x = cursor.x\r\n    }\r\n\r\n    interact(citizen: Citizen) {\r\n        // give actor a green block?\r\n        if (this.product.length > 0) {\r\n            citizen.carry(Color.Green)\r\n            this.product.pop()\r\n        }\r\n        return true\r\n        // this.structure.interaction\r\n    }\r\n\r\n    produce(step: number) {\r\n        if (step % 100 === 0) {\r\n            this.product.push(Color.Green)\r\n        }\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        // super.draw(ctx, delta)\r\n\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5, // / 2,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = produced.toRGBA();\r\n            ctx.fillRect(this.x + 20 * index, this.y - 20, 18, 18)\r\n        })\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } // this.baseColor; }\r\n\r\n    validConnectingStructures() { return [ SurfaceRoad ]; }\r\n}","import { Building } from \"./Building\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { AccessTunnelView } from \"./AccessTunnelView\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { AccessTunnel, Structure } from \"../../models/Structure\";\r\nimport { range, closest, flatSingle } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 5\r\n    edgeWidth: number = 2\r\n    // maybe you can set height AND width of common area view??\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n        return theSlots;\r\n    }\r\n\r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    protected validConnectingStructures(): (typeof Structure)[] {\r\n        return [ AccessTunnel ];\r\n    }\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { MainTunnel, CommonArea, LivingQuarters } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class AccessTunnelView extends Building {\r\n    edgeWidth: number = 1\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // picking a depth for a tunnel first?\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            // let theSlot: Slot = this.findSlot(cursor);\r\n\r\n            // let { facing, pos } = theSlot;\r\n            // this.pos = pos\r\n            // let matching = this.slots().find(s => s.facing == flip(facing))\r\n\r\n            // let offset = this.pos.sub(matching.pos)\r\n            // this.pos.addEqual(offset)\r\n\r\n            let theSlot = this.alignToSlot(cursor)\r\n            this.facing = theSlot.facing\r\n\r\n            if (theSlot && this.facing === Orientation.Left) {\r\n               this.originX = theSlot.pos.x\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n               this.setWidth(Math.abs(this.originX - cursor.x))\r\n               this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n\r\n    validConnectingStructures() {\r\n        return [ MainTunnel, CommonArea, LivingQuarters ];\r\n    }\r\n\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 30; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 1000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(10)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, peakHeight + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, range } from '../../Util';\r\nimport { Citizen } from '../Citizen';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure, MissionControl } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\n\r\nexport class Planet extends Actor {\r\n    buildings: Building[] = []\r\n    citizens: Citizen[]\r\n    navTree: NavigationTree\r\n\r\n    constructor(\r\n        // public effectiveY: number,\r\n        public color: Color,\r\n        public width: number = 2000000,\r\n        public depth: number = 100000,\r\n        ) {\r\n        super(0, depth/2, width, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2 // effectiveY + size/2\r\n        // crust\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 20\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        // let navTree = this.buildNavTree()\r\n        // if (this.navTree) {\r\n        //     let edges = this.navTree.graph.edgeList()\r\n        //     // console.log(\"draw edges\", { edges })\r\n        //     edges.forEach((edge: [Vector, Vector]) => {\r\n        //         let [a,b] = edge\r\n        //         ctx.beginPath()\r\n        //         ctx.moveTo(a.x,a.y)\r\n        //         ctx.lineTo(b.x,b.y)\r\n        //         ctx.stroke() //Color.White.toRGBA())\r\n        //     })\r\n        // }\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true\r\n        // whew\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building)\r\n            // rebuild nav?\r\n            this.buildNavTree()\r\n        }\r\n        this.buildings.push(building);\r\n    }\r\n\r\n\r\n    closestBuildingByType(cursor: Vector, structureType: typeof Structure): Building {\r\n        let matching = this.buildings.filter(building => \r\n            building.structure instanceof structureType //.name === structureName\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (vec) => cursor.distance(vec)\r\n            return minBy(matching, distanceToCursor)\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        // okay, so we want the general graph of connections\r\n        // we can start wtih mission control...\r\n        // console.log({ navGraph: this.navTree })\r\n        if (!this.navTree) { this.buildNavTree() }\r\n        // navTree.edgeToClosest(origin)\r\n        let srcNode = this.navTree.closestNode(origin)\r\n        let dest = destination.nodes()[0]\r\n        let destNode = this.navTree.closestNode(dest)\r\n        // if (!dest) { throw new Error(\"Building does not \")}\r\n        let path = this.navTree.seekPath(srcNode, destNode) //destination.nodes()[0])\r\n        // console.log(\"PATH\", { path })\r\n        // path.unshift(s)\r\n        // path.push(dest)\r\n        return path\r\n\r\n        // hopefully the dest node is in the tree?\r\n        // navTree.shortestPath\r\n        // navTree.shortestPath(source, destination)\r\n\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n        this.navTree = new NavigationTree(ctrl) //this._navTree\r\n        // return navTree\r\n        }\r\n    }\r\n\r\n}","import { Scene, Input, UIActor, Label, Vector, LockCameraToActorStrategy } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MissionControl, MainTunnel, Dome, AccessTunnel, CommonArea, LivingQuarters, SurfaceRoad } from \"../models/Structure\";\r\nimport { Building, DomeView, AccessTunnelView, CommonAreaView, TunnelView, MissionControlView, LivingQuartersView } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud\";\r\nimport { Citizen } from \"../actors/Citizen\";\r\nimport { range } from \"../Util\";\r\nimport { SurfaceRoadView } from \"../actors/Building/SurfaceRoadView\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    static structureViews: { [key: string]: typeof Building } = {\r\n        TunnelView,\r\n        MissionControlView, //: new MissionControlView()\r\n        DomeView,\r\n        AccessTunnelView,\r\n        CommonAreaView,\r\n        LivingQuartersView,\r\n        SurfaceRoadView\r\n    }\r\n    private currentBuildingListIndex: number = 0\r\n\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n    buildings: Building[] = []\r\n    people: Citizen[] = []\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    currentlyBuilding?: Building\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        this.planet = new Planet(game.world.color);\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.hud = new Hud('hi', (structure) => {\r\n            if (this.currentlyBuilding) {\r\n                this.remove(this.currentlyBuilding)\r\n            }\r\n            this.startConstructing(structure)\r\n        });\r\n        this.add(this.hud)\r\n\r\n        this.prepareNextBuilding()\r\n        // this.camera.zoom(0.25)\r\n        // this.camera.y = 0 //-this.planet.depth/2\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentBuilding = this.currentlyBuilding\r\n                if (currentBuilding) {\r\n                    // constrain...\r\n                    let constrained = currentBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentBuilding.reshape(this.player.pos)\r\n                } else {\r\n                    // show pluses where you could expand?\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', (e: Input.PointerUpEvent) => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentBuilding: Building = this.currentlyBuilding\r\n                if (currentBuilding) {\r\n                    let placementValid = !currentBuilding.overlapsAny()\r\n                    // console.log(\"placement valid?\", { placementValid, currentBuilding })\r\n                    if (currentBuilding && placementValid && currentBuilding.handleClick(e.pos)) {\r\n                        // console.log(\"placed!\")\r\n                        this.planet.placeBuilding(currentBuilding)\r\n                        this.prepareNextBuilding(e.pos)\r\n                    } else {\r\n                        // console.log(\"couldn't place?\")\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.planet.buildings && this.planet.buildings[0]) {\r\n                    this.camera.move(this.planet.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n    ////\r\n    static firstStructure = new MissionControl();\r\n    static secondStructure = new MainTunnel();\r\n\r\n    static requiredStructureList: Structure[] = [\r\n        new MissionControl(),\r\n\r\n        new SurfaceRoad(),\r\n        new Dome(),\r\n        new MainTunnel(),\r\n        new AccessTunnel(),\r\n        new LivingQuarters(),\r\n        // new CommonArea(),\r\n    ]\r\n\r\n    static structureList: Structure[] = [\r\n        //new AccessTunnel(),\r\n        //new LivingQuarters(),\r\n        //new AccessTunnel(),\r\n        //new CommonArea(),\r\n    ]\r\n\r\n    private nextMissingRequiredStructure(): Structure {\r\n        let requiredStructures: Structure[] = Construct.requiredStructureList\r\n        let actualStructureNames: string[] = this.buildings.map(building => building.structure.name)\r\n\r\n        // console.log({ actualStructureNames, requiredNames: requiredStructures.map(s => s.name) })\r\n        return requiredStructures.find(structure => !actualStructureNames.includes(structure.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = Construct.structureList[this.currentBuildingListIndex % Construct.structureList.length]; \r\n        let nextMissing = this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        else { this.currentBuildingListIndex += 1 }\r\n        this.startConstructing(structure, pos)\r\n    }\r\n\r\n    startConstructing(structure: Structure, pos: Vector = new Vector(0,0)) {\r\n        this.currentlyBuilding = null // ?\r\n        if (structure) {\r\n            structure.origin = pos\r\n            this.hud.message(`Place ${structure.name}`)\r\n            let theNextOne = this.spawnBuilding(structure)\r\n            this.currentlyBuilding = theNextOne\r\n            // this.camera.pos = theNextOne.constrainCursor(this.player.pos) //camera.pos)\r\n            this.camera.pos = theNextOne.pos // move(theNextOne.pos, 250)\r\n            this.camera.zoom(structure.zoom, 250)\r\n        } else {\r\n            this.hud.message(`Welcome to OSIRIS`)\r\n\r\n            // spawn people?\r\n            for(let i in range(1)) this.spawnCitizen()\r\n            \r\n            // this.camera.addStrategy(new LockCameraToActorStrategy(this.people[0]))\r\n        }\r\n    }\r\n\r\n    protected spawnCitizen() {\r\n        // let ctrl = this.planet.closestBuildingByType(this.player.pos, MissionControl) //bubuildings[0] //.pos\r\n        // let dome = this.planet.closestBuildingByType(this.player.pos, Dome)\r\n        let home = this.planet.closestBuildingByType(this.player.pos, LivingQuarters)\r\n        //buildings[1]\r\n        let citizen = new Citizen(home, this.planet) //ctrl.x, ctrl.y)\r\n        citizen.work(Dome, MissionControl) // LivingQuarters)\r\n\r\n        // citizen.y = this.planet.getTop() + citizen.getHeight() / 3\r\n        this.people.push(citizen)\r\n        this.add(citizen)\r\n        // citizen.setZIndex(1000)\r\n    }\r\n\r\n\r\n\r\n    protected spawnBuilding(structure: Structure): Building {\r\n        console.log(\"spawn\", { structure })\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(anotherBuilding.pos))\r\n        this.add(anotherBuilding)\r\n        this.buildings.push(anotherBuilding)\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure): Building {\r\n        let View = Construct.structureViews[structure.view]\r\n        let building = new View(structure, this.planet)\r\n        return building;\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\n\r\nexport class Colony {\r\n    // origin: Vector\r\n    structures: Structure[] = []\r\n    // build(structure) ...\r\n}\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Red, Color.Blue, Color.Green] // Color.Viridian, Color.Magenta, Color.Chartreuse];\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ). // Color.Rose //World.colors).\r\n        lighten(0.15).\r\n        desaturate(0.65) // sample([Color.Blue, Color.Rose,Color.Blue]).lighten(0.1).desaturate(0.8)\r\n  colony: Colony = new Colony()\r\n}","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword)\r\n}\r\n\r\nexport { Resources }\r\n","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() { //loader: ex.Loader) {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\n// scenes\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}