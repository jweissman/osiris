{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Util.ts","webpack:///./src/values/DeviceSize.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Machine.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/Painting.ts","webpack:///./src/actors/Device.ts","webpack:///./src/models/Structure.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/Game.ts","webpack:///./src/strategies/Strategy.ts","webpack:///./src/actors/Building/BackgroundPatterns.ts","webpack:///./src/values/Scale.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Resources.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/SkyLayer.ts","webpack:///./src/actors/Planet/SkyLayers.ts","webpack:///./src/strategies/EatingStrategy.ts","webpack:///./src/strategies/WhenHungryEatingStrategy.ts","webpack:///./src/strategies/SleepingStrategy.ts","webpack:///./src/strategies/AnyBedSleepingStrategy.ts","webpack:///./src/strategies/ConstructionStrategy.ts","webpack:///./src/strategies/ProximityBasedConstruction.ts","webpack:///./src/values/InteractionRequest.ts","webpack:///./src/strategies/ProductionStrategy.ts","webpack:///./src/strategies/CapacityBasedProduction.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/actors/Hud/Palette.ts","webpack:///./src/actors/Hud/CardBody.ts","webpack:///./src/actors/Hud/CardTitle.ts","webpack:///./src/actors/Hud/Card.ts","webpack:///./src/actors/Hud/MusicPlayer.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MediumSurfaceRoomView.ts","webpack:///./src/actors/Building/MediumRoomThreeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/images/wood-panel-bg.png","webpack:///./src/images/ussf.png","webpack:///./src/images/window-bg.png","webpack:///./src/images/beige-bg.png","webpack:///./src/images/checker-bg.png","webpack:///./src/images/tech-bg.png","webpack:///./src/images/poster-wall-bg.png","webpack:///./src/images/books-bg.png","webpack:///./src/images/leafy-bg.png","webpack:///./src/images/raised-square-bg.png","webpack:///./src/images/lava-lamp-plain.svg","webpack:///./src/images/codex-plain.svg","webpack:///./src/images/statue-plain.svg","webpack:///./src/images/miner-plain.svg","webpack:///./src/images/solar-collector-plain.svg","webpack:///./src/images/couch-plain.svg","webpack:///./src/images/fabricator-plain.svg","webpack:///./src/images/mega-console-plain.svg","webpack:///./src/images/console-red-plain.svg","webpack:///./src/images/console-green-plain.svg","webpack:///./src/images/console-purple-plain.svg","webpack:///./src/images/console-plain.svg","webpack:///./src/images/workstation-plain.svg","webpack:///./src/images/houseplant-plain.svg","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/models/MechanicalOperation.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/sounds/future tense.mp3","webpack:///./src/sounds/understanding.mp3","webpack:///./src/sounds/indivision.mp3","webpack:///./src/sounds/assembler.mp3","webpack:///./src/sounds/crater-rock.mp3","webpack:///./src/images/sword.png","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","deleteByValueOnce","index","indexOf","eachCons","eachChunk","array","measureDistance","b","sleep","ms","Promise","resolve","setTimeout","shuffle","sort","zip","countOccurrences","counts","forEach","containsUniq","testElems","doesContain","arrCopy","missingItem_1","testElem","find","mixColors","factor","aFactor","bFactor","Color","g","t","DeviceSize","Scale_1","major","Scale","minor","Tiny","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","fourth","eighth","second","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","SurfaceRoadView_1","SurfaceRoadView","SmallDomeThreeView_1","SmallDomeThreeView","MidDomeView_1","MidDomeView","BigDomeView_1","BigDomeView","SmallRoomThreeView_1","SmallRoomThreeView","MediumRoomView_1","MediumRoomView","LargeRoomView_1","LargeRoomView","HugeRoomView_1","HugeRoomView","MediumRoomThreeView_1","MediumRoomThreeView","MediumSurfaceRoomView_1","MediumSurfaceRoomView","structureViews","PureValue","availableCapacity","market","supply","demand","Power","Oxygen","Water","Shelter","Hope","Joy","Wisdom","Wealth","Beauty","Wonder","allValues","emptyMarket","sumMarkets","ea","eb","newMarket","_a","sa","da","_b","equilibrium","every","ResourceBlock","Biomass","Ore","Idea","Meal","Data","Mineral","Bioplasma","Alloy","Algorithm","Argent","Aurum","Omnium","blockColors","Green","Blue","lighten","Red","Yellow","darken","cStep","Viridian","DarkGray","Gray","Orange","White","blockColor","block","desaturate","this","__extends","setPrototypeOf","__proto__","constructor","create","__assign","assign","arguments","Economy_1","DeviceSize_1","MechanicalOperation_1","Util_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","plant","workstation","console","consolePurple","consoleGreen","consoleRed","megaconsole","fabricator","couch","solar","miner","statue","codex","lavaLamp","Violet","store","mechanicalOperations","generate","recipe","spawn","accelerateTime","Machine","description","color","LightGray","cost","operation","type","image","prereqs","economy","forDome","hide","isVehicle","tinySlots","concretize","onPlacement","device","CommandCenter","_super","_this","built","produceResource","building","populate","pos","add","MissionLog","OxygenExtractor","WaterCondensingMachine","SolarCell","LavaLamp","Table","Figurine","Statue","StudyMachine","Workstation","Desk","Codex","Bookshelf","Couch","Fridge","Stove","Bed","Houseplant","PersonnelRegistry","CloningVat","OrientationConsole","productionTime","AlgaeVat","DissolutionVat","PlasmaBank","Fabricator","LifeSciencesConsole","Botany","MetalStorage","ResearchServer","Orchard","Cabin","Arbor","MineralProcessor","ThinkingFountain","Mainframe","Megafabricator","MolecularEngine","fromHex","SilverForest","TimeCrystal","HoloProjector","SacredGrove","AtomicCompiler","MiningDrill","Preserve","LogicPool","Cathedral","Microcity","LogicCrystal","allMachines","Orientation","Left","Up","Right","Down","compass","flip","orientation","Error","Orientation_1","Game_1","Graph_1","SpaceFunction_1","Machine_1","BackgroundPatterns_1","Painting_1","DevicePlace","structure","planet","x","y","width","height","infra","Transparent","edgeWidth","placed","hover","showLabel","facing","hideBox","childrenBuildings","devices","active","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","some","currentlyViewing","toggleActive","collisionType","CollisionType","PreventCollision","nameLabel","Label","fontSize","poly","aabbPoly","draw","ctx","delta","drawRect","aabb","processedColor","spaceFunction","Game","debugPath","slots","slot","rect","nodes","node","devicePlaces","place","position","visibleSize","update","engine","tryProduce","emptyUnlessActive","isActive","machineEconomies","buildingEconomy","inUse","wasEquil","_i","allValues_1","localCap","globalCap","agg","constrainCursor","clone","reshape","afterConstruct","handleClick","_pos","getWidth","getHeight","deviceInteractionPlaces","graph","supergraph","Graph","rootNode","findOrCreate","child","parentSlot","edge","childNode","redeem","res","gather","debit","spend","elite","pathFromRect","angledRoofPoly","angleStartY","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","bldg","edgeColor","mainColor","colorBase","clr","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","closestBuildingByType","matchingSlot","compass_1","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","subEqual","updateFunction","machine","hasPlaceForDevice","nextDevicePlace","getDevices","tinyDevices","allTheMachines","machines","allSpaceFunctions","spaceFn","sf","text","background","BackgroundPattern","Grid","Actor","drawPatternedPoly","path","pattern","Black","gridPattern","getBackgroundPattern","save","translate","beginPath","moveTo","pt","lineTo","closePath","fillStyle","strokeStyle","stroke","restore","drawLine","lineWidth","toRGBA","drawPatternedRect","rectangle","filled","dashed","main","fillRect","setLineDash","strokeRect","drawPoly","drawStar","cx","cy","outerRadius","innerRadius","spikes","rot","PI","cos","sin","Structure_1","Device","initialPos","product","imageLoaded","reserved","parentDevice","Image","onload","src","log","computeEconomy","globalAlpha","drawImage","imageX","imageY","iv","bx","by","yOff","produced","blockSize","assemble","citizen","isCarryingUnique","progressBar","sent","drop","label","interact","request","worked","op","recipe_1","carrying","it","consumes","includes","consumed","workTime","getEffectiveWorkTime","carry","produces","warn","requires","has","store_1","dispense","stores","getEffectiveOperationalCapacity","res_1","stored","bonus","bonuses","capacity","workSpeed","round","resource","generationTime","generates","snap","snapTiny","allStructures","snapped","hasTinyPlace","spot","nextTinyPlace","tx0","ndx","addTinyDevice","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","medGroundVehicles","Structure","view","zoom","Corridor","Ladder","MainTunnel","fifth","MediumSurfaceRoom","SurfaceRoad","first","Dome","seventh","CommonArea","sixth","SmallRoomThree","SmallRoomTwo","SmallDome","MediumRoom","MediumRoomThree","LargeRoom","HugeRoom","SmallDomeThree","MidDome","LargeDome","Arcology","GroundVehiclePool","SpaceFunction","Beige","MissionControl","Window","LivingQuarters","Barracks","Kitchen","Checker","LifeSupportPod","Retreat","CloneMatrix","CloneReception","ReadingRoom","Library","Books","Study","Wood","ComputerLab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Leafy","Farm","Factory","ComputerCore","Tech","LifeSciencesLab","Refinery","Mine","HoloMatrix","TimeChamber","LivingRoom","Statuary","Resources_1","world","displayMode","DisplayMode","FullScreen","backgroundColor","start","loader","Loader","key","Resources","addResource","then","citizenSpeed","startHour","minuteTickMillis","Engine","InteractionRequest_1","Strategy","pawn","sleepInterval","currentPlanet","findPoweredDevices","recipes","operations","attempt","pause","gatherBlock","debug","gathered","generatesDesiredBlock","gen","closestDeviceByType","storesDesiredBlock","visitDevice","waitTimes","retrieveResource","visit","workRecipe","knowsRecipe","maker","made","gatherIngredients","performRecipeTask","blocks","blocks_1","ingredient","tries","timesToAttempt","raisedSquare","leafy","bookish","posters","tech","checker","beige","ussf","wood","loadBg","scale","loading","Poster","USSF","backgroundPatterns","bg","matrix","DOMMatrix","createPattern","setTransform","majorUnit","minorUnit","minorScale","empty","edges","edgesInverse","isEmpty","newNode","contains","testNode","measure","tolerance","dfs","dst","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","steps","srcIndex","reverse","sword","craterRock","assembler","indivision","understanding","futureTense","Sword","Texture","CraterRock","Sound","Assembler","Indivision","Understanding","FutureTense","ex","Player","setWidth","setHeight","PlanetBackground","MountainLayers","layers","skyColor","layerHeight","layerCount","peakCount","onInitialize","layerIndex","unshift","baseY","deltas","genPeaks","wc","sc","ls_1","layer","drawLayer","ox","oy","peakWidth","dMax","last","maxDiff","times","pick","Mountains","peaks","xOff","peakDistance","drift","baseColor","brightColor","yBase","peak","y0","mtnWidth","PlanetBackground_1","SkyLayer","lo","hi","mid","backMountainLayers","mountains","mountainLayers","setLoHi","SkyLayer_1","SkyLayers","c0","c1","setHi","EatingStrategy","EatingStrategy_1","WhenHungryEatingStrategy","canApply","isHungry","storedResources","desk","eat","SleepingStrategy","SleepingStrategy_1","AnyBedSleepingStrategy","isTired","hour","takeRest","Strategy_1","ConstructionStrategy","unbuiltDevice","findAllDevices","ProxmityBasedConstruction","constructDevice","resources","ProductionStrategy","storeBlock","openStore","CapacityBasedProduction","findStore","storage_1","recipeForStoredResource","CapacityBasedProduction_1","ProximityBasedConstruction_1","AnyBedSleepingStrategy_1","WhenHungryEatingStrategy_1","Citizen","home","isPlanning","workInProgress","sleeping","hunger","energy","currentBuilding","productionStrategy","constructionStrategy","sleepingStrategy","eatingStrategy","speedMultiplier","timeFactor","work","now","Date","getTime","progress","workStarted","workDuration","rotate","carried","saturate","px","pw","py","c_1","duration","reject","target","targetForDevice","pathBetweenPoints","followPath","glideTo","actions","walkSpeed","asPromise","all","choice","strategies","strat","thirtyMinuteTimer","Citizen_1","Population","citizens","increase","NavigationTree","seekPath","origin","dest","closestNode","abs","NavigationTree_1","Colony","currentlyConstructing","debugTree","navTree","gradient","createLinearGradient","addColorStop","placeBuilding","buildNavTree","structureTypes","st","pathBetween","destination","srcNode","destNode","machineTypes","ctrl","activeBuildings","Colony_1","Population_1","Device_1","SkyLayers_1","Planet","hud","onBuildingHover","onDeviceHover","w","depth","sky","createLayer","skyLayers","population","currentHour","setTime","time","nextHour","inc","oldC","skyColorForHour","newC","mixC","assignColors","colorMap","night","dawn","morning","afternoon","evening","set","buildingOrDevice","theLayer","theEconomy","popularDemand","resourceGathered","resourceExpended","maxPop","theEconomyWithoutPeople","values","val","closestDevice","acc","Palette","onButtonClick","onButtonEnter","comprehend","comprehended","dragging","makePalette","_element","left","canvas","offsetLeft","top_1","offsetTop","style","top","updateBuilt","prereq","parentElement","removeChild","document","createElement","display","flexWrap","border","addEventListener","clientX","clientY","body","appendChild","title","textContent","fontFamily","fontWeight","padding","margin","btn","buttonFactory","onmouseenter","onclick","fg","paletteButton","textTransform","onmouseover","onmouseleave","CardBody","entity","describeResources","freqs","keys","join","notes","fontStyle","FontStyle","Italic","footer","show","describeEconomy","resourceDescription","domeStatus","bonusMessages","econ","CardTitle","announce","CardTitle_1","CardBody_1","Card","x0","cardBody","ix","iy","present","MusicPlayer","playlist","paused","makePlayer","startMusic","_titleElem","currentTrack","play","advancePlaylist","_wrapper","textAlign","inlineBlock","iconFactory","handleAction","action","song","stop","trackNames","append","iconContent","icon","innerHTML","EconomicValue","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","val1","val2","addValue","updateView","updatedEconomy","Tooltip","message","messageLabel","ResourceListEntry","resourceBlock","hovering","tooltip","visible","credit","amt","UIActor","ResourceListEntry_1","ResourcesList","entries","res1","res2","rx","ry","addEntry","entry","increment","decrement","ResourcesList_1","EconomyView_1","MusicPlayer_1","StatusAnalysisView","h","brand","ty","version","clock","popLabel","musicPlayer","Crater Rock","Future Tense","incrementResource","decrementResource","setMessage","showEconomy","showPopCap","cap","setClock","days","toString","hh","hours","minutes","ampm","padStart","StatusAnalysisView_1","Card_1","Palette_1","Hud","Tabs","tabs","_rootElement","makeRootElement","addTab","element","game","onBuildingSelect","onMachineSelect","onFunctionSelect","canvasWidth","canvasHeight","hidePalettes","status","displayInfo","showCard","machinePalette","structurePalette","structuresForPalette","functionPalette","functionsForPalette","card","showPalettes","updateDetails","rebuildPalettes","updatePalettes","updateEconomy","updateMaxPop","updateBuildingPalette","updateMachinePalette","updateFunctionPalette","builtStructures","builtMachines","machinesForPalette","builtReifiedFunctions","builtFunctions","rf","devicePlaceSize","devicePlaceCount","floorHeight","sg","right","isGroundFloor","leftSlot","rightSlot","topSlot","theSlots","slotY","getTop","backgroundPattern","floorColor","floorEdgeHeight","flagX","flagY","flagpoleHeight","_1","originSlot","minHeight","pickingOrigin","maxHeight","drawShape","xoff","yoff","bezierCurveTo","halfWidth","slotHeights","heights","y1","btm","lst","slotCount","deviceSize","arc","originX","newCursor","input","output","Hud_1","Planet_1","player_1","Construct","defaultMessage","placingFunction","timeStepIntervalMillis","firstBuilding","buildIt","startConstructing","player","prepareNextBuilding","camera","addTimer","Timer","stepTime","onActivate","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction_1","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","moveCam","direction","camMoveSpeed","dv","move","keyboard","Keys","H","Esc","W","A","S","D","onDeactivate","off","nextMissingStructureOrFunction","reqs","requiredStructuresAndFunctions","req","actualStructureNames","actualFunctionNames","actualNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","spawnFunction","anotherBuilding","assembleBuildingFromStructure","theStructure","Scene","World","colors","Cyan","Vermillion","Chartreuse","Rose","World_1","Construct_1","theWorld","construct","goToScene"],"mappings":"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d,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EA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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([105,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { getBackgroundPattern, BackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (elem: T) => Vector, predicate?: (elem: T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport const deleteByValueOnce = (arr, elem) => {\r\n  let index = arr.indexOf(elem);\r\n  if (index !== -1) arr.splice(index, 1);\r\n}\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport function eachChunk(a, n) {\r\n  return a.reduce(function (result, value, index, array) {\r\n    if (index % n === 0)\r\n      result.push(array.slice(index, index + n));\r\n    return result;\r\n  }, []);\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function shuffle(arr) {\r\n  return arr.sort(() => Math.random() > 0.5 ? 1 : -1)\r\n}\r\n\r\nexport const zip = (a, b) => a.map((e, i) => [e, b[i]])\r\n\r\nexport const countOccurrences = (arr) => {\r\n  let counts = {}\r\n  arr.forEach((elem) => {\r\n    counts[elem] = counts[elem] || 0\r\n    counts[elem] += 1\r\n  })\r\n  return counts\r\n}\r\n\r\nexport function containsUniq<T>(arr: T[], testElems: T[]) {\r\n  let doesContain = false\r\n  let arrCopy = arr.slice()\r\n  if (arr.length > 0) {\r\n    let missingItem = false\r\n    testElems.forEach(testElem => {\r\n      if (arrCopy.find(e => e === testElem)) {\r\n        deleteByValueOnce(arrCopy, testElem)\r\n      } else {\r\n        missingItem = true\r\n      }\r\n    })\r\n    doesContain = !missingItem\r\n  }\r\n  return doesContain\r\n}\r\n\r\n\r\nexport function mixColors(a: Color, b: Color, factor: number = 0.5): Color {\r\n  let aFactor = factor, bFactor = (1-factor)\r\n  return new Color(\r\n    (a.r * aFactor) + (b.r * bFactor),\r\n    (a.g * aFactor) + (b.g * bFactor),\r\n    (a.b * aFactor) + (b.b * bFactor),\r\n    1\r\n  )\r\n}","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Tiny,\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge,\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Tiny: sz = minor.third; break;\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.fourth; break;\r\n        case DeviceSize.Large: sz = major.eighth + major.second; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\nimport { SmallDomeThreeView } from './SmallDomeThreeView';\r\nimport { MidDomeView } from './MidDomeView';\r\nimport { BigDomeView } from './BigDomeView';\r\nimport { SmallRoomThreeView } from './SmallRoomThreeView';\r\nimport { MediumRoomView } from './MediumRoomView';\r\nimport { LargeRoomView } from './LargeRoomView';\r\nimport { HugeRoomView } from './HugeRoomView';\r\nimport { MediumRoomThreeView } from './MediumRoomThreeView';\r\nimport { MediumSurfaceRoomView } from './MediumSurfaceRoomView';\r\n\r\n\r\nconst structureViews: { [key: string]: typeof Building } = {\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n    MediumSurfaceRoomView,\r\n}\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n\r\n    MediumSurfaceRoomView,\r\n\r\n\r\n    structureViews\r\n\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport const allValues: PureValue[] = [\r\n    PureValue.Power,\r\n    PureValue.Oxygen,\r\n    PureValue.Water,\r\n    PureValue.Shelter,\r\n    PureValue.Hope,\r\n    PureValue.Joy,\r\n    PureValue.Wisdom,\r\n    PureValue.Wealth,\r\n    PureValue.Beauty,\r\n    PureValue.Wonder\r\n]\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return Math.floor(market[value].supply - market[value].demand)\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply,\r\n            demand,\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport const equilibrium: (e: Economy) => boolean = (e) => {\r\n    return allValues.every(value => availableCapacity(e, value) >= 0)\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Biomass = 'Biomass',\r\n    Ore = 'Ore',\r\n    Idea = 'Idea',\r\n\r\n    // derived\r\n    Meal = 'Meal',\r\n    Data = 'Data',\r\n    Mineral = 'Mineral',\r\n    Bioplasma = 'Bioplasma',\r\n\r\n    // higher-order\r\n    Alloy = \"Alloy\",\r\n    Algorithm = \"Algorithm\",\r\n\r\n    // superb\r\n    Argent = \"Argent\",\r\n    Aurum = \"Aurum\",\r\n\r\n    // hyperbolic\r\n    Omnium = \"Omnium\",\r\n}\r\n\r\nlet cStep = 0.3\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Biomass: Color.Green,\r\n    Data: Color.Blue.lighten(cStep),\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(cStep),\r\n    Idea: Color.Blue.lighten(cStep*2), //.desaturate(cStep),\r\n    Ore: Color.Red.darken(cStep),\r\n\r\n    Bioplasma: Color.Viridian,\r\n\r\n    Alloy: Color.DarkGray.darken(cStep), //(cStep),\r\n    Algorithm: Color.Blue.darken(cStep), //.desaturate(cStep),\r\n\r\n    Argent: Color.Gray.lighten(cStep),\r\n    Aurum: Color.Orange.lighten(cStep),\r\n\r\n    Omnium: Color.White,\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    return baseColor.desaturate(0.1) //.lighten(0.1) //.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Color, FontStyle, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { MechanicalOperation, mechanicalOperations } from \"./MechanicalOperation\";\r\nimport { shuffle, range, sample } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\nconst plant = require('../images/houseplant-plain.svg')\r\nconst workstation = require('../images/workstation-plain.svg')\r\n\r\nconst console = require('../images/console-plain.svg')\r\nconst consolePurple = require('../images/console-purple-plain.svg')\r\nconst consoleGreen = require('../images/console-green-plain.svg')\r\nconst consoleRed = require('../images/console-red-plain.svg')\r\nconst megaconsole = require('../images/mega-console-plain.svg')\r\n\r\nconst fabricator = require('../images/fabricator-plain.svg')\r\n\r\nconst couch = require('../images/couch-plain.svg')\r\nconst solar = require('../images/solar-collector-plain.svg')\r\nconst miner = require('../images/miner-plain.svg')\r\n\r\nconst statue = require('../images/statue-plain.svg')\r\nconst codex = require('../images/codex-plain.svg')\r\n\r\nconst lavaLamp = require('../images/lava-lamp-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n    plant,\r\n    workstation,\r\n\r\n    console,\r\n    consolePurple,\r\n    consoleGreen,\r\n    consoleRed,\r\n    megaconsole,\r\n\r\n    fabricator,\r\n\r\n    couch,\r\n    solar,\r\n    miner,\r\n    statue,\r\n\r\n    codex,\r\n    lavaLamp,\r\n}\r\n\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nlet { store, generate, recipe, spawn, accelerateTime } = mechanicalOperations\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n\r\n    cost: ResourceBlock[] = [ResourceBlock.Mineral]\r\n\r\n    size: DeviceSize = DeviceSize.Small\r\n    operation: MechanicalOperation = { type: 'noop' }\r\n    image = images.vat\r\n    prereqs: (typeof Machine)[] = []\r\n    economy: Economy = emptyMarket()\r\n    forDome: boolean = false\r\n    hide: boolean = false\r\n\r\n    capacity: boolean\r\n\r\n    isVehicle: boolean = false\r\n\r\n    tinySlots: boolean = false\r\n\r\n    concretize(): Machine { return this; } \r\n\r\n    onPlacement(device: Device) {\r\n        // ...whatever we need to script here?\r\n    }\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command Console'\r\n    description = 'commander, we need your help'\r\n    operation = store(\r\n        [ResourceBlock.Mineral], //,ResourceBlock.Biomass],\r\n        24\r\n    )\r\n    image = images.megaconsole\r\n    size = DeviceSize.Medium\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 6, demand: 0 },\r\n        Oxygen: { supply: 16, demand: 0 },\r\n        Water: { supply: 1, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 },\r\n        Shelter: { supply: 1, demand: 0}\r\n    }\r\n\r\n    onPlacement(device: Device) {\r\n        device.built = true\r\n        for (let i in range(20)) {\r\n            device.produceResource(ResourceBlock.Mineral)\r\n        }\r\n        let { building } = device\r\n        building.populate(device.pos.add(building.pos), true)\r\n    }\r\n}\r\n\r\nexport class MissionLog extends Machine {\r\n    name = 'Mission Log'\r\n    description = 'gather data'\r\n    operation = store(\r\n        [ResourceBlock.Data],\r\n        8\r\n    )\r\n    image = images.consolePurple\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n//export class Energon extends Machine {\r\n//    name = 'Energon'\r\n//    description = 'food paste'\r\n//}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 6, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n    image = images.solar\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 10, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H2O Condenser'\r\n    description = 'have a drink'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 5, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n// tiny\r\nexport class LavaLamp extends Machine {\r\n    name = 'Lava Lamp'\r\n    description = 'mesmerizing'\r\n    size = DeviceSize.Tiny\r\n    prereqs = [ Table ]\r\n    image  = images.lavaLamp\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Joy: { supply: 1, demand: 0 },\r\n        Power: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\nexport class Figurine extends Machine {\r\n    name = 'Figurine'\r\n    description = 'not an action figure'\r\n    size = DeviceSize.Tiny\r\n    prereqs = [ Table ]\r\n    image = images.statue   \r\n    economy = {\r\n        ...emptyMarket(),\r\n        Beauty: { supply: 0.1, demand: 0 },\r\n    }\r\n}\r\n\r\n// /// small subsurface\r\n\r\nexport class Table extends Machine {\r\n    name = 'Table'\r\n    description = 'a simple table'\r\n    image = images.bench\r\n    // this device provides slots for tiny-sized deviecs\r\n    tinySlots = true\r\n}\r\n\r\nexport class Statue extends Machine {\r\n    name = 'Statue'\r\n    description = 'for honor'\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Hope: { supply: 0.1, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n    }\r\n    image = images.statue\r\n    prereqs = [ Figurine ]\r\n}\r\n\r\nexport class StudyMachine extends Machine {\r\n    operation = recipe(\r\n        [ ResourceBlock.Idea, ResourceBlock.Idea, ResourceBlock.Idea ],\r\n        ResourceBlock.Data\r\n    )\r\n    color = Blue\r\n    concretize(): Machine { return new (sample([Workstation, Desk]))() }\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    description = 'get to work'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Codex extends Machine {\r\n    name = 'Codex'\r\n    description = 'read it closely'\r\n    image = images.codex\r\n    prereqs = [ Bookshelf ]\r\n    operation = store([ResourceBlock.Data], 3)\r\n    color = Blue\r\n    // concretize() { return this }\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    description = 'hackety hack'\r\n    prereqs = [ Bookshelf ]\r\n    image = images.workstation\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Couch extends Machine {\r\n    name = 'Couch'\r\n    description = 'take it easy'\r\n    prereqs = []\r\n    image = images.couch\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Joy: { supply: 0.1, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    operation = generate(ResourceBlock.Idea)\r\n    image = images.bookshelf\r\n    prereqs = [ ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    operation = store([ResourceBlock.Meal], 6)\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    operation = recipe(\r\n        [ResourceBlock.Biomass, ResourceBlock.Biomass],\r\n        ResourceBlock.Meal\r\n    )\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    description = 'sweet dreams'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    description = 'so nice'\r\n    prereqs = [ Bed ]\r\n    // produces = ResourceBlock.Food\r\n    cost = [ ResourceBlock.Biomass ]\r\n    operation = generate(ResourceBlock.Biomass, 1)\r\n    color = Green\r\n    image = images.plant\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Water: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\nexport class PersonnelRegistry extends Machine {\r\n    name = 'Personnel Registry'\r\n    description = 'track everybody'\r\n    prereqs = [ CloningVat ]\r\n    operation = store([ResourceBlock.Data], 4)\r\n    color = Yellow\r\n    image = images.console\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Wisdom: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class OrientationConsole extends Machine {\r\n    name = 'Orientation Console'\r\n    description = 'welcome to the colony'\r\n    prereqs = [CloningVat]\r\n    operation = generate(ResourceBlock.Data, 1)\r\n    image = images.consoleRed\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'we all grow'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = spawn()\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class DissolutionVat extends Machine {\r\n    name = 'Dissolution Vat'\r\n    description = 'back to basics'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = recipe(\r\n        [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n        ResourceBlock.Bioplasma\r\n    )\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [PlasmaBank]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class PlasmaBank extends Machine {\r\n    name = 'Bioplasm Bank'\r\n    description = 'hold on'\r\n    operation = store([ ResourceBlock.Bioplasma ])\r\n    prereqs = [AlgaeVat]\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    description = 'you made that'\r\n    operation = recipe(\r\n        [ResourceBlock.Mineral, ResourceBlock.Mineral],\r\n         ResourceBlock.Alloy\r\n    )\r\n    size = DeviceSize.Small\r\n    color = Red\r\n    prereqs = [Workstation]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n    image = images.fabricator\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    description = 'where there is a will'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class LifeSciencesConsole extends Machine {\r\n    name = 'Life Sciences Console'\r\n    description = 'mind and body together'\r\n    operation = store([ResourceBlock.Biomass, ResourceBlock.Data], 5)\r\n    prereqs = [Houseplant, Botany]\r\n    color = Green\r\n    image = images.consoleGreen\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.2 },\r\n    }\r\n}\r\n\r\n// medium\r\n\r\nexport class MetalStorage extends Machine {\r\n    name = 'Metal Storage'\r\n    description = 'contain minerals and alloys?'\r\n    operation = store([ResourceBlock.Mineral, ResourceBlock.Alloy], 8)\r\n    prereqs = [Bookshelf]\r\n    color = Red\r\n    size = DeviceSize.Medium\r\n}\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    operation = store([ResourceBlock.Data, ResourceBlock.Algorithm], 10)\r\n    image = images.server\r\n    prereqs = [Bookshelf, Workstation]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   operation = generate(ResourceBlock.Biomass)\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Oxygen: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   description = 'home on the plains'\r\n   operation = recipe(\r\n       [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n       ResourceBlock.Meal\r\n   )\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    description = 'arbor around the clock'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    description = 'plant lab'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n\r\nexport class MineralProcessor extends Machine {\r\n    name = 'Mineral Processor'\r\n    description = 'wheat from the chaff'\r\n    operation = recipe(\r\n        [ResourceBlock.Ore, ResourceBlock.Ore, ResourceBlock.Ore],\r\n         ResourceBlock.Mineral\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation, Fabricator]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class ThinkingFountain extends Machine {\r\n    name = 'Thinking Fountain'\r\n    description = 'slowly growing'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Mainframe, Megafabricator, MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = generate(ResourceBlock.Aurum, 8)\r\n    cost = [ResourceBlock.Aurum]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class SilverForest extends Machine {\r\n    name = 'Silver Forest'\r\n    description = 'immense serenity'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Megafabricator, Mainframe ]\r\n    color = Color.fromHex('c0c0c0')\r\n    operation = store([ResourceBlock.Argent], 12)\r\n    cost = [ResourceBlock.Alloy, ResourceBlock.Algorithm]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Beauty: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n    forDome = true\r\n}\r\n\r\nexport class TimeCrystal extends Machine {\r\n    name = 'Time Crystal'\r\n    description = 'xlr8'\r\n    size = DeviceSize.Medium\r\n    color = Color.fromHex('e5e4e2')\r\n    operation = accelerateTime()\r\n    cost = [ResourceBlock.Omnium]\r\n    prereqs = [ Megafabricator, SilverForest ]\r\n}\r\n\r\nexport class HoloProjector extends Machine {\r\n    name = 'Holo Projector'\r\n    description = 'whatever your heart desires'\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    operation = generate(ResourceBlock.Data, 3)\r\n    cost = [ResourceBlock.Algorithm, ResourceBlock.Mineral]\r\n    prereqs = [ Mainframe ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 3, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class SacredGrove extends Machine {\r\n    name = 'Sacred Grove'\r\n    description = 'where the furies play'\r\n    size = DeviceSize.Medium\r\n    forDome = true\r\n    cost = [ ResourceBlock.Omnium ]\r\n    prereqs = [ AtomicCompiler ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 4, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class AtomicCompiler extends Machine {\r\n    name = 'Atomic Compiler'\r\n    description = 'super position'\r\n    operation = recipe(\r\n        [ ResourceBlock.Aurum, ResourceBlock.Argent ],\r\n        ResourceBlock.Omnium\r\n    )\r\n    cost = [ ResourceBlock.Argent, ResourceBlock.Algorithm ]\r\n    prereqs = [ ThinkingFountain, SilverForest ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n}\r\n\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    description = 'ore away'\r\n    operation = generate(ResourceBlock.Ore)\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    image = images.miner\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    operation = recipe(\r\n        [ResourceBlock.Alloy, ResourceBlock.Algorithm],\r\n        ResourceBlock.Argent\r\n    )\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class MolecularEngine extends Machine {\r\n    name = 'Molecular Engine'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Megafabricator ]\r\n    color = Violet\r\n    operation = recipe(\r\n        [ResourceBlock.Bioplasma, ResourceBlock.Algorithm],\r\n        ResourceBlock.Aurum\r\n    )\r\n    image = images.megaconsole\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n        Water: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Mainframe extends Machine {\r\n    name = 'Mainframe'\r\n    size = DeviceSize.Large\r\n    color = Blue\r\n    prereqs = [ResearchServer]\r\n    cost = [ ResourceBlock.Mineral, ResourceBlock.Mineral ]\r\n    operation = recipe(\r\n        [ ResourceBlock.Data, ResourceBlock.Data ],\r\n        ResourceBlock.Algorithm\r\n    )\r\n    image = images.server\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 6 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Nature Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    operation = generate(ResourceBlock.Biomass, 12)\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n        Oxygen: { supply: 12, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicPool extends Machine {\r\n    name = 'Logic Pool'\r\n    size = DeviceSize.Large\r\n    prereqs = [ MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = store([ResourceBlock.Aurum], 12)\r\n    cost = [ResourceBlock.Algorithm, ResourceBlock.Bioplasma]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class Cathedral extends Machine {\r\n    name = 'Cathedral'\r\n    description = 'first ultrahumanist'\r\n    size = DeviceSize.Large\r\n    prereqs = [ SacredGrove ]\r\n}\r\n\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n\r\n    MineralProcessor,\r\n    PlasmaBank,\r\n    DissolutionVat,\r\n    MetalStorage,\r\n    Mainframe,\r\n\r\n    PersonnelRegistry,\r\n    MolecularEngine,\r\n    ThinkingFountain,\r\n    SilverForest,\r\n\r\n    OrientationConsole,\r\n    LifeSciencesConsole,\r\n\r\n    TimeCrystal,\r\n    LogicPool,\r\n    HoloProjector,\r\n    Cathedral,\r\n    SacredGrove,\r\n    AtomicCompiler,\r\n\r\n    Couch,\r\n    Statue,\r\n    Codex,\r\n\r\n    Table,\r\n    LavaLamp,\r\n\r\n    Figurine,\r\n]","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits, FontStyle } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, deleteByValue, containsUniq, flatSingle } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock, emptyMarket, Economy, sumMarkets, equilibrium, allValues, availableCapacity } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { World } from \"../../models/World\";\r\nimport { Machine, allMachines, CommandCenter, MissionLog, StudyMachine } from \"../../models/Machine\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { EconomicValue } from \"../Hud/EconomicValue\";\r\nimport { drawRect, pathFromRect } from \"../../Painting\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0\r\n\r\n    nameLabel: Label\r\n\r\n    placed: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    spaceFunction: SpaceFunction\r\n\r\n    private devices: Device[] = []\r\n    givenName: string\r\n\r\n    private active: boolean = true\r\n    // private built: boolean = false\r\n\r\n    constructor(pos: Vector, public structure: Structure, public planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          structure.infra ? planet.color.darken(0.3) : Color.Transparent\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            if (!this.devices.some(d => d.hover)) {\r\n                this.planet.currentlyViewing = this\r\n            }\r\n        })\r\n\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED BUILDING\", { building: this })\r\n            this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 9\r\n        // this.nameLabel.fontStyle = FontStyle.Italic\r\n        this.nameLabel.color = Color.White\r\n\r\n        if (this.structure.infra) { this.active = true }\r\n    }\r\n\r\n    poly() { return this.aabbPoly() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        // this.devices.forEach(device => device.draw(ctx, delta))\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.showLabel && this.spaceFunction) {\r\n            this.nameLabel.pos = this.pos.add(new Vector(28, 24)) //get getCenter().\r\n            // this.nameLabel.color = Color.White\r\n            // this.nameLabel.pos.x = this.getCenter().x //ctx.measureText(this.structure.name).width / 2\r\n            // this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n        }\r\n\r\n        // let debug = true;\r\n        if (Game.debugPath) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = true\r\n        if (showDevicePlaces && this.devicePlaces().length > 0 && this.devices.length < this.devicePlaces().length) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    0.1,\r\n                    Color.White,\r\n                    false,\r\n                    true\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n\r\n        let tryProduce = this.placed;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.tryProduce(this.step));\r\n        }\r\n\r\n        // this.devices.forEach(d => d.update(engine, delta))\r\n\r\n        this.step += 1\r\n    }\r\n\r\n    get name() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.name\r\n        } else {\r\n            return this.structure.name\r\n        }\r\n    }\r\n\r\n    get description() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.description\r\n        } else {\r\n            return this.structure.description\r\n        }\r\n    }\r\n\r\n    economy(emptyUnlessActive: boolean = true): Economy {\r\n        if (emptyUnlessActive && !this.isActive) {\r\n            return emptyMarket()\r\n        } else {\r\n            let machineEconomies = this.devices.map(d => d.economy)\r\n            //machine.economy)\r\n\r\n            let buildingEconomy = {\r\n                ...emptyMarket(),\r\n                Oxygen: { demand: 1, supply: 0 }, // structural demand\r\n                // Water: { demand: 0.1, supply: 0 },\r\n            }\r\n\r\n            let aggregate = [...machineEconomies, buildingEconomy]\r\n                .reduce(sumMarkets, emptyMarket())\r\n\r\n            return aggregate\r\n        }\r\n    }\r\n\r\n    private toggleActive() {\r\n        if (!this.structure.infra) {\r\n            if (this.active) {\r\n                if (this.devices.some(d => d.inUse)) { return }\r\n                let wasEquil = equilibrium(this.planet.economy)\r\n                this.active = false\r\n                if (wasEquil) {\r\n                    if (!equilibrium(this.planet.economy)) {\r\n                        this.active = true\r\n                        // return\r\n                    }\r\n                    // this.active = true\r\n                } else {\r\n                    // we weren't at equilibrium previously\r\n                    // permit it, if we don't have any supply that would go negative without us?\r\n                    // console.log(\"can we toggle?\")\r\n                    for (let value of allValues) {\r\n                        let localCap = availableCapacity(this.economy(false), value)\r\n                        let globalCap = availableCapacity(this.planet.economy, value)\r\n                        // console.log(\"value\", { value, localCap, globalCap})\r\n                        if (localCap > 0 && globalCap < 0) {\r\n                            // don't permit it to be turned off\r\n                            this.active = true\r\n                        }\r\n                    }\r\n                }\r\n            } else { // this.active is false now\r\n                let agg = [\r\n                    this.planet.economy,\r\n                    this.economy(false)\r\n                ].reduce(sumMarkets, emptyMarket())\r\n\r\n                if (equilibrium(agg)) {\r\n                    this.active = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get isActive() { return !!this.active }\r\n\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n\r\n    deviceInteractionPlaces(): Vector[] {\r\n        return this.devicePlaces().map(place => {\r\n            place.position.y += (place.visibleSize/2)\r\n            return place.position\r\n        })\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public debit(res: ResourceBlock) {\r\n        this.planet.spend(res)\r\n    }\r\n\r\n    public populate(pos: Vector, elite: boolean = false) {\r\n        this.planet.populate(pos, elite) //this.pos)\r\n    }\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected aabbPoly(): {x:number,y:number}[] {\r\n        return pathFromRect(this.aabb());\r\n\r\n    }\r\n\r\n    protected angledRoofPoly(): {x: number, y: number}[] {\r\n        let angleStartY = 1 * (this.getHeight() / 3) - 3\r\n        let angleStartX = 20 // 1 * (this.getWidth() / 10)\r\n        return [\r\n            // bottom-left\r\n            { x: this.pos.x, y: this.pos.y + this.getHeight() },\r\n\r\n            // upper-left\r\n            { x: this.pos.x, y: this.pos.y + angleStartY },\r\n            { x: this.pos.x + angleStartX, y: this.pos.y },\r\n\r\n            // upper-right\r\n            { x: this.pos.x + this.getWidth() - angleStartX, y: this.pos.y },\r\n            { x: this.pos.x + this.getWidth(), y: this.pos.y + angleStartY },\r\n\r\n            // bottom-right\r\n            { x: this.pos.x + this.getWidth(), y: this.pos.y + this.getHeight() },\r\n        ]\r\n            \r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.placed)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (!this.active) {\r\n            clr = clr.darken(0.8)\r\n        }\r\n\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        // device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        device.pos.subEqual(this.pos) // = this.devicePlaces()[0].position\r\n        // console.log(\"DEVICE IS AT\", { pos: device.pos })\r\n        this.add(device)\r\n        this.updateFunction()\r\n        device.machine.onPlacement(device)\r\n        this.toggleActive()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return [ ...this.devices, ...flatSingle(this.devices.map(d => d.tinyDevices)) ]\r\n    }\r\n\r\n    public updateFunction() {\r\n        let allTheMachines = [ StudyMachine, ...allMachines, CommandCenter, MissionLog ]\r\n        let machines = this.devices.map(\r\n            d => allTheMachines.find((m: typeof Machine) => d.machine instanceof m)\r\n        )\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let sf = new spaceFn()\r\n\r\n            return containsUniq(\r\n              machines,\r\n              sf.machines\r\n            );\r\n        })\r\n        if (fn) {\r\n            // console.log(\"Determined building function\", { fn })\r\n            let sf = new fn()\r\n            this.spaceFunction = sf\r\n            this.nameLabel.text = sf.name\r\n        } else {\r\n            // console.warn(\"Could not identify function!\")\r\n        }\r\n    }\r\n\r\n    get backgroundPattern() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.background\r\n        } else {\r\n            return BackgroundPattern.Grid\r\n        }\r\n    }\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { BackgroundPattern, getBackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\ntype PaintingPath = { x: number, y: number }[]\r\n\r\nexport function pathFromRect(rect: Rectangle): PaintingPath {\r\n  let pos = { x: rect.x, y: rect.y }\r\n  let path = [\r\n            // bottom-left\r\n            { x: pos.x, y: pos.y + rect.height }, // this.getHeight() },\r\n\r\n            // upper-left\r\n            { x: pos.x, y: pos.y },\r\n\r\n            // upper-right\r\n            { x: pos.x + rect.width, y: pos.y },\r\n\r\n            // bottom-right\r\n            { x: pos.x + rect.width, y: pos.y + rect.height },\r\n        ];\r\n\r\n  return path\r\n}\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, clr: Color = Color.White, lineWidth: number = 1) {\r\n  let c = clr.clone()\r\n  // c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawPatternedRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  if (gridPattern) {\r\n    drawPatternedPoly(ctx, pathFromRect(rect), pattern)\r\n    // let { x, y, width, height } = rect;\r\n    // ctx.fillStyle = gridPattern\r\n    // ctx.fillRect(x,y,width,height)\r\n\r\n    //ctx.lineWidth = 0\r\n    //ctx.setLineDash([])\r\n    //ctx.strokeStyle = Color.White.toRGBA()\r\n    //ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawPatternedPoly(\r\n  ctx: CanvasRenderingContext2D,\r\n  path: {x:number, y:number}[],\r\n  // rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid,\r\n  edgeColor: Color = Color.Black\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  if (gridPattern) {\r\n    ctx.save()\r\n    ctx.translate(path[0].x, path[0].y)\r\n    // ctx.moveTo(0, 0)\r\n    ctx.beginPath()\r\n    ctx.moveTo(0,0) //path[0].x, path[0].y)\r\n    path.forEach(pt => ctx.lineTo(pt.x - path[0].x, pt.y-path[0].y))\r\n    ctx.lineTo(0,0) // path[0].x, path[0].y)\r\n    ctx.closePath()\r\n    // let { x, y, width, height } = rect;\r\n    ctx.fillStyle = gridPattern\r\n    ctx.fill()\r\n\r\n\r\n    ctx.strokeStyle = edgeColor.fillStyle()\r\n    ctx.stroke()\r\n    ctx.restore()\r\n    // ctx.fillRect(x,y,width,height)\r\n\r\n    // ctx.lineWidth = 2\r\n    // ctx.setLineDash([])\r\n    // ctx.strokeStyle = Color.White.toRGBA()\r\n    // ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true,\r\n  dashed: boolean = false\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  if (filled) {\r\n    let main = color.clone();\r\n    // main.a = 1\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White.clone();\r\n    ctx.strokeStyle = edge.toRGBA();\r\n    ctx.lineWidth=edgeWidth\r\n    if (dashed) { ctx.setLineDash([5, 10]) }\r\n    else { ctx.setLineDash([]) }\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}\r\n\r\nexport function drawPoly(\r\n  ctx: CanvasRenderingContext2D,\r\n  path: {x:number, y:number}[],\r\n  color: Color\r\n  // rect: Rectangle,\r\n  // pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  // const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  // if (gridPattern) {\r\n    ctx.beginPath()\r\n    ctx.moveTo(path[0].x, path[0].y)\r\n    path.forEach(pt => ctx.lineTo(pt.x, pt.y))\r\n    ctx.lineTo(path[0].x, path[0].y)\r\n    ctx.closePath()\r\n    // let { x, y, width, height } = rect;\r\n    ctx.fillStyle = color.fillStyle()\r\n    ctx.fill()\r\n    // ctx.fillRect(x,y,width,height)\r\n\r\n    // ctx.lineWidth = 2\r\n    // ctx.setLineDash([])\r\n    // ctx.strokeStyle = Color.White.toRGBA()\r\n    // ctx.strokeRect(x,y,width,height)\r\n  // }\r\n}\r\n\r\nexport function drawStar(ctx, cx, cy, outerRadius=3.6, innerRadius=1.4, spikes=5, ) {\r\n    var rot = Math.PI / 2 * 3;\r\n    var x = cx;\r\n    var y = cy;\r\n    var step = Math.PI / spikes;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(cx, cy - outerRadius)\r\n    for (let i = 0; i < spikes; i++) {\r\n        x = cx + Math.cos(rot) * outerRadius;\r\n        y = cy + Math.sin(rot) * outerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n\r\n        x = cx + Math.cos(rot) * innerRadius;\r\n        y = cy + Math.sin(rot) * innerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n    }\r\n    ctx.lineTo(cx, cy - outerRadius);\r\n    ctx.closePath();\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = 'yellow';\r\n    ctx.stroke();\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.fill();\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor, emptyMarket, sumMarkets } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize, DeviceSize } from \"../values/DeviceSize\";\r\nimport { Recipe, ResourceStorage, MechanicalOperation, ResourceGenerator } from \"../models/MechanicalOperation\";\r\nimport { range, deleteByValueOnce, closest } from \"../Util\";\r\nimport { drawRect } from \"../Painting\";\r\nimport { InteractionRequest } from \"../values/InteractionRequest\";\r\n\r\nexport class Device extends Actor {\r\n    // constructionMaterials: ResourceBlock[] = []\r\n\r\n    // could also use for storage?\r\n    product: ResourceBlock[] = []\r\n    nameLabel: Label\r\n    image: HTMLImageElement\r\n    building: Building\r\n    inUse: boolean = false\r\n    hover: boolean = false\r\n\r\n    imageLoaded: boolean = false\r\n\r\n    built: boolean = false\r\n    reserved: boolean = false\r\n\r\n    constructor(\r\n        public machine: Machine,\r\n        initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            Color.Transparent\r\n            // machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = this.machine.size === DeviceSize.Tiny ? 2 : 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = () => { this.imageLoaded = true }\r\n        this.image.src = machine.image\r\n\r\n        this.on('pointerenter', () => {\r\n            console.log(\"HOVER OVER\", { machine: this.machine })\r\n            this.hover = true\r\n            let tinyDevices = this.tinyDevices.length > 0 &&\r\n              this.tinyDevices.some(d => d.hover)\r\n            if (this.building && !tinyDevices) {\r\n                this.building.planet.currentlyViewing = this\r\n            }\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n            if (this.building && this.building.planet.currentlyViewing === this) {\r\n                this.building.planet.currentlyViewing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    get imageX() { return this.pos.x - this.getWidth() / 2 }\r\n    get imageY() { return this.pos.y - this.getHeight() / 2 } //- 10 }\r\n\r\n    get economy() { return this.built ? this.computeEconomy() : emptyMarket() }\r\n\r\n    private computeEconomy() {\r\n        let econs = [ this.machine.economy, ...this.tinyDevices.map(d => d.economy) ]\r\n        return econs.reduce(sumMarkets, emptyMarket())\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (this.imageLoaded) {\r\n            if (!this.built) { ctx.globalAlpha = 0.5 }\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.imageX,\r\n                this.imageY,\r\n\r\n                this.getWidth(),\r\n                this.getHeight()\r\n            )\r\n            if (!this.built) { ctx.globalAlpha = 1.0 }\r\n\r\n            if (this.hover) {\r\n                let c = Color.White.clone()\r\n                c.a = 0.6\r\n                drawRect(\r\n                    ctx,\r\n                    { x: this.imageX, y: this.imageY, width: this.getWidth(), height: this.getHeight() },\r\n                    0,\r\n                    c\r\n                )\r\n            }\r\n        }\r\n\r\n        let iv = new Vector(this.imageX, this.imageY + this.getHeight() / 8)\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = iv\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let { x: bx, y: by } = iv\r\n        let blockSize = 5\r\n        let yOff = this.nameLabel.fontSize\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).toRGBA()\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize + yOff, blockSize-1, blockSize-1)\r\n        })\r\n\r\n        super.draw(ctx ,delta)\r\n        // this.tinyDevices.forEach(d => d.draw(ctx, delta))\r\n    }\r\n\r\n    get name() { return this.machine.name }\r\n    get description() { return this.machine.description }\r\n    get size() { return this.machine.size }\r\n    get operation() { return this.machine.operation }\r\n\r\n    async assemble(citizen: Citizen) {\r\n        if (citizen.isCarryingUnique(this.machine.cost)) {\r\n            for (let res of this.machine.cost) {\r\n                await citizen.progressBar(1000)\r\n                citizen.drop(res)\r\n            }\r\n            this.built = true\r\n        }\r\n    }\r\n\r\n    async interact(citizen: Citizen, request: InteractionRequest): Promise<boolean> {\r\n        if (this.inUse || !this.built) {\r\n            return false\r\n        }\r\n\r\n        let worked = false\r\n        let op = this.operation\r\n        if (op.type === 'recipe' && request.type === 'work') {\r\n            let recipe: Recipe = op\r\n            // do we have all the things?\r\n            if (citizen.carrying.some(it => recipe.consumes.includes(it))) {\r\n                this.inUse = true\r\n                if (citizen.isCarryingUnique(recipe.consumes)) {\r\n                    recipe.consumes.forEach(consumed => citizen.drop(consumed))\r\n                    let workTime = this.getEffectiveWorkTime(recipe)\r\n                    await citizen.progressBar(workTime) // recipe.workTime)\r\n                    citizen.carry(recipe.produces)\r\n\r\n                    worked = true\r\n                } else {\r\n                    console.warn(\"not carrying all requirements?\", { requires: recipe.consumes, has: citizen.carrying })\r\n                }\r\n                this.inUse = false\r\n            }\r\n        } else if (op.type === 'store') {\r\n            // accept it! (whatever you have that matches...?)\r\n            let store: ResourceStorage = op\r\n            if (request && request.type === 'retrieve') { // assume dispense request for now?\r\n                this.inUse = true\r\n                worked = this.dispense(citizen, request)\r\n                if (worked) {\r\n                    await citizen.progressBar(500)\r\n                }\r\n                this.inUse = false\r\n            } else if (request && request.type === 'store' &&\r\n                citizen.carrying.some(it => store.stores.includes(it))) { // maybe trying to store?\r\n                if (this.product.length < this.getEffectiveOperationalCapacity(store)) { // store.capacity) {\r\n                    let res = null\r\n                    if (store.stores.some(stored => { res = citizen.drop(stored); return res })) {\r\n                        if (res) {\r\n                            this.produceResource(res)\r\n                            // this.product.push(res)\r\n                            // this.building.redeem(res)\r\n                            worked = true\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.warn(\"no capacity in this store!!\")\r\n                    worked = false\r\n                }\r\n            }\r\n        } else if (op.type === 'generator') {\r\n            this.inUse = true\r\n            worked = this.dispense(citizen, request)\r\n            if (worked) {\r\n                await citizen.progressBar(500)\r\n            }\r\n            this.inUse = false\r\n        }\r\n\r\n        return worked\r\n    }\r\n\r\n    getEffectiveOperationalCapacity(op: ResourceGenerator | ResourceStorage) {\r\n        let bonus = this.building.spaceFunction\r\n        ? this.building.spaceFunction.bonuses.capacity \r\n        : 0\r\n        return op.capacity + bonus\r\n    }\r\n\r\n    getEffectiveWorkTime(op: Recipe) {\r\n        let bonus = this.building.spaceFunction \r\n         ? this.building.spaceFunction.bonuses.workSpeed\r\n         : 1\r\n\r\n        return Math.round(op.workTime * (1/bonus))\r\n    } \r\n\r\n\r\n    private dispense(citizen: Citizen, request: InteractionRequest) {\r\n        if (request && request.type === 'retrieve') {\r\n            let canFulfill = this.product.find(p => p === request.resource)\r\n            if (canFulfill) {\r\n                deleteByValueOnce(this.product, request.resource)\r\n                citizen.carry(request.resource)\r\n                this.building.debit(request.resource)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    public tryProduce(step: number) {\r\n        if (this.building.isActive && this.built) {\r\n            if (this.machine.operation.type === 'generator') {\r\n                if (step % this.machine.operation.generationTime === 0) {\r\n                    if (this.product.length < this.machine.operation.capacity) {\r\n                        this.produceResource(this.machine.operation.generates)\r\n                    }\r\n                }\r\n\r\n            } else if (this.machine.operation.type === 'spawn') {\r\n                if (step % 1000 == 0) {\r\n                    // console.log(\"WOULD SPAWN\")\r\n                    setTimeout(() => this.building.populate(this.pos.add(this.building.pos)), 100)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public produceResource(res: ResourceBlock) {\r\n        this.product.push(res)\r\n        this.building.redeem(res)\r\n    }\r\n\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        if (this.size === DeviceSize.Tiny) {\r\n            return this.snapTiny(planet, pos)\r\n        } else {\r\n            let bldg = planet.colony.closestBuildingByType(pos,\r\n                allStructures,\r\n                (bldg: Building) => {\r\n                    let hasSpace = bldg.hasPlaceForDevice()\r\n                    return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n                }\r\n            )\r\n\r\n            let snapped = false\r\n            if (bldg) {\r\n                let spot = bldg.nextDevicePlace().position\r\n                let d = spot.distance(pos)\r\n                snapped = d < 150\r\n            }\r\n\r\n            if (snapped) {\r\n                this.building = bldg;\r\n                this.pos = this.building.nextDevicePlace().position\r\n            } else {\r\n                this.pos = pos\r\n            }\r\n\r\n            return snapped\r\n        }\r\n    }\r\n\r\n    private snapTiny(planet: Planet, pos: Vector) {\r\n        // okay, we need the closest building with any built machine that HAS a tiny slot\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            allStructures,\r\n            (bldg: Building) => bldg.getDevices().some(\r\n                (device: Device) => device.built && device.hasTinyPlace()\r\n            )\r\n        )\r\n\r\n        // todo look at all devices? (closest bldg may not house closest device!!)\r\n        let device: Device = closest(\r\n            pos,\r\n            bldg.getDevices().filter((d: Device) => d.built && d.hasTinyPlace()),\r\n            (d: Device) => d.pos,\r\n        )\r\n\r\n        this.pos = pos\r\n        let snapped = false\r\n        if (device) {\r\n            let spot = device.nextTinyPlace().add(device.pos).add(device.building.pos)\r\n            let d = spot.distance(pos)\r\n            snapped = d < 50\r\n\r\n            if (snapped) {\r\n                this.building = device.building\r\n                this.parentDevice = device\r\n                this.pos = spot\r\n            }\r\n        }\r\n\r\n        return snapped\r\n    }\r\n\r\n    public parentDevice: Device = null\r\n    tinyDevices: Device[] = []\r\n    private hasTinyPlace() {\r\n        if (!this.machine.tinySlots) {\r\n            return false\r\n        } else {\r\n            return this.tinyDevices.length < 3\r\n        }\r\n    }\r\n\r\n    private nextTinyPlace() {\r\n        let tx0 = -this.getWidth()/3, ty0 = -3\r\n        let ndx = this.tinyDevices.length\r\n        return new Vector(tx0 + (ndx * 14), ty0)\r\n    }\r\n\r\n    public addTinyDevice(device: Device) {\r\n        console.log(\"ADD TINY DEVICE\", { device: device.machine })\r\n        device.pos = this.nextTinyPlace() //.add(this.pos)\r\n        // device.pos.addEqual(this.pos.add(this.nextTinyPlace()))\r\n        this.tinyDevices.push(device)\r\n        this.add(device)\r\n    }\r\n}","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst medGroundVehicles = mediumMachines.filter(machine => (new machine()).isVehicle)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    color: Color = Color.Gray\r\n    infra: boolean = false\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n\r\n    hide: boolean = false\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.fifth\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MediumSurfaceRoom ],\r\n        [Orientation.Right]: [  Dome, MediumSurfaceRoom ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.seventh\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea,\r\n            Ladder,\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea,\r\n            Ladder,\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n    infra = true\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.sixth\r\n    height = 20 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n    infra = true\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    description: string = 'Biome sweet biome';\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.sixth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n\r\n    prereqs = [\r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    height = major.fifth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    height = major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 2 * major.eighth\r\n    machines = midBelow\r\n}\r\n\r\nexport class MediumRoomThree extends CommonArea {\r\n    name = 'Mid Room (3)'\r\n    prereqs = [ MediumRoom ]\r\n    view = 'MediumRoomThreeView'\r\n    width = 3 * major.eighth\r\n    height = major.eighth\r\n\r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 4 * major.eighth\r\n    height = 2*major.eighth\r\n    machines = largeBelow\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class MediumSurfaceRoom extends Dome {\r\n    name = 'Mid Surf Bldg'\r\n    description = 'home away from home';\r\n\r\n    view: string = 'MediumSurfaceRoomView';\r\n\r\n    width: number = 4 * major.eighth\r\n    height: number = major.seventh\r\n\r\n    zoom = 0.1\r\n\r\n    prereqs = [ SmallDome ]\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel, MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ MainTunnel, MediumSurfaceRoom ],\r\n    }\r\n\r\n    machines = midBelow\r\n\r\n    // hide = false // need another one which cares about connecting to roads...\r\n}\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = major.eighth\r\n    height = major.fifth\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 3 * major.fifth\r\n    height = 2*major.fifth\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 3 * major.seventh\r\n    height = 2 * major.seventh\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n\r\n}\r\n\r\n/// vehicles...!\r\n\r\nexport class GroundVehiclePool extends Dome {\r\n    name = 'Veh. Pool'\r\n    // view = 'G'\r\n    width = 2 * major.eighth\r\n    height = minor.second\r\n    machines = medGroundVehicles\r\n}\r\n\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n        MediumSurfaceRoom,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        MediumRoomThree,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine, Mainframe, CommandCenter, MissionLog, Botany, OrientationConsole, PersonnelRegistry, MineralProcessor, MiningDrill, HoloProjector, TimeCrystal, Couch, Statue } from './Machine';\r\nimport { Color } from 'excalibur';\r\nimport { Structure, MediumSurfaceRoom } from './Structure';\r\nimport { BackgroundPattern } from '../actors/Building/BackgroundPatterns';\r\n\r\nexport class SpaceFunction {\r\n     name: string = '(generic)'\r\n     description: string = '(generic description)'\r\n     machines: (typeof Machine)[] = []\r\n     color: Color = Color.Gray\r\n\r\n     prereqs: (typeof SpaceFunction)[] =  [] \r\n\r\n     structure: typeof Structure = null\r\n     hide: boolean = false\r\n     background: BackgroundPattern = BackgroundPattern.Beige\r\n\r\n     bonuses: {\r\n          capacity: number, // every store/generator gets this??\r\n          workSpeed: number, // 2 should double work speed (dur *= 1/multiplier)\r\n     } = {\r\n          capacity: 0, // boost cap by one\r\n          workSpeed: 1.00 // 20% bonus to work speed\r\n     }\r\n}\r\n\r\nexport class MissionControl extends SpaceFunction {\r\n     hide = true\r\n     name = 'Mission Control'\r\n     description = 'keeping everything on track'\r\n     structure = MediumSurfaceRoom\r\n     prereqs = [] //ComputerCore, Factory, Farm ]\r\n     machines = [ CommandCenter, MissionLog ]\r\n     background = BackgroundPattern.Window\r\n}\r\n\r\nexport class LivingQuarters extends SpaceFunction {\r\n     name = 'Living Quarters'\r\n     description = 'good night'\r\n     machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n     name = 'Barracks'\r\n     description = 'sleep tight'\r\n     machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nexport class Kitchen extends SpaceFunction {\r\n     name = 'Kitchen'\r\n     description = 'stay together'\r\n     machines = [ Stove, Fridge ]\r\n     bonuses = {\r\n          capacity: 2,\r\n          workSpeed: 1.1\r\n     }\r\n     background = BackgroundPattern.Checker\r\n}\r\n\r\nexport class LifeSupportPod extends SpaceFunction {\r\n     name = 'Life Support'\r\n     description = 'keep it going'\r\n     machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n     name = 'Retreat'\r\n     description = 'take it easy'\r\n     machines = [ Cabin, Cabin ]\r\n}\r\n\r\nexport class CloneMatrix extends SpaceFunction {\r\n     name = 'Clone Matrix'\r\n     description = 'clone home'\r\n     machines = [ CloningVat, CloningVat ]\r\n}\r\n\r\nexport class CloneReception extends SpaceFunction {\r\n     name = 'Clone Reception'\r\n     description = 'welcome clone'\r\n     machines = [ CloningVat, OrientationConsole, PersonnelRegistry ]\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n     name = 'Reading Room'\r\n     description = 'butterflies in the sky'\r\n     machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nexport class Library extends SpaceFunction {\r\n     name = 'Library'\r\n     description = 'take a look'\r\n     machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n     background = BackgroundPattern.Books\r\n}\r\n\r\nexport class Study extends SpaceFunction {\r\n     name = 'Study'\r\n     description = 'plan it out'\r\n     machines = [ StudyMachine, Bookshelf ]\r\n     background = BackgroundPattern.Wood\r\n}\r\n\r\nclass ComputerLab extends SpaceFunction {\r\n     name = 'Computer Lab'\r\n     description = 'make it happen'\r\n     machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nexport class Archive extends SpaceFunction {\r\n     name = 'Archive'\r\n     description = 'write it down'\r\n     machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n     name = 'Arboretum'\r\n     description = 'walk it out'\r\n     machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n     name = 'Algae Farm'\r\n     description = 'make do'\r\n     machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nexport class SolarArray extends SpaceFunction {\r\n     name = 'Solar Array'\r\n     description = 'warm up'\r\n     machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nexport class Workshop extends SpaceFunction {\r\n     name = 'Workshop'\r\n     description = 'take form'\r\n     machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\nclass Nursery extends SpaceFunction {\r\n     name = 'Nursery'\r\n     description = 'quiet please'\r\n     machines = [ Houseplant, Houseplant, Houseplant ]\r\n     background = BackgroundPattern.Leafy\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n     name = 'Farm'\r\n     description = 'food for the masses'\r\n     machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n     name = 'Factory'\r\n     description = 'production lines'\r\n     machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\n\r\nexport class ComputerCore extends SpaceFunction {\r\n     name = 'Computer Core'\r\n     description = 'let us calculate'\r\n     machines = [ Mainframe, Mainframe ]\r\n     background = BackgroundPattern.Tech\r\n}\r\n\r\nexport class LifeSciencesLab extends SpaceFunction {\r\n     name = 'Life Sciences Lab'\r\n     description = 'where do i come from'\r\n     machines = [ Botany, Botany ]\r\n}\r\n\r\nexport class Refinery extends SpaceFunction {\r\n     name = 'Refinery'\r\n     description = 'separation'\r\n     machines = [ MineralProcessor ]\r\n}\r\n\r\nexport class Mine extends SpaceFunction {\r\n     name = 'Mine'\r\n     description = 'ore from the stone'\r\n     machines = [ MiningDrill ]\r\n}\r\n\r\nexport class HoloMatrix extends SpaceFunction {\r\n     name = 'Hologram Matrix'\r\n     description = 'dream it'\r\n     machines = [ HoloProjector, HoloProjector ]\r\n}\r\n\r\nexport class TimeChamber extends SpaceFunction {\r\n     name = 'Time Chamber'\r\n     description = 'believe it'\r\n     machines = [ TimeCrystal, TimeCrystal ]\r\n}\r\n\r\n// export class DreamMatrix extends \r\n\r\nexport class LivingRoom extends SpaceFunction {\r\n     name = 'Living Room'\r\n     description = 'just relax'\r\n     machines = [ Couch, Couch ]\r\n}\r\n\r\nexport class Statuary extends SpaceFunction {\r\n     name = 'Statuary'\r\n     description = 'to remember'\r\n     machines = [ Statue, Statue, Statue ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    ComputerLab,\r\n\r\n    ComputerCore,\r\n\r\n    MissionControl,\r\n    LifeSciencesLab,\r\n\r\n    CloneReception,\r\n    \r\n    Refinery,\r\n    Mine,\r\n    HoloMatrix,\r\n    TimeChamber,\r\n\r\n    LivingRoom,\r\n    Statuary,\r\n]","import { Engine, DisplayMode, Loader, Timer, Color } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n  static citizenSpeed: number = 27\r\n  static debugPath: boolean = false\r\n  static startHour: number = 8\r\n\r\n  static minuteTickMillis: number = 1200\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: Color.Black //world.skyColor\r\n    });\r\n  }\r\n\r\n  public start() {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n\r\n    return super.start(loader).then(() => {\r\n      console.log(\"Osiris running.\")\r\n    });\r\n  }\r\n}","import { Citizen } from \"../actors/Citizen\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { sleep } from \"../Util\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Recipe, MechanicalOperation } from \"../models/MechanicalOperation\";\r\n\r\nexport abstract class Strategy {\r\n    private sleepInterval: number = 250\r\n    protected isActive: boolean = false;\r\n    constructor(protected pawn: Citizen) { }\r\n\r\n    protected abstract async apply();\r\n    abstract canApply(): boolean;\r\n\r\n    protected get planet(): Planet { return this.pawn.currentPlanet; }\r\n    protected get devices(): Device[] { return this.planet.colony.findPoweredDevices(); }\r\n    protected get operations(): MechanicalOperation[] { return this.devices.map(d => d.operation); }\r\n    protected get recipes(): Recipe[] {\r\n        let recipes: Recipe[] = [];\r\n        this.operations.forEach(op => {\r\n            if (op.type === 'recipe') {\r\n                recipes.push(op);\r\n            }\r\n        });\r\n        return recipes;\r\n    }\r\n\r\n\r\n    async attempt(): Promise<void> {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n        if (!this.isActive) {\r\n            this.isActive = true\r\n            // note apply will need to set this.isActive around its critical section\r\n            await this.apply();\r\n            this.isActive = false\r\n        }\r\n\r\n        await this.pause()\r\n        // setInterval(() => { this.attempt() }, this.sleepInterval)\r\n    }\r\n\r\n    protected async pause() {\r\n        await sleep(this.sleepInterval)\r\n    }\r\n\r\n    protected async gatherBlock(res: ResourceBlock): Promise<boolean> {\r\n        console.debug(\"GATHER BLOCK\", { res })\r\n        let gathered = false\r\n        let generatesDesiredBlock = (d: Device) => (d.operation.type === 'generator') &&\r\n            d.product.some(stored => res === stored) //&& !d.inUse\r\n        let gen: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], generatesDesiredBlock)\r\n\r\n        let storesDesiredBlock = (d: Device) => (d.operation.type === 'store') &&\r\n              d.product.some(stored => res === stored) //&& !d.inUse\r\n        let store: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n\r\n        let device: Device = gen || store\r\n\r\n        if (device) {\r\n            // device.inUse = true\r\n            console.debug(\"Found device to gather, visting...\")\r\n            await this.visitDevice(device)\r\n\r\n            if (device.inUse) {\r\n                // at least wait a bit and try again?\r\n                let waitTimes = 0\r\n                while (device.inUse) {\r\n                    console.warn(\"waiting for device to be ready!\")\r\n                    await sleep(5000) //this.pause()\r\n                    if (waitTimes++ > 10) {\r\n                        return false \r\n                    }\r\n                }\r\n            }\r\n\r\n            console.debug(\"Attempt to interact with device...\")\r\n            if (await device.interact(this.pawn, retrieveResource(res))) {\r\n                console.debug(\"Interacted successfully!\")\r\n                gathered = true\r\n            }\r\n        } else {\r\n            console.warn(\"Didn't gather...\")\r\n            // don't work sub-recipes??\r\n            // let recipe = this.recipes.find(recipe => recipe.produces === res);\r\n            // if (recipe) {\r\n                // gathered = await this.workRecipe(recipe);\r\n                // gathered = true\r\n            // }\r\n        }\r\n\r\n        return gathered\r\n    }\r\n\r\n    protected async visitDevice(device: Device) {\r\n        await this.pawn.visit(device)\r\n    }\r\n\r\n\r\n    protected async workRecipe(recipe: Recipe): Promise<boolean> {\r\n        console.debug(\"Working recipe\", { product: recipe.produces })\r\n        let knowsRecipe = (d: Device) => d.operation === recipe && !d.reserved\r\n        let maker = this.planet.colony.closestDeviceByType(this.pawn.pos, [], knowsRecipe)\r\n        let made = false\r\n        if (maker) {\r\n            maker.reserved = true\r\n            // maker.inUse = true\r\n            if (await this.gatherIngredients(recipe.consumes)) {\r\n                await this.visitDevice(maker)\r\n                if (await this.performRecipeTask(maker, recipe)) {\r\n                    made = true\r\n                }\r\n            }\r\n            maker.reserved = false\r\n            // maker.inUse = false\r\n        }\r\n        // await this.pause()\r\n        // await this.workRecipe(recipe);\r\n        return made\r\n    }\r\n\r\n    protected async gatherIngredients(blocks: ResourceBlock[]): Promise<boolean> {\r\n        if (!this.pawn.isCarryingUnique(blocks)) {\r\n            console.debug(\"Gathering blocks...\")\r\n            for (let ingredient of blocks) {\r\n                console.debug(\"attempting to gather\", { ingredient })\r\n                let tries = 0\r\n                let gathered = false\r\n                while (!gathered && tries < 20) {\r\n                    tries += 1\r\n                    if (await this.gatherBlock(ingredient)) {\r\n                        gathered = true\r\n                    } else {\r\n                        await this.pause()\r\n                    }\r\n                }\r\n\r\n                if (!gathered) {\r\n                    console.warn(\"couldn't gather one of the ingredients!!\")\r\n                    return false\r\n                }\r\n                //else {\r\n                //    console.warn(\"didn't gather it!\")\r\n                //    return false\r\n                //}\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    protected async performRecipeTask(maker: Device, recipe: Recipe, timesToAttempt: number = 5) {\r\n        console.debug(\"Try to perform recipe task...\", { produces: recipe.produces })\r\n        let worked = await maker.interact(this.pawn, { type: 'work', recipe })\r\n        if (!worked) {\r\n            // await this.pause()\r\n            console.warn(\"waiting for machine to become available...\")\r\n            for (let i = 0; i < timesToAttempt; i ++) {\r\n                await this.pause()\r\n                if (await this.performRecipeTask(maker, recipe)) {\r\n                    worked = true\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return worked\r\n    }\r\n}","const raisedSquare = require('../../images/raised-square-bg.png')\r\nconst leafy = require('../../images/leafy-bg.png')\r\nconst bookish = require('../../images/books-bg.png')\r\nconst posters = require('../../images/poster-wall-bg.png')\r\nconst tech = require('../../images/tech-bg.png')\r\nconst checker = require('../../images/checker-bg.png')\r\nconst beige = require('../../images/beige-bg.png')\r\nconst window = require('../../images/window-bg.png')\r\nconst ussf = require('../../images/ussf.png')\r\nconst wood = require('../../images/wood-panel-bg.png')\r\n\r\ninterface Background {\r\n    image: HTMLImageElement\r\n    pattern: CanvasPattern\r\n    loading: boolean\r\n}\r\n\r\nconst loadBg = (path, scale = 1) => {\r\n    let background: Background = { image: null, pattern: null, loading: true }\r\n    background.image = new Image();\r\n    background.image.src = path\r\n    background.image.onload = function () {\r\n      background.loading = false\r\n    }\r\n    return { background, scale }\r\n}\r\n\r\nexport enum BackgroundPattern {\r\n    Leafy = 'Leafy',\r\n    Grid = 'Grid',\r\n    Books = 'Books',\r\n    Poster = 'Poster',\r\n    Tech = 'Tech',\r\n    Checker = 'Checker',\r\n    Beige = 'Beige',\r\n    Window = 'Window',\r\n    USSF = 'USSF',\r\n    Wood = 'Wood',\r\n}\r\n\r\nconst backgroundPatterns: { [ key in BackgroundPattern ]: { background: Background, scale: number } } = {\r\n    Leafy: loadBg(leafy),\r\n    Grid: loadBg(raisedSquare),\r\n    Books: loadBg(bookish),\r\n    Poster: loadBg(posters),\r\n    Tech: loadBg(tech),\r\n    Checker: loadBg(checker),\r\n    Beige: loadBg(beige),\r\n    Window: loadBg(window),\r\n    USSF: loadBg(ussf, 0.5),\r\n    Wood: loadBg(wood),\r\n}\r\n\r\nexport const getBackgroundPattern = (ctx: CanvasRenderingContext2D, p: BackgroundPattern) => {\r\n    let pattern = backgroundPatterns[p]\r\n    let bg = pattern.background\r\n    if (!bg.loading) {\r\n        if (!bg.pattern) {\r\n            let matrix = new DOMMatrix() //bg.pattern.cre //ctx. // new SVGMatrix()\r\n\r\n            // bg.image.scal\r\n            // bg.image.scale\r\n            bg.pattern = ctx.createPattern(bg.image, 'repeat');\r\n            bg.pattern.setTransform(matrix.scale(pattern.scale)) //0.5))\r\n\r\n        }\r\n        return bg.pattern\r\n    }\r\n}","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        let tries = 0\r\n        while (visited.length < this.nodes.length && tries++ < this.nodes.length * 20) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Texture, Sound } from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\nconst craterRock = require('./sounds/crater-rock.mp3')\r\nconst assembler = require('./sounds/assembler.mp3')\r\nconst indivision = require('./sounds/indivision.mp3')\r\nconst understanding = require('./sounds/understanding.mp3')\r\nconst futureTense = require('./sounds/future tense.mp3')\r\n// const isomer = require('./sounds/isomer.mp3')\r\n// const outbound = require('./sounds/outbound.mp3')\r\n\r\nlet Resources = {\r\n    Sword: new Texture(sword),\r\n\r\n    CraterRock: new Sound(craterRock),\r\n    Assembler: new Sound(assembler),\r\n    Indivision: new Sound(indivision),\r\n    Understanding: new Sound(understanding),\r\n    FutureTense: new Sound(futureTense),\r\n    // Isomer: new Sound(isomer),\r\n    // Outbound: new Sound(outbound),\r\n\r\n\r\n}\r\n\r\nexport { Resources }\r\n","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range, mixColors } from '../../Util';\r\nimport { drawRect } from '../../Painting';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 1500, color)\r\n    }\r\n}\r\n\r\nexport class MountainLayers extends PlanetBackground {\r\n    layers: {\r\n        baseY: number,\r\n        // color: Color,\r\n        deltas: number[]\r\n    }[] = []\r\n\r\n    skyColor: Color = Color.Blue.clone()\r\n    layerHeight: number = 200\r\n    layerCount = 1\r\n    peakCount = 400\r\n\r\n    get peakWidth() {\r\n        return Math.floor(this.getWidth() / this.peakCount)\r\n    }\r\n\r\n    onInitialize() {\r\n        let min = -this.layerHeight\r\n        for (let layerIndex of range(this.layerCount)) {\r\n            this.layers.unshift({\r\n                baseY: -this.layerHeight - (10 * layerIndex),\r\n                deltas: this.genPeaks(layerIndex)\r\n            })\r\n        }\r\n    }\r\n\r\n    draw(ctx, delta) {\r\n        let wc = this.color.clone() //.lighten(0.1)\r\n        let sc = this.skyColor.clone() //.lighten(0.1)\r\n\r\n        let ndx = 1\r\n        let ls = this.layers.slice()\r\n        for (let layer of ls) {\r\n            let c = mixColors(wc, sc, (ndx / (this.layers.length)))\r\n            this.drawLayer(ctx, layer, c) //.lighten(0.1))\r\n            ndx += 1\r\n        }\r\n    }\r\n\r\n    private drawLayer(ctx, layer, color) {\r\n        let ox = -this.getWidth()/2, oy = this.pos.y + layer.baseY \r\n        let c = color.clone()\r\n\r\n        ctx.beginPath()\r\n        ctx.moveTo(ox, oy)\r\n        let ndx = 0\r\n        for (let delta of layer.deltas) {\r\n            ctx.lineTo(ox + (ndx * this.peakWidth), oy + delta)\r\n            ndx += 1\r\n        }\r\n        ctx.lineTo(ox + (this.peakCount * this.peakWidth), oy)\r\n        ctx.lineTo(ox + (this.peakCount * this.peakWidth), oy + this.layerHeight)\r\n        ctx.lineTo(ox, oy+this.layerHeight)\r\n        ctx.closePath()\r\n        c.a = 1\r\n        ctx.fillStyle = c.toRGBA()\r\n        ctx.fill()\r\n    }\r\n\r\n    private genPeaks(n) {\r\n        let dMax = 2*(this.layerHeight/3)\r\n        let deltas = []\r\n        let randomDelta = () => (Math.random() * (dMax)) - (dMax/2)\r\n        let last = 0\r\n        let maxDiff = 5 + (n*2)\r\n        for (let times in range(this.peakCount)) {\r\n            let curr = randomDelta()\r\n            let pick = Math.max(\r\n                   last - maxDiff,\r\n                   Math.min(curr, last + maxDiff),\r\n               )\r\n            deltas.push(\r\n               pick\r\n            )\r\n            last = pick\r\n        }\r\n        return deltas\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 3\r\n        let peakHeight = 4800\r\n        let xOff = this.getWidth() / 2\r\n        let peakDistance = this.getWidth() / peakCount\r\n        for (let times of range(2)) {\r\n            let heightRange = 100\r\n            let drift = 3 * (peakDistance / 2)\r\n            for (let i of range(peakCount)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 200 + (Math.random() * peakHeight) + ((Math.random() * heightRange) - (heightRange / 2))) //(Util.randomIntInRange(-160,160))\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.35)\r\n        let brightColor = baseColor.lighten(0.1)\r\n        ctx.fillStyle = baseColor.toRGBA()\r\n        let yBase = this.pos.y-3\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA()\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA()\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import { Actor, Color } from 'excalibur';\r\nimport { mixColors } from '../../Util';\r\nimport { Mountains, MountainLayers } from './PlanetBackground';\r\nexport class SkyLayer extends Actor {\r\n    mountains: Mountains;\r\n    mountainLayers: MountainLayers;\r\n    backMountainLayers: MountainLayers;\r\n    constructor(y: number, width: number, lo: Color, hi: Color) {\r\n        super(0, y, width, 1500); //width,1500) //height)\r\n        let mid = mixColors(lo, hi);\r\n        this.backMountainLayers = new MountainLayers(-100, width, mid);\r\n        this.backMountainLayers.skyColor = hi;\r\n        this.add(this.backMountainLayers);\r\n        this.mountains = new Mountains(0, width, mid);\r\n        this.add(this.mountains);\r\n        this.mountainLayers = new MountainLayers(0, this.getWidth(), lo);\r\n        this.mountainLayers.skyColor = mid;\r\n        this.add(this.mountainLayers);\r\n    }\r\n    setLoHi(lo: Color, hi: Color) {\r\n        let mid = mixColors(lo, hi);\r\n        this.backMountainLayers.color = mid;\r\n        this.backMountainLayers.skyColor = hi;\r\n        this.mountains.color = mid;\r\n        this.mountainLayers.color = lo;\r\n        this.mountainLayers.skyColor = mid;\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range, mixColors } from '../../Util';\r\nimport { SkyLayer } from \"./SkyLayer\";\r\nexport class SkyLayers extends Actor {\r\n    layers: SkyLayer[] = [];\r\n    constructor(y: number, width: number, private lo: Color, hi: Color, private layerCount: number = 5) {\r\n        super(0, y, width, 1500);\r\n        for (let i of range(layerCount)) {\r\n            let c0 = mixColors(lo, hi, (i / (layerCount + 1)));\r\n            let c1 = mixColors(lo, hi, ((i + 1) / (layerCount + 1)));\r\n            let layer = new SkyLayer(-200 * (layerCount - i - 1), this.getWidth(), c1, c0);\r\n            this.layers.push(layer);\r\n            this.add(layer);\r\n        }\r\n    }\r\n    setHi(hi: Color) {\r\n        let lo = this.lo;\r\n        for (let i of range(this.layerCount)) {\r\n            let c0 = mixColors(lo, hi, (i / (this.layerCount + 1)));\r\n            let c1 = mixColors(lo, hi, ((i + 1) / (this.layerCount + 1)));\r\n            this.layers[i].setLoHi(c1, c0);\r\n            // let layer = new SkyLayer(-100 * (layerCount-i-1), this.getWidth(), c1, c0)\r\n        }\r\n    }\r\n}\r\n","import { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class EatingStrategy extends Strategy {}","import { EatingStrategy } from \"./EatingStrategy\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { Fridge, Desk } from \"../models/Machine\";\r\n\r\nexport class WhenHungryEatingStrategy extends EatingStrategy {\r\n    canApply(): boolean {\r\n        return this.pawn.isHungry &&\r\n            this.planet.storedResources.includes(ResourceBlock.Meal)\r\n        // hunger > 0.6\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    protected async apply() {\r\n        // find the store with the food! reserve it maybe?\r\n        let fridge = this.devices.find(d => d.machine.operation.type === 'store' &&\r\n          d.machine.operation.stores.includes(ResourceBlock.Meal) &&\r\n          d.product.includes(ResourceBlock.Meal) &&\r\n          !d.reserved\r\n        )\r\n\r\n        if (fridge) {\r\n            fridge.reserved = true\r\n            // take the meal to a desk? (maybe need table here... or eatingSurface aspect?)\r\n            await this.visitDevice(fridge)\r\n            await fridge.interact(this.pawn, { type: 'retrieve', resource: ResourceBlock.Meal })\r\n            fridge.reserved = false\r\n\r\n            let desk = this.devices.find(d => d.machine instanceof Desk)\r\n            if (desk) {\r\n                await this.visitDevice(desk)\r\n            }\r\n            await this.pawn.eat()\r\n            // fridge.interac\r\n            // this.pawn.interact()\r\n        }\r\n    }\r\n    \r\n    \r\n}","import { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class SleepingStrategy extends Strategy {\r\n\r\n}","import { SleepingStrategy } from \"./SleepingStrategy\";\r\nimport { Bed } from \"../models/Machine\";\r\nimport { shuffle } from \"../Util\";\r\n\r\nexport class AnyBedSleepingStrategy extends SleepingStrategy {\r\n    canApply(): boolean {\r\n        if (!this.pawn.isTired) {\r\n            return false\r\n        }\r\n\r\n        let bedtime = this.planet.hour > 21 || this.planet.hour < 4\r\n        return bedtime\r\n    }\r\n\r\n    protected async apply() {\r\n        // find a bed\r\n        let bed = shuffle(this.devices).find(d => d.machine instanceof Bed && !d.inUse)\r\n        if (bed) {\r\n            bed.inUse = true\r\n            await this.visitDevice(bed)\r\n        }\r\n        await this.pawn.takeRest() //1000 * 24)\r\n        if (bed) { \r\n            bed.inUse = false\r\n        }\r\n        return true\r\n    }\r\n\r\n}","import { Strategy } from \"./Strategy\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { containsUniq } from \"../Util\";\r\n\r\nexport abstract class ConstructionStrategy extends Strategy {\r\n    canApply(): boolean {\r\n        return !!this.unbuiltDevice\r\n    }\r\n\r\n    get unbuiltDevice() {\r\n        const isUnbuilt = (d: Device) => !d.built && !d.inUse && d.building.isActive &&\r\n          // the player can TRY to build it, we don't have to hang forever on it though\r\n          containsUniq(this.planet.storedResources, d.machine.cost)\r\n        return this.planet.colony.findAllDevices().find(isUnbuilt)\r\n    }\r\n}","import { ConstructionStrategy } from \"./ConstructionStrategy\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nexport class ProxmityBasedConstruction extends ConstructionStrategy {\r\n    async apply() {\r\n        if (this.unbuiltDevice && this.unbuiltDevice.building) {\r\n            await this.constructDevice(this.unbuiltDevice)\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n    private async constructDevice(device: Device) {\r\n        device.inUse = true\r\n        let resources = device.machine.cost\r\n        if (await this.gatherIngredients(resources)) {\r\n            await this.visitDevice(device)\r\n            await device.assemble(this.pawn)\r\n        } \r\n\r\n        device.inUse = false\r\n    }\r\n}","import { ResourceBlock } from \"../models/Economy\";\r\n\r\nimport { Recipe } from \"../models/MechanicalOperation\";\r\n\r\nexport interface RetrieveResource {\r\n    type: 'retrieve'\r\n    resource: ResourceBlock\r\n    // count: number\r\n}\r\n\r\nexport interface WorkRecipe {\r\n    type: 'work'\r\n    recipe: Recipe\r\n}\r\n\r\nexport interface StoreResource {\r\n    type: 'store'\r\n    resource: ResourceBlock\r\n}\r\n\r\nexport function retrieveResource(res: ResourceBlock): RetrieveResource {\r\n    return {\r\n        type: 'retrieve',\r\n        resource: res,\r\n        // count: 1\r\n    }\r\n}\r\n\r\n\r\nexport type InteractionRequest = StoreResource | RetrieveResource | WorkRecipe; // | ...\r\n\r\n","import { Device } from \"../actors/Device\";\r\nimport { MechanicalOperation, Recipe } from \"../models/MechanicalOperation\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class ProductionStrategy extends Strategy {\r\n\r\n\r\n    protected async storeBlock(res: ResourceBlock) {\r\n        let storesDesiredBlock = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) && //operation.capacity &&\r\n            d.operation.stores.includes(res)\r\n        let openStore = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n        let stored = false\r\n        if (openStore) {\r\n            await this.visitDevice(openStore)\r\n            if (await openStore.interact(this.pawn, { type: 'store', resource: res })) {\r\n                stored = true\r\n            }\r\n        }\r\n\r\n        if (!stored) {\r\n            await this.pause()\r\n            await this.storeBlock(res)\r\n        }\r\n    }\r\n\r\n}\r\n","import { shuffle, containsUniq } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Recipe, ResourceStorage } from \"../models/MechanicalOperation\";\r\nimport { ProductionStrategy } from \"./ProductionStrategy\";\r\n\r\nexport class CapacityBasedProduction extends ProductionStrategy {\r\n    private findStore() {\r\n        const storeWithCapacity = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) //&&\r\n            // !d.inUse\r\n            // containsUniq(this.planet.storedResources, d.operation)\r\n        let store: Device = shuffle(this.devices).find(storeWithCapacity)\r\n        return store\r\n    }\r\n\r\n    canApply(): boolean {\r\n        // throw new Error(\"Method not implemented.\");\r\n        return !!this.findStore()\r\n    }\r\n\r\n    async apply() {\r\n        let store = this.findStore()\r\n\r\n        if (store && store.operation.type === 'store') {\r\n            // store.inUse = true\r\n            const storage: ResourceStorage = store.operation\r\n            const recipeForStoredResource = (r: Recipe) => storage.stores.some(stored => r.produces === stored)\r\n            let recipe: Recipe = shuffle(this.recipes).find(recipeForStoredResource)\r\n            if (recipe && containsUniq(this.planet.storedResources, recipe.consumes)) {\r\n                if (await this.workRecipe(recipe)) {\r\n                    await this.storeBlock(recipe.produces)\r\n                }\r\n            }\r\n            // store.inUse = false\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons, deleteByValueOnce, sleep, containsUniq, deleteByValue } from \"../Util\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { ProductionStrategy } from \"../strategies/ProductionStrategy\";\r\nimport { CapacityBasedProduction } from \"../strategies/CapacityBasedProduction\";\r\nimport { drawStar, drawRect } from \"../Painting\";\r\nimport { ConstructionStrategy } from \"../strategies/ConstructionStrategy\";\r\nimport { ProxmityBasedConstruction } from \"../strategies/ProximityBasedConstruction\";\r\nimport { SleepingStrategy } from \"../strategies/SleepingStrategy\";\r\nimport { AnyBedSleepingStrategy } from \"../strategies/AnyBedSleepingStrategy\";\r\nimport { EatingStrategy } from \"../strategies/EatingStrategy\";\r\nimport { WhenHungryEatingStrategy } from \"../strategies/WhenHungryEatingStrategy\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../values/DeviceSize\";\r\n\r\nexport class Citizen extends Actor {\r\n    isPlanning: boolean = false // \r\n\r\n    // walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock[] = [] // null\r\n    path: Vector[] = []\r\n\r\n    private workInProgress: boolean = false\r\n    private workStarted: number\r\n    private workDuration: number\r\n    private progress: number\r\n\r\n    private sleeping: boolean = false\r\n\r\n\r\n    private productionStrategy: ProductionStrategy\r\n    private constructionStrategy: ConstructionStrategy\r\n    private sleepingStrategy: SleepingStrategy\r\n    private eatingStrategy: EatingStrategy\r\n\r\n    private hunger: number = 0.0;\r\n    private energy: number = 100\r\n\r\n    constructor(private home: Vector, protected planet: Planet, private elite: boolean = false) {\r\n        super(home.x, home.y, Scale.minor.first, Scale.minor.fourth, Color.White.clone())\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.productionStrategy = new CapacityBasedProduction(this)\r\n        this.constructionStrategy = new ProxmityBasedConstruction(this)\r\n        this.sleepingStrategy = new AnyBedSleepingStrategy(this)\r\n        this.eatingStrategy = new WhenHungryEatingStrategy(this)\r\n    }\r\n\r\n    get isHungry() { return this.hunger > 0.3 }\r\n    get isTired()  { return this.energy < 45 }\r\n\r\n    // get isWorking() { return this.isWorking }\r\n    get currentPlanet() { return this.planet }\r\n\r\n    get walkSpeed() {\r\n        let speedMultiplier = this.planet.timeFactor * (this.elite ? 1.6 : 1)\r\n        return Game.citizenSpeed * speedMultiplier\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // make sure we are busy!\r\n        this.work()\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = \r\n              Math.min(\r\n                  (now - this.workStarted) / this.workDuration,\r\n                  1\r\n              )\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        ctx.save()\r\n        // ctx.globalAlpha = 1.0\r\n        ctx.translate(this.x, this.y - this.getHeight()/2 - 5)\r\n        if (this.sleeping) {\r\n            ctx.rotate(-Math.PI / 2);\r\n            ctx.translate(-10, -10)\r\n        }\r\n        // ctx.globalAlpha = 1.0 //?\r\n        drawRect(\r\n            ctx,\r\n            { x: 0, y: 0, width: this.getWidth(), height: this.getHeight() },\r\n            0,\r\n            Color.White\r\n        )\r\n\r\n        if (this.elite) {\r\n            // draw a little star?\r\n            drawStar(ctx, 8, -5)\r\n        }\r\n\r\n        // super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            let dx = 5\r\n            // if (this.vel.x < 0) { dx = -5 }\r\n            this.carrying.forEach((carried, idx) => {\r\n                ctx.fillStyle = blockColor(carried).clone().saturate(0.2).toRGBA()\r\n                ctx.fillRect(dx, 2 - 4 * idx, 5, 5)\r\n            })\r\n        }\r\n        ctx.restore()\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            ctx.strokeRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n        }\r\n\r\n        // let debugPath = true\r\n        if (this.path && Game.debugPath) {\r\n            let c = Color.White.clone().lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 4\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        this.workInProgress = false\r\n    }\r\n\r\n\r\n    carry(c: ResourceBlock) {\r\n        this.carrying.push(c);\r\n    }\r\n\r\n    isCarryingUnique(resources: ResourceBlock[]): boolean {\r\n        let isCarrying = containsUniq(this.carrying, resources)\r\n        return isCarrying\r\n    }\r\n\r\n    drop(res: ResourceBlock): ResourceBlock {\r\n        if (this.carrying.length > 0) {\r\n            if (this.carrying.find(r => r === res)) {\r\n                deleteByValueOnce(this.carrying, res)\r\n                return res\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    currentBuilding: Building = null\r\n    async visit(device: Device) {\r\n        let target = this.targetForDevice(device)\r\n        if (this.currentBuilding != device.building) {\r\n            const path = this.planet.pathBetweenPoints(this.pos.clone(), target)\r\n            await this.followPath(path)\r\n        }\r\n        await this.glideTo(target)\r\n        this.currentBuilding = device.building\r\n    }\r\n\r\n    private targetForDevice(device: Device) {\r\n        let target = device.pos.add(device.building.pos)\r\n        if (device.parentDevice) {\r\n            target = (device.parentDevice.pos).add(device.building.pos)\r\n            target.x += device.pos.x\r\n            target.y += getVisibleDeviceSize(device.parentDevice.size) / 2\r\n        } else {\r\n            target.y += getVisibleDeviceSize(device.size) / 2\r\n        }\r\n        return target\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        if (pos) {\r\n            return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n        }\r\n    }\r\n\r\n    async followPath(path: Vector[]) {\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = []\r\n        }\r\n    }\r\n    \r\n    protected get strategies() {\r\n        return [\r\n            this.sleepingStrategy,\r\n            this.eatingStrategy,\r\n            this.constructionStrategy,\r\n            this.productionStrategy\r\n        ]\r\n    }\r\n\r\n    async work() {\r\n        if (this.isPlanning || this.sleeping) { return }\r\n\r\n        this.isPlanning = true\r\n        // just get rid of it??\r\n        if (this.carrying.length > 0) { this.carrying = [] }\r\n        let choice = this.strategies.find(strat => strat.canApply())\r\n        if (choice) {\r\n            await choice.attempt()\r\n            this.energy -= 1\r\n            this.hunger += 0.01\r\n        }\r\n        this.isPlanning = false\r\n    }\r\n\r\n    async takeRest(duration: number = 8 * 60 * Game.minuteTickMillis) {\r\n        console.log(\"Citizen taking a well-deserved rest!!\")\r\n        this.sleeping = true\r\n        await this.progressBar(duration)\r\n        this.energy = 100\r\n        this.sleeping = false\r\n    }\r\n\r\n    async eat() {\r\n        console.log(\"Citizen eating a meal!\")\r\n        // this.eating = true\r\n        let thirtyMinuteTimer = 30 * Game.minuteTickMillis\r\n        await this.progressBar(thirtyMinuteTimer)\r\n        deleteByValueOnce(this.carrying, ResourceBlock.Meal)\r\n        this.hunger = 0\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(pos, elite: boolean = false) {\r\n        let citizen = new Citizen(pos, this.planet, elite);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { Game } from '../../Game';\r\n\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = Game.debugPath\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.placed = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0] //.length > 1 ? destination.nodes()[1] : destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination; //.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        // console.log(\"PATH FOUND BTWN POINTS\", { srcNode, destNode, path })\r\n        return path;\r\n    }\r\n\r\n\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findPoweredDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d.pos.add(d.building.pos))\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings[0] //.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices(): Device[] {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n\r\n    findPoweredDevices(): Device[] {\r\n        return flatSingle(this.activeBuildings.map(b => b.getDevices()))\r\n            .filter(d => d.built) /// ....\r\n    }\r\n\r\n    protected get activeBuildings() {\r\n        return this.buildings.filter(b => b.isActive)\r\n    }\r\n}\r\n","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range, flatSingle, mixColors } from '../../Util';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { MechanicalOperation } from '../../models/MechanicalOperation';\r\nimport { World } from '../../models/World';\r\nimport { Colorize } from 'excalibur/dist/Drawing/SpriteEffects';\r\nimport { SkyLayers } from './SkyLayers';\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n    // baseColor: Color\r\n    sky: Actor\r\n    skyLayers: SkyLayers\r\n\r\n    constructor(\r\n        public world: World,\r\n        public hud: Hud,\r\n        // public color: Color,\r\n        private onBuildingHover: (b: Building) => any,\r\n        private onDeviceHover: (d: Device) => any,\r\n        private w: number = 100000,\r\n        private depth: number = 40000,\r\n    ) {\r\n        super(0, depth / 2, w, depth, world.color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        this.sky = new Actor(0, -depth, w, depth, world.skyColor)\r\n        this.add(this.sky)\r\n\r\n        let yBase = -depth / 2\r\n        let crustHeight = 40\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.45))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount\r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight / 2) + (layerHeight * (i + 1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n        let c = this.color.clone()\r\n\r\n        this.skyLayers =new SkyLayers(\r\n            -depth/2,\r\n            this.getWidth(),\r\n            this.color.lighten(0.04),\r\n            world.skyColor,\r\n            2\r\n        )\r\n        this.add(this.skyLayers)\r\n\r\n        this.colony = new Colony(0, -depth / 2)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n\r\n    }\r\n\r\n\r\n    private currentHour: number\r\n    get hour() { return this.currentHour }\r\n\r\n    setTime(time: number) {\r\n        this.hour = (Math.floor(time / 60)) % 24\r\n\r\n        let nextHour = this.hour + 1\r\n\r\n        let minute = Math.floor(time % 60)\r\n        let inc = (minute / 60)\r\n        // console.log({ hour: this.hour, nextHour: nextHour, minute, inc })\r\n\r\n        let oldC = this.skyColorForHour(this.hour),\r\n            newC = this.skyColorForHour(nextHour)\r\n\r\n        let mixC = mixColors(newC, oldC, inc)\r\n\r\n        this.assignColors(mixC)\r\n    }\r\n\r\n    private assignColors(skyColor: Color) {\r\n        this.sky.color = skyColor\r\n\r\n        let inc = 0.04\r\n\r\n        let c = mixColors(\r\n            this.sky.color.lighten(5 * inc), //.lighten(3*inc).saturate(5*inc),\r\n            this.color.darken(5 * inc), //.lighten(2*inc)\r\n            0.7\r\n        )\r\n\r\n        this.skyLayers.setHi(c)\r\n\r\n        // this.skyLayer.mountainLayers.color = this.color.lighten(inc) //0.1)\r\n        // this.skyLayer.mountainLayers.skyColor = c.lighten(inc)\r\n        // this.skyLayer.mountains.color = c.lighten(inc)\r\n        // this.skyLayer.backMountainLayers.color = c.lighten(inc)\r\n        // this.skyLayer.backMountainLayers.skyColor = c.lighten(inc * 3).desaturate(inc)\r\n    }\r\n\r\n    skyColorForHour(hour: number) {\r\n        let c = this.world.skyColor.clone().darken(0.2).desaturate(0.1)\r\n\r\n        let colorMap = {\r\n            night: c.darken(0.7),\r\n            dawn: c.darken(0.2),\r\n            morning: c.lighten(0.1),\r\n            afternoon: c.lighten(0.2).desaturate(0.1),\r\n            evening: c,\r\n        }\r\n\r\n        let result: Color = null\r\n        if (hour >= 5 && hour < 8) { // dawn\r\n            let inc = (hour - 6) / 5\r\n            result = colorMap.dawn.lighten(inc)\r\n        } else if (hour >= 8 && hour < 12) { // morning\r\n            let inc = (hour - 8) / 24\r\n            result = colorMap.morning.lighten(inc)\r\n        } else if (hour >= 12 && hour < 14) { // early afternoon\r\n            result = colorMap.afternoon //.darken(inc)\r\n        } else if (hour >= 14 && hour < 18) {  // late afternoon\r\n            let inc = (hour - 14) / 16\r\n            result = colorMap.afternoon.darken(inc)\r\n        } else if (hour >= 18 && hour < 23) { // evening\r\n            let inc = (hour - 18) / 10\r\n            result = colorMap.evening.darken(inc)\r\n        } else if (hour >= 23) { // late night\r\n            result = colorMap.night\r\n        } else if (hour < 5) { // early morning\r\n            result = colorMap.night\r\n        }\r\n        return result\r\n    }\r\n\r\n    set hour(hour: number) {\r\n        this.currentHour = hour\r\n    }\r\n\r\n    set currentlyViewing(buildingOrDevice: Building | Device) {\r\n        if (buildingOrDevice instanceof Building) {\r\n            let b: Building = buildingOrDevice\r\n            this.onBuildingHover(b)\r\n        } else if (buildingOrDevice instanceof Device) {\r\n            let d: Device = buildingOrDevice\r\n            this.onDeviceHover(d)\r\n        }\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        // let devices = this.colony.findPoweredDevices()\r\n        // let economies = devices.map((d: Device) => d.machine.economy)\r\n\r\n        let buildings = this.colony.buildings\r\n        let economies = buildings.map(b => b.economy())\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    spend(resource: ResourceBlock): any {\r\n        this.hud.resourceExpended(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector, elite: boolean = false) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            // console.log(\"POPULATIN'!\")\r\n            // let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(pos, elite) //home)\r\n        } else {\r\n            console.warn(\"too many citizens already to populate more!\")\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [PureValue.Shelter, PureValue.Water, PureValue.Oxygen]\r\n        return Math.max(0, Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        ))\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = () => true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n        return this.colony.pathBetweenPoints(origin, destination)\r\n    }\r\n\r\n    get timeFactor() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let ops: MechanicalOperation[] = devices.map(d => d.operation) //.filter(op => op.type === 'accelerate')\r\n        return ops\r\n            .map(op => op.type === 'accelerate' ? op.factor : 1)\r\n            .reduce((acc, val) => val * acc, 1.0)\r\n    }\r\n\r\n    get storedResources(): ResourceBlock[] {\r\n        let devices = this.colony.findAllDevices()\r\n        return flatSingle(devices.map(d => d.product))\r\n    }\r\n}","import { Color } from \"excalibur\";\r\nimport { EntityKind } from \"../../values/Entity\";\r\n\r\nclass PaletteGroup {\r\n\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(private name: string, private all: EntityKind[], private comprehend = true) {\r\n    }\r\n}\r\n\r\nexport class Palette {\r\n    private _element: HTMLDivElement;\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(\r\n        private name: string,\r\n        private x: number,\r\n        private y: number,\r\n        private all: EntityKind[],\r\n        private onButtonClick: (EntityKind) => any = null,\r\n        private onButtonEnter: (EntityKind) => any = null,\r\n        private comprehend = true \r\n    ) {\r\n        this.makePalette();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    updateBuilt(built: (EntityKind)[]) {\r\n        this.built = built;\r\n        if (this.comprehend) {\r\n            this.comprehended = this.all.filter((e: EntityKind) => {\r\n                let s = new e();\r\n                let prereqs: (EntityKind)[] = s.prereqs;\r\n                return prereqs.every((prereq: EntityKind) => {\r\n                    let built = this.built.some((s: EntityKind) => s === prereq);\r\n                    return built;\r\n                });\r\n            });\r\n        } else {\r\n            this.comprehended = this.built\r\n        }\r\n        this.makePalette();\r\n    }\r\n\r\n    dragging: boolean = false\r\n    private makePalette() {\r\n        if (this._element) {\r\n            this._element.parentElement.removeChild(this._element);\r\n        }\r\n        if (!(this.comprehended.length > 0)) { return }\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.display = 'flex';\r\n        this._element.style.flexWrap = 'wrap';\r\n        this._element.style.width = '200px';\r\n        this._element.style.border = 'none'; //1px solid black'; //0.5px solid white';\r\n\r\n        this._element.addEventListener('mousedown', (e) => { //.onmousedown = (e) => {\r\n            // alert('click palette')\r\n            this.dragging = true\r\n            console.log(\"START DRAG\")\r\n        })\r\n        document.addEventListener('onmousemove', (e: MouseEvent) => {\r\n            if (this.dragging) {\r\n                this.x = e.clientX\r\n                this.y = e.clientY\r\n            }\r\n        })\r\n\r\n        document.addEventListener('onmouseup', (e) => {\r\n            if (this.dragging) { this.dragging = false }\r\n        })\r\n        // title.onmousemove = (e) => {\r\n        //     if (this.dragging) {\r\n        //         this.x = e.clientX\r\n        //         this.y = e.clientY\r\n        //     }\r\n        // }\r\n        // this._element.onmouseup = (e) => {\r\n        //     this.dragging = false\r\n        //     console.log(\"DRAG END\") \r\n        // }\r\n\r\n        document.body.appendChild(this._element);\r\n\r\n        if (this.name) {\r\n            let title = document.createElement('div')\r\n            title.textContent = this.name\r\n            title.style.fontFamily = 'Verdana'\r\n            title.style.fontSize = '7pt'\r\n            title.style.fontWeight = '400'\r\n            title.style.width = '200px'\r\n            title.style.color = Color.White.toRGBA()\r\n            title.style.backgroundColor = Color.Violet.darken(0.92).toRGBA()\r\n            title.style.padding = '4px'\r\n            title.style.margin = '0px'\r\n            \r\n            this._element.appendChild(\r\n                title\r\n            )\r\n        }\r\n\r\n        this.comprehended\r\n            .map((elem: EntityKind) => new elem())\r\n            .sort((a, b) => a.color > b.color ? -1 : 1)\r\n            .forEach(elem => {\r\n                if (elem.hide) { return }\r\n                let label = elem.name;\r\n                if (!this.built.map(m => new m().name).includes(elem.name)) {\r\n                    label += ' *';\r\n                }\r\n                let clr = elem.color;\r\n                let btn = this.buttonFactory(label, clr);\r\n                this._element.appendChild(btn);\r\n                if (this.onButtonEnter) {\r\n                    btn.onmouseenter = () => { this.onButtonEnter(elem); };\r\n                }\r\n                if (this.onButtonClick) {\r\n                    btn.onclick = () => { this.onButtonClick(elem); };\r\n                }\r\n            });\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.5).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = label;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '6pt';\r\n        paletteButton.style.fontFamily = 'Verdana';\r\n        paletteButton.style.fontWeight = '500';\r\n        paletteButton.style.padding = '2px';\r\n        paletteButton.style.width = '100px';\r\n        paletteButton.style.textTransform = 'uppercase';\r\n        paletteButton.style.border = 'none' //1px solid rgba(255,255,255,0.08)';\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA();\r\n            paletteButton.style.color = fg.toRGBA();\r\n        };\r\n        return paletteButton;\r\n    }\r\n}\r\n","import { Label, Actor, FontStyle, Color } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { PureValue, Economy, ResourceBlock } from \"../../models/Economy\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nimport { countOccurrences, flatSingle } from \"../../Util\";\r\n\r\nexport class CardBody extends Actor {\r\n    description: Label\r\n    values: Label\r\n    notes: Label\r\n    footer: Label\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 0, 0)\r\n        // resources / recipes\r\n\r\n        this.values = new Label('')\r\n        this.values.fontSize = 10\r\n        this.add(this.values)\r\n\r\n        this.notes = new Label('behavioral notes', 0, 30)\r\n        this.notes.fontSize = 11\r\n        this.add(this.notes)\r\n\r\n        this.description = new Label('description', 0, 60)\r\n        this.description.fontSize = 12\r\n        this.description.fontStyle = FontStyle.Italic\r\n        this.description.color = Color.DarkGray\r\n        this.add(this.description)\r\n\r\n        this.footer = new Label('footer', 20, 80)\r\n        this.footer.fontSize = 10\r\n        this.footer.fontStyle = FontStyle.Italic\r\n        this.add(this.footer)\r\n\r\n        this.show(entity)\r\n    }\r\n\r\n    describeResources = (arr: ResourceBlock[]) => {\r\n        let freqs = countOccurrences(arr)\r\n        return Object.keys(freqs)\r\n            .map(elem => `${elem} x${freqs[elem]}`)\r\n            .join(' + ')\r\n    }\r\n\r\n    show(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        if (entity) {\r\n            this.description.text = entity.description;\r\n\r\n            if (entity instanceof Machine || entity instanceof Device) {\r\n                this.values.text =  this.describeEconomy(entity.economy)\r\n                // let footerNotes = []\r\n                let resourceDescription = entity instanceof Machine\r\n                    ? `Cost: ${this.describeResources(entity.cost)}`\r\n                    : (entity.built ? this.describeResources(entity.product) : 'under construction')\r\n                let forDome = entity instanceof Machine ? entity.forDome : entity.machine.forDome\r\n                let domeStatus = `For Dome: ${forDome ? 'Yes' : 'No'}`\r\n                this.footer.text = resourceDescription === ''\r\n                    ? domeStatus\r\n                    : [resourceDescription, domeStatus].join(' | ') \r\n                this.notes.text = '' //\r\n                let op = entity.operation\r\n                if (op) {\r\n                    if (op.type === 'recipe') {\r\n                        this.notes.text = `Turns ${op.consumes.join(' + ')} -> ${op.produces}.`\r\n                    } else if (op.type === 'generator') {\r\n                        this.notes.text = `Generates ${op.generates}.`\r\n                    } else if (op.type === 'store') {\r\n                        this.notes.text = `Stores ${op.stores.join(' + ')}`\r\n                    } else if (op.type === 'spawn') {\r\n                        this.notes.text = 'Decants clones.'\r\n                    }\r\n                }\r\n            } else if (entity instanceof SpaceFunction) {\r\n                let { capacity, workSpeed } = entity.bonuses\r\n                let bonusMessages = [];\r\n                if (capacity > 0) {\r\n                    bonusMessages.push(`+${capacity} cap`)\r\n                }\r\n                if (workSpeed > 1.0) {\r\n                    bonusMessages.push(`+${Math.floor((workSpeed*100)-100)}% efficiency` )\r\n                }\r\n                this.values.text = bonusMessages.join('; ') \r\n                this.notes.text = entity.machines.map(m => (new m()).name).join(' + ')\r\n                this.footer.text = ''\r\n            } else if (entity instanceof Building) {\r\n                this.values.text =  this.describeEconomy(entity.economy(false))\r\n                this.notes.text = entity.getDevices().map(d => d.machine.name).join(' + ')\r\n\r\n                let product = entity.getDevices()\r\n                    .map(d => d.product)\r\n                    .reduce((a, b) => a.concat(b), [])\r\n                this.footer.text = product.length > 0\r\n                    ? \"Currently contains: \" + this.describeResources(product)\r\n                    : ''\r\n            } else {\r\n                this.values.text = ''\r\n                this.notes.text = ''\r\n                this.footer.text = ''\r\n            }\r\n\r\n        }\r\n        // other bonuses? behaviors?\r\n    }\r\n\r\n    private describeEconomy(e: Economy): string {\r\n        let values = []\r\n        let econ = e // entity.economy\r\n        for (let value in PureValue) {\r\n            let { supply, demand } = econ[value]\r\n            let delta = supply - demand\r\n            if (delta > 0) {\r\n                values.push(`+${delta} ${value}`)\r\n            } else if (delta < 0) {\r\n                values.push(`${delta} ${value}`)\r\n            }\r\n        }\r\n        return values.join(' | ')\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nexport class CardTitle extends Actor {\r\n    \r\n    name: Label;\r\n    type: Label;\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 14, 32, entity && entity.color || Color.Gray);\r\n        this.name = new Label(entity && entity.name || '..', 20, 16)\r\n        this.name.fontSize = 28\r\n        this.name.color = Color.Black\r\n        this.add(this.name)\r\n\r\n        this.type = new Label('..', 220, 18)\r\n        this.type.fontSize = 10\r\n        this.type.color = Color.Gray\r\n        this.type.fontStyle = FontStyle.Italic\r\n        this.add(this.type)\r\n\r\n        if (entity) {\r\n            this.announce(entity)\r\n        }\r\n    }\r\n\r\n    announce(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.name.text = entity.name\r\n        this.color = entity.color.desaturate(0.5).darken(0.2)\r\n        if (entity instanceof Machine) { this.type.text = `${DeviceSize[entity.size]} Machine Type` }\r\n        if (entity instanceof Structure) { this.type.text = 'Structure' }\r\n        if (entity instanceof SpaceFunction) { this.type.text = 'Function' }\r\n        if (entity instanceof Building) { this.type.text = 'Building' }\r\n        if (entity instanceof Device) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { CardTitle } from \"./CardTitle\";\r\nimport { CardBody } from \"./CardBody\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\n\r\nexport class Card extends Actor {\r\n    title: CardTitle\r\n    cardBody: CardBody\r\n    image: HTMLImageElement\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x + 160, y + 90, 320, 180, Color.White);\r\n        let x0 = -150, y0 = -50;\r\n        this.title = new CardTitle(entity, x0 - 3, y0); //x, y)\r\n        this.add(this.title);\r\n        this.cardBody = new CardBody(entity, x0 + 14, y0 + 40)\r\n        this.add(this.cardBody)\r\n\r\n        this.image = new Image();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        if (this.entity) {\r\n            if (this.entity instanceof Machine || this.entity instanceof Device) {\r\n                // if (this.image.src !== null) {\r\n                    let ix = this.pos.x + 48, iy = this.pos.y - 16\r\n                    let isz = 92\r\n                    ctx.drawImage(this.image, ix, iy, isz, isz)\r\n                // }\r\n            }\r\n        }\r\n    }\r\n\r\n    present(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.title.announce(entity)\r\n        this.cardBody.show(entity)\r\n\r\n        this.entity = entity\r\n        let src = null\r\n        if (this.entity instanceof Machine) { //} || this.entity instanceof Device) {\r\n            src = this.entity.image\r\n        } else if (this.entity instanceof Device) {\r\n            src = this.entity.machine.image\r\n        }\r\n        // console.log(\"img src\", { src })\r\n        if (src) {\r\n            this.image.src = src\r\n        }\r\n    }\r\n\r\n}\r\n","import { Sound, Color } from \"excalibur\";\r\nimport { sample } from \"../../Util\";\r\n\r\ninterface MusicPlayerPlay { type: 'play'}\r\ninterface MusicPlayerPause { type: 'pause'}\r\ninterface MusicPlayerStop { type: 'stop'}\r\ninterface MusicPlayerNext { type: 'next'}\r\ntype MusicPlayerAction = MusicPlayerPlay | MusicPlayerPause | MusicPlayerStop | MusicPlayerNext\r\n\r\nexport class MusicPlayer {\r\n    private _wrapper: HTMLDivElement;\r\n    private _element: HTMLDivElement;\r\n    private _titleElem: HTMLSpanElement;\r\n\r\n    currentTrack: string\r\n    paused: boolean = false\r\n\r\n    constructor(private x: number, private y: number, private playlist: {\r\n        [track: string]: Sound;\r\n    }) {\r\n        this.makePlayer();\r\n        setTimeout(() => { this.startMusic() }, 3000)\r\n        this._titleElem.textContent = `Getting ready...`;\r\n        this.currentTrack = sample(Object.keys(this.playlist)); //[0];\r\n    }\r\n\r\n    startMusic() {\r\n        this._titleElem.textContent = `Playing: ${this.currentTrack}`;\r\n        this.playlist[this.currentTrack].play()\r\n        .then(() => {\r\n                this.advancePlaylist()\r\n        })\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._wrapper.style.left = `${left + this.x}px`;\r\n            this._wrapper.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    private makePlayer() {\r\n        this._wrapper = document.createElement('div')\r\n        this._wrapper.style.position = 'absolute'\r\n        this._wrapper.style.width = '20%'\r\n        this._wrapper.style.textAlign = 'left'\r\n        this._wrapper.style.border = 'none';\r\n        document.body.appendChild(this._wrapper);\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.display = 'inline-block';\r\n        this._element.style.border = 'none';\r\n        this._wrapper.appendChild(this._element)\r\n\r\n        this._titleElem = document.createElement('span');\r\n        this._titleElem.style.fontFamily = 'Verdana';\r\n        this._titleElem.style.fontSize = '7pt';\r\n        this._titleElem.style.padding = '24px'\r\n        this._titleElem.style.color = 'white';\r\n        this._wrapper.appendChild(this.inlineBlock(this._titleElem));\r\n\r\n        let play = this.iconFactory({ type: 'play' }, '&#9655;')\r\n        this._wrapper.appendChild(this.inlineBlock(play));\r\n\r\n        let pause = this.iconFactory({ type: 'pause' }, '&#10072; &#10072;')\r\n        this._wrapper.appendChild(this.inlineBlock(pause))\r\n\r\n        let next = this.iconFactory({ type: 'next' }, '&rarr;')\r\n        this._wrapper.appendChild(this.inlineBlock(next))\r\n\r\n    }\r\n\r\n    handleAction(action: MusicPlayerAction) {\r\n        if (action.type === 'pause') {\r\n            this.song.pause()\r\n            this.paused = true\r\n            this._titleElem.textContent = `Paused: ${this.currentTrack}`;\r\n        } else if (action.type === 'play') {\r\n            this.song.play()\r\n            this.paused = false\r\n            this._titleElem.textContent = `Playing: ${this.currentTrack}`;\r\n        } else if (action.type === 'next') {\r\n            if (this.paused) {\r\n                this.song.play()\r\n                this.paused = false\r\n            }\r\n            this.song.stop()\r\n        }\r\n    }\r\n\r\n    advancePlaylist() {\r\n        let ndx = this.trackNames.indexOf(this.currentTrack)\r\n        ndx = (ndx + 1) % this.trackNames.length\r\n        this.currentTrack = this.trackNames[ndx]\r\n        this.startMusic()\r\n    }\r\n\r\n    get trackNames() { return Object.keys(this.playlist) }\r\n    get song() { return this.playlist[this.currentTrack] }\r\n\r\n    private inlineBlock(elem) {\r\n        let block = document.createElement('div');\r\n        block.style.display = 'inline-block';\r\n        block.style.border = 'none';\r\n        block.append(elem)\r\n        return block\r\n    }\r\n\r\n    private iconFactory(\r\n        action: MusicPlayerAction,\r\n        iconContent: string,\r\n    ) {\r\n        let bg = Color.Transparent\r\n        let fg = Color.White\r\n        let icon = document.createElement('button')\r\n        icon.innerHTML = iconContent\r\n        icon.style.display = 'block';\r\n        icon.style.fontSize = '7pt';\r\n        icon.style.fontFamily = 'Verdana';\r\n        icon.style.border = 'none'\r\n        icon.style.padding = '4px'\r\n        icon.style.background = bg.toRGBA();\r\n        icon.style.color = fg.toRGBA();\r\n        icon.onclick = () => { this.handleAction(action) }\r\n        return icon\r\n    }\r\n\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor, Color } from \"excalibur\";\r\nimport { Economy, PureValue, availableCapacity, allValues } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\nimport { eachChunk } from \"../../Util\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0) //Color.DarkGray.clone().darken(0.5));\r\n\r\n        let index = 0\r\n        for (let [val1, val2] of eachChunk(allValues, 2)) {\r\n            this.addValue(index * 32, 0, val1)\r\n            this.addValue(index * 32, 7, val2)\r\n            index += 1\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    private addValue(x: number, y: number, value: PureValue) {\r\n        let valueLabel: EconomicValue = new EconomicValue(value, x, y)\r\n        this.valueLabels[value] = valueLabel\r\n        this.add(valueLabel)\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value of allValues) {\r\n            this.valueLabels[value].setCount(\r\n                availableCapacity(market, value)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor, UIActor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nclass Tooltip extends Actor {\r\n    messageLabel: Label\r\n    constructor(x: number, y: number, message: string) {\r\n        super(x, y, 60, 16, Color.Black)\r\n        this.messageLabel = new Label(message, -16, 6, 'Verdana')\r\n        this.messageLabel.color = Color.White\r\n        this.add(this.messageLabel)\r\n    }\r\n}\r\n\r\nexport class ResourceListEntry extends UIActor {\r\n    icon: Actor;\r\n    count: Label;\r\n    hovering: boolean = false\r\n    tooltip: Tooltip\r\n\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x-5, y-5, 20, 10)\r\n        let icon = new Actor(5, 5, 10, 10, blockColor(resourceBlock));\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, 15, 10, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n\r\n        this.tooltip = new Tooltip(0, 5, ResourceBlock[resourceBlock])\r\n        this.tooltip.visible = false\r\n        this.add(this.tooltip)\r\n\r\n\r\n        this.on('pointerenter', () => {\r\n            this.tooltip.visible = true\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.tooltip.visible = false\r\n        })\r\n    }\r\n\r\n\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n\r\n    debit(amt: number) {\r\n        this.value -= amt\r\n        this.count.text = `x${this.value}`\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nimport { eachCons, eachChunk } from \"../../Util\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            [ResourceBlock.Biomass]: null,\r\n            [ResourceBlock.Idea]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n            [ResourceBlock.Alloy]: null,\r\n            [ResourceBlock.Bioplasma]: null,\r\n            [ResourceBlock.Algorithm]: null,\r\n            [ResourceBlock.Argent]: null,\r\n            [ResourceBlock.Aurum]: null,\r\n            [ResourceBlock.Omnium]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x,y,0,0); // 200, 60, Color.Green.clone().darken(0.8));\r\n        let rx0 = 0, ry0 = -5;\r\n        let resources = [\r\n            ResourceBlock.Meal,\r\n            ResourceBlock.Bioplasma,\r\n\r\n            ResourceBlock.Data,\r\n            ResourceBlock.Algorithm,\r\n\r\n            ResourceBlock.Mineral,\r\n            ResourceBlock.Alloy,\r\n\r\n            ResourceBlock.Argent,\r\n            ResourceBlock.Aurum,\r\n        ];\r\n\r\n        eachChunk(resources, 2).forEach(([res1, res2], index) => {\r\n            let rx = rx0 + index * 36, ry = ry0 + index * 0;\r\n            this.addEntry(rx, ry, res1)\r\n            this.addEntry(rx, ry + 14, res2)\r\n        });\r\n    }\r\n\r\n    private addEntry(x: number, y: number, res: ResourceBlock) {\r\n        let entry = new ResourceListEntry(x, y, res, 0);\r\n        this.add(entry);\r\n        this.entries[res] = entry;\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n\r\n    decrement(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.debit(1)\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\nimport { MusicPlayer } from \"./MusicPlayer\";\r\nimport { Resources } from \"../../Resources\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n    private musicPlayer: MusicPlayer\r\n    private clock: Label\r\n\r\n    constructor(market: Economy, w: number, h: number) {\r\n        super(0,0, w*2,h, Color.DarkGray.clone().darken(0.92));\r\n\r\n        let ty = 14\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+18)\r\n        brand.fontSize = 28\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.1\", 100, ty + 14)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(130, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 280, ty)\r\n        this.add(this.economy)\r\n\r\n        this.clock = new Label('current time', 600, ty, 'Verdana')\r\n        this.clock.color = Color.White // 'white'\r\n        this.add(this.clock)\r\n\r\n        this.popLabel = new Label(\"\", 600, ty + 14, 'Verdana')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 750, ty, 'Verdana')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.messageLabel.fontStyle = FontStyle.Italic\r\n        this.add(this.messageLabel)\r\n\r\n        this.musicPlayer = new MusicPlayer(726, 12, {\r\n            'Crater Rock': Resources.CraterRock,\r\n            'Indivision': Resources.Indivision,\r\n            'Future Tense': Resources.FutureTense,\r\n            // 'Isomer': Resources.Isomer,\r\n            'Understanding': Resources.Understanding,\r\n            // 'Outbound': Resources.Outbound,\r\n            'Assembler': Resources.Assembler,\r\n        })\r\n// // enable propagating pointer events\r\n// this.enableCapturePointer = true;\r\n// // // enable move events, warning: performance intensive!\r\n// this.capturePointer.captureMoveEvents = true;\r\n//         this.on('pointerenter', () => { alert('hover!')})\r\n    }\r\n\r\n    draw(ctx, delta) {\r\n        super.draw(ctx, delta)\r\n        this.musicPlayer.draw(ctx)\r\n        // drawRect(\r\n        //     ctx,\r\n        //     {x: this.x, y: this.y, width: this.getWidth(), height: this.getHeight() },\r\n        //     0,\r\n        //     Color.Magenta\r\n        // )\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    decrementResource(res: ResourceBlock) {\r\n        this.resources.decrement(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n\r\n    setClock(time: number = 0) {\r\n        let days = (Math.floor(time / (60 * 24))+1).toString()\r\n        let hh = Math.floor(time / 60) % 24\r\n        let hours = Math.floor((hh + 11) % 12 + 1).toString()\r\n        let minutes = Math.floor(time % 60).toString()\r\n        let ampm = hh < 12 ? 'AM' : 'PM'\r\n        this.clock.text = `Day ${days}. ${hours}:${minutes.padStart(2, '0')} ${ampm}`\r\n    }\r\n    \r\n}\r\n","import { UIActor, Label, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, PureValue } from \"../../models/Economy\";\r\nimport { Machine, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Card } from \"./Card\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Palette } from \"./Palette\";\r\nimport { Building } from \"../Building\";\r\n\r\nclass Tabs { //extends UIActor {\r\n    //private structurePalette: Palette\r\n    //private machinePalette: Palette\r\n    //private functionPalette: Palette\r\n    // private active: number = null\r\n\r\n    _rootElement: HTMLDivElement\r\n    private tabs: {name: string, element: HTMLDivElement}[] = []\r\n\r\n    constructor(private x: number, private y: number, private title: string) { //}, x: number, y: number) {\r\n        // super(0,0,300,300)\r\n        this._rootElement = this.makeRootElement()\r\n    }\r\n\r\n    addTab(name: string, element: HTMLDivElement) {\r\n        this.tabs.push({ name, element })\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        if (this._rootElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._rootElement.style.left = `${left + this.x}px`;\r\n            this._rootElement.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    private makeRootElement() {\r\n        let root = document.createElement('div')\r\n        root.style.position = 'absolute'\r\n        root.style.width = '240px'\r\n        root.style.padding = '10px'\r\n\r\n        let title = document.createElement('h2')\r\n        title.style.fontSize = '14pt'\r\n        root.appendChild(title)\r\n\r\n        return root\r\n    }\r\n    \r\n}\r\n\r\nexport class Hud extends UIActor {\r\n    // private hint: Label\r\n\r\n    private hidePalettes: boolean = true\r\n\r\n    private structurePalette: Palette\r\n    private machinePalette: Palette\r\n    private functionPalette: Palette\r\n    private card: Card\r\n\r\n    private status: StatusAnalysisView\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n    static machinesForPalette = allMachines\r\n    static functionsForPalette = allSpaceFunctions\r\n\r\n    constructor(\r\n        game: Game,\r\n        protected onBuildingSelect = null,\r\n        protected onMachineSelect = null,\r\n        protected onFunctionSelect = null\r\n    ) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.status = new StatusAnalysisView(emptyMarket(), game.canvasWidth, 64);\r\n        this.add(this.status)\r\n\r\n        let displayInfo = (e) => this.showCard(e)\r\n        this.machinePalette = new Palette('Machine', 20, 55, allMachines, onMachineSelect, displayInfo) // (e) => this.showCard(e))\r\n        this.structurePalette = new Palette('Structure', 20, 300, Hud.structuresForPalette, onBuildingSelect, displayInfo)\r\n        this.functionPalette = new Palette('Function', 20, 435, Hud.functionsForPalette, onFunctionSelect, displayInfo, false)\r\n\r\n        this.card = new Card(null, 20, game.canvas.height - 200)\r\n        this.add(this.card)\r\n\r\n\r\n    }\r\n\r\n    showPalettes() {\r\n        this.hidePalettes = false\r\n    }\r\n\r\n    setMessage(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (!this.hidePalettes) {\r\n            this.structurePalette.draw(ctx)\r\n            this.machinePalette.draw(ctx)\r\n            this.functionPalette.draw(ctx)\r\n        }\r\n    }\r\n\r\n    update(game: Game, delta: number) {\r\n        super.update(game, delta)\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    resourceExpended(resource: ResourceBlock) {\r\n        this.status.decrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true, time: number = 0) {\r\n        if (!planet) { return }\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n\r\n        this.status.setClock(time)\r\n    }\r\n\r\n    showCard(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        this.card.present(entity)\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n        this.updateFunctionPalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        let builtStructures =\r\n            Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n        if (!builtStructures.every(s => this.structurePalette.built.includes(s))) {\r\n            this.structurePalette.updateBuilt(builtStructures)\r\n        }\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let devices = colony.findAllDevices()\r\n        let builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine && d.built))\r\n        if (!builtMachines.every(machine => this.machinePalette.built.includes(machine))) {\r\n            this.machinePalette.updateBuilt(builtMachines)\r\n        }\r\n    }\r\n\r\n    private updateFunctionPalette(colony: Colony) {\r\n        let builtReifiedFunctions = flatSingle(colony.buildings.map(b => b.spaceFunction))\r\n        let builtFunctions = Hud.functionsForPalette.filter((fn) => builtReifiedFunctions.some(rf => rf instanceof fn))\r\n        if (!builtFunctions.every(fn => this.functionPalette.built.includes(fn))) {\r\n            this.functionPalette.updateBuilt(builtFunctions)\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawPatternedRect, drawRect, drawPatternedPoly, drawPoly } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\n// import { drawPatternedRect, drawRect } from \"../../Util\";\r\n\r\nexport class MediumSurfaceRoomView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n    // hideLabe\r\n\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n    get floorHeight() { return this.getHeight() / 6 }\r\n\r\n   nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight() - 16\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 12 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n    }\r\n\r\n    //deviceInteractionPlaces() {\r\n\r\n    //}\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        // draw from left slot to each device place to right slot?\r\n        let devices = this.deviceInteractionPlaces().map(p => find(p)) //d.position))\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n\r\n        if (this.isGroundFloor) {\r\n            let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length - 1])\r\n            g.edge(leftSlot, devices[0])\r\n            g.edge(devices[devices.length - 1], rightSlot)\r\n        } else {\r\n            let topSlot = find(slots[1])\r\n            g.edge(devices[1], topSlot)\r\n        }\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        // g.edge(devices[1], find(slots[1]))\r\n\r\n        return g\r\n    }\r\n\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        let slotY = this.getHeight() - this.floorHeight;\r\n\r\n        if (this.isGroundFloor) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, this.pos.y + slotY,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(), // + (2*this.floorHeight),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y - 1, // + this.getHeight(),\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n\r\n        if (this.isGroundFloor) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    this.pos.y + slotY,\r\n                    Orientation.Right\r\n                )\r\n            )\r\n        }\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    get isGroundFloor() {\r\n        return !this.parentSlot || !(this.parentSlot.parent instanceof MediumSurfaceRoomView)\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.planet.colony.buildings.length === 0) {\r\n            cursor.y = this.planet.getTop();\r\n        } // else {\r\n            // this.alignToSlot(cursor)\r\n        // }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.planet.colony.buildings.length === 0) {\r\n            this.pos = cursor\r\n            this.pos.y -= this.getHeight() - 2 - this.floorHeight // hm\r\n        } else {\r\n            this.alignToSlot(cursor)\r\n\r\n        }\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor()\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n\r\n        // ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n        // let rect = \r\n            // { x: this.pos.x, y: this.pos.y, width: this.getWidth(), height: this.getHeight() };\r\n        drawPatternedPoly(\r\n            ctx,\r\n            this.angledRoofPoly(),\r\n            this.backgroundPattern,\r\n            this.mainColor()\r\n        )\r\n\r\n\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black.clone()\r\n            c.a = 0.6\r\n            drawPoly(ctx, this.angledRoofPoly(), c)\r\n        }\r\n\r\n        // floor\r\n        let floorColor = this.planet.color.darken(0.6)\r\n        let floorEdgeHeight = 12 // 6\r\n        let floorOff = -5\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorEdgeHeight,\r\n              width: this.getWidth(), height: floorEdgeHeight - floorOff },\r\n              0,\r\n              floorColor.lighten(0.4)\r\n        )\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorOff,\r\n              width: this.getWidth(), height: this.floorHeight + floorOff },\r\n              0,\r\n              floorColor\r\n        )\r\n\r\n        // a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n\r\n        ctx.fillStyle = Color.Black.fillStyle()\r\n        ctx.fillRect(flagX, flagY-1, 1, flagpoleHeight+1)\r\n        drawPatternedRect(\r\n            ctx,\r\n            { x: flagX, y: flagY, width: 10, height: 6 },\r\n            BackgroundPattern.USSF\r\n        )\r\n        // ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.clone(); }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MediumRoomThreeView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    poly() { return this.angledRoofPoly() }\r\n\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Huge\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Large\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 2\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaceCount = 3\r\n    poly() { return this.angledRoofPoly() }\r\n    //devicePlaces() {\r\n    //    let w = this.getWidth()/2\r\n    //    let x = this.pos.x + w;\r\n    //    let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n    //    let ds = [\r\n    //        new Vector(x - w / 2, y),\r\n    //        new Vector(x, y),\r\n    //        new Vector(x + w / 2, y),\r\n    //    ]\r\n\r\n    //    return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    //}\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaceCount = 3\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - 20\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    // }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaceCount = 3\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - 20\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaceCount = 3\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - 6\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    // }\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    minHeight: number = 50\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(this.minHeight, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(this.minHeight, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { range, eachCons, measureDistance } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.planet.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        // super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            // this.alignToSlot(cursor)\r\n        } else {\r\n            // cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        // this.pos.y = this.planet.getTop() + 2\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n          this.setHeight(\r\n             (100 * Math.floor(Math.abs(cursor.y - this.planet.getTop()) / 100)) - 5\r\n          )\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length-1])\r\n        let devices = this.deviceInteractionPlaces().map(position => find(position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n\r\n        return g\r\n\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.clone().darken(0.05); } \r\n\r\n    deviceSize = DeviceSize.Small\r\n    devicePlaceCount = 2\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(this.deviceSize)/3 // - 16\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            ...(this.devicePlaceCount === 3 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.deviceSize)) // DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector, Color } from \"excalibur\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n// import { drawRect, drawPatternedRect } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { drawPatternedRect, drawRect, drawPatternedPoly, drawPoly } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    get floorHeight() { return this.getHeight() / 6 }\r\n    // floorHeight: number = 10\r\n    edgeWidth: number = 0 //.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    poly() { return this.aabbPoly() } //angledRoofPoly() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n\r\n        drawPatternedPoly(\r\n            ctx,\r\n            this.poly(),\r\n            this.backgroundPattern,\r\n            this.mainColor()\r\n        )\r\n\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black.clone()\r\n            c.a = 0.6\r\n            drawPoly(ctx, this.poly(), c)\r\n        }\r\n\r\n        let floorEdgeHeight = 12 // 6\r\n        let floorColor = this.planet.color.darken(0.6)\r\n        let floorOff = -5\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorEdgeHeight,\r\n              width: this.getWidth(), height: floorEdgeHeight - floorOff },\r\n              0,\r\n              floorColor.lighten(0.4)\r\n        )\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorOff,\r\n              width: this.getWidth(), height: this.floorHeight + floorOff },\r\n              0,\r\n              floorColor\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let slots: Slot[] = this.slots()\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        let leftSlot = find(slots[0].pos), rightSlot = find(slots[1].pos)\r\n        let devices = this.deviceInteractionPlaces().map(p => find(p))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        return g\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    devicePlaceSize: DeviceSize = DeviceSize.Small\r\n    devicePlaceCount: number = 2\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n   nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"0a266eded2bf27831b18735ffc081448.png\";","module.exports = __webpack_public_path__ + \"2475589a97ba4901bfa7ab53b5487778.png\";","module.exports = __webpack_public_path__ + \"98240dde9344ac8d071d076ac951e15d.png\";","module.exports = __webpack_public_path__ + \"da31cf43235263c1c3e0ad45a46360a1.png\";","module.exports = __webpack_public_path__ + \"a6a38278ac501400c6199e0df9e1bf84.png\";","module.exports = __webpack_public_path__ + \"ece1d5d5858bc048d2d949ecc3f5e9bc.png\";","module.exports = __webpack_public_path__ + \"3654f0489813e0668743efde017c9653.png\";","module.exports = __webpack_public_path__ + \"3abbdabf07943966f102ac7345a59986.png\";","module.exports = __webpack_public_path__ + \"d1b4690b9f5fa4957f98602afc8cfdb6.png\";","module.exports = __webpack_public_path__ + \"0eb7a15ea04678b14a2b88b5965aabeb.png\";","module.exports = __webpack_public_path__ + \"824e22e59890ae78258b54985e42ca6d.svg\";","module.exports = __webpack_public_path__ + \"dfe6e4db2f0c22d18befa85c1e163369.svg\";","module.exports = __webpack_public_path__ + \"9a947d50110c1d1db07c76a4bba2e653.svg\";","module.exports = __webpack_public_path__ + \"4976b6042ef557ca6085c8d0168251f4.svg\";","module.exports = __webpack_public_path__ + \"46418cf15643d9b1b171c1b64160a5af.svg\";","module.exports = __webpack_public_path__ + \"36a02c2483b688be86ce07bea4bd7295.svg\";","module.exports = __webpack_public_path__ + \"29c5f1be64c99bbc14d5063eea2f0953.svg\";","module.exports = __webpack_public_path__ + \"502f86b65239e20806bbae8bc77a6116.svg\";","module.exports = __webpack_public_path__ + \"5289b20985e3c3a98081267a2da1772e.svg\";","module.exports = __webpack_public_path__ + \"1d893905e4eea3bbc48b0e129e318ea6.svg\";","module.exports = __webpack_public_path__ + \"bd556d00e484db4e52d198d0bf39d0f2.svg\";","module.exports = __webpack_public_path__ + \"650cd431226df0755357c71d61bef1f2.svg\";","module.exports = __webpack_public_path__ + \"f12c591f538ab3026bf13e93f3fa9485.svg\";","module.exports = __webpack_public_path__ + \"3aeb9dd24809ba3fbd4eeb31a28c3b19.svg\";","module.exports = __webpack_public_path__ + \"6cc6f6773bb6eb26fcef87b9629f7b87.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"24611230ec712ba7ee38b99561aedd87.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { ResourceBlock } from \"./Economy\";\r\n\r\nexport type MechanicalOperation =\r\n    Recipe |\r\n    ResourceGenerator |\r\n    ResourceStorage |\r\n    SpawnClone |\r\n    AccelerateTime |\r\n    Noop\r\n\r\nexport interface Noop {\r\n    type: 'noop'\r\n}\r\n\r\nexport interface Recipe {\r\n    type: 'recipe'\r\n    consumes: ResourceBlock[]\r\n    produces: ResourceBlock\r\n    workTime: number\r\n}\r\n\r\nexport interface ResourceGenerator {\r\n    type: 'generator'\r\n    generates: ResourceBlock\r\n    generationTime: number\r\n    capacity: number\r\n}\r\n\r\nexport interface ResourceStorage {\r\n    type: 'store'\r\n    stores: ResourceBlock[]\r\n    capacity: number\r\n}\r\n\r\nexport interface SpawnClone {\r\n    type: 'spawn'\r\n}\r\n\r\nexport interface AccelerateTime {\r\n    type: 'accelerate'\r\n    factor: number\r\n}\r\n\r\nfunction store(res: ResourceBlock[], capacity: number = 10): ResourceStorage {\r\n    return {\r\n        type: 'store',\r\n        stores: res,\r\n        capacity\r\n    }\r\n}\r\n\r\nfunction generate(res: ResourceBlock, cap: number = 4): ResourceGenerator {\r\n    return {\r\n        type: 'generator',\r\n        generates: res,\r\n        generationTime: 1000,\r\n        capacity: cap\r\n    }\r\n}\r\n\r\nfunction recipe(input: ResourceBlock[], output: ResourceBlock): Recipe {\r\n    return {\r\n        type: 'recipe',\r\n        consumes: input,\r\n        produces: output,\r\n        workTime: 1000,\r\n    }\r\n}\r\n\r\nfunction spawn(): SpawnClone {\r\n    return {\r\n        type: 'spawn',\r\n    }\r\n}\r\n\r\nfunction accelerateTime(): AccelerateTime {\r\n    return {\r\n        type: 'accelerate',\r\n        factor: 2\r\n    }\r\n}\r\n\r\nexport const mechanicalOperations = {\r\n    store,\r\n    generate,\r\n    recipe,\r\n    spawn,\r\n    accelerateTime,\r\n}","import { Input, Scene, Timer, Vector } from \"excalibur\";\r\nimport { Building, structureViews } from \"../actors/Building\";\r\nimport { DevicePlace } from \"../actors/Building/Building\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Game } from \"../Game\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { LivingQuarters, MissionControl, SolarArray, SpaceFunction, CloneReception, Kitchen, Workshop, Archive, Refinery, Mine } from \"../models/SpaceFunction\";\r\nimport { Corridor, HugeRoom, LargeRoom, MainTunnel, MediumRoomThree, SmallDome, SmallRoomThree, Structure, SurfaceRoad } from \"../models/Structure\";\r\nimport { flatSingle, zip } from \"../Util\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { Orientation } from \"../values/Orientation\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    placingFunction: SpaceFunction = null\r\n\r\n    time: number = Game.startHour*60\r\n\r\n    static requiredStructuresAndFunctions: (typeof SpaceFunction | typeof Structure)[] = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        SolarArray,\r\n        MainTunnel,\r\n        Corridor,\r\n        LivingQuarters,\r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, true, this.time)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        let buildIt = (e) => this.startConstructing(e)\r\n\r\n        this.hud = new Hud(game, buildIt, buildIt, buildIt)\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(\r\n            game.world,\r\n            this.hud,\r\n            (b) => this.hud.showCard(b),\r\n            (d) => this.hud.showCard(d)\r\n        )\r\n\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.pos.y = this.planet.getTop() - 1000\r\n        this.camera.zoom(0.05)\r\n        this.camera.zoom(0.5, 10000)\r\n\r\n        this.addTimer(\r\n            new Timer(() => { this.stepTime() }, this.timeStepIntervalMillis, true)\r\n        )\r\n    }\r\n\r\n    timeStepIntervalMillis: number = 50\r\n    private stepTime() { \r\n        this.time += this.timeStepIntervalMillis / Game.minuteTickMillis  /// this.timeStepIntervalMillis //  0.125 //.25\r\n        this.planet.setTime(this.time) \r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n\r\n                            if (this.placingFunction) {\r\n                                let fn = this.placingFunction\r\n                                // console.log({ fn, bldg: buildingUnderConstruction })\r\n                                zip(fn.machines, buildingUnderConstruction.devicePlaces()).forEach(([machine, place]: [typeof Machine, DevicePlace]) => {\r\n                                    console.log(\"would add machine\", { machine, place })\r\n                                    let m = (new machine()).concretize()\r\n                                    let device = new Device(m, place.position)\r\n                                    buildingUnderConstruction.addDevice(device)\r\n                                })\r\n                                this.placingFunction = null\r\n                            }\r\n\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            // this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            if (deviceUnderConstruction.size === DeviceSize.Tiny) {\r\n                                let parent = deviceUnderConstruction.parentDevice\r\n                                parent.addTinyDevice(deviceUnderConstruction)\r\n                            } else {\r\n                                let bldg = deviceUnderConstruction.building\r\n                                bldg.addDevice(deviceUnderConstruction)\r\n                            }\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            // this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        let { Up, Down, Left, Right } = Orientation;\r\n        let moveCam = (direction: Orientation) => {\r\n            let camMoveSpeed = 10 * (1/this.camera.getZoom())\r\n            let dv = new Vector(0,0)\r\n            switch(direction) {\r\n            case Left: dv.x = -camMoveSpeed; break\r\n            case Right: dv.x = camMoveSpeed; break\r\n            case Up: dv.y = -camMoveSpeed; break\r\n            case Down: dv.y = camMoveSpeed; break\r\n            }\r\n            // console.log(\"MOVING CAM\", { direction, dv, camMoveSpeed })\r\n            this.camera.move(this.camera.pos.add(dv), 0) //pos.addEqual(dv)\r\n        }\r\n\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                this.planet.colony.currentlyConstructing = null\r\n                this.placingFunction = null\r\n                this.hud.setMessage(this.defaultMessage); //'Welcome to the Colony, Commander.')\r\n            } else if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                moveCam(Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                moveCam(Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                moveCam(Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                moveCam(Right)\r\n            }\r\n        })\r\n        this.game.input.keyboard.on('hold', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                moveCam(Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                moveCam(Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                moveCam(Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                moveCam(Right)\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingStructureOrFunction(): Structure | SpaceFunction {\r\n        let reqs = Construct.requiredStructuresAndFunctions.map(req => new req())\r\n\r\n        let actualStructureNames = this.buildings.map(building => building.structure.name)\r\n        let actualFunctionNames = flatSingle(\r\n            this.buildings.map(building => building.spaceFunction && building.spaceFunction.name)\r\n        )\r\n        let actualNames = [...actualStructureNames, ...actualFunctionNames]\r\n        return reqs.find(req => !actualNames.includes(req.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingStructureOrFunction() //this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.showPalettes()\r\n        }\r\n    }\r\n\r\n    firstBuilding: boolean = true\r\n    startConstructing(structureOrMachine: Structure | Machine | SpaceFunction, pos: Vector = new Vector(0, 0)) {\r\n        this.hud.showCard(structureOrMachine)\r\n        \r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            this.hud.setMessage(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            if (this.firstBuilding) {\r\n                this.camera.zoom(structure.zoom, 250)\r\n                this.camera.pos = theNextOne.pos\r\n                this.firstBuilding = false\r\n            } \r\n        } else if (structureOrMachine instanceof Machine) {\r\n            let machine = structureOrMachine\r\n            this.hud.setMessage(`Install ${machine.name} (${machine.description})`)\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            // this.camera.zoom(1.5, 250)\r\n        } else if (structureOrMachine instanceof SpaceFunction) {\r\n            let fn: SpaceFunction = structureOrMachine\r\n            this.hud.setMessage(`Place ${fn.name} (${fn.description})`)\r\n            theNextOne = this.spawnFunction(fn, pos)\r\n            this.placingFunction = fn\r\n\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        if (device.snap(this.planet)) {\r\n            this.camera.pos = device.pos\r\n \r\n        }\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n\r\n    protected spawnFunction(fn: SpaceFunction, pos: Vector): Building {\r\n        let theStructure: Structure = (fn.structure && new fn.structure()) // || new SmallRoomThree()\r\n        if (!theStructure) {\r\n            theStructure = new SmallRoomThree()\r\n            let machines = fn.machines.map(m => new m())\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Medium)) {\r\n                theStructure = new MediumRoomThree()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Large)) {\r\n                theStructure = new LargeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Huge)) {\r\n                theStructure = new HugeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.forDome)) {\r\n                theStructure = new SmallDome()\r\n            }\r\n        }\r\n\r\n        // console.log(\"SPAWN FUNCTION\", { fn, structure: theStructure })\r\n        let building = this.assembleBuildingFromStructure(theStructure, pos)\r\n        building.reshape(building.constrainCursor(building.pos))\r\n        return building\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Orange, Color.Red, Color.Blue, Color.Green] //, Color.Violet] //, Color.White]\r\n\r\n  color: Color = sample(World.colors).\r\n      clone().\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample(\r\n    //   [ Color.Blue ]\r\n      [Color.Cyan, Color.Vermillion, Color.Violet, Color.Chartreuse, Color.Orange, Color.Rose]\r\n  ).\r\n        clone().\r\n        lighten(0.15).\r\n        desaturate(0.8) //65)\r\n\r\n}","module.exports = __webpack_public_path__ + \"37914c496c3c503f7a53d7c9a1457b53.mp3\";","module.exports = __webpack_public_path__ + \"1b8e735649248c4c552a84996e61f241.mp3\";","module.exports = __webpack_public_path__ + \"1a607294aebce07746d6f25ffa517d80.mp3\";","module.exports = __webpack_public_path__ + \"22bdefc1e8515661fdeb8e8076820641.mp3\";","module.exports = __webpack_public_path__ + \"cf150ab26eba01503f4f6dc3d9ab47f7.mp3\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\nimport { Resources } from './Resources';\r\nimport { Sound } from 'excalibur';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n  // setTimeout(() => {\r\n  //   console.log(\"let's jam!\");\r\n  //   let jam: Sound = Resources.CraterRock //play();\r\n  //   jam.play()\r\n  // }, 1500)\r\n  // jam.oncomplete = () => jam.play()\r\n});\r\n"],"sourceRoot":""}