{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/values/DeviceSize.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/models/Machine.ts","webpack:///./src/Util.ts","webpack:///./src/models/Economy.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/models/Structure.ts","webpack:///./src/values/Scale.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Device.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Hud/Palette.ts","webpack:///./src/actors/Hud/CardBody.ts","webpack:///./src/actors/Hud/CardTitle.ts","webpack:///./src/actors/Hud/Card.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MineView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/MissionControlView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/images/workstation-plain.svg","webpack:///./src/images/houseplant-plain.svg","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/bookshelf.png","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","sixth","eighth","excalibur_1","Orientation_1","Util_1","Graph_1","SpaceFunction_1","DeviceSize_1","DevicePlace","pos","this","Building","_super","structure","planet","_this","x","y","width","height","color","edgeWidth","built","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","level","devices","step","anchor","Vector","setup","traits","filter","trait","Traits","OffscreenCulling","on","collisionType","CollisionType","PreventCollision","nameLabel","Label","Color","White","levelLabel","fontSize","darken","__extends","levelUp","text","draw","ctx","delta","drawRect","aabb","processedColor","forEach","device","getCenter","measureText","update","engine","produce","constrainCursor","cursor","clone","reshape","afterConstruct","handleClick","_pos","slots","nodes","getWidth","getHeight","Math","floor","devicePlaces","graph","supergraph","Graph","g","rootNode","findOrCreate","measureDistance","_i","_a","child","slot","parentSlot","edge","childNode","redeem","res","gather","populate","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","find","bldg","edgeColor","lighten","mainColor","colorBase","clr","Red","a","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","map","closestBuildingByType","building","matchingSlot","compass_1","compass","closest","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","finalize","updateName","hasPlaceForDevice","nextDevicePlace","getDevices","fn","allSpaceFunctions","spaceFn","matched","unseenDevices","machines","machine","matchingDevice","deleteByValue","sf","Actor","Building_1","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","MissionControlView_1","MissionControlView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","MineView_1","MineView","SurfaceRoadView_1","SurfaceRoadView","MachineOperation","Economy_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","plant","workstation","Green","Blue","Orange","Violet","Yellow","Work","SpawnCitizen","CollectResource","CollectMeals","CollectData","Machine","description","LightGray","consumes","produces","generationTime","workTime","capacity","behavior","image","prereqs","economy","emptyMarket","forDome","CommandCenter","arguments","__assign","Power","supply","demand","Oxygen","Hope","e","OxygenExtractor","WaterCondensingMachine","SolarCell","Water","StudyMachine","ResourceBlock","Hypothesis","Data","Desk","Workstation","Bookshelf","Fridge","Stove","Food","Meal","Bed","Shelter","Houseplant","ResearchServer","Orchard","AlgaeVat","Cabin","Arbor","Botany","CloningVat","productionTime","Fabricator","Ore","Mineral","MiningDrill","Megafabricator","Preserve","Microcity","Joy","Beauty","Wonder","LogicCrystal","allMachines","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","minBy","min","maxBy","max","sample","random","range","Array","fill","_val","idx","getVector","predicate","matching","elem","distance","flatSingle","concat","eachCons","b","drawLine","lineWidth","beginPath","moveTo","lineTo","strokeStyle","toRGBA","stroke","rectangle","filled","main","fillStyle","fillRect","strokeRect","PureValue","Wisdom","Wealth","availableCapacity","market","sumMarkets","ea","eb","newMarket","sa","da","_b","Alloy","blockColors","blockColor","block","desaturate","t","Left","Up","Down","orientation","Error","Machine_1","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","Structure","view","zoom","Gray","Corridor","Ladder","MainTunnel","second","MissionControl","SurfaceRoad","fifth","first","Dome","CommonArea","SmallRoomThree","SmallRoomTwo","SmallDome","MediumRoom","LargeRoom","HugeRoom","SmallDomeThree","seventh","MidDome","LargeDome","Arcology","allStructures","majorUnit","fourth","minorUnit","minorScale","Structure_1","Device","initialPos","product","inUse","Image","src","drawImage","bx","by","produced","index","blockSize","interact","citizen","waitToUse","pop","progressBar","sent","carry","carrying","label","resource","drop","console","warn","setTimeout","snap","some","position","SpaceFunction","LivingQuarters","Barracks","Kitchen","LifeSupportPod","Retreat","CloneMatrix","ReadingRoom","Library","Study","Lab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Farm","Factory","empty","edges","edgesInverse","isEmpty","node","newNode","contains","testNode","includes","measure","tolerance","dfs","dst","indexOf","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","path","steps","srcIndex","reverse","Resources_1","Game","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","start","loader","Loader","key","Resources","addResource","citizenSpeed","Engine","_1","SmallDomeThreeView","w","BigDomeView","HugeRoomView","floorHeight","LargeRoomView","MediumRoomView","MidDomeView","SmallRoomThreeView","Palette","all","onButtonClick","onButtonEnter","comprehended","makePalette","_element","left","canvas","offsetLeft","top_1","offsetTop","style","top","updateBuilt","every","prereq","log","parentElement","removeChild","document","createElement","border","body","appendChild","sort","btn","buttonFactory","onmouseenter","onclick","bg","fg","paletteButton","textContent","display","fontFamily","fontWeight","padding","textTransform","background","onmouseover","saturate","onmouseleave","CardBody","entity","values","add","fontStyle","FontStyle","Italic","show","econ","join","CardTitle","Black","type","announce","CardTitle_1","CardBody_1","Card","title","x0","cardBody","y0","ix","iy","present","EconomicValue","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","updateView","updatedEconomy","ResourceListEntry","resourceBlock","icon","credit","amt","ResourceListEntry_1","ResourcesList","DarkGray","entries","rx","ry","entry","increment","ResourcesList_1","EconomyView_1","StatusAnalysisView","h","brand","ty","version","resources","popLabel","messageLabel","incrementResource","setMessage","showEconomy","showPopCap","cap","StatusAnalysisView_1","Card_1","Palette_1","Hud","game","onBuildingSelect","onMachineSelect","onFunctionSelect","canvasWidth","canvasHeight","status","structurePalette","structuresForPalette","showCard","machinePalette","functionPalette","card","resourceGathered","updateDetails","rebuildPalettes","updatePalettes","updateEconomy","updateMaxPop","maxPop","updateBuildingPalette","updateMachinePalette","updateFunctionPalette","builtStructures","findAllDevices","builtMachines","machinesForPalette","UIActor","originSlot","pickingOrigin","maxHeight","getTop","setHeight","drawShape","xoff","yoff","bezierCurveTo","rect","halfWidth","slotHeights","heights","y1","btm","lst","right","slotCount","theSlots","Device_1","machine_1","place","theDevice","slotY","flagX","flagY","arc","PI","closePath","wallColor","floorColor","leftSlot","rightSlot","originX","newCursor","setWidth","abs","ex","Player","Game_1","Citizen","walkSpeed","workInProgress","now","Date","getTime","progress","workStarted","workDuration","vel","px","pw","py","glideTo","actions","asPromise","duration","Promise","resolve","reject","pathTo","pathBetween","work","item_1","sink","closestDevice","source","Citizen_1","Population","citizens","increase","home","NavigationTree","seekPath","origin","dest","closestNode","setPrototypeOf","__proto__","constructor","create","NavigationTree_1","Colony","currentlyConstructing","navTree","placeBuilding","buildNavTree","structureTypes","st","destination","srcNode","destNode","closestDeviceByType","machineTypes","ctrl","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","yBase","peak","mtnWidth","PlanetBackground","PlanetBackground_1","Colony_1","Population_1","Planet","hud","depth","createLayer","layerHeight","population","theLayer","theEconomy","popularDemand","theEconomyWithoutPeople","val","Planet_1","player_1","Hud_1","SmallRoomThreeView_1","MidDomeView_1","MediumRoomView_1","LargeRoomView_1","HugeRoomView_1","BigDomeView_1","SmallDomeThreeView_1","Construct","dragging","defaultMessage","startConstructing","player","prepareNextBuilding","camera","onActivate","input","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","Esc","onDeactivate","off","nextMissingRequiredStructure","requiredStructures","requiredStructureList","actualStructureNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","anotherBuilding","assembleBuildingFromStructure","structureViews","Scene","World","colors","Cyan","Vermillion","sword","Sword","Texture","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([63,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.sixth; break;\r\n        case DeviceSize.Large: sz = 2 * major.eighth; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, drawRect, deleteByValue } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0 //.1\r\n\r\n    nameLabel: Label\r\n    levelLabel: Label\r\n\r\n    built: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    level: number = 1\r\n\r\n    private devices: Device[] = []\r\n\r\n    constructor(pos: Vector, public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            // console.log(\"HOVER ON\", { building: this })\r\n        })\r\n\r\n        // this.on('pointerdown', () => {\r\n        //     console.log(\"CLICKED BUILDING\", { building: this })\r\n        //     this.levelUp();\r\n        // })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        // this.nameLabel.fontSize = 11\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.levelLabel = new Label(`Lvl. ${this.level}`, 0, 0, 'Helvetica')\r\n        this.levelLabel.fontSize = 6\r\n        this.levelLabel.color = Color.White.darken(0.2)\r\n    }\r\n\r\n    levelUp() {\r\n        this.level += 1\r\n        this.levelLabel.text = `Lvl. ${this.level}`\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        this.devices.forEach(device => device.draw(ctx, delta))\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n            // this.levelLabel.text = `Lvl. ${this.level}`\r\n            // this.levelLabel.pos = this.getCenter()\r\n            // this.levelLabel.pos.y += 10\r\n            // this.levelLabel.pos.x -= ctx.measureText(this.structure.name).width / 4\r\n            // this.levelLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let debug = false;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = false\r\n        if (showDevicePlaces && this.devicePlaces().length > 0) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    1,\r\n                    Color.White,\r\n                    false\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n        let tryProduce = this.built;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.produce(this.step));\r\n        }\r\n        this.step += 1\r\n    }\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public populate(pos: Vector) {\r\n        this.planet.populate(pos) //this.pos)\r\n    }\r\n\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        this.updateName()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices\r\n    }\r\n\r\n    private updateName() {\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let matched = true;\r\n            let unseenDevices = this.devices.slice()\r\n\r\n            let sf = new spaceFn()\r\n            sf.machines.forEach(machine => {\r\n                let matchingDevice = unseenDevices.find(d => d.machine instanceof machine)\r\n                if (!matchingDevice) { matched = false; }\r\n                unseenDevices = deleteByValue(unseenDevices, matchingDevice)\r\n            })\r\n            return matched;\r\n        })\r\n        if (fn) {\r\n            let sf = new fn()\r\n            this.nameLabel.text = sf.name //label\r\n        }\r\n    }\r\n}","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { MissionControlView } from './MissionControlView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { MineView } from './MineView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\n\r\n\r\n// import { LivingQuartersView } from './LivingQuartersView';\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView, // as AccessTunnelView,\r\n    CommonAreaView,\r\n    DomeView,\r\n    MissionControlView,\r\n    TunnelView,\r\n    ArcologyView,\r\n    LadderView,\r\n    MineView,\r\n    SurfaceRoadView,\r\n\r\n}","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { Color, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\n\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\nconst plant = require('../images/houseplant-plain.svg')\r\nconst workstation = require('../images/workstation-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n    plant,\r\n    workstation,\r\n}\r\n\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nexport enum MachineOperation {\r\n    // generic functioning: consuming a block to produce a new block\r\n    Work,\r\n    // more interesting functions\r\n    SpawnCitizen,\r\n    CollectResource,\r\n    CollectMeals,\r\n    CollectData\r\n}\r\n\r\n// recipe is just a model for transforming things into other things\r\n// generation from nothing might want to be its own case\r\nclass Recipe {\r\n    // behavior: MachineOperation = MachineOperation.Work\r\n\r\n    // generates: ResourceBlock = null\r\n    // stores: ResourceBlock = null\r\n\r\n    consumes: ResourceBlock[] = null\r\n    produces: ResourceBlock[] = null\r\n\r\n    // spawnCitizen: boolean = false ???\r\n\r\n    // need to stop using this both for work time and 'generation' time\r\n    // productionTime: number = 500\r\n    // generationTime: number = 3000\r\n    workTime: number = 10000\r\n\r\n    // capacity: number = 2\r\n}\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n\r\n    size: DeviceSize = DeviceSize.Small\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n\r\n    // need to stop using this both for work time and 'generation' time\r\n    // productionTime: number = 500\r\n    generationTime: number = 3000\r\n    workTime: number = 10000\r\n    capacity: number = 2\r\n\r\n    behavior: MachineOperation = MachineOperation.Work\r\n\r\n    image = images.vat\r\n\r\n    prereqs: (typeof Machine)[] = []\r\n\r\n    economy: Economy = emptyMarket()\r\n\r\n    forDome: boolean = false\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command Console'\r\n    description = 'gather resources...'\r\n    behavior = MachineOperation.CollectResource\r\n    image = images.bench\r\n\r\n    size = DeviceSize.Medium\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 1, demand: 0 },\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        // Shelter: { supply: 1, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H20 Condenser'\r\n    description = 'have a drink'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 1, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n/// small subsurface\r\nexport class StudyMachine extends Machine {\r\n    consumes = ResourceBlock.Hypothesis\r\n    produces = ResourceBlock.Data\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    description = 'get to work'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n\r\n    // color = Blue\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    description = 'hackety hack'\r\n    prereqs = [ Bookshelf ]\r\n    color = Blue\r\n    image = images.workstation\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    produces = ResourceBlock.Hypothesis\r\n    image = images.bookshelf\r\n    prereqs = [ OxygenExtractor, Desk ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    behavior = MachineOperation.CollectMeals\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    consumes = ResourceBlock.Food\r\n    produces = ResourceBlock.Meal\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    description = 'sweet dreams'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    description = 'so nice'\r\n    prereqs = [ Bed ]\r\n    produces = ResourceBlock.Food\r\n    capacity = 1\r\n    color = Green\r\n    image = images.plant\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n// medium\r\n\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    produces = ResourceBlock.Hypothesis\r\n    behavior = MachineOperation.CollectData\r\n    image = images.server\r\n    prereqs = [Bookshelf]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   produces = ResourceBlock.Food\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   description = 'home on the plains'\r\n   consumes = ResourceBlock.Food\r\n   produces = ResourceBlock.Meal\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    description = 'arbor around the clock'\r\n    produces = ResourceBlock.Food\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    description = 'where there is a will'\r\n    produces = ResourceBlock.Food\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    description = 'plant lab'\r\n    produces = ResourceBlock.Food\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'we all grow'\r\n    behavior = MachineOperation.SpawnCitizen \r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    description = 'you made that'\r\n    consumes = ResourceBlock.Ore\r\n    produces = ResourceBlock.Mineral\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n    // ...\r\n}\r\n\r\n//export class HoloProjector extends Machine {\r\n//    name = 'Holo Projector'\r\n//    size = DeviceSize.Medium\r\n//    color = Violet\r\n//}\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    description = 'ore away'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    produces = ResourceBlock.Ore\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n//\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n]","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  // if (edgeWidth > 0) {\r\n  //   let edge = Color.White;\r\n  //   ctx.fillStyle = edge.toRGBA();\r\n  //   ctx.fillRect(x, y, width, height)\r\n  // }\r\n\r\n  if (filled) {\r\n    let main = color;\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x, //+ edgeWidth,\r\n      y, //+ edgeWidth,\r\n      width, // - edgeWidth * 2,\r\n      height // - edgeWidth * 2\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White;\r\n    ctx.strokeStyle = edge.toRGBA();\r\n    ctx.lineWidth=edgeWidth\r\n    // ctx.strokeStyle = Stroke.So\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return market[value].supply - market[value].demand\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply, //: ea[value].supply + eb[value].supply,\r\n            demand, //: ea[value].demand + eb[value].demand\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Food = 'Food',\r\n    Ore = 'Ore',\r\n    Data = 'Data',\r\n    // derived\r\n    Meal = 'Meal',\r\n    Hypothesis = 'Hypothesis',\r\n    Mineral = 'Mineral',\r\n    Alloy = \"Alloy\"\r\n}\r\n\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Food: Color.Green,\r\n    Data: Color.Blue,\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(0.2),\r\n    Hypothesis: Color.Violet.darken(0.4),\r\n    Ore: Color.Red.darken(0.5),\r\n\r\n    Alloy: Color.LightGray.darken(0.2),\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    //Color.Violet\r\n    //switch(block) {\r\n    //    case ResourceBlock.Food: baseColor = Color.Green; break\r\n    //    case ResourceBlock.Ore:  baseColor = Color.Red; break\r\n    //    case ResourceBlock.Data: baseColor = Color.Blue; break\r\n    //    case ResourceBlock.Meal: baseColor = Color.Yellow; break\r\n    //}\r\n    return baseColor.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    color: Color = Color.Gray\r\n\r\n    // consumes: ResourceBlock = null\r\n    // produces: ResourceBlock = null\r\n    // productionTime: number = 500\r\n\r\n    // constructor(public origin: Vector = new Vector(0, 0)) { }\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n    // slotSize\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MissionControl ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MissionControl ],\r\n        [Orientation.Right]: [  Dome, MissionControl ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    // name: string = 'Biodome';\r\n    description: string = 'Biome sweet biome';\r\n    // dominantColor = Color.Green\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.eighth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n        // Cabin, CookingFire\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n    //    Stove,\r\n    //    Bed,\r\n    //    Desk,\r\n    //    Bookshelf,\r\n    //    Fridge,\r\n    //    Workstation,\r\n    //    Houseplant,\r\n    //]\r\n\r\n    prereqs = [\r\n        // Dome \r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n    // two small slots\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.third\r\n    // two medium slots...\r\n    \r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 6 * major.eighth\r\n    height = 4 * major.fifth\r\n\r\n    // two big slots?\r\n    machines = largeBelow\r\n    //machines = [\r\n    //    MiningDrill,\r\n    //    Megafabricator,\r\n    //    // Preserve,\r\n    //]\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n    // machines = [ LogicCrystal ] // ultrafab...\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.eighth\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 4 * major.seventh\r\n    height = 3 * major.seventh\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 6 * major.eighth\r\n    height = 5 * major.eighth\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    //machines = [\r\n    //    Cabin,\r\n    //    Orchard,\r\n    //    Arbor,\r\n    //    // Campfir\r\n    //]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 8 * major.eighth\r\n    height = 6 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n    //machines = [\r\n    //    Microcity\r\n    //]\r\n}\r\n\r\n//////\r\n\r\nexport class MissionControl extends Structure {\r\n    name: string = 'Mission Control';\r\n    description: string = 'Keeping everything on track';\r\n    view: string = 'MissionControlView';\r\n    width: number = 6 * major.eighth\r\n    height: number = 1 * major.sixth\r\n    zoom = 0.1\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = [ CommandCenter ]\r\n}\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0 //.5\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine, MachineOperation } from \"../models/Machine\";\r\nimport { Building, CommonAreaView } from \"./Building\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { SmallRoomThree, SmallRoomTwo, MediumRoom, SmallDome, MidDome, LargeRoom, allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\n\r\nexport class Device extends Actor {\r\n    product: ResourceBlock[] = []\r\n    // capacity: number = 4\r\n\r\n    nameLabel: Label\r\n\r\n    image: any\r\n    // imageLoaded: boolean = false\r\n\r\n    building: Building // set once built?\r\n\r\n    inUse: boolean = false\r\n\r\n    constructor(\r\n        // public building: Building,\r\n        public machine: Machine,\r\n        private initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            // machine.height,\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        // this.image.onload = function () {\r\n            //  this.imageLoaded = true\r\n        // }\r\n        this.image.src = machine.image\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        // super.draw(ctx, delta)\r\n        ctx.drawImage(\r\n            this.image,\r\n            this.pos.x - this.getWidth() / 2,\r\n            this.pos.y - this.getHeight() / 2 - 10,\r\n            this.getWidth(), this.getHeight()\r\n        )\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= 10 //ctx.measureText(this.machine.name).width / 2\r\n            this.nameLabel.pos.y += 8 + this.getHeight()/2\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let bx = this.x - this.getWidth()/2 + 5, by = this.y - 23\r\n        let blockSize = 5\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).desaturate(0.3).lighten(0.2).toRGBA();\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get produces()       { return this.machine.produces }\r\n    get consumes()       { return this.machine.consumes }\r\n    get workTime()       { return this.machine.workTime }\r\n    get generationTime() { return this.machine.generationTime }\r\n    // get productionTime() { return this.machine.productionTime }\r\n    get capacity()       { return this.machine.capacity }\r\n\r\n    async interact(citizen: Citizen) {\r\n        if (this.inUse) {\r\n            citizen.waitToUse(this)\r\n            return\r\n        }\r\n\r\n        if (this.product.length > 0) {\r\n            this.product.pop()\r\n            this.inUse = true\r\n            await citizen.progressBar(500) //this.productionTime)\r\n            this.inUse = false\r\n            citizen.carry(this.produces)\r\n        } else {\r\n            if (this.consumes && citizen.carrying === this.consumes) {\r\n                this.inUse = true\r\n                await citizen.progressBar(this.workTime)\r\n                citizen.carry(this.produces)\r\n                this.inUse = false\r\n            }\r\n        }\r\n\r\n        if (this.machine.behavior === MachineOperation.Work) {\r\n            // ...\r\n\r\n        } else if (this.machine.behavior === MachineOperation.CollectResource) {\r\n            // generic redeem..\r\n            let resource = citizen.drop()\r\n            if (resource) {\r\n                this.building.redeem(resource)\r\n            }\r\n        } else if (this.machine.behavior === MachineOperation.CollectMeals) {\r\n            // store a meal...\r\n            if (citizen.carrying === ResourceBlock.Meal) {\r\n                let resource = citizen.drop()\r\n                if (resource) {\r\n                    this.building.redeem(resource)\r\n                }\r\n            }\r\n        } else if (this.machine.behavior === MachineOperation.CollectData) {\r\n            // store research\r\n            if (citizen.carrying === ResourceBlock.Data) {\r\n                let resource = citizen.drop()\r\n                if (resource) {\r\n                    this.building.redeem(resource)\r\n                }\r\n            }\r\n        } else {\r\n            console.warn(\"no handler for this interaction\", { device: this })\r\n        }\r\n    }\r\n\r\n    public produce(step: number) {\r\n        if (step % this.generationTime === 0) {\r\n            if (this.machine.behavior === MachineOperation.Work) {\r\n\r\n                if (this.produces && !this.consumes && this.product.length < this.capacity) {\r\n                    this.product.push(this.produces)\r\n                }\r\n            } else if (this.machine.behavior === MachineOperation.SpawnCitizen) {\r\n                setTimeout(() => this.building.populate(this.pos), 100)\r\n            }\r\n        }\r\n    }\r\n\r\n    // todo only snap when close enough? try to prevent some mis-clicks?\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            // hmmm\r\n            allStructures,\r\n            // machines count < device slots count\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        if (bldg) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n            //devicePlaces()[\r\n            //    this.building.devices.length\r\n            //]\r\n        }\r\n\r\n        return !!bldg;\r\n    }\r\n\r\n    finalize() {\r\n        // this.building.devices.push(this)\r\n    }\r\n}","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine } from './Machine';\r\nimport { Color } from 'excalibur';\r\n\r\nexport class SpaceFunction {\r\n     name: string = '(generic)'\r\n     machines: (typeof Machine)[] = []\r\n     color: Color = Color.Gray\r\n\r\n     // can't image needing this, but for symmetry\r\n     prereqs: (typeof SpaceFunction)[] =  [] \r\n}\r\n\r\nclass LivingQuarters extends SpaceFunction {\r\n     name = 'Living Quarters'\r\n     machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n     name = 'Barracks'\r\n     machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nclass Kitchen extends SpaceFunction {\r\n     name = 'Kitchen'\r\n     machines = [ Stove, Fridge ]\r\n}\r\n\r\nclass LifeSupportPod extends SpaceFunction {\r\n     name = 'Life Support Module'\r\n     machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n     name = 'Retreat'\r\n     machines = [ Cabin, Cabin ]\r\n}\r\n\r\nclass CloneMatrix extends SpaceFunction {\r\n     name = 'Clone Matrix'\r\n     machines = [ CloningVat, CloningVat ] //\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n     name = 'Reading Room'\r\n     machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nclass Library extends SpaceFunction {\r\n     name = 'Library'\r\n     machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n}\r\n\r\nclass Study extends SpaceFunction {\r\n     name = 'Study'\r\n     machines = [ StudyMachine, Bookshelf ]\r\n}\r\n\r\nclass Lab extends SpaceFunction {\r\n     name = 'Lab'\r\n     machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nclass Archive extends SpaceFunction {\r\n     name = 'Archive'\r\n     machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n     name = 'Arboretum'\r\n     machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n     name = 'Algae Farm'\r\n     machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nclass SolarArray extends SpaceFunction {\r\n     name = 'Solar Array'\r\n     machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nclass Workshop extends SpaceFunction {\r\n     name = 'Workshop'\r\n     machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\n// 3 house plants => nursery?\r\nclass Nursery extends SpaceFunction {\r\n     name = 'Nursery'\r\n     machines = [ Houseplant, Houseplant, Houseplant ]\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n     name = 'Farm'\r\n     machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n     name = 'Factory'\r\n     machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    Lab,\r\n]","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 100\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() { //loader: ex.Loader) {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    // device nodes are huge sized...\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    // device nodes are large sized...\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    // device nodes are medium sized...\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 20 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n        let ds = [\r\n            new Vector(x - w / 2, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w / 2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Color } from \"excalibur\";\r\nimport { EntityKind } from \"../../values/Entity\";\r\n\r\nexport class Palette {\r\n    private _element: HTMLDivElement;\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(\r\n        private x: number,\r\n        private y: number,\r\n        private all: EntityKind[],\r\n        private onButtonClick: (EntityKind) => any = null,\r\n        private onButtonEnter: (EntityKind) => any = null\r\n    ) {\r\n        this.makePalette();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    updateBuilt(built: (EntityKind)[]) {\r\n        this.built = built;\r\n        // update comprehended?\r\n        this.comprehended = this.all.filter((e: EntityKind) => {\r\n            let s = new e();\r\n            let prereqs: (EntityKind)[] = s.prereqs;\r\n            return prereqs.every((prereq: EntityKind) => {\r\n                let built = this.built.some((s: EntityKind) => s === prereq);\r\n                return built;\r\n            });\r\n        });\r\n        console.log(\"UPDATE BUILT\", { built, comprehended: this.comprehended });\r\n        this.makePalette();\r\n    }\r\n\r\n    private makePalette() {\r\n        if (this._element) {\r\n            this._element.parentElement.removeChild(this._element);\r\n        }\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.border = '1px solid white';\r\n        document.body.appendChild(this._element);\r\n        // this.comprehendedMachines\r\n        this.comprehended\r\n            .map((elem: EntityKind) => new elem())\r\n            .sort((a, b) => a.color > b.color ? -1 : 1)\r\n            .forEach(elem => {\r\n                let label = elem.name;\r\n                if (!this.built.map(m => new m().name).includes(elem.name)) {\r\n                    label += ' *';\r\n                }\r\n                let clr = elem.color;\r\n                let btn = this.buttonFactory(label, clr);\r\n                this._element.appendChild(btn);\r\n                if (this.onButtonEnter) {\r\n                    btn.onmouseenter = () => { this.onButtonEnter(elem); };\r\n                }\r\n                // btn.onmouseleave = () => { this.onButtonLeave() }\r\n                if (this.onButtonClick) {\r\n                    btn.onclick = () => { this.onButtonClick(elem); };\r\n                }\r\n            });\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.6).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = label;\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '9pt';\r\n        paletteButton.style.fontFamily = 'Helvetica';\r\n        paletteButton.style.fontWeight = '600';\r\n        paletteButton.style.padding = '1px';\r\n        paletteButton.style.width = '160px';\r\n        paletteButton.style.textTransform = 'uppercase';\r\n        paletteButton.style.border = '1px solid rgba(255,255,255,0.08)';\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA();\r\n            paletteButton.style.color = fg.toRGBA();\r\n        };\r\n        return paletteButton;\r\n    }\r\n}\r\n","import { Label, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { PureValue } from \"../../models/Economy\";\r\nimport { SmallDomeThreeView } from \"../Building/SmallDomeThreeView\";\r\n\r\nexport class CardBody extends Actor {\r\n    description: Label;\r\n    values: Label\r\n\r\n    constructor(private entity: Machine | Structure, x: number, y: number) {\r\n        super(x, y, 0, 0)\r\n        // resources\r\n\r\n        // economy...\r\n\r\n        this.values = new Label('')\r\n        this.values.fontSize = 10\r\n        this.add(this.values)\r\n\r\n        this.description = new Label('description', 0, 50)\r\n        this.description.fontSize = 14\r\n        this.description.fontStyle = FontStyle.Italic\r\n        this.add(this.description)\r\n\r\n\r\n        this.show(entity)\r\n    }\r\n\r\n    show(entity: Machine | Structure) {\r\n        if (entity) { //entity.economy) {\r\n            this.description.text = entity.description;\r\n\r\n            if (entity instanceof Machine) {\r\n                let values = []\r\n                let econ = entity.economy\r\n                for (let value in PureValue) {\r\n                    let { supply, demand } = econ[value]\r\n                    let delta = supply - demand\r\n                    if (delta > 0) {\r\n                        values.push(`+${delta} ${value}`)\r\n                    } else if (delta < 0) {\r\n                        values.push(`${delta} ${value}`)\r\n                        // this.add(label)\r\n                    }\r\n                }\r\n                this.values.text = values.join(' | ')\r\n            } else if (entity instanceof Structure) {\r\n                this.values.text = ''\r\n                // this.values.text = entity. //produces\r\n            }\r\n\r\n        }\r\n        // other bonuses? behaviors?\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nexport class CardTitle extends Actor {\r\n    \r\n    name: Label;\r\n    type: Label;\r\n    constructor(private entity: Machine | Structure, x: number, y: number) {\r\n        super(x, y, 14, 32, entity && entity.color || Color.Gray);\r\n        // console.log(\"TITLE FOR\", { entity })\r\n        this.name = new Label(entity && entity.name || '..', 20, 16)\r\n        this.name.fontSize = 28\r\n        this.name.color = Color.Black\r\n        this.add(this.name)\r\n\r\n        this.type = new Label('..', 232, 16)\r\n        this.type.fontSize = 10\r\n        this.type.color = Color.Gray\r\n        this.type.fontStyle = FontStyle.Italic\r\n        this.add(this.type)\r\n    }\r\n\r\n    announce(entity: Machine | Structure): any {\r\n        this.name.text = entity.name\r\n        this.color = entity.color.desaturate(0.5).darken(0.2)\r\n        if (entity instanceof Machine) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n        if (entity instanceof Structure) { this.type.text = 'Structure' }\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { CardTitle } from \"./CardTitle\";\r\nimport { CardBody } from \"./CardBody\";\r\n\r\nexport class Card extends Actor {\r\n    title: CardTitle\r\n    cardBody: CardBody\r\n    image: any\r\n\r\n    constructor(private entity: Machine | Structure, x: number, y: number) {\r\n        super(x + 160, y + 90, 320, 180, Color.White);\r\n        let x0 = -150, y0 = -50;\r\n        this.title = new CardTitle(entity, x0 - 3, y0); //x, y)\r\n        this.add(this.title);\r\n        this.cardBody = new CardBody(entity, x0 + 14, y0 + 40)\r\n        this.add(this.cardBody)\r\n\r\n        this.image = new Image();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        if (this.entity) {\r\n            if (this.entity instanceof Machine) {\r\n                let ix = this.pos.x + 48, iy = this.pos.y - 16\r\n                let isz = 92\r\n                ctx.drawImage(this.image, ix, iy, isz, isz)\r\n            }\r\n        }\r\n    }\r\n\r\n    present(entity: Machine | Structure): any {\r\n        this.title.announce(entity)\r\n        this.cardBody.show(entity)\r\n        // description.text = entity.description;\r\n\r\n        this.entity = entity\r\n        if (this.entity instanceof Machine) {\r\n            this.image.src = this.entity.image\r\n        }\r\n    }\r\n\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor } from \"excalibur\";\r\nimport { Economy, PureValue } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n\r\n        let index = 0\r\n        for (let value in PureValue) {\r\n            let valueLabel: EconomicValue =  new EconomicValue(value, (index++ * 34), 0)\r\n            this.valueLabels[value] = valueLabel\r\n            this.add(valueLabel)\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value in PureValue) {\r\n            let { demand, supply } = market[value];\r\n            this.valueLabels[value].setCount(supply-demand)\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 6, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            // non-accruable\r\n            [ResourceBlock.Food]: null,\r\n            [ResourceBlock.Hypothesis]: null,\r\n            [ResourceBlock.Ore]: null,\r\n\r\n            // displayed/accruable\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n\r\n            // derived/accurable\r\n            [ResourceBlock.Alloy]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0, Color.DarkGray.darken(0.8));\r\n        let rx0 = 0, ry0 = -2.5;\r\n        let resources = [ResourceBlock.Meal, ResourceBlock.Data, ResourceBlock.Mineral];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0 + index * 16, ry = ry0 + index * 0;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        // console.log(\"INCREMENT\", { resource })\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n\r\n    constructor(market: Economy, w: number = 10000, h: number = 28) {\r\n        super(0,0, w, h, Color.DarkGray.darken(0.8));\r\n\r\n        let ty = 12\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+2)\r\n        brand.fontSize = 12\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.0.1\", 48, ty + 2)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(80, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 200, ty)\r\n        this.add(this.economy)\r\n\r\n        this.popLabel = new Label(\"\", 900, ty, 'Helvetica')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 1000, ty, 'Helvetica')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.add(this.messageLabel)\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n    \r\n}\r\n","import { UIActor, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, SmallRoomThree, SmallRoomTwo, MediumRoom, MidDome, SmallDome, LargeRoom, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, sumMarkets, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { Desk, Bookshelf, Machine, CloningVat, WaterCondensingMachine, OxygenExtractor, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Cabin, Orchard, SolarCell, Megafabricator, Arbor, Fabricator, MiningDrill, Preserve, Workstation, Houseplant, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Card } from \"./Card\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Palette } from \"./Palette\";\r\n\r\nexport class Hud extends UIActor {\r\n    private structurePalette: Palette //<Structure> \r\n    private machinePalette: Palette //<Machine>\r\n    private functionPalette: Palette //<SpaceFunction>\r\n    private card: Card\r\n\r\n    private status: StatusAnalysisView\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n    static machinesForPalette = allMachines\r\n\r\n    constructor(\r\n        private game: Game,\r\n        protected onBuildingSelect = null,\r\n        protected onMachineSelect = null,\r\n        protected onFunctionSelect = null,\r\n    ) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.status = new StatusAnalysisView(emptyMarket());\r\n        this.add(this.status)\r\n\r\n        this.structurePalette = new Palette(20, 35, Hud.structuresForPalette, onBuildingSelect, (e) => this.showCard(e))\r\n        this.machinePalette = new Palette(20, 300, allMachines, onMachineSelect, (e) => this.showCard(e))\r\n        this.functionPalette = new Palette(20, 300, allSpaceFunctions, onFunctionSelect, (e) => this.showCard(e))\r\n\r\n        this.card = new Card(null, game.canvasWidth - 340, game.canvasHeight - 200)\r\n        // this.card.visible = false\r\n        this.add(this.card)\r\n    }\r\n\r\n    setMessage(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        this.structurePalette.draw(ctx)\r\n        this.machinePalette.draw(ctx)\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true) {\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n    }\r\n\r\n    showCard(entity: Machine | Structure) {\r\n        console.log(\"SHOW CARD\", { entity })\r\n        this.card.present(entity)\r\n        // this.card.visible = true\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n        this.updateFunctionPalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        let builtStructures =\r\n            Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n\r\n        this.structurePalette.updateBuilt(builtStructures)\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let devices = colony.findAllDevices()\r\n        let builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine))\r\n        this.machinePalette.updateBuilt(builtMachines)\r\n    }\r\n    \r\n    private updateFunctionPalette(colony: Colony) {\r\n        // find all known functions!!\r\n        // let functions = colony.spaceFunctions()\r\n    }\r\n}","import { CommonAreaView } from '.'\r\nimport { Vector } from 'excalibur';\r\n// import { Corridor, Refinery, Mine } from '../../models/Structure';\r\n\r\nexport class MineView extends CommonAreaView {\r\n    floorHeight = 150\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    // validConnectingStructures() { return [ Corridor, Mine, Refinery ]}\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    // edgeWidth = 1\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2 // - 20\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        // super.draw(ctx, delta)\r\n\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        // ctx.bezierCurveTo(-3 + xoff, 514 + yoff, 1 + xoff, 406 + yoff, 1 + xoff, 391 + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { MissionControl } from \"../../models/Structure\";\r\nimport { range, eachCons, measureDistance, drawRect } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n    // edgeWidth = 0.2\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y) //, Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        // connect node to first slot...\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            // we're determining depth of tunnel\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MissionControlView extends Building {\r\n    hideBox = true\r\n\r\n    devicePlaces() {\r\n        return this.nodes().map(n => {\r\n            n.y -= 20\r\n            return new DevicePlace(n, DeviceSize.Medium)\r\n        }) \r\n    }\r\n\r\n    afterConstruct() {\r\n        // build devices?\r\n        let { machines } = this.structure;\r\n        if (machines && machines.length > 0) {\r\n            let machine = new machines[0]();\r\n            this.devicePlaces().forEach(place => {\r\n                let theDevice = new Device(machine, place.position)\r\n                this.addDevice(theDevice)\r\n                // this.devices.push(theDevice)\r\n                // theDevice.building = this;\r\n                // this.add(theDevice)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2 // + 1\r\n    }\r\n\r\n    //async interact(citizen: Citizen) {\r\n    //}\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor();\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n        // y is going to be surface height\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        // could draw a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawRect } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 12\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        let wallColor = this.processedColor() //.darken(0.4)\r\n        let floorColor = this.processedColor().darken(0.4)\r\n\r\n        drawRect(ctx, this.aabb(), 0.5, wallColor)\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight,\r\n              width: this.getWidth(), height: this.floorHeight },\r\n              0.2,\r\n              floorColor\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        // top slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        // bottom slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)) //-16)\r\n        ];\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 10 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons } from \"../Util\";\r\n// import { Machine, Stove, ExperimentBench, MineralProcessor, CommandCenter, Orchard, MiningDrill, Bookshelf, CookingFire, Cabin } from \"../models/Machine\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { MachineOperation } from \"../models/Machine\";\r\nimport { worker } from \"cluster\";\r\n// import { Machine, Stove, CommandCenter } from \"../models/Machine\";\r\n\r\nexport class Citizen extends Actor {\r\n\r\n    walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock = null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    constructor(private device: Device, protected planet: Planet) {\r\n        super(device.x, device.y, Scale.minor.first, Scale.minor.third, Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = (now - this.workStarted) / this.workDuration\r\n            this.vel.x += ((Math.random())-0.5) * 0.1\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            ctx.fillStyle = blockColor(this.carrying).toRGBA()\r\n            ctx.fillRect(this.x+4, this.y-3, 5, 5)\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            ctx.strokeRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n        }\r\n\r\n        let debugPath = false\r\n        if (this.path && debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 10\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    carry(c: ResourceBlock) { //c: Color) {\r\n        this.carrying = c;\r\n    }\r\n\r\n    drop(): ResourceBlock {\r\n        if (this.carrying) {\r\n            let c = this.carrying; //.clone();\r\n            this.carrying = null;\r\n            return c\r\n        }\r\n        return null\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        // console.log(\"PROGRESS BAR\")\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        // console.log(\"PROGRESS BAR DONE!\")\r\n        this.workInProgress = false\r\n    }\r\n\r\n    async pathTo(building: Building) { //}, onArrival: (Building) => any) {\r\n        // let building = this.planet.closestBuildingByType(this.pos, structure)\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            path.pop()\r\n            path.shift()\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = null\r\n            // onArrival(building);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    waitToUse(device) {\r\n        setTimeout(() => device.interact(this), 250)\r\n    }\r\n\r\n    async work() {\r\n        if (this.carrying) {\r\n            let item: ResourceBlock = this.carrying;\r\n            let sink: Device = this.planet.closestDevice(this.pos,\r\n                [],\r\n                (device) =>\r\n                    device.machine.consumes === item ||\r\n                    ((\r\n                        item === ResourceBlock.Meal ||\r\n                        item === ResourceBlock.Data ||\r\n                        item === ResourceBlock.Mineral\r\n                    ) && device.machine.behavior === MachineOperation.CollectResource) ||\r\n                    item === ResourceBlock.Meal && device.machine.behavior === MachineOperation.CollectMeals ||\r\n                    item === ResourceBlock.Data && device.machine.behavior === MachineOperation.CollectData\r\n            )\r\n\r\n            if (sink) {\r\n                await this.pathTo(sink.building)\r\n                await this.glideTo(sink.pos)\r\n                await sink.interact(this)\r\n            } else {\r\n                console.log(\"nowhere to deliver it\", this.carrying)\r\n            }\r\n        } else {\r\n            let source: Device = this.planet.closestDevice(this.pos,\r\n                [],\r\n                // [ Cabin, Orchard, MiningDrill, Bookshelf ],\r\n                (d) => d.product.length > 0\r\n            )\r\n\r\n            if (source) {\r\n                await this.pathTo(source.building)\r\n                await this.glideTo(source.pos)\r\n                await source.interact(this)\r\n            } else {\r\n                console.log(\"i guess i can try again? (sleep for a bit first)\")\r\n                await new Promise((resolve, reject) => setTimeout(resolve, 150));\r\n            }\r\n        }\r\n\r\n        setTimeout(() => this.work(), 100)\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(home: Device) {\r\n        let citizen = new Citizen(home, this.planet);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","module.exports = __webpack_public_path__ + \"9ed5e1137b47b9fc3d2bbf4534777307.svg\";","module.exports = __webpack_public_path__ + \"3aeb9dd24809ba3fbd4eeb31a28c3b19.svg\";","module.exports = __webpack_public_path__ + \"cffe40698a3b47b52ca0ff90a2c86ddf.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"86e09b7a9e4997af44c45206eb8694ad.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure, MissionControl } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = false\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findAllDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d)\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices() {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\n\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n\r\n    constructor(\r\n        public hud: Hud,\r\n        public color: Color,\r\n        public width: number = 2000000,\r\n        public depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, width, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2\r\n        // crust\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        let devices = this.colony.findAllDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(home)\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        // let econ = this.economy\r\n        let devices = this.colony.findAllDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [ PureValue.Shelter, PureValue.Water, PureValue.Oxygen ]\r\n        return Math.max(0, Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        ))\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n}","import { Scene, Input, Vector } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MissionControl, MainTunnel, Corridor, SurfaceRoad, SmallDome, SmallRoomTwo, SmallDomeThree } from \"../models/Structure\";\r\nimport { Building, DomeView, CorridorView, CommonAreaView, TunnelView, MissionControlView, LadderView, ArcologyView, } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { SurfaceRoadView } from \"../actors/Building/SurfaceRoadView\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { SmallRoomThreeView } from \"../actors/Building/SmallRoomThreeView\";\r\nimport { MidDomeView } from \"../actors/Building/MidDomeView\";\r\nimport { MediumRoomView } from \"../actors/Building/MediumRoomView\";\r\nimport { LargeRoomView } from \"../actors/Building/LargeRoomView\";\r\nimport { HugeRoomView } from \"../actors/Building/HugeRoomView\";\r\nimport { BigDomeView } from \"../actors/Building/BigDomeView\";\r\nimport { SmallDomeThreeView } from \"../actors/Building/SmallDomeThreeView\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    static structureViews: { [key: string]: typeof Building } = {\r\n        CorridorView,\r\n        LadderView,\r\n        TunnelView,\r\n        SurfaceRoadView,\r\n\r\n        DomeView, // small dome 2\r\n        SmallDomeThreeView,\r\n        MidDomeView,\r\n        BigDomeView,\r\n\r\n        MissionControlView,\r\n        // SmallRoomTwoView, [ none, same as common area? ]\r\n        SmallRoomThreeView,\r\n\r\n        CommonAreaView,\r\n        MediumRoomView,\r\n        LargeRoomView,\r\n        HugeRoomView,\r\n\r\n        ArcologyView,\r\n    }\r\n    ////\r\n    static requiredStructureList: Array<typeof Structure> = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        // SmallDome,\r\n        SmallDomeThree,\r\n        MainTunnel,\r\n        Corridor,\r\n        SmallRoomTwo,\r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, false)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n\r\n        this.hud = new Hud(game, (structure) => {\r\n            // console.log('would build', { structure })\r\n            this.startConstructing(structure)\r\n        }, (device) => {\r\n            this.startConstructing(device)\r\n        });\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(this.hud, game.world.color);\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(2, 10000)\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    // console.warn(\"would snap device in place!\")\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                // cancel building in progress?\r\n                this.planet.colony.currentlyConstructing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingRequiredStructure(): Structure {\r\n        let requiredStructures: Structure[] = Construct.requiredStructureList.map(s => new s())\r\n        let actualStructureNames: string[] = this.buildings.map(building => building.structure.name)\r\n\r\n        return requiredStructures.find(structure => !actualStructureNames.includes(structure.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } //else {\r\n            // this.hud.setMessage(`Welcome to OSIRIS!`)\r\n        // }\r\n    }\r\n\r\n    startConstructing(structureOrMachine: Structure | Machine, pos: Vector = new Vector(0, 0)) {\r\n        this.hud.showCard(structureOrMachine)\r\n        \r\n        // console.log(\"START CONSTRUCTING\", { structureOrMachine })\r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            // structure.origin = pos // thread this out somehow??\r\n            this.hud.setMessage(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            this.camera.zoom(structure.zoom, 250)\r\n        } else if (structureOrMachine instanceof Machine) {\r\n            // setup machine?\r\n            let machine = structureOrMachine\r\n            // machine.origin = pos\r\n            this.hud.setMessage(`Install ${machine.name} (${machine.description})`)\r\n\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            this.camera.zoom(1.5, 250)\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // console.warn(\"would start constructing\", { theNextOne })\r\n            this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        device.snap(this.planet)\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(anotherBuilding.pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = Construct.structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Red, Color.Blue, Color.Green] // Color.Viridian, Color.Magenta, Color.Chartreuse];\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ). // Color.Rose //World.colors).\r\n        lighten(0.15).\r\n        desaturate(0.65) // sample([Color.Blue, Color.Rose,Color.Blue]).lighten(0.1).desaturate(0.8)\r\n//   colony: Colony = new Colony()\r\n\r\n  \r\n}","module.exports = __webpack_public_path__ + \"0f6ac78b40c6bc151aee01b517f49ca1.png\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\nconst bookshelf = require('./images/bookshelf.png');\r\n// const bookshelfSvg = require('./images/bookshelf-plain.svg');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword),\r\n\r\n    Bookshelf: new ex.Texture(bookshelf),\r\n\r\n    // BookshelfSVG: new ex.Texture(bookshelfSvg)\r\n}\r\n\r\nexport { Resources }\r\n","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\n// scenes\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}