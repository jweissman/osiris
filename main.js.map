{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/actors/Building/index.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/Util.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Structure.ts","webpack:///./src/models/Machine.ts","webpack:///./src/actors/Building/CloneMatrixView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/values/Graph.ts","webpack:///./src/values/Scale.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Building/RefineryView.ts","webpack:///./src/actors/Building/StudyView.ts","webpack:///./src/actors/Building/PowerPlantView.ts","webpack:///./src/actors/Building/KitchenView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MineView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/LabView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/MissionControlView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/actors/Device.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","MissionControlView_1","MissionControlView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","CloneMatrixView_1","CloneMatrixView","LabView_1","LabView","LadderView_1","LadderView","MineView_1","MineView","Orientation","Left","Up","Right","Down","compass","flip","orientation","Error","excalibur_1","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","eachCons","measureDistance","b","drawLine","ctx","lineWidth","Color","White","beginPath","moveTo","x","y","lineTo","strokeStyle","toRGBA","stroke","drawRect","rectangle","edgeWidth","color","width","height","edge","fillStyle","fillRect","main","Orientation_1","Util_1","Graph_1","Device_1","_super","structure","planet","_this","this","origin","built","hover","showLabel","facing","hideBox","childrenBuildings","level","devices","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","console","log","building","collisionType","CollisionType","PreventCollision","nameLabel","Label","levelLabel","fontSize","darken","__extends","levelUp","text","draw","delta","aabb","processedColor","forEach","device","pos","getCenter","measureText","update","engine","produce","constrainCursor","clone","reshape","afterConstruct","machines","machine_1","devicePlaces","place","theDevice","Device","add","handleClick","slots","nodes","getWidth","getHeight","graph","supergraph","Graph","g","rootNode","findOrCreate","_i","_a","child","slot","parentSlot","childNode","redeem","res","gather","populate","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","find","bldg","edgeColor","lighten","mainColor","colorBase","clr","Red","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","closestBuildingByType","matchingSlot","compass_1","warn","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","Actor","ResourceBlock","Food","Ore","Data","Meal","Hypothesis","Mineral","blockColors","Green","Blue","Yellow","Violet","blockColor","block","desaturate","t","setPrototypeOf","__proto__","constructor","create","Economy_1","Scale_1","Machine_1","major","Scale","minor","Structure","description","view","zoom","consumes","produces","productionTime","Corridor","Ladder","MissionControl","arguments","third","SurfaceRoad","MainTunnel","CommandCenter","second","eighth","Dome","fourth","Orchard","fifth","CloneMatrix","Kitchen","Laboratory","Study","CommonArea","first","Arcology","sixth","ExperimentBench","Stove","Mine","Refinery","MiningDrill","Bookshelf","MineralProcessor","CloningVat","PowerPlant","MachineOperation","Work","SpawnCitizen","CollectResource","Machine","LightGray","behavior","drawShape","xoff","yoff","h","w","bezierCurveTo","empty","edges","edgesInverse","isEmpty","node","newNode","contains","testNode","includes","measure","tolerance","dfs","src","dst","indexOf","union","otherGraph","edgeList","theEdges","index","_b","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","path","steps","srcIndex","reverse","majorUnit","seventh","minorUnit","minorScale","Resources_1","Game","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","start","loader","Loader","key","Resources","addResource","citizenSpeed","Engine","_1","Structure_1","RefineryView","validConnectingStructures","StudyView","PowerPlantView","theSlots","slotY","leftSlot","rightSlot","KitchenView","SurfaceRoadView","ResourceListEntry","resourceBlock","icon","count","credit","amt","ResourceListEntry_1","ResourcesList","DarkGray","entries","resource","ry","entry","increment","ResourcesList_1","Hud","game","message","onBuildingSelect","canvasWidth","canvasHeight","label","_makePalette","resources","_paletteElement","left","canvas","offsetLeft","top_1","offsetTop","style","top","resourceGathered","document","createElement","position","border","body","appendChild","structuresForPalette","_paletteButton","buttonFactory","onclick","bg","fg","paletteButton","textContent","display","fontFamily","fontWeight","padding","textTransform","background","onmouseover","onmouseleave","UIActor","floorHeight","originSlot","pickingOrigin","maxHeight","getTop","setHeight","rect","halfWidth","slotHeights","heights","y0","y1","btm","lst","right","slotCount","flagX","flagY","arc","PI","closePath","originX","newCursor","setWidth","abs","machine","initialPos","product","capacity","bx","by","produced","blockSize","interact","citizen","pop","progressBar","sent","carry","carrying","drop","setTimeout","ex","Player","Game_1","Citizen","walkSpeed","workInProgress","now","Date","getTime","progress","workStarted","workDuration","px","pw","py","strokeRect","vel","glideTo","actions","asPromise","duration","Promise","resolve","reject","pathTo","pathBetween","all","work","item","sinks","theSink","closestDevice","source","Citizen_1","Population","citizens","increase","home","NavigationTree","seekPath","dest","closestNode","NavigationTree_1","Colony","currentlyConstructing","navTree","placeBuilding","buildNavTree","structureTypes","some","structureType","destination","srcNode","destNode","closestDeviceByType","machineTypes","ctrl","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","saturate","yBase","peak","mtnWidth","PlanetBackground","PlanetBackground_1","Colony_1","Population_1","Planet","hud","depth","createLayer","layerHeight","population","size","theLayer","Planet_1","player_1","Hud_1","SurfaceRoadView_1","KitchenView_1","PowerPlantView_1","StudyView_1","RefineryView_1","Construct","dragging","startConstructing","player","prepareNextBuilding","camera","onActivate","input","pointers","primary","dragOrigin","currentBuilding","constrained","button","Input","PointerButton","placementValid","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","onDeactivate","off","nextMissingRequiredStructure","requiredStructures","requiredStructureList","actualStructureNames","nextMissing","theNextOne","spawnBuilding","anotherBuilding","assembleBuildingFromStructure","structureViews","Scene","structures","World","colors","Cyan","Vermillion","sword","Sword","Texture","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([41,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { MissionControlView } from './MissionControlView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { CloneMatrixView } from './CloneMatrixView';\r\nimport { LabView } from './LabView';\r\nimport { LadderView } from './LadderView';\r\nimport { MineView } from './MineView';\r\n\r\n\r\n// import { LivingQuartersView } from './LivingQuartersView';\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView, // as AccessTunnelView,\r\n    CommonAreaView,\r\n    DomeView,\r\n    MissionControlView,\r\n    TunnelView,\r\n    ArcologyView,\r\n    CloneMatrixView,\r\n    LabView,\r\n    LadderView,\r\n    MineView,\r\n\r\n}","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem)) //vec) => cursor.distance(vec)\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawRect(ctx: CanvasRenderingContext2D, rectangle: Rectangle, edgeWidth: number = 0, color: Color = Color.White) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White; //color; // || this.edgeColor();\r\n    ctx.fillStyle = edge.toRGBA();\r\n    ctx.fillRect(x, y, width, height)\r\n  }\r\n\r\n  let main = color; // || this.mainColor();\r\n  ctx.fillStyle = main.toRGBA();\r\n  ctx.fillRect(\r\n    x + edgeWidth,\r\n    y + edgeWidth,\r\n    width - edgeWidth * 2,\r\n    height - edgeWidth * 2\r\n  )\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, drawRect, drawLine } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0 //.1\r\n\r\n    nameLabel: Label\r\n    levelLabel: Label\r\n\r\n    built: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n    //product: ResourceBlock[] = []\r\n    //capacity: number = 4\r\n\r\n    level: number = 1\r\n\r\n    devices: Device[] = []\r\n\r\n    // colorBase() { return this.color.darken(0.1); }\r\n\r\n    constructor(public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          structure.origin.x,\r\n          structure.origin.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            console.log(\"HOVER ON\", { building: this })\r\n        })\r\n\r\n        // this.on('pointerdown', () => {\r\n        //     console.log(\"CLICKED BUILDING\", { building: this })\r\n        //     this.levelUp();\r\n        // })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        // this.nameLabel.fontSize = 11\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.levelLabel = new Label(`Lvl. ${this.level}`, 0, 0, 'Helvetica')\r\n        this.levelLabel.fontSize = 6\r\n        this.levelLabel.color = Color.White.darken(0.2)\r\n    }\r\n\r\n    levelUp() {\r\n        this.level += 1\r\n        this.levelLabel.text = `Lvl. ${this.level}`\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        this.devices.forEach(device => device.draw(ctx, delta))\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n            // this.levelLabel.text = `Lvl. ${this.level}`\r\n            // this.levelLabel.pos = this.getCenter()\r\n            // this.levelLabel.pos.y += 10\r\n            // this.levelLabel.pos.x -= ctx.measureText(this.structure.name).width / 4\r\n            // this.levelLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let debug = false;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n            if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n        let tryProduce = this.built;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.produce(this.step));\r\n        }\r\n        this.step += 1\r\n    }\r\n\r\n    setup(): void {}\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    } \r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {\r\n\r\n        let { machines } = this.structure; \r\n        if (machines && machines.length > 0) {\r\n            let machine = new machines[0]();\r\n            this.devicePlaces().forEach(place => {\r\n                let theDevice = new Device(this, machine, place)\r\n                this.devices.push(theDevice)\r\n                this.add(theDevice)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    handleClick(cursor: Vector): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): Vector[] {\r\n        return this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public populate(pos: Vector) {\r\n        this.planet.populate(pos) //this.pos)\r\n    }\r\n\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n}","import { Color } from \"excalibur\";\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Food = 'Food',\r\n    Ore = 'Ore',\r\n    Data = 'Data',\r\n    // derived\r\n    Meal = 'Meal',\r\n    Hypothesis = 'Hypothesis',\r\n    Mineral = 'Mineral'\r\n}\r\n\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Food: Color.Green,\r\n    Data: Color.Blue,\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(0.2),\r\n    Hypothesis: Color.Violet.darken(0.4),\r\n    Ore: Color.Red.darken(0.5),\r\n\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    //Color.Violet\r\n    //switch(block) {\r\n    //    case ResourceBlock.Food: baseColor = Color.Green; break\r\n    //    case ResourceBlock.Ore:  baseColor = Color.Red; break\r\n    //    case ResourceBlock.Data: baseColor = Color.Blue; break\r\n    //    case ResourceBlock.Meal: baseColor = Color.Yellow; break\r\n    //}\r\n    return baseColor.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { Vector } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Orchard, ExperimentBench, Stove, MiningDrill, Bookshelf, MineralProcessor, CommandCenter, CloningVat } from './Machine';\r\n\r\nconst { major, minor } = Scale\r\n\r\n\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n    productionTime: number = 500\r\n\r\n    constructor(public origin: Vector = new Vector(0, 0)) { }\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n}\r\n\r\nexport class MissionControl extends Structure {\r\n    name: string = 'Mission Control';\r\n    description: string = 'Keeping everything on track';\r\n    view: string = 'MissionControlView';\r\n    width: number = major.third\r\n    height: number = minor.third\r\n    zoom = 0.1\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = [ CommandCenter ]\r\n}\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MissionControl ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class Dome extends Structure {\r\n    name: string = 'Biodome';\r\n    description: string = 'Biome sweet biome';\r\n    produces = ResourceBlock.Food\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.eighth\r\n    height: number = 2 * major.fourth\r\n    zoom = 0.2\r\n    productionTime = 5000\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    machines = [Orchard]\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            Ladder,\r\n            CloneMatrix, Kitchen, Laboratory, Study, CommonArea \r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            Ladder,\r\n            CloneMatrix, Kitchen, Laboratory, Study, CommonArea \r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor, CloneMatrix, Kitchen, Laboratory, Study, CommonArea ],\r\n        [Orientation.Right]: [ Corridor, CloneMatrix, Kitchen, Laboratory, Study, CommonArea ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n}\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Arcology, Dome, MissionControl ],\r\n        [Orientation.Right]: [ Arcology, Dome, MissionControl ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class Laboratory extends CommonArea {\r\n    name: string = 'Lab'\r\n    description: string = 'learn some things'\r\n    consumes = ResourceBlock.Hypothesis\r\n    produces = ResourceBlock.Data\r\n    view: string = 'LabView'\r\n    width: number = major.sixth\r\n    height: number = major.fifth\r\n    productionTime = 6500\r\n    machines = [ExperimentBench]\r\n}\r\n\r\n\r\nexport class Kitchen extends CommonArea {\r\n    name: string = 'Kitchen'\r\n    description: string = 'veg -> meals'\r\n    consumes = ResourceBlock.Food\r\n    produces = ResourceBlock.Meal\r\n    view: string = 'KitchenView'\r\n    width: number = major.fourth\r\n    height: number = major.fifth\r\n    productionTime = 2000\r\n    machines = [Stove]\r\n}\r\n\r\n// a mine is maybe a wide structure that you\r\n// can gradually dig deeper??\r\nexport class Mine extends Structure {\r\n    name: string = 'Mine'\r\n    description: string = 'ore else'\r\n    produces = ResourceBlock.Ore\r\n    productionTime = 20000\r\n    view: string = 'MineView'\r\n    width: number = major.eighth // 20 * majorUnit\r\n    height: number = 3 * major.sixth //20 * majorUnit\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Mine, Refinery, Corridor ],\r\n        [Orientation.Right]: [ Mine, Refinery, Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n    machines = [MiningDrill]\r\n}\r\n\r\nexport class Study extends CommonArea {\r\n    name: string = 'Study'\r\n    description: string = 'reflect'\r\n    view: string = 'StudyView'\r\n    width = major.third\r\n    height = major.fifth\r\n    produces = ResourceBlock.Hypothesis\r\n    productionTime = 2000\r\n    machines = [Bookshelf]\r\n}\r\n\r\nexport class Refinery extends Structure {\r\n    name = 'Refinery'\r\n    description = 'flotate'\r\n    consumes = ResourceBlock.Ore\r\n    produces = ResourceBlock.Mineral\r\n    view = 'RefineryView'\r\n    width = major.fifth\r\n    height = major.fifth\r\n    productionTime = 9000\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Mine, Refinery, Corridor ],\r\n        [Orientation.Right]: [ Mine, Refinery, Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n    machines = [MineralProcessor]\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CloneMatrix, Kitchen, Laboratory, Study, CommonArea ],\r\n        [Orientation.Down]: [ CloneMatrix, Kitchen, Laboratory, Study, CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n}\r\n\r\nexport class Arcology extends Structure {\r\n    name = 'Arcology'\r\n    description = 'megalith'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.fifth\r\n    height = 34 * major.fifth\r\n    zoom = 0.01\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class CloneMatrix extends CommonArea {\r\n    name = 'Clone Matrix'\r\n    description = 'you seem familiar'\r\n    view = 'CloneMatrixView'\r\n    width = major.fifth\r\n    height = major.eighth\r\n    machines = [ CloningVat ]\r\n}\r\n\r\n// huge octagonal generating station with four 'slots'\r\n// for sub-structures (add-ons) which auto-generate data/ore\r\n// for the central 'power' slot ...\r\n// ...you can build either...\r\n// ...a mini black hole or mini sun\r\n// (the sun takes ore and the hole takes data?)\r\nexport class PowerPlant extends Structure {\r\n    name: string = 'Power Plant'\r\n    description: string = 'sunny day'\r\n    view: string = 'PowerPlantView'\r\n    width: number = 2 * major.eighth //30 * majorUnit\r\n    height: number = 2 * major.eighth // 30 * majorUnit\r\n\r\n    //connections: {[key in Orientation]: (typeof Structure)[] } = {\r\n    //    [Orientation.Left]: [ Corridor ],\r\n    //    [Orientation.Right]: [ Corridor ],\r\n    //    [Orientation.Up]: [ Ladder ],\r\n    //    [Orientation.Down]: [ Ladder ],\r\n    //}\r\n}\r\n","import { ResourceBlock } from \"./Economy\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { Color } from \"excalibur\";\r\n\r\nexport enum MachineOperation {\r\n  // generic functioning: consuming a block to produce a new block\r\n  Work,\r\n\r\n  // more interesting functions\r\n  SpawnCitizen,\r\n  CollectResource,\r\n\r\n  // ...ProduceValue? [i.e., hope]\r\n  // StoreResource ??\r\n}\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    width: number = Scale.minor.third\r\n    height: number = Scale.minor.fourth\r\n    color: Color = Color.LightGray\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n    productionTime: number = 1000\r\n\r\n    behavior: MachineOperation = MachineOperation.Work\r\n}\r\n\r\n// resource collection\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command'\r\n    description = 'gather resources'\r\n    behavior = MachineOperation.CollectResource\r\n}\r\n\r\n// meals\r\n\r\nexport class Orchard extends Machine {\r\n    name = 'Orchard'\r\n    description = 'grow some food'\r\n    produces = ResourceBlock.Food\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    consumes = ResourceBlock.Food\r\n    produces = ResourceBlock.Meal\r\n}\r\n\r\n// minerals\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Drill'\r\n    description = 'find some ores'\r\n    produces = ResourceBlock.Ore\r\n}\r\n\r\nexport class MineralProcessor extends Machine {\r\n    name = 'Processor'\r\n    description = 'extract some minerals'\r\n\r\n    consumes = ResourceBlock.Ore\r\n    produces = ResourceBlock.Mineral\r\n}\r\n\r\n// data\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    produces = ResourceBlock.Hypothesis\r\n}\r\n\r\nexport class ExperimentBench extends Machine {\r\n    name = 'Bench'\r\n    description = 'test some hypotheses'\r\n    consumes = ResourceBlock.Hypothesis\r\n    produces = ResourceBlock.Data\r\n}\r\n\r\n// reproduction\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'grow some replacements'\r\n    // consumes = ResourceBlock.Meal\r\n    behavior = MachineOperation.SpawnCitizen \r\n    productionTime = 1500\r\n}\r\n\r\n// maybe library node 'stores' data?\r\n//export class LibraryNode {\r\n//    name = 'Library Node'\r\n//\r\n//    consumes = ResourceBlock.\r\n//}","import { Building, CommonAreaView } from \".\";\r\n\r\nexport class CloneMatrixView extends CommonAreaView {\r\n    //afterConstruct() {\r\n    //    this.spawnCitizen()\r\n    //}\r\n\r\n    //protected spawnCitizen() {\r\n    //    setTimeout(() => this.planet.populate(this.pos), 100)\r\n    //}\r\n\r\n    //draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n    //    super.draw(ctx, delta)\r\n    //}\r\n}","import { DomeView } from \".\";\r\nimport { Color } from \"excalibur\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n\r\n    }\r\n\r\n    drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        // ctx.bezierCurveTo(-3 + xoff, 514 + yoff, 1 + xoff, 406 + yoff, 1 + xoff, 391 + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 100\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() { //loader: ex.Loader) {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Corridor, Mine, Refinery } from \"../../models/Structure\";\r\n\r\nexport class RefineryView extends CommonAreaView {\r\n    validConnectingStructures() { return [ Corridor, Mine, Refinery ]}\r\n\r\n}","import { CommonAreaView } from \".\";\r\n\r\nexport class StudyView extends CommonAreaView {}","import { Building } from \".\";\r\nimport { Corridor } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Vector, Polygon } from \"excalibur\";\r\n\r\nexport class PowerPlantView extends Building {\r\n    showLabel = true\r\n\r\n    validConnectingStructures() { return [ Corridor ]}\r\n\r\n    draw(ctx, delta) {\r\n        // octagon...\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() / 2\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n        return theSlots;\r\n    }\r\n\r\n   nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()/2 //-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)) //-16)\r\n        ];\r\n    }\r\n\r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n\r\n}","import { CommonAreaView } from \".\";\r\nimport { Color } from \"excalibur\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\n\r\nexport class KitchenView extends CommonAreaView {\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0 //.5\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 8, 'Helvetica');\r\n        this.count.fontSize = 12;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            // non-accruable\r\n            [ResourceBlock.Food]: null,\r\n            [ResourceBlock.Hypothesis]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            // displayed/accruable\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 60, 60, Color.DarkGray.darken(0.8));\r\n        let rx0 = -8, ry0 = -10;\r\n        let resources = [ResourceBlock.Meal, ResourceBlock.Data, ResourceBlock.Mineral];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0, ry = ry0 + index * 10;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        this.entries[resource].credit(1);\r\n    }\r\n}\r\n","import { Label, UIActor, Color } from \"excalibur\";\r\nimport { Dome, Structure, Corridor, CommonArea, SurfaceRoad, Mine, Laboratory, Kitchen, PowerPlant, Study, Refinery, CloneMatrix, Arcology, Ladder } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\n\r\nexport class Hud extends UIActor {\r\n    label: Label\r\n    resources: ResourcesList\r\n    protected _paletteElement: HTMLDivElement\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor, \r\n        Ladder,\r\n\r\n        // LivingQuarters, \r\n        Dome, Kitchen,\r\n        // Mess,\r\n\r\n        Study, Laboratory,\r\n        Mine, Refinery,\r\n        PowerPlant,\r\n\r\n        CloneMatrix,\r\n        Arcology,\r\n\r\n   // CommonArea,\r\n    ];\r\n    constructor(game: Game, message = 'hello', protected onBuildingSelect = null) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.label = new Label(message, 20, game.canvasHeight - 64, 'Verdana')\r\n        this.label.fontSize = 24\r\n        this.label.color = Color.White\r\n        this.add(this.label)\r\n\r\n        this._makePalette(onBuildingSelect)\r\n\r\n        this.resources = new ResourcesList(50, 40)\r\n        this.add(this.resources)\r\n    }\r\n\r\n\r\n    message(text: string) { this.label.text = text }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this._paletteElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._paletteElement.style.left = `${left + 20}px`;\r\n            this._paletteElement.style.top = `${top + 100}px`;\r\n        }\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.resources.increment(resource)\r\n    }\r\n\r\n\r\n    protected _makePalette(fn: (Structure) => any) {\r\n        this._paletteElement = document.createElement('div') \r\n        this._paletteElement.style.position = 'absolute'\r\n        this._paletteElement.style.border = '1px solid white'\r\n        document.body.appendChild(this._paletteElement)\r\n\r\n        Hud.structuresForPalette.forEach((structure: typeof Structure) => {\r\n            let s = new structure()\r\n            let _paletteButton = this.buttonFactory(s);\r\n            this._paletteElement.appendChild(\r\n                _paletteButton\r\n            )\r\n\r\n            _paletteButton.onclick = (e) => {\r\n                fn(s)\r\n                // e.stopPropagation()\r\n            }\r\n        });\r\n    }\r\n\r\n    private buttonFactory(s: Structure) {\r\n        let bg = Color.DarkGray.darken(0.8) //.desaturate(0.25) //.toRGBA()\r\n        bg.a = 0.6\r\n        let fg = Color.Blue.lighten(0.8).desaturate(0.55) //.toRGBA()\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = `${s.name}`;\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '10pt';\r\n\r\n        paletteButton.style.fontFamily = 'Helvetica';\r\n        paletteButton.style.fontWeight = '600';\r\n        paletteButton.style.padding = '8px';\r\n        paletteButton.style.width = '130px';\r\n        paletteButton.style.textTransform = 'uppercase'\r\n        paletteButton.style.border = 'none' //0.1px solid blue'\r\n        paletteButton.style.background = bg.toRGBA(); //Color.Blue.darken(0.08).toRGBA();\r\n        paletteButton.style.color = fg.toRGBA() //Color.Blue.lighten(0.16).toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.lighten(0.4).toRGBA()\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA() //Color.Blue.lighten(0.16).toRGBA();\r\n        }\r\n        paletteButton.onmouseleave = () => {\r\n            //paletteButton.style.background = bg.toRGBA()\r\n            paletteButton.style.background = bg.toRGBA(); //Color.Blue.darken(0.08).toRGBA();\r\n            paletteButton.style.color = fg.toRGBA() //Color.Blue.lighten(0.16).toRGBA();\r\n        } // Color.Blue.toRGBA() }\r\n\r\n        return paletteButton;\r\n    }\r\n}","import { CommonAreaView } from '.'\r\nimport { Vector } from 'excalibur';\r\nimport { Corridor, Refinery, Mine } from '../../models/Structure';\r\n\r\nexport class MineView extends CommonAreaView {\r\n    floorHeight = 150\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    validConnectingStructures() { return [ Corridor, Mine, Refinery ]}\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    // edgeWidth = 1\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Color } from \"excalibur\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\n\r\nexport class LabView extends CommonAreaView {\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { MissionControl } from \"../../models/Structure\";\r\nimport { range, eachCons, measureDistance, drawRect } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n    // edgeWidth = 0.2\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y) //, Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        // connect node to first slot...\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            // we're determining depth of tunnel\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class MissionControlView extends Building {\r\n    hideBox = true\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n           \r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2 // + 1\r\n    }\r\n\r\n    //async interact(citizen: Citizen) {\r\n    //}\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor();\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n        // y is going to be surface height\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        // could draw a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3*(this.getWidth()/4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        return [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n    }\r\n}","import { Building } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 8\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    // maybe you can set height AND width of common area view??\r\n    // maybe just width...\r\n    colorBase() { return this.color.darken(0.1); }\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        // top slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        // bottom slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)) //-16)\r\n        ];\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine, MachineOperation } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\n\r\nexport class Device extends Actor {\r\n    product: ResourceBlock[] = []\r\n    capacity: number = 4\r\n\r\n    // private machine: typeof Machine\r\n    nameLabel: Label\r\n\r\n    constructor(public building: Building, private machine: Machine, private initialPos: Vector) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            machine.width,\r\n            machine.height,\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 8\r\n        this.nameLabel.color = Color.White\r\n    }\r\n\r\n    draw(ctx, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.machine.name).width / 2\r\n            this.nameLabel.pos.y -= 20\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let bx = this.x - this.getWidth()/2, by = this.y - 10\r\n        let blockSize = 5\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).desaturate(0.3).lighten(0.2).toRGBA();\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize, blockSize-1, blockSize-1)\r\n        })\r\n\r\n\r\n    }\r\n    get produces()       { return this.machine.produces }\r\n    get consumes()       { return this.machine.consumes }\r\n    get productionTime() { return this.machine.productionTime }\r\n\r\n    async interact(citizen: Citizen) {\r\n        if (this.machine.behavior === MachineOperation.Work) {\r\n            if (this.product.length > 0) {\r\n                this.product.pop()\r\n                await citizen.progressBar(200) //this.productionTime)\r\n                citizen.carry(this.produces)\r\n            } else {\r\n                if (this.consumes && citizen.carrying === this.consumes) {\r\n                    await citizen.progressBar(this.productionTime)\r\n                    citizen.carry(this.produces)\r\n                }\r\n            }\r\n        } else if (this.machine.behavior === MachineOperation.CollectResource) {\r\n            // assume we are gathering a resource here?\r\n            let resource = citizen.drop()\r\n            if (resource) {\r\n                this.building.redeem(resource) //planet.gather(resource)\r\n            }\r\n        }\r\n    }\r\n\r\n    public produce(step: number) {\r\n        if (step % this.productionTime === 0) {\r\n            if (this.machine.behavior === MachineOperation.Work) {\r\n\r\n                if (this.produces && !this.consumes && this.product.length < this.capacity) {\r\n                    this.product.push(this.produces)\r\n                }\r\n            } else if (this.machine.behavior === MachineOperation.SpawnCitizen) {\r\n                setTimeout(() => this.building.populate(this.pos), 100)\r\n            }\r\n        }\r\n    }\r\n\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { Structure, MissionControl, Laboratory, Mine, Dome, Kitchen, Study, Refinery } from \"../models/Structure\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons } from \"../Util\";\r\nimport { Machine, Stove, ExperimentBench, MineralProcessor, CommandCenter, Orchard, MiningDrill, Bookshelf } from \"../models/Machine\";\r\nimport { Device } from \"./Device\";\r\n\r\nexport class Citizen extends Actor {\r\n    walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock = null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    constructor(private device: Device, protected planet: Planet) {\r\n        super(device.x,device.y,4,10,Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = (now - this.workStarted) / this.workDuration //0.5\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            ctx.fillStyle = blockColor(this.carrying).toRGBA()\r\n            ctx.fillRect(this.x+4, this.y-3, 5, 5)\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            // draw progress bar?\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            // ctx.stroke(20)\r\n            ctx.strokeRect(px, py, pw, ph)\r\n\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n\r\n            this.vel.x += (Math.random())-0.5 // * 10.0)\r\n        }\r\n\r\n        let debugPath = false\r\n        if (this.path && debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 10\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    carry(c: ResourceBlock) { //c: Color) {\r\n        this.carrying = c;\r\n    }\r\n\r\n    drop(): ResourceBlock {\r\n        if (this.carrying) {\r\n            let c = this.carrying; //.clone();\r\n            this.carrying = null;\r\n            return c\r\n        }\r\n        return null\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        // console.log(\"PROGRESS BAR\")\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        // console.log(\"PROGRESS BAR DONE!\")\r\n        this.workInProgress = false\r\n    }\r\n\r\n    async pathTo(building: Building) { //}, onArrival: (Building) => any) {\r\n        // let building = this.planet.closestBuildingByType(this.pos, structure)\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            path.pop()\r\n            path.shift()\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = null\r\n            // onArrival(building);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    async work() {\r\n        if (this.carrying) {\r\n            let item: ResourceBlock = this.carrying;\r\n            let sinks: (typeof Machine)[] = []\r\n\r\n            if (ResourceBlock[item] === 'Food') {\r\n                sinks = [Stove]\r\n            } else if (ResourceBlock[item] === 'Hypothesis') {\r\n                sinks = [ExperimentBench]\r\n            } else if (ResourceBlock[item] === 'Ore') {\r\n                sinks = [MineralProcessor]\r\n            } else {\r\n                sinks = [CommandCenter]\r\n            }\r\n\r\n            if (sinks.length > 0) {\r\n                let theSink: Device = this.planet.closestDevice(this.pos, sinks)\r\n                if (theSink) {\r\n                    await this.pathTo(theSink.building)\r\n                    await this.glideTo(theSink.pos)\r\n                    await theSink.interact(this)\r\n                }\r\n            } else {\r\n                console.log(\"nowhere to deliver it\", this.carrying)\r\n            }\r\n        } else {\r\n            let source: Device = this.planet.closestDevice(this.pos,\r\n                [ Orchard, MiningDrill, Bookshelf ],\r\n                (d) => d.product.length > 0\r\n            )\r\n\r\n            if (source) {\r\n                await this.pathTo(source.building)\r\n                await this.glideTo(source.pos)\r\n                await source.interact(this)\r\n            } else {\r\n                console.log(\"i guess i can try again? (sleep for a bit first)\")\r\n                await new Promise((resolve, reject) => setTimeout(resolve, 150));\r\n            }\r\n        }\r\n\r\n        setTimeout(() => this.work(), 100)\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(home: Device) {\r\n        let citizen = new Citizen(home, this.planet);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure, MissionControl } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = false\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n                        // console.log(\"draw edges\", {edges})\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n            // Add three color stops\r\n            gradient.addColorStop(0, 'green');\r\n            gradient.addColorStop(1, 'blue');\r\n\r\n                // console.log(\"draw edge\", { a,b  })\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y + this.pos.y)\r\n                ctx.lineTo(b.x,b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient //Color.Green.toRGBA()\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n        // console.log(\"DRAW COLONY\", { colony: this });\r\n        // parent does this :/\r\n        // if (this.currentlyConstructing) {\r\n        //     this.currentlyConstructing.draw(ctx, delta)\r\n        // }\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => structureTypes.some(structureType => (building.structure instanceof structureType)) && predicate(building));\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[], predicate: (Device) => boolean = () => true) {\r\n        let devices = flatSingle(this.buildings.map(b => b.devices))\r\n        devices = devices.filter(d => machineTypes.some(machine => d.machine instanceof machine) && predicate(d))\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d)\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure, CloneMatrix } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\n\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n\r\n    constructor(\r\n        public hud: Hud,\r\n        public color: Color,\r\n        public width: number = 2000000,\r\n        public depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, width, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2\r\n        // crust\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector) {\r\n        // let home = this.closestBuildingByType(pos, [CloneMatrix])\r\n        let home = this.closestDevice(pos, [ CloningVat ])\r\n        this.population.increase(home)\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n}","import { Scene, Input, UIActor, Label, Vector, LockCameraToActorStrategy } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MissionControl, MainTunnel, Dome, Corridor, SurfaceRoad, Kitchen, CloneMatrix } from \"../models/Structure\";\r\nimport { Building, DomeView, CorridorView, CommonAreaView, TunnelView, MissionControlView, LadderView, MineView, LabView, } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { SurfaceRoadView } from \"../actors/Building/SurfaceRoadView\";\r\nimport { KitchenView } from \"../actors/Building/KitchenView\";\r\nimport { PowerPlantView } from \"../actors/Building/PowerPlantView\";\r\nimport { StudyView } from \"../actors/Building/StudyView\";\r\nimport { RefineryView } from \"../actors/Building/RefineryView\";\r\nimport { ArcologyView } from \"../actors/Building/ArcologyView\";\r\nimport { CloneMatrixView } from \"../actors/Building/CloneMatrixView\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    static structureViews: { [key: string]: typeof Building } = {\r\n        TunnelView,\r\n        MissionControlView,\r\n        DomeView,\r\n        CorridorView,\r\n        CommonAreaView,\r\n        SurfaceRoadView,\r\n        LabView,\r\n        MineView,\r\n        KitchenView,\r\n        PowerPlantView,\r\n        StudyView,\r\n        RefineryView,\r\n\r\n        ArcologyView,\r\n        CloneMatrixView,\r\n\r\n        LadderView,\r\n    }\r\n    ////\r\n    static requiredStructureList: Array<typeof Structure> = [\r\n        MissionControl,\r\n\r\n        SurfaceRoad,\r\n        Dome,\r\n        MainTunnel,\r\n        Corridor,\r\n        Kitchen,\r\n        CloneMatrix,\r\n    ]\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n\r\n        this.hud = new Hud(game, 'hi', (structure) => {\r\n            this.startConstructing(structure)\r\n        });\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(this.hud, game.world.color);\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(2, 10000)\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentBuilding = this.planet.currentlyConstructing\r\n                if (currentBuilding) {\r\n                    let constrained = currentBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentBuilding.reshape(this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', (e: Input.PointerUpEvent) => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentBuilding: Building = this.planet.currentlyConstructing\r\n                if (currentBuilding) {\r\n                    let placementValid = !currentBuilding.overlapsAny()\r\n                    if (currentBuilding && placementValid && currentBuilding.handleClick(e.pos)) {\r\n                        this.planet.placeBuilding(currentBuilding)\r\n                        this.planet.colony.currentlyConstructing = null\r\n                        this.prepareNextBuilding(e.pos)\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingRequiredStructure(): Structure {\r\n        let requiredStructures: Structure[] = Construct.requiredStructureList.map(s => new s())\r\n        let actualStructureNames: string[] = this.buildings.map(building => building.structure.name)\r\n\r\n        return requiredStructures.find(structure => !actualStructureNames.includes(structure.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.message(`Welcome to OSIRIS!`)\r\n        }\r\n    }\r\n\r\n    startConstructing(structure: Structure, pos: Vector = new Vector(0, 0)) {\r\n        structure.origin = pos\r\n        this.hud.message(`Place ${structure.name}`)\r\n        let theNextOne = this.spawnBuilding(structure)\r\n        this.planet.colony.currentlyConstructing = theNextOne\r\n        this.camera.pos = theNextOne.pos\r\n        this.camera.zoom(structure.zoom, 250)\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(anotherBuilding.pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure): Building {\r\n        let View = Construct.structureViews[structure.view]\r\n        let building = new View(structure, this.planet)\r\n        return building;\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\n\r\nexport class Colony {\r\n    // origin: Vector\r\n    structures: Structure[] = []\r\n    // build(structure) ...\r\n}\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Red, Color.Blue, Color.Green] // Color.Viridian, Color.Magenta, Color.Chartreuse];\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ). // Color.Rose //World.colors).\r\n        lighten(0.15).\r\n        desaturate(0.65) // sample([Color.Blue, Color.Rose,Color.Blue]).lighten(0.1).desaturate(0.8)\r\n  colony: Colony = new Colony()\r\n}","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword)\r\n}\r\n\r\nexport { Resources }\r\n","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\n// scenes\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}