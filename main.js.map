{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/values/DeviceSize.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/Util.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Machine.ts","webpack:///./src/models/Structure.ts","webpack:///./src/values/Scale.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Device.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MineView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/MissionControlView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/bookshelf.png","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","sixth","eighth","excalibur_1","Orientation_1","Util_1","Graph_1","SpaceFunction_1","DeviceSize_1","DevicePlace","pos","this","Building","_super","structure","planet","_this","x","y","width","height","color","edgeWidth","built","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","level","devices","step","anchor","Vector","setup","traits","filter","trait","Traits","OffscreenCulling","on","collisionType","CollisionType","PreventCollision","nameLabel","Label","Color","White","levelLabel","fontSize","darken","__extends","levelUp","text","draw","ctx","delta","drawRect","aabb","processedColor","forEach","device","getCenter","measureText","update","engine","produce","constrainCursor","cursor","clone","reshape","afterConstruct","handleClick","_pos","slots","nodes","getWidth","getHeight","Math","floor","devicePlaces","graph","supergraph","Graph","g","rootNode","findOrCreate","measureDistance","_i","_a","child","slot","parentSlot","edge","childNode","redeem","res","gather","populate","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","find","bldg","edgeColor","lighten","mainColor","colorBase","clr","Red","a","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","map","closestBuildingByType","building","matchingSlot","compass_1","compass","closest","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","finalize","updateName","hasPlaceForDevice","nextDevicePlace","getDevices","fn","allSpaceFunctions","spaceFn","matched","unseenDevices","machines","machine","matchingDevice","deleteByValue","label","Actor","Building_1","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","MissionControlView_1","MissionControlView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","MineView_1","MineView","SurfaceRoadView_1","SurfaceRoadView","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","minBy","min","maxBy","max","sample","random","range","Array","fill","_val","idx","getVector","predicate","matching","elem","distance","flatSingle","concat","e","eachCons","b","drawLine","lineWidth","beginPath","moveTo","lineTo","strokeStyle","toRGBA","stroke","rectangle","filled","main","fillStyle","fillRect","strokeRect","Left","Up","Down","orientation","Error","PureValue","Power","Oxygen","Water","Shelter","Hope","Joy","Wisdom","Wealth","Beauty","Wonder","emptyMarket","supply","demand","availableCapacity","market","sumMarkets","ea","eb","newMarket","sa","da","_b","ResourceBlock","Food","Ore","Data","Meal","Hypothesis","Mineral","Alloy","blockColors","Green","Blue","Yellow","Violet","LightGray","blockColor","block","desaturate","t","setPrototypeOf","__proto__","constructor","create","__assign","assign","arguments","MachineOperation","Economy_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","Orange","Work","SpawnCitizen","CollectResource","CollectMeals","CollectData","Machine","description","consumes","produces","generationTime","workTime","capacity","behavior","image","prereqs","economy","forDome","CommandCenter","OxygenExtractor","WaterCondensingMachine","SolarCell","StudyMachine","Desk","Workstation","Bookshelf","Fridge","Stove","Bed","Houseplant","ResearchServer","Orchard","AlgaeVat","Cabin","Arbor","Botany","CloningVat","productionTime","Fabricator","MiningDrill","Megafabricator","Preserve","Microcity","LogicCrystal","allMachines","Machine_1","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","Structure","view","zoom","dominantColor","Gray","Corridor","Ladder","MainTunnel","second","MissionControl","SurfaceRoad","fifth","first","Dome","CommonArea","SmallRoomThree","SmallRoomTwo","SmallDome","MediumRoom","LargeRoom","HugeRoom","SmallDomeThree","MidDome","LargeDome","Arcology","allStructures","majorUnit","fourth","seventh","minorUnit","minorScale","Structure_1","Device","initialPos","product","imageLoaded","inUse","Image","onload","src","drawImage","bx","by","produced","index","blockSize","interact","citizen","waitToUse","pop","progressBar","sent","carry","carrying","resource","drop","console","warn","setTimeout","snap","some","position","empty","edges","edgesInverse","isEmpty","node","newNode","contains","testNode","includes","measure","tolerance","dfs","dst","indexOf","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","path","steps","srcIndex","reverse","Resources_1","Game","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","start","loader","Loader","key","Resources","addResource","citizenSpeed","Engine","_1","SmallDomeThreeView","w","BigDomeView","HugeRoomView","floorHeight","LargeRoomView","MediumRoomView","MidDomeView","SmallRoomThreeView","EconomicValue","add","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","updateView","updatedEconomy","ResourceListEntry","resourceBlock","icon","credit","amt","ResourceListEntry_1","ResourcesList","DarkGray","entries","rx","ry","entry","increment","ResourcesList_1","EconomyView_1","StatusAnalysisView","h","brand","ty","fontStyle","FontStyle","Italic","version","resources","popLabel","messageLabel","incrementResource","setMessage","showEconomy","showPopCap","cap","StatusAnalysisView_1","Hud","game","onBuildingSelect","onMachineSelect","canvasWidth","canvasHeight","restrictConstruction","comprehendedStructures","builtStructures","comprehendedMachines","builtMachines","_makeStructurePalette","_makeMachinePalette","status","_structurePaletteElement","left","canvas","offsetLeft","top_1","offsetTop","style","top","_machinePaletteElement","top_2","resourceGathered","updateDetails","rebuildPalettes","updatePalettes","updateEconomy","updateMaxPop","maxPop","updateBuildingPalette","updateMachinePalette","structuresForPalette","every","prereq","parentElement","removeChild","bldgs","availableMachines","findAllDevices","machinesForPalette","document","createElement","border","body","appendChild","_paletteButton","buttonFactory","onclick","sort","btn","bg","fg","paletteButton","textContent","display","fontFamily","fontWeight","padding","textTransform","background","onmouseover","saturate","onmouseleave","UIActor","originSlot","pickingOrigin","maxHeight","getTop","setHeight","drawShape","xoff","yoff","bezierCurveTo","rect","halfWidth","slotHeights","heights","y0","y1","btm","lst","right","slotCount","theSlots","Device_1","machine_1","place","theDevice","slotY","flagX","flagY","arc","PI","closePath","leftSlot","rightSlot","originX","newCursor","setWidth","abs","SpaceFunction","LivingQuarters","Barracks","Kitchen","LifeSupportPod","Retreat","CloneMatrix","ReadingRoom","Library","Study","Lab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Farm","Factory","ex","Player","Game_1","Citizen","walkSpeed","workInProgress","now","Date","getTime","progress","workStarted","workDuration","px","pw","py","vel","glideTo","actions","asPromise","duration","Promise","resolve","reject","pathTo","pathBetween","all","work","item_1","sink","closestDevice","log","source","Citizen_1","Population","citizens","increase","home","NavigationTree","seekPath","origin","dest","closestNode","NavigationTree_1","Colony","currentlyConstructing","navTree","placeBuilding","buildNavTree","structureTypes","st","destination","srcNode","destNode","closestDeviceByType","machineTypes","ctrl","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","yBase","peak","mtnWidth","PlanetBackground","PlanetBackground_1","Colony_1","Population_1","Planet","hud","depth","createLayer","layerHeight","population","theLayer","theEconomy","popularDemand","theEconomyWithoutPeople","values","val","Planet_1","player_1","Hud_1","SmallRoomThreeView_1","MidDomeView_1","MediumRoomView_1","LargeRoomView_1","HugeRoomView_1","BigDomeView_1","SmallDomeThreeView_1","Construct","dragging","defaultMessage","startConstructing","player","prepareNextBuilding","camera","onActivate","input","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","Esc","onDeactivate","off","nextMissingRequiredStructure","requiredStructures","requiredStructureList","actualStructureNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","anotherBuilding","assembleBuildingFromStructure","structureViews","Scene","World","colors","Cyan","Vermillion","sword","Sword","Texture","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([57,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.sixth; break;\r\n        case DeviceSize.Large: sz = 2 * major.eighth; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, drawRect, deleteByValue } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0 //.1\r\n\r\n    nameLabel: Label\r\n    levelLabel: Label\r\n\r\n    built: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    level: number = 1\r\n\r\n    private devices: Device[] = []\r\n\r\n    constructor(pos: Vector, public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            // console.log(\"HOVER ON\", { building: this })\r\n        })\r\n\r\n        // this.on('pointerdown', () => {\r\n        //     console.log(\"CLICKED BUILDING\", { building: this })\r\n        //     this.levelUp();\r\n        // })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        // this.nameLabel.fontSize = 11\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.levelLabel = new Label(`Lvl. ${this.level}`, 0, 0, 'Helvetica')\r\n        this.levelLabel.fontSize = 6\r\n        this.levelLabel.color = Color.White.darken(0.2)\r\n    }\r\n\r\n    levelUp() {\r\n        this.level += 1\r\n        this.levelLabel.text = `Lvl. ${this.level}`\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        this.devices.forEach(device => device.draw(ctx, delta))\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n            // this.levelLabel.text = `Lvl. ${this.level}`\r\n            // this.levelLabel.pos = this.getCenter()\r\n            // this.levelLabel.pos.y += 10\r\n            // this.levelLabel.pos.x -= ctx.measureText(this.structure.name).width / 4\r\n            // this.levelLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let debug = false;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = false\r\n        if (showDevicePlaces && this.devicePlaces().length > 0) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    1,\r\n                    Color.White,\r\n                    false\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n        let tryProduce = this.built;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.produce(this.step));\r\n        }\r\n        this.step += 1\r\n    }\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public populate(pos: Vector) {\r\n        this.planet.populate(pos) //this.pos)\r\n    }\r\n\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        this.updateName()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices\r\n    }\r\n\r\n    private updateName() {\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let matched = true;\r\n            let unseenDevices = this.devices.slice() // clone?\r\n            spaceFn.machines.forEach(machine => {\r\n                let matchingDevice = unseenDevices.find(d => d.machine instanceof machine)\r\n                if (!matchingDevice) { matched = false; }\r\n                unseenDevices = deleteByValue(unseenDevices, matchingDevice)\r\n            })\r\n            return matched;\r\n        })\r\n        if (fn) {\r\n            this.nameLabel.text = fn.label\r\n        }\r\n    }\r\n}","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { MissionControlView } from './MissionControlView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { MineView } from './MineView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\n\r\n\r\n// import { LivingQuartersView } from './LivingQuartersView';\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView, // as AccessTunnelView,\r\n    CommonAreaView,\r\n    DomeView,\r\n    MissionControlView,\r\n    TunnelView,\r\n    ArcologyView,\r\n    LadderView,\r\n    MineView,\r\n    SurfaceRoadView,\r\n\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  // if (edgeWidth > 0) {\r\n  //   let edge = Color.White;\r\n  //   ctx.fillStyle = edge.toRGBA();\r\n  //   ctx.fillRect(x, y, width, height)\r\n  // }\r\n\r\n  if (filled) {\r\n    let main = color;\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x, //+ edgeWidth,\r\n      y, //+ edgeWidth,\r\n      width, // - edgeWidth * 2,\r\n      height // - edgeWidth * 2\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White;\r\n    ctx.strokeStyle = `${edgeWidth}px solid ${edge.toRGBA()}`;\r\n    // ctx.strokeStyle = Stroke.So\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return market[value].supply - market[value].demand\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply, //: ea[value].supply + eb[value].supply,\r\n            demand, //: ea[value].demand + eb[value].demand\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Food = 'Food',\r\n    Ore = 'Ore',\r\n    Data = 'Data',\r\n    // derived\r\n    Meal = 'Meal',\r\n    Hypothesis = 'Hypothesis',\r\n    Mineral = 'Mineral',\r\n    Alloy = \"Alloy\"\r\n}\r\n\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Food: Color.Green,\r\n    Data: Color.Blue,\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(0.2),\r\n    Hypothesis: Color.Violet.darken(0.4),\r\n    Ore: Color.Red.darken(0.5),\r\n\r\n    Alloy: Color.LightGray.darken(0.2),\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    //Color.Violet\r\n    //switch(block) {\r\n    //    case ResourceBlock.Food: baseColor = Color.Green; break\r\n    //    case ResourceBlock.Ore:  baseColor = Color.Red; break\r\n    //    case ResourceBlock.Data: baseColor = Color.Blue; break\r\n    //    case ResourceBlock.Meal: baseColor = Color.Yellow; break\r\n    //}\r\n    return baseColor.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { Color, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\n\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n}\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nexport enum MachineOperation {\r\n    // generic functioning: consuming a block to produce a new block\r\n    Work,\r\n    // more interesting functions\r\n    SpawnCitizen,\r\n    CollectResource,\r\n    CollectMeals,\r\n    CollectData\r\n}\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n\r\n    size: DeviceSize = DeviceSize.Small\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n\r\n    // need to stop using this both for work time and 'generation' time\r\n    // productionTime: number = 500\r\n    generationTime: number = 3000\r\n    workTime: number = 10000\r\n    capacity: number = 2\r\n\r\n    behavior: MachineOperation = MachineOperation.Work\r\n\r\n    image = images.vat\r\n\r\n    prereqs: (typeof Machine)[] = []\r\n\r\n    economy: Economy = emptyMarket()\r\n\r\n    forDome: boolean = false\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command'\r\n    description = 'gather resources...'\r\n    behavior = MachineOperation.CollectResource\r\n    image = images.bench\r\n\r\n    size = DeviceSize.Medium\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 1, demand: 0 },\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        // Shelter: { supply: 1, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H20 Condenser'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 1, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n/// small subsurface\r\nexport class StudyMachine extends Machine {\r\n    consumes = ResourceBlock.Hypothesis\r\n    produces = ResourceBlock.Data\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n\r\n    // color = Blue\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    prereqs = [ Bookshelf ]\r\n    color = Blue\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    produces = ResourceBlock.Hypothesis\r\n    image = images.bookshelf\r\n    prereqs = [ OxygenExtractor, Desk ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    behavior = MachineOperation.CollectMeals\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    consumes = ResourceBlock.Food\r\n    produces = ResourceBlock.Meal\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 2, demand: 0 },\r\n    }\r\n}\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    prereqs = [ Bed ]\r\n    produces = ResourceBlock.Food\r\n    capacity = 1\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n// medium\r\n\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    produces = ResourceBlock.Hypothesis\r\n    behavior = MachineOperation.CollectData\r\n    image = images.server\r\n    prereqs = [Bookshelf]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   produces = ResourceBlock.Food\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   consumes = ResourceBlock.Food\r\n   produces = ResourceBlock.Meal\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    produces = ResourceBlock.Food\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    produces = ResourceBlock.Food\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    produces = ResourceBlock.Food\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'grow some replacements'\r\n    behavior = MachineOperation.SpawnCitizen \r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    consumes = ResourceBlock.Ore\r\n    produces = ResourceBlock.Mineral\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n    // ...\r\n}\r\n\r\n//export class HoloProjector extends Machine {\r\n//    name = 'Holo Projector'\r\n//    size = DeviceSize.Medium\r\n//    color = Violet\r\n//}\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    produces = ResourceBlock.Ore\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n//\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n]","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    dominantColor: Color = Color.Gray\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n    productionTime: number = 500\r\n\r\n    // constructor(public origin: Vector = new Vector(0, 0)) { }\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n    // slotSize\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MissionControl ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MissionControl ],\r\n        [Orientation.Right]: [  Dome, MissionControl ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    // name: string = 'Biodome';\r\n    description: string = 'Biome sweet biome';\r\n    // dominantColor = Color.Green\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.eighth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n        // Cabin, CookingFire\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n    //    Stove,\r\n    //    Bed,\r\n    //    Desk,\r\n    //    Bookshelf,\r\n    //    Fridge,\r\n    //    Workstation,\r\n    //    Houseplant,\r\n    //]\r\n\r\n    prereqs = [\r\n        // Dome \r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n    // two small slots\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.third\r\n    // two medium slots...\r\n    \r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 6 * major.eighth\r\n    height = 4 * major.fifth\r\n\r\n    // two big slots?\r\n    machines = largeBelow\r\n    //machines = [\r\n    //    MiningDrill,\r\n    //    Megafabricator,\r\n    //    // Preserve,\r\n    //]\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n    // machines = [ LogicCrystal ] // ultrafab...\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.eighth\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 6 * major.eighth\r\n    height = 5 * major.eighth\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    //machines = [\r\n    //    Cabin,\r\n    //    Orchard,\r\n    //    Arbor,\r\n    //    // Campfir\r\n    //]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 8 * major.eighth\r\n    height = 6 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n    //machines = [\r\n    //    Microcity\r\n    //]\r\n}\r\n\r\n//////\r\n\r\nexport class MissionControl extends Structure {\r\n    name: string = 'Mission Control';\r\n    description: string = 'Keeping everything on track';\r\n    view: string = 'MissionControlView';\r\n    width: number = 6 * major.eighth\r\n    height: number = 1 * major.sixth\r\n    zoom = 0.1\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = [ CommandCenter ]\r\n}\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0 //.5\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine, MachineOperation } from \"../models/Machine\";\r\nimport { Building, CommonAreaView } from \"./Building\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { SmallRoomThree, SmallRoomTwo, MediumRoom, SmallDome, MidDome, LargeRoom, allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\n\r\nexport class Device extends Actor {\r\n    product: ResourceBlock[] = []\r\n    // capacity: number = 4\r\n\r\n    nameLabel: Label\r\n\r\n    image: any\r\n    imageLoaded: boolean = false\r\n\r\n    building: Building // set once built?\r\n\r\n    inUse: boolean = false\r\n\r\n    constructor(\r\n        // public building: Building,\r\n        public machine: Machine,\r\n        private initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            // machine.height,\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = function () {\r\n             this.imageLoaded = true\r\n        }\r\n        this.image.src = machine.image\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        // super.draw(ctx, delta)\r\n        ctx.drawImage(\r\n            this.image,\r\n            this.pos.x - this.getWidth() / 2,\r\n            this.pos.y - this.getHeight() / 2 - 10,\r\n            this.getWidth(), this.getHeight()\r\n        )\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= 10 //ctx.measureText(this.machine.name).width / 2\r\n            this.nameLabel.pos.y += 8 + this.getHeight()/2\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let bx = this.x - this.getWidth()/2 + 5, by = this.y - 23\r\n        let blockSize = 5\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).desaturate(0.3).lighten(0.2).toRGBA();\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get produces()       { return this.machine.produces }\r\n    get consumes()       { return this.machine.consumes }\r\n    get workTime()       { return this.machine.workTime }\r\n    get generationTime() { return this.machine.generationTime }\r\n    // get productionTime() { return this.machine.productionTime }\r\n    get capacity()       { return this.machine.capacity }\r\n\r\n    async interact(citizen: Citizen) {\r\n        if (this.inUse) {\r\n            citizen.waitToUse(this)\r\n            return\r\n        }\r\n\r\n        if (this.product.length > 0) {\r\n            this.product.pop()\r\n            this.inUse = true\r\n            await citizen.progressBar(500) //this.productionTime)\r\n            this.inUse = false\r\n            citizen.carry(this.produces)\r\n        } else {\r\n            if (this.consumes && citizen.carrying === this.consumes) {\r\n                this.inUse = true\r\n                await citizen.progressBar(this.workTime)\r\n                citizen.carry(this.produces)\r\n                this.inUse = false\r\n            }\r\n        }\r\n\r\n        if (this.machine.behavior === MachineOperation.Work) {\r\n            // ...\r\n\r\n        } else if (this.machine.behavior === MachineOperation.CollectResource) {\r\n            // generic redeem..\r\n            let resource = citizen.drop()\r\n            if (resource) {\r\n                this.building.redeem(resource)\r\n            }\r\n        } else if (this.machine.behavior === MachineOperation.CollectMeals) {\r\n            // store a meal...\r\n            if (citizen.carrying === ResourceBlock.Meal) {\r\n                let resource = citizen.drop()\r\n                if (resource) {\r\n                    this.building.redeem(resource)\r\n                }\r\n            }\r\n        } else if (this.machine.behavior === MachineOperation.CollectData) {\r\n            // store research\r\n            if (citizen.carrying === ResourceBlock.Data) {\r\n                let resource = citizen.drop()\r\n                if (resource) {\r\n                    this.building.redeem(resource)\r\n                }\r\n            }\r\n        } else {\r\n            console.warn(\"no handler for this interaction\", { device: this })\r\n        }\r\n    }\r\n\r\n    public produce(step: number) {\r\n        if (step % this.generationTime === 0) {\r\n            if (this.machine.behavior === MachineOperation.Work) {\r\n\r\n                if (this.produces && !this.consumes && this.product.length < this.capacity) {\r\n                    this.product.push(this.produces)\r\n                }\r\n            } else if (this.machine.behavior === MachineOperation.SpawnCitizen) {\r\n                setTimeout(() => this.building.populate(this.pos), 100)\r\n            }\r\n        }\r\n    }\r\n\r\n    // todo only snap when close enough? try to prevent some mis-clicks?\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            // hmmm\r\n            allStructures,\r\n            // machines count < device slots count\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        if (bldg) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n            //devicePlaces()[\r\n            //    this.building.devices.length\r\n            //]\r\n        }\r\n\r\n        return !!bldg;\r\n    }\r\n\r\n    finalize() {\r\n        // this.building.devices.push(this)\r\n    }\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 100\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() { //loader: ex.Loader) {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    // device nodes are huge sized...\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    // device nodes are large sized...\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    // device nodes are medium sized...\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 20 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n        let ds = [\r\n            new Vector(x - w / 2, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w / 2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor } from \"excalibur\";\r\nimport { Economy, PureValue } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n\r\n        let index = 0\r\n        for (let value in PureValue) {\r\n            let valueLabel: EconomicValue =  new EconomicValue(value, (index++ * 34), 0)\r\n            this.valueLabels[value] = valueLabel\r\n            this.add(valueLabel)\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value in PureValue) {\r\n            let { demand, supply } = market[value];\r\n            this.valueLabels[value].setCount(supply-demand)\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 6, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            // non-accruable\r\n            [ResourceBlock.Food]: null,\r\n            [ResourceBlock.Hypothesis]: null,\r\n            [ResourceBlock.Ore]: null,\r\n\r\n            // displayed/accruable\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n\r\n            // derived/accurable\r\n            [ResourceBlock.Alloy]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0, Color.DarkGray.darken(0.8));\r\n        let rx0 = 0, ry0 = -2.5;\r\n        let resources = [ResourceBlock.Meal, ResourceBlock.Data, ResourceBlock.Mineral];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0 + index * 16, ry = ry0 + index * 0;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        // console.log(\"INCREMENT\", { resource })\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n\r\n    constructor(market: Economy, w: number = 10000, h: number = 28) {\r\n        super(0,0, w, h, Color.DarkGray.darken(0.8));\r\n\r\n        let ty = 12\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+2)\r\n        brand.fontSize = 12\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.0.1\", 48, ty + 2)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(80, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 200, ty)\r\n        this.add(this.economy)\r\n\r\n        this.popLabel = new Label(\"\", 900, ty, 'Helvetica')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 1000, ty, 'Helvetica')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.add(this.messageLabel)\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n    \r\n}\r\n","import { Label, UIActor, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, SmallRoomThree, SmallRoomTwo, MediumRoom, MidDome, SmallDome, LargeRoom, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, sumMarkets, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { Desk, Bookshelf, Machine, CloningVat, WaterCondensingMachine, OxygenExtractor, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Cabin, Orchard, SolarCell, Megafabricator, Arbor, Fabricator, MiningDrill, Preserve, Workstation, Houseplant, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\n\r\nexport class Hud extends UIActor {\r\n    private restrictConstruction: boolean = false\r\n    private status: StatusAnalysisView\r\n    private _structurePaletteElement: HTMLDivElement\r\n    private _machinePaletteElement: HTMLDivElement\r\n\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n\r\n    comprehendedStructures: (typeof Structure)[] = []\r\n    builtStructures: (typeof Structure)[] = []\r\n\r\n    static machinesForPalette = allMachines\r\n\r\n    comprehendedMachines: (typeof Machine)[] = []\r\n    builtMachines: (typeof Machine)[] = []\r\n\r\n    constructor(private game: Game, protected onBuildingSelect = null, protected onMachineSelect = null) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n        this._makeStructurePalette(onBuildingSelect)\r\n        this._makeMachinePalette(onMachineSelect)\r\n        this.status = new StatusAnalysisView(emptyMarket());\r\n        this.add(this.status)\r\n    }\r\n\r\n    setMessage(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this._structurePaletteElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._structurePaletteElement.style.left = `${left + 20}px`;\r\n            this._structurePaletteElement.style.top = `${top + 35}px`;\r\n        }\r\n        if (this._machinePaletteElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._machinePaletteElement.style.left = `${left + 20}px`;\r\n            this._machinePaletteElement.style.top = `${top + 350}px`;\r\n        }\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true) {\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        this.comprehendedStructures = Hud.structuresForPalette\r\n        if (this.restrictConstruction) {\r\n            this.builtStructures =\r\n                Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n            this.comprehendedStructures = this.comprehendedStructures.filter((structure: typeof Structure) => {\r\n                let s = new structure()\r\n                let prereqs: (typeof Structure)[] = s.prereqs\r\n                return prereqs.every((prereq: (typeof Structure)) => {\r\n                    let built = this.builtStructures.some((s: (typeof Structure)) => s === prereq)\r\n                    return built\r\n                })\r\n            })\r\n        }\r\n        this._structurePaletteElement.parentElement.removeChild(this._structurePaletteElement)\r\n        this._makeStructurePalette(this.onBuildingSelect)\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let bldgs = colony.buildings\r\n        let availableMachines = flatSingle(bldgs.map(b => b.structure.machines))\r\n        let devices = colony.findAllDevices()\r\n        this.builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine))\r\n        this.comprehendedMachines = Hud.machinesForPalette.filter((machine: typeof Machine) => {\r\n            let canBuild = availableMachines.includes(machine);\r\n            return canBuild && (new machine()).prereqs.every((prereq: (typeof Machine)) => {\r\n                return this.builtMachines.some((m: (typeof Machine)) => m === prereq)\r\n            })\r\n\r\n        })\r\n        this._machinePaletteElement.parentElement.removeChild(this._machinePaletteElement)\r\n        this._makeMachinePalette(this.onMachineSelect)\r\n    }\r\n\r\n\r\n    protected _makeStructurePalette(fn: (Structure) => any) {\r\n        this._structurePaletteElement = document.createElement('div') \r\n        this._structurePaletteElement.style.position = 'absolute'\r\n        this._structurePaletteElement.style.border = '1px solid white'\r\n        document.body.appendChild(this._structurePaletteElement)\r\n        this.comprehendedStructures\r\n        .map(structure => new structure())\r\n        .forEach((structure: Structure) => {\r\n            let label = structure.name\r\n            if (!this.builtStructures.map(s => new s().name).includes(structure.name)) {\r\n                label += ' *';\r\n            }\r\n            let clr = structure.dominantColor\r\n            let _paletteButton = this.buttonFactory(label, clr);\r\n            this._structurePaletteElement.appendChild(\r\n                _paletteButton\r\n            )\r\n            if (fn) {\r\n                _paletteButton.onclick = () => {\r\n                    fn(structure) \r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    protected _makeMachinePalette(fn: (Machine) => any) {\r\n        this._machinePaletteElement = document.createElement('div')\r\n        this._machinePaletteElement.style.position = 'absolute'\r\n        this._machinePaletteElement.style.border = '1px solid white'\r\n        document.body.appendChild(this._machinePaletteElement)\r\n\r\n        this.comprehendedMachines\r\n            .map(Machine => new Machine())\r\n            .sort((a,b) => a.color > b.color ? -1 : 1)\r\n            .forEach(machine => {\r\n                let label = machine.name\r\n                if (!this.builtMachines.map(m => new m().name).includes(machine.name)) {\r\n                    label += ' *'\r\n                }\r\n                let clr = machine.color\r\n                let btn = this.buttonFactory(label, clr)\r\n                this._machinePaletteElement.appendChild(btn)\r\n                if (fn) {\r\n                    btn.onclick = () => { fn(machine) }\r\n                }\r\n            })\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.6).desaturate(0.5).clone()\r\n        bg.a = 0.8\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone()\r\n        let paletteButton = document.createElement('button');\r\n\r\n        paletteButton.textContent = label;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '9pt';\r\n\r\n        paletteButton.style.fontFamily = 'Helvetica';\r\n        paletteButton.style.fontWeight = '600';\r\n        paletteButton.style.padding = '1px';\r\n        paletteButton.style.width = '160px';\r\n        paletteButton.style.textTransform = 'uppercase'\r\n        paletteButton.style.border = '1px solid rgba(255,255,255,0.08)'\r\n\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA()\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA()\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA()\r\n        }\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA()\r\n            paletteButton.style.color = fg.toRGBA()\r\n        }\r\n\r\n        return paletteButton;\r\n    }\r\n}","import { CommonAreaView } from '.'\r\nimport { Vector } from 'excalibur';\r\n// import { Corridor, Refinery, Mine } from '../../models/Structure';\r\n\r\nexport class MineView extends CommonAreaView {\r\n    floorHeight = 150\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    // validConnectingStructures() { return [ Corridor, Mine, Refinery ]}\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    // edgeWidth = 1\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2 // - 20\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        // super.draw(ctx, delta)\r\n\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        // ctx.bezierCurveTo(-3 + xoff, 514 + yoff, 1 + xoff, 406 + yoff, 1 + xoff, 391 + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { MissionControl } from \"../../models/Structure\";\r\nimport { range, eachCons, measureDistance, drawRect } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n    // edgeWidth = 0.2\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y) //, Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        // connect node to first slot...\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            // we're determining depth of tunnel\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MissionControlView extends Building {\r\n    hideBox = true\r\n\r\n    devicePlaces() {\r\n        return this.nodes().map(n => {\r\n            n.y -= 20\r\n            return new DevicePlace(n, DeviceSize.Medium)\r\n        }) \r\n    }\r\n\r\n    afterConstruct() {\r\n        // build devices?\r\n        let { machines } = this.structure;\r\n        if (machines && machines.length > 0) {\r\n            let machine = new machines[0]();\r\n            this.devicePlaces().forEach(place => {\r\n                let theDevice = new Device(machine, place.position)\r\n                this.addDevice(theDevice)\r\n                // this.devices.push(theDevice)\r\n                // theDevice.building = this;\r\n                // this.add(theDevice)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2 // + 1\r\n    }\r\n\r\n    //async interact(citizen: Citizen) {\r\n    //}\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor();\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n        // y is going to be surface height\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        // could draw a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawRect } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 10\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n    // maybe you can set height AND width of common area view??\r\n    // maybe just width...\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n\r\n        drawRect(ctx, this.aabb(), 0.125, this.processedColor())\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight,\r\n              width: this.getWidth(), height: this.floorHeight },\r\n              0,\r\n              this.colorBase().lighten(0.7)\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        // top slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        // bottom slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)) //-16)\r\n        ];\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 10 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine } from './Machine';\r\n\r\nexport class SpaceFunction {\r\n    static label: string = '(generic)';\r\n    static machines: (typeof Machine)[] = [];\r\n}\r\n\r\nclass LivingQuarters extends SpaceFunction {\r\n    static label = 'Living Quarters'\r\n    static machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n    static label = 'Barracks'\r\n    static machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nclass Kitchen extends SpaceFunction {\r\n    static label = 'Kitchen'\r\n    static machines = [ Stove, Fridge ]\r\n}\r\n\r\nclass LifeSupportPod extends SpaceFunction {\r\n    static label = 'Life Support Module'\r\n    static machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n    static label = 'Retreat'\r\n    static machines = [ Cabin, Cabin ]\r\n}\r\n\r\nclass CloneMatrix extends SpaceFunction {\r\n    static label = 'Clone Matrix'\r\n    static machines = [ CloningVat, CloningVat ] //\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n    static label = 'Reading Room'\r\n    static machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nclass Library extends SpaceFunction {\r\n    static label = 'Library'\r\n    static machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n}\r\n\r\nclass Study extends SpaceFunction {\r\n    static label = 'Study'\r\n    static machines = [ StudyMachine, Bookshelf ]\r\n}\r\n\r\nclass Lab extends SpaceFunction {\r\n    static label = 'Lab'\r\n    static machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nclass Archive extends SpaceFunction {\r\n    static label = 'Archive'\r\n    static machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n    static label = 'Arboretum'\r\n    static machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n    static label = 'Algae Farm'\r\n    static machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nclass SolarArray extends SpaceFunction {\r\n    static label = 'Solar Array'\r\n    static machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nclass Workshop extends SpaceFunction {\r\n    static label = 'Workshop'\r\n    static machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\n// 3 house plants => nursery?\r\nclass Nursery extends SpaceFunction {\r\n    static label = 'Nursery'\r\n    static machines = [ Houseplant, Houseplant, Houseplant ]\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n    static label = 'Farm'\r\n    static machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n    static label = 'Factory'\r\n    static machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    Lab,\r\n]","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons } from \"../Util\";\r\n// import { Machine, Stove, ExperimentBench, MineralProcessor, CommandCenter, Orchard, MiningDrill, Bookshelf, CookingFire, Cabin } from \"../models/Machine\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { MachineOperation } from \"../models/Machine\";\r\nimport { worker } from \"cluster\";\r\n// import { Machine, Stove, CommandCenter } from \"../models/Machine\";\r\n\r\nexport class Citizen extends Actor {\r\n\r\n    walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock = null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    constructor(private device: Device, protected planet: Planet) {\r\n        super(device.x, device.y, Scale.minor.first, Scale.minor.third, Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = (now - this.workStarted) / this.workDuration //0.5\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            ctx.fillStyle = blockColor(this.carrying).toRGBA()\r\n            ctx.fillRect(this.x+4, this.y-3, 5, 5)\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            // draw progress bar?\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            // ctx.stroke(20)\r\n            ctx.strokeRect(px, py, pw, ph)\r\n\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n\r\n            this.vel.x += (Math.random())-0.5 // * 10.0)\r\n        }\r\n\r\n        let debugPath = false\r\n        if (this.path && debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 10\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    carry(c: ResourceBlock) { //c: Color) {\r\n        this.carrying = c;\r\n    }\r\n\r\n    drop(): ResourceBlock {\r\n        if (this.carrying) {\r\n            let c = this.carrying; //.clone();\r\n            this.carrying = null;\r\n            return c\r\n        }\r\n        return null\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        // console.log(\"PROGRESS BAR\")\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        // console.log(\"PROGRESS BAR DONE!\")\r\n        this.workInProgress = false\r\n    }\r\n\r\n    async pathTo(building: Building) { //}, onArrival: (Building) => any) {\r\n        // let building = this.planet.closestBuildingByType(this.pos, structure)\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            path.pop()\r\n            path.shift()\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = null\r\n            // onArrival(building);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    waitToUse(device) {\r\n        setTimeout(() => device.interact(this), 250)\r\n    }\r\n\r\n    async work() {\r\n        if (this.carrying) {\r\n            let item: ResourceBlock = this.carrying;\r\n            let sink: Device = this.planet.closestDevice(this.pos,\r\n                [],\r\n                (device) =>\r\n                    device.machine.consumes === item ||\r\n                    ((\r\n                        item === ResourceBlock.Meal ||\r\n                        item === ResourceBlock.Data ||\r\n                        item === ResourceBlock.Mineral\r\n                    ) && device.machine.behavior === MachineOperation.CollectResource) ||\r\n                    item === ResourceBlock.Meal && device.machine.behavior === MachineOperation.CollectMeals ||\r\n                    item === ResourceBlock.Data && device.machine.behavior === MachineOperation.CollectData\r\n            )\r\n\r\n            if (sink) {\r\n                await this.pathTo(sink.building)\r\n                await this.glideTo(sink.pos)\r\n                await sink.interact(this)\r\n            } else {\r\n                console.log(\"nowhere to deliver it\", this.carrying)\r\n            }\r\n        } else {\r\n            let source: Device = this.planet.closestDevice(this.pos,\r\n                [],\r\n                // [ Cabin, Orchard, MiningDrill, Bookshelf ],\r\n                (d) => d.product.length > 0\r\n            )\r\n\r\n            if (source) {\r\n                await this.pathTo(source.building)\r\n                await this.glideTo(source.pos)\r\n                await source.interact(this)\r\n            } else {\r\n                console.log(\"i guess i can try again? (sleep for a bit first)\")\r\n                await new Promise((resolve, reject) => setTimeout(resolve, 150));\r\n            }\r\n        }\r\n\r\n        setTimeout(() => this.work(), 100)\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(home: Device) {\r\n        let citizen = new Citizen(home, this.planet);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","module.exports = __webpack_public_path__ + \"cffe40698a3b47b52ca0ff90a2c86ddf.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"86e09b7a9e4997af44c45206eb8694ad.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure, MissionControl } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = false\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findAllDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d)\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices() {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\n\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n\r\n    constructor(\r\n        public hud: Hud,\r\n        public color: Color,\r\n        public width: number = 2000000,\r\n        public depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, width, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2\r\n        // crust\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        let devices = this.colony.findAllDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(home)\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        // let econ = this.economy\r\n        let devices = this.colony.findAllDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [ PureValue.Shelter, PureValue.Water, PureValue.Oxygen ]\r\n        return Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        )\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n}","import { Scene, Input, Vector } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MissionControl, MainTunnel, Corridor, SurfaceRoad, SmallDome, SmallRoomTwo, SmallDomeThree } from \"../models/Structure\";\r\nimport { Building, DomeView, CorridorView, CommonAreaView, TunnelView, MissionControlView, LadderView, ArcologyView, } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { SurfaceRoadView } from \"../actors/Building/SurfaceRoadView\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { SmallRoomThreeView } from \"../actors/Building/SmallRoomThreeView\";\r\nimport { MidDomeView } from \"../actors/Building/MidDomeView\";\r\nimport { MediumRoomView } from \"../actors/Building/MediumRoomView\";\r\nimport { LargeRoomView } from \"../actors/Building/LargeRoomView\";\r\nimport { HugeRoomView } from \"../actors/Building/HugeRoomView\";\r\nimport { BigDomeView } from \"../actors/Building/BigDomeView\";\r\nimport { SmallDomeThreeView } from \"../actors/Building/SmallDomeThreeView\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    static structureViews: { [key: string]: typeof Building } = {\r\n        CorridorView,\r\n        LadderView,\r\n        TunnelView,\r\n        SurfaceRoadView,\r\n\r\n        DomeView, // small dome 2\r\n        SmallDomeThreeView,\r\n        MidDomeView,\r\n        BigDomeView,\r\n\r\n        MissionControlView,\r\n        // SmallRoomTwoView, [ none, same as common area? ]\r\n        SmallRoomThreeView,\r\n\r\n        CommonAreaView,\r\n        MediumRoomView,\r\n        LargeRoomView,\r\n        HugeRoomView,\r\n\r\n        ArcologyView,\r\n    }\r\n    ////\r\n    static requiredStructureList: Array<typeof Structure> = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        // SmallDome,\r\n        SmallDomeThree,\r\n        MainTunnel,\r\n        Corridor,\r\n        SmallRoomTwo,\r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, false)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n\r\n        this.hud = new Hud(game, (structure) => {\r\n            // console.log('would build', { structure })\r\n            this.startConstructing(structure)\r\n        }, (device) => {\r\n            this.startConstructing(device)\r\n        });\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(this.hud, game.world.color);\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(2, 10000)\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    // console.warn(\"would snap device in place!\")\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                // cancel building in progress?\r\n                this.planet.colony.currentlyConstructing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingRequiredStructure(): Structure {\r\n        let requiredStructures: Structure[] = Construct.requiredStructureList.map(s => new s())\r\n        let actualStructureNames: string[] = this.buildings.map(building => building.structure.name)\r\n\r\n        return requiredStructures.find(structure => !actualStructureNames.includes(structure.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } //else {\r\n            // this.hud.setMessage(`Welcome to OSIRIS!`)\r\n        // }\r\n    }\r\n\r\n    startConstructing(structureOrMachine: Structure | Machine, pos: Vector = new Vector(0, 0)) {\r\n        \r\n        // console.log(\"START CONSTRUCTING\", { structureOrMachine })\r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            // structure.origin = pos // thread this out somehow??\r\n            this.hud.setMessage(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            this.camera.zoom(structure.zoom, 250)\r\n        } else if (structureOrMachine instanceof Machine) {\r\n            // setup machine?\r\n            let machine = structureOrMachine\r\n            // machine.origin = pos\r\n            this.hud.setMessage(`Install ${machine.name} (${machine.description})`)\r\n\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            this.camera.zoom(1.5, 250)\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // console.warn(\"would start constructing\", { theNextOne })\r\n            this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        device.snap(this.planet)\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(anotherBuilding.pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = Construct.structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Red, Color.Blue, Color.Green] // Color.Viridian, Color.Magenta, Color.Chartreuse];\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ). // Color.Rose //World.colors).\r\n        lighten(0.15).\r\n        desaturate(0.65) // sample([Color.Blue, Color.Rose,Color.Blue]).lighten(0.1).desaturate(0.8)\r\n//   colony: Colony = new Colony()\r\n\r\n  \r\n}","module.exports = __webpack_public_path__ + \"0f6ac78b40c6bc151aee01b517f49ca1.png\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\nconst bookshelf = require('./images/bookshelf.png');\r\n// const bookshelfSvg = require('./images/bookshelf-plain.svg');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword),\r\n\r\n    Bookshelf: new ex.Texture(bookshelf),\r\n\r\n    // BookshelfSVG: new ex.Texture(bookshelfSvg)\r\n}\r\n\r\nexport { Resources }\r\n","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\n// scenes\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}