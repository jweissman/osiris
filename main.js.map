{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/actors/Building/index.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/models/Structure.ts","webpack:///./src/Util.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Economy.ts","webpack:///./src/actors/Building/CloneMatrixView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Building/RefineryView.ts","webpack:///./src/actors/Building/StudyView.ts","webpack:///./src/actors/Building/PowerPlantView.ts","webpack:///./src/actors/Building/KitchenView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MineView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/LabView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/MissionControlView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/values/Scale.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","MissionControlView_1","MissionControlView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","CloneMatrixView_1","CloneMatrixView","LabView_1","LabView","LadderView_1","LadderView","MineView_1","MineView","Orientation","Left","Up","Right","Down","compass","flip","orientation","Error","excalibur_1","Economy_1","Scale_1","Orientation_1","major","Scale","minor","Structure","origin","Vector","this","description","view","width","height","zoom","consumes","produces","productionTime","connections","_a","Corridor","Ladder","MissionControl","_super","_this","arguments","third","SurfaceRoad","MainTunnel","__extends","second","eighth","Dome","ResourceBlock","Food","sixth","fifth","CloneMatrix","Kitchen","Laboratory","Study","CommonArea","first","Arcology","Hypothesis","Data","e","Meal","fourth","Mine","Ore","Refinery","Mineral","PowerPlant","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","eachCons","measureDistance","b","drawLine","ctx","lineWidth","Color","White","beginPath","moveTo","x","y","lineTo","strokeStyle","toRGBA","stroke","drawRect","rectangle","edgeWidth","color","edge","fillStyle","fillRect","main","Util_1","Graph_1","structure","planet","built","hover","showLabel","facing","hideBox","childrenBuildings","product","capacity","level","step","anchor","setup","traits","trait","Traits","OffscreenCulling","on","console","log","building","collisionType","CollisionType","PreventCollision","nameLabel","Label","levelLabel","fontSize","darken","levelUp","text","draw","delta","aabb","processedColor","forEach","produced","index","blockColor","desaturate","lighten","pos","getCenter","measureText","update","engine","produce","constrainCursor","clone","reshape","afterConstruct","handleClick","slots","nodes","getWidth","getHeight","graph","supergraph","Graph","g","rootNode","findOrCreate","_i","child","slot","parentSlot","childNode","interact","citizen","carry","pop","carrying","progressBar","sent","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","find","bldg","edgeColor","mainColor","colorBase","clr","Red","findSlot","validConnections","slotList","dir","validStructures","flipped","closestBuildingByType","matchingSlot","compass_1","warn","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","Actor","blockColors","Green","Blue","Yellow","Violet","block","t","setPrototypeOf","__proto__","constructor","create","spawnCitizen","setTimeout","populate","drawShape","xoff","yoff","h","w","bezierCurveTo","empty","edges","edgesInverse","isEmpty","node","newNode","contains","testNode","includes","measure","tolerance","dfs","src","dst","indexOf","union","otherGraph","edgeList","theEdges","_b","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","path","steps","srcIndex","reverse","Resources_1","Game","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","start","loader","Loader","key","Resources","addResource","citizenSpeed","Engine","_1","Structure_1","RefineryView","validConnectingStructures","StudyView","PowerPlantView","theSlots","slotY","leftSlot","rightSlot","KitchenView","SurfaceRoadView","ResourceListEntry","resourceBlock","icon","add","count","credit","amt","ResourceListEntry_1","ResourcesList","DarkGray","entries","resource","ry","entry","increment","ResourcesList_1","Hud","game","message","onBuildingSelect","canvasWidth","canvasHeight","label","_makePalette","resources","_paletteElement","left","canvas","offsetLeft","top_1","offsetTop","style","top","resourceGathered","document","createElement","position","border","body","appendChild","structuresForPalette","_paletteButton","buttonFactory","onclick","bg","fg","paletteButton","textContent","display","fontFamily","fontWeight","padding","textTransform","background","onmouseover","onmouseleave","UIActor","floorHeight","originSlot","pickingOrigin","maxHeight","getTop","setHeight","rect","halfWidth","slotHeights","heights","y0","y1","btm","lst","right","slotCount","drop","gather","flagX","flagY","arc","PI","closePath","originX","newCursor","setWidth","abs","ex","Player","Game_1","Citizen","walkSpeed","workInProgress","now","Date","getTime","progress","workStarted","workDuration","px","pw","py","strokeRect","vel","glideTo","actions","asPromise","duration","Promise","resolve","reject","walkTo","pathBetween","all","work","item","sinks","theSink","source","Citizen_1","Population","citizens","increase","home","NavigationTree","seekPath","dest","closestNode","NavigationTree_1","Colony","currentlyConstructing","navTree","placeBuilding","buildNavTree","structureTypes","some","structureType","destination","srcNode","destNode","ctrl","majorUnit","seventh","minorUnit","minorScale","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","saturate","yBase","peak","mtnWidth","PlanetBackground","PlanetBackground_1","Colony_1","Population_1","Planet","hud","depth","createLayer","layerHeight","population","size","theLayer","Planet_1","player_1","Hud_1","SurfaceRoadView_1","KitchenView_1","PowerPlantView_1","StudyView_1","RefineryView_1","Construct","dragging","startConstructing","player","prepareNextBuilding","camera","onActivate","input","pointers","primary","dragOrigin","currentBuilding","constrained","button","Input","PointerButton","placementValid","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","onDeactivate","off","nextMissingRequiredStructure","requiredStructures","requiredStructureList","actualStructureNames","nextMissing","theNextOne","spawnBuilding","anotherBuilding","assembleBuildingFromStructure","structureViews","Scene","structures","World","colors","Cyan","Vermillion","sword","Sword","Texture","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([39,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { MissionControlView } from './MissionControlView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { CloneMatrixView } from './CloneMatrixView';\r\nimport { LabView } from './LabView';\r\nimport { LadderView } from './LadderView';\r\nimport { MineView } from './MineView';\r\n\r\n\r\n// import { LivingQuartersView } from './LivingQuartersView';\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView, // as AccessTunnelView,\r\n    CommonAreaView,\r\n    DomeView,\r\n    MissionControlView,\r\n    TunnelView,\r\n    ArcologyView,\r\n    CloneMatrixView,\r\n    LabView,\r\n    LadderView,\r\n    MineView,\r\n\r\n}","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Vector } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\n\r\nconst { major, minor } = Scale\r\n\r\n\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n    productionTime: number = 500\r\n\r\n    constructor(public origin: Vector = new Vector(0, 0)) { }\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n}\r\n\r\nexport class MissionControl extends Structure {\r\n    name: string = 'Mission Control';\r\n    description: string = 'Keeping everything on track';\r\n    view: string = 'MissionControlView';\r\n    width: number = major.third\r\n    height: number = minor.third\r\n    zoom = 0.1\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n}\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MissionControl ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class Dome extends Structure {\r\n    name: string = 'Biodome';\r\n    description: string = 'Biome sweet biome';\r\n    produces = ResourceBlock.Food\r\n\r\n    view: string = 'DomeView';\r\n    width: number = major.sixth\r\n    height: number = major.third\r\n    zoom = 0.2\r\n    productionTime = 5000\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            Ladder,\r\n            CloneMatrix, Kitchen, Laboratory, Study, CommonArea \r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            Ladder,\r\n            CloneMatrix, Kitchen, Laboratory, Study, CommonArea \r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor, CloneMatrix, Kitchen, Laboratory, Study, CommonArea ],\r\n        [Orientation.Right]: [ Corridor, CloneMatrix, Kitchen, Laboratory, Study, CommonArea ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n}\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Arcology, Dome, MissionControl ],\r\n        [Orientation.Right]: [ Arcology, Dome, MissionControl ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class Laboratory extends CommonArea {\r\n    name: string = 'Lab'\r\n    description: string = 'learn some things'\r\n    consumes = ResourceBlock.Hypothesis\r\n    produces = ResourceBlock.Data\r\n    view: string = 'LabView'\r\n    width: number = major.sixth\r\n    height: number = major.fifth\r\n    productionTime = 6500\r\n}\r\n\r\n\r\nexport class Kitchen extends CommonArea {\r\n    name: string = 'Kitchen'\r\n    description: string = 'veg -> meals'\r\n    consumes = ResourceBlock.Food\r\n    produces = ResourceBlock.Meal\r\n    view: string = 'KitchenView'\r\n    width: number = major.fourth\r\n    height: number = major.fifth\r\n    productionTime = 2000\r\n}\r\n\r\n// a mine is maybe a wide structure that you\r\n// can gradually dig deeper??\r\nexport class Mine extends Structure {\r\n    name: string = 'Mine'\r\n    description: string = 'ore else'\r\n    produces = ResourceBlock.Ore\r\n    productionTime = 20000\r\n    view: string = 'MineView'\r\n    width: number = major.eighth // 20 * majorUnit\r\n    height: number = 3 * major.sixth //20 * majorUnit\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Mine, Refinery, Corridor ],\r\n        [Orientation.Right]: [ Mine, Refinery, Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n}\r\n\r\nexport class Study extends CommonArea {\r\n    name: string = 'Study'\r\n    description: string = 'reflect'\r\n    view: string = 'StudyView'\r\n    width = major.third\r\n    height = major.fifth\r\n    produces = ResourceBlock.Hypothesis\r\n    productionTime = 2000\r\n}\r\n\r\nexport class Refinery extends Structure {\r\n    name = 'Refinery'\r\n    description = 'flotate'\r\n    consumes = ResourceBlock.Ore\r\n    produces = ResourceBlock.Mineral\r\n    view = 'RefineryView'\r\n    width = major.fifth\r\n    height = major.fifth\r\n    productionTime = 9000\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Mine, Refinery, Corridor ],\r\n        [Orientation.Right]: [ Mine, Refinery, Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CloneMatrix, Kitchen, Laboratory, Study, CommonArea ],\r\n        [Orientation.Down]: [ CloneMatrix, Kitchen, Laboratory, Study, CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n}\r\n\r\nexport class Arcology extends Structure {\r\n    name = 'Arcology'\r\n    description = 'megalith'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.fifth\r\n    height = 34 * major.fifth\r\n    zoom = 0.01\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class CloneMatrix extends CommonArea {\r\n    name = 'Clone Matrix'\r\n    description = 'you seem familiar'\r\n    view = 'CloneMatrixView'\r\n    width = major.fifth\r\n    height = major.eighth\r\n}\r\n\r\n// huge octagonal generating station with four 'slots'\r\n// for sub-structures (add-ons) which auto-generate data/ore\r\n// for the central 'power' slot ...\r\n// ...you can build either...\r\n// ...a mini black hole or mini sun\r\n// (the sun takes ore and the hole takes data?)\r\nexport class PowerPlant extends Structure {\r\n    name: string = 'Power Plant'\r\n    description: string = 'sunny day'\r\n    view: string = 'PowerPlantView'\r\n    width: number = 2 * major.eighth //30 * majorUnit\r\n    height: number = 2 * major.eighth // 30 * majorUnit\r\n\r\n    //connections: {[key in Orientation]: (typeof Structure)[] } = {\r\n    //    [Orientation.Left]: [ Corridor ],\r\n    //    [Orientation.Right]: [ Corridor ],\r\n    //    [Orientation.Up]: [ Ladder ],\r\n    //    [Orientation.Down]: [ Ladder ],\r\n    //}\r\n}\r\n","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem)) //vec) => cursor.distance(vec)\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawRect(ctx: CanvasRenderingContext2D, rectangle: Rectangle, edgeWidth: number = 0, color: Color = Color.White) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White; //color; // || this.edgeColor();\r\n    ctx.fillStyle = edge.toRGBA();\r\n    ctx.fillRect(x, y, width, height)\r\n  }\r\n\r\n  let main = color; // || this.mainColor();\r\n  ctx.fillStyle = main.toRGBA();\r\n  ctx.fillRect(\r\n    x + edgeWidth,\r\n    y + edgeWidth,\r\n    width - edgeWidth * 2,\r\n    height - edgeWidth * 2\r\n  )\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, drawRect, drawLine } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0 //.1\r\n\r\n    nameLabel: Label\r\n    levelLabel: Label\r\n\r\n    built: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n    product: ResourceBlock[] = []\r\n    capacity: number = 4\r\n\r\n    level: number = 1\r\n\r\n    // colorBase() { return this.color.darken(0.1); }\r\n\r\n    constructor(public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          structure.origin.x,\r\n          structure.origin.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            console.log(\"HOVER ON\", { building: this })\r\n        })\r\n\r\n        // this.on('pointerdown', () => {\r\n        //     console.log(\"CLICKED BUILDING\", { building: this })\r\n        //     this.levelUp();\r\n        // })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        // this.nameLabel.fontSize = 11\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.levelLabel = new Label(`Lvl. ${this.level}`, 0, 0, 'Helvetica')\r\n        this.levelLabel.fontSize = 6\r\n        this.levelLabel.color = Color.White.darken(0.2)\r\n    }\r\n\r\n    levelUp() {\r\n        this.level += 1\r\n        this.levelLabel.text = `Lvl. ${this.level}`\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).desaturate(0.3).lighten(0.2).toRGBA();\r\n            ctx.fillRect(this.x + 20 * index, this.y - 20, 18, 18)\r\n        })\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n            // this.levelLabel.text = `Lvl. ${this.level}`\r\n            // this.levelLabel.pos = this.getCenter()\r\n            // this.levelLabel.pos.y += 10\r\n            // this.levelLabel.pos.x -= ctx.measureText(this.structure.name).width / 4\r\n            // this.levelLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let debug = false;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n            if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n        // if (this.step % 100 === 0) {\r\n            let tryProduce = this.built && this.produces && this.product.length < this.capacity;\r\n            if (tryProduce) {\r\n                this.produce(this.step);\r\n            }\r\n        // }\r\n        this.step += 1\r\n    }\r\n\r\n    setup(): void {}\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    } \r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(cursor: Vector): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    get produces() { return this.structure.produces }\r\n    get consumes() { return this.structure.consumes }\r\n    get productionTime() { return this.structure.productionTime }\r\n\r\n    async interact(citizen: Citizen) {\r\n        if (this.product.length > 0) {\r\n            citizen.carry(this.produces)\r\n            this.product.pop()\r\n        } else {\r\n            if (this.consumes && citizen.carrying === this.consumes) {\r\n                await citizen.progressBar(this.productionTime)\r\n                citizen.carry(this.produces)\r\n            }\r\n        }\r\n    }\r\n\r\n    protected produce(step: number) {\r\n        if (this.produces && !this.consumes && step % this.productionTime === 0) {\r\n            let shouldProduce = true;\r\n            if (shouldProduce) {\r\n                this.product.push(this.produces)\r\n                console.log(\"PRODUCE\", { produces: this.produces, product: this.product })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n}","import { Color } from \"excalibur\";\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Food = 'Food',\r\n    Ore = 'Ore',\r\n    Data = 'Data',\r\n    // derived\r\n    Meal = 'Meal',\r\n    Hypothesis = 'Hypothesis',\r\n    Mineral = 'Mineral'\r\n}\r\n\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Food: Color.Green,\r\n    Data: Color.Blue,\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(0.2),\r\n    Hypothesis: Color.Violet.darken(0.4),\r\n    Ore: Color.Red.darken(0.5),\r\n\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    //Color.Violet\r\n    //switch(block) {\r\n    //    case ResourceBlock.Food: baseColor = Color.Green; break\r\n    //    case ResourceBlock.Ore:  baseColor = Color.Red; break\r\n    //    case ResourceBlock.Data: baseColor = Color.Blue; break\r\n    //    case ResourceBlock.Meal: baseColor = Color.Yellow; break\r\n    //}\r\n    return baseColor.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { Building, CommonAreaView } from \".\";\r\n\r\nexport class CloneMatrixView extends CommonAreaView {\r\n    afterConstruct() {\r\n        this.spawnCitizen()\r\n    }\r\n\r\n    protected spawnCitizen() {\r\n        setTimeout(() => this.planet.populate(this.pos), 100)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color } from \"excalibur\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n\r\n    }\r\n\r\n    drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        // ctx.bezierCurveTo(-3 + xoff, 514 + yoff, 1 + xoff, 406 + yoff, 1 + xoff, 391 + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 100\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() { //loader: ex.Loader) {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Corridor, Mine, Refinery } from \"../../models/Structure\";\r\n\r\nexport class RefineryView extends CommonAreaView {\r\n    validConnectingStructures() { return [ Corridor, Mine, Refinery ]}\r\n\r\n}","import { CommonAreaView } from \".\";\r\n\r\nexport class StudyView extends CommonAreaView {}","import { Building } from \".\";\r\nimport { Corridor } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Vector, Polygon } from \"excalibur\";\r\n\r\nexport class PowerPlantView extends Building {\r\n    showLabel = true\r\n\r\n    validConnectingStructures() { return [ Corridor ]}\r\n\r\n    draw(ctx, delta) {\r\n        // octagon...\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() / 2\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n        return theSlots;\r\n    }\r\n\r\n   nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()/2 //-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)) //-16)\r\n        ];\r\n    }\r\n\r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n\r\n}","import { CommonAreaView } from \".\";\r\nimport { Color } from \"excalibur\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\n\r\nexport class KitchenView extends CommonAreaView {\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0 //.5\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 8, 'Helvetica');\r\n        this.count.fontSize = 12;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            // non-accruable\r\n            [ResourceBlock.Food]: null,\r\n            [ResourceBlock.Hypothesis]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            // displayed/accruable\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 60, 60, Color.DarkGray.darken(0.8));\r\n        let rx0 = -8, ry0 = -10;\r\n        let resources = [ResourceBlock.Meal, ResourceBlock.Data, ResourceBlock.Mineral];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0, ry = ry0 + index * 10;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        this.entries[resource].credit(1);\r\n    }\r\n}\r\n","import { Label, UIActor, Color } from \"excalibur\";\r\nimport { Dome, Structure, Corridor, CommonArea, SurfaceRoad, Mine, Laboratory, Kitchen, PowerPlant, Study, Refinery, CloneMatrix, Arcology, Ladder } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\n\r\nexport class Hud extends UIActor {\r\n    label: Label\r\n    resources: ResourcesList\r\n    protected _paletteElement: HTMLDivElement\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor, \r\n        Ladder,\r\n\r\n        // LivingQuarters, \r\n        Dome, Kitchen,\r\n        // Mess,\r\n\r\n        Study, Laboratory,\r\n        Mine, Refinery,\r\n        PowerPlant,\r\n\r\n        CloneMatrix,\r\n        Arcology,\r\n\r\n   // CommonArea,\r\n    ];\r\n    constructor(game: Game, message = 'hello', protected onBuildingSelect = null) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.label = new Label(message, 20, game.canvasHeight - 64, 'Verdana')\r\n        this.label.fontSize = 24\r\n        this.label.color = Color.White\r\n        this.add(this.label)\r\n\r\n        this._makePalette(onBuildingSelect)\r\n\r\n        this.resources = new ResourcesList(50, 40)\r\n        this.add(this.resources)\r\n    }\r\n\r\n\r\n    message(text: string) { this.label.text = text }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this._paletteElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._paletteElement.style.left = `${left + 20}px`;\r\n            this._paletteElement.style.top = `${top + 100}px`;\r\n        }\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.resources.increment(resource)\r\n    }\r\n\r\n\r\n    protected _makePalette(fn: (Structure) => any) {\r\n        this._paletteElement = document.createElement('div') \r\n        this._paletteElement.style.position = 'absolute'\r\n        this._paletteElement.style.border = '1px solid white'\r\n        document.body.appendChild(this._paletteElement)\r\n\r\n        Hud.structuresForPalette.forEach((structure: typeof Structure) => {\r\n            let s = new structure()\r\n            let _paletteButton = this.buttonFactory(s);\r\n            this._paletteElement.appendChild(\r\n                _paletteButton\r\n            )\r\n\r\n            _paletteButton.onclick = (e) => {\r\n                fn(s)\r\n                // e.stopPropagation()\r\n            }\r\n        });\r\n    }\r\n\r\n    private buttonFactory(s: Structure) {\r\n        let bg = Color.DarkGray.darken(0.8) //.desaturate(0.25) //.toRGBA()\r\n        bg.a = 0.6\r\n        let fg = Color.Blue.lighten(0.8).desaturate(0.55) //.toRGBA()\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = `${s.name}`;\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '10pt';\r\n\r\n        paletteButton.style.fontFamily = 'Helvetica';\r\n        paletteButton.style.fontWeight = '600';\r\n        paletteButton.style.padding = '8px';\r\n        paletteButton.style.width = '130px';\r\n        paletteButton.style.textTransform = 'uppercase'\r\n        paletteButton.style.border = 'none' //0.1px solid blue'\r\n        paletteButton.style.background = bg.toRGBA(); //Color.Blue.darken(0.08).toRGBA();\r\n        paletteButton.style.color = fg.toRGBA() //Color.Blue.lighten(0.16).toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.lighten(0.4).toRGBA()\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA() //Color.Blue.lighten(0.16).toRGBA();\r\n        }\r\n        paletteButton.onmouseleave = () => {\r\n            //paletteButton.style.background = bg.toRGBA()\r\n            paletteButton.style.background = bg.toRGBA(); //Color.Blue.darken(0.08).toRGBA();\r\n            paletteButton.style.color = fg.toRGBA() //Color.Blue.lighten(0.16).toRGBA();\r\n        } // Color.Blue.toRGBA() }\r\n\r\n        return paletteButton;\r\n    }\r\n}","import { CommonAreaView } from '.'\r\nimport { Vector } from 'excalibur';\r\nimport { Corridor, Refinery, Mine } from '../../models/Structure';\r\n\r\nexport class MineView extends CommonAreaView {\r\n    floorHeight = 150\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    validConnectingStructures() { return [ Corridor, Mine, Refinery ]}\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    // edgeWidth = 1\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Color } from \"excalibur\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\n\r\nexport class LabView extends CommonAreaView {\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { MissionControl } from \"../../models/Structure\";\r\nimport { range, eachCons, measureDistance, drawRect } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n    // edgeWidth = 0.2\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y) //, Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        // connect node to first slot...\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            // we're determining depth of tunnel\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class MissionControlView extends Building {\r\n    hideBox = true\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n           \r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2 // + 1\r\n    }\r\n\r\n    async interact(citizen: Citizen) {\r\n        let resource = citizen.drop()\r\n        if (resource) {\r\n            this.planet.gather(resource)\r\n        }\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor();\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n        // y is going to be surface height\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        // could draw a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3*(this.getWidth()/4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { SurfaceRoad } from \"../../models/Structure\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\n\r\n// we're constrained to the surface, so...\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots = [];\r\n        let slotY = this.getHeight(); // / 2;\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5, // / 2,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } // this.baseColor; }\r\n\r\n    validConnectingStructures() { return [ SurfaceRoad ]; }\r\n}","import { Building } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 8\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    // maybe you can set height AND width of common area view??\r\n    // maybe just width...\r\n    colorBase() { return this.color.darken(0.1); }\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        // top slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        // bottom slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)) //-16)\r\n        ];\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { Structure, MissionControl, Laboratory, Mine, Dome, Kitchen, Study, Refinery } from \"../models/Structure\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons } from \"../Util\";\r\n\r\nexport class Citizen extends Actor {\r\n    walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock = null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    constructor(building: Building, protected planet: Planet) {\r\n        super(building.nodes()[0].x,building.nodes()[0].y,4,10,Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = (now - this.workStarted) / this.workDuration //0.5\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            ctx.fillStyle = blockColor(this.carrying).toRGBA()\r\n            ctx.fillRect(this.x+4, this.y-3, 5, 5)\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            // draw progress bar?\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            // ctx.stroke(20)\r\n            ctx.strokeRect(px, py, pw, ph)\r\n\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n\r\n            this.vel.x += (Math.random())-0.5 // * 10.0)\r\n        }\r\n\r\n        let debugPath = false\r\n        if (this.path && debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 10\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    carry(c: ResourceBlock) { //c: Color) {\r\n        this.carrying = c;\r\n    }\r\n\r\n    drop(): ResourceBlock {\r\n        if (this.carrying) {\r\n            let c = this.carrying; //.clone();\r\n            this.carrying = null;\r\n            return c\r\n        }\r\n        return null\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        // console.log(\"PROGRESS BAR\")\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        // console.log(\"PROGRESS BAR DONE!\")\r\n        this.workInProgress = false\r\n    }\r\n\r\n    async walkTo(building: Building) { //}, onArrival: (Building) => any) {\r\n        // let building = this.planet.closestBuildingByType(this.pos, structure)\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = null\r\n            // onArrival(building);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    async work() {\r\n        if (this.carrying) {\r\n            // console.log(\"carrying\", this.carrying)\r\n            let item: ResourceBlock = this.carrying;\r\n            let sinks = []\r\n\r\n            // what structure consumes what i'm carrying?\r\n            // could check in a list\r\n            if (ResourceBlock[item] === 'Food') {\r\n                sinks = [Kitchen]\r\n            } else if (ResourceBlock[item] === 'Hypothesis') {\r\n                sinks = [Laboratory]\r\n            } else if (ResourceBlock[item] === 'Ore') {\r\n                sinks = [Refinery]\r\n            } else {\r\n                sinks = [MissionControl]\r\n            }\r\n\r\n            if (sinks.length > 0) {\r\n                let theSink = this.planet.closestBuildingByType(this.pos, sinks)\r\n                if (theSink) {\r\n                    await this.walkTo(theSink)\r\n                    await theSink.interact(this)\r\n                }\r\n            } else {\r\n                console.log(\"nowhere to deliver it\", this.carrying)\r\n            }\r\n        } else {\r\n            let source = this.planet.closestBuildingByType(this.pos,\r\n                [Dome, Mine, Study],\r\n                (building) => building.product.length > 0\r\n            )\r\n\r\n            if (source) {\r\n                await this.walkTo(source)\r\n                await source.interact(this)\r\n            } else {\r\n                console.log(\"i guess i can try again? (sleep for a bit first)\")\r\n        await new Promise((resolve, reject) => setTimeout(resolve, 150));\r\n                //etTimeout(() => this.work(), 500)\r\n            }\r\n        }\r\n\r\n        // console.log(\"DONE WORK\")\r\n        // this.work()\r\n        setTimeout(() => this.work(), 100)\r\n        // await new Promise((resolve, reject) => setTimeout(resolve, 500));\r\n        // await this.work()\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n    increase(home: Building) {\r\n        let citizen = new Citizen(home, this.planet);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy } from '../../Util';\r\nimport { Structure, MissionControl } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = false\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n                        // console.log(\"draw edges\", {edges})\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n            // Add three color stops\r\n            gradient.addColorStop(0, 'green');\r\n            gradient.addColorStop(1, 'blue');\r\n\r\n                // console.log(\"draw edge\", { a,b  })\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y + this.pos.y)\r\n                ctx.lineTo(b.x,b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient //Color.Green.toRGBA()\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n        // console.log(\"DRAW COLONY\", { colony: this });\r\n        // parent does this :/\r\n        // if (this.currentlyConstructing) {\r\n        //     this.currentlyConstructing.draw(ctx, delta)\r\n        // }\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings.filter(building => structureTypes.some(structureType => (building.structure instanceof structureType)) &&\r\n            predicate(building));\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n}\r\n","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure, CloneMatrix } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\n\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n\r\n    constructor(\r\n        public hud: Hud,\r\n        public color: Color,\r\n        public width: number = 2000000,\r\n        public depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, width, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2\r\n        // crust\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector) {\r\n        let home = this.closestBuildingByType(pos, [CloneMatrix])\r\n        this.population.increase(home)\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n}","import { Scene, Input, UIActor, Label, Vector, LockCameraToActorStrategy } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MissionControl, MainTunnel, Dome, Corridor, SurfaceRoad, Kitchen, CloneMatrix } from \"../models/Structure\";\r\nimport { Building, DomeView, CorridorView, CommonAreaView, TunnelView, MissionControlView, LadderView, MineView, LabView, } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { SurfaceRoadView } from \"../actors/Building/SurfaceRoadView\";\r\nimport { KitchenView } from \"../actors/Building/KitchenView\";\r\nimport { PowerPlantView } from \"../actors/Building/PowerPlantView\";\r\nimport { StudyView } from \"../actors/Building/StudyView\";\r\nimport { RefineryView } from \"../actors/Building/RefineryView\";\r\nimport { ArcologyView } from \"../actors/Building/ArcologyView\";\r\nimport { CloneMatrixView } from \"../actors/Building/CloneMatrixView\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    static structureViews: { [key: string]: typeof Building } = {\r\n        TunnelView,\r\n        MissionControlView,\r\n        DomeView,\r\n        CorridorView,\r\n        CommonAreaView,\r\n        SurfaceRoadView,\r\n        LabView,\r\n        MineView,\r\n        KitchenView,\r\n        PowerPlantView,\r\n        StudyView,\r\n        RefineryView,\r\n\r\n        ArcologyView,\r\n        CloneMatrixView,\r\n\r\n        LadderView,\r\n    }\r\n    ////\r\n    static requiredStructureList: Array<typeof Structure> = [\r\n        MissionControl,\r\n\r\n        SurfaceRoad,\r\n        Dome,\r\n        MainTunnel,\r\n        Corridor,\r\n        Kitchen,\r\n        CloneMatrix,\r\n    ]\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n\r\n        this.hud = new Hud(game, 'hi', (structure) => {\r\n            this.startConstructing(structure)\r\n        });\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(this.hud, game.world.color);\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(2, 10000)\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentBuilding = this.planet.currentlyConstructing\r\n                if (currentBuilding) {\r\n                    let constrained = currentBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentBuilding.reshape(this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', (e: Input.PointerUpEvent) => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentBuilding: Building = this.planet.currentlyConstructing\r\n                if (currentBuilding) {\r\n                    let placementValid = !currentBuilding.overlapsAny()\r\n                    if (currentBuilding && placementValid && currentBuilding.handleClick(e.pos)) {\r\n                        this.planet.placeBuilding(currentBuilding)\r\n                        this.planet.colony.currentlyConstructing = null\r\n                        this.prepareNextBuilding(e.pos)\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingRequiredStructure(): Structure {\r\n        let requiredStructures: Structure[] = Construct.requiredStructureList.map(s => new s())\r\n        let actualStructureNames: string[] = this.buildings.map(building => building.structure.name)\r\n\r\n        return requiredStructures.find(structure => !actualStructureNames.includes(structure.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.message(`Welcome to OSIRIS!`)\r\n        }\r\n    }\r\n\r\n    startConstructing(structure: Structure, pos: Vector = new Vector(0, 0)) {\r\n        structure.origin = pos\r\n        this.hud.message(`Place ${structure.name}`)\r\n        let theNextOne = this.spawnBuilding(structure)\r\n        this.planet.colony.currentlyConstructing = theNextOne\r\n        this.camera.pos = theNextOne.pos\r\n        this.camera.zoom(structure.zoom, 250)\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(anotherBuilding.pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure): Building {\r\n        let View = Construct.structureViews[structure.view]\r\n        let building = new View(structure, this.planet)\r\n        return building;\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\n\r\nexport class Colony {\r\n    // origin: Vector\r\n    structures: Structure[] = []\r\n    // build(structure) ...\r\n}\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Red, Color.Blue, Color.Green] // Color.Viridian, Color.Magenta, Color.Chartreuse];\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ). // Color.Rose //World.colors).\r\n        lighten(0.15).\r\n        desaturate(0.65) // sample([Color.Blue, Color.Rose,Color.Blue]).lighten(0.1).desaturate(0.8)\r\n  colony: Colony = new Colony()\r\n}","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword)\r\n}\r\n\r\nexport { Resources }\r\n","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\n// scenes\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}