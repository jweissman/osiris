{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/actors/Building/index.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/Util.ts","webpack:///./src/models/Economy.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Structure.ts","webpack:///./src/models/Machine.ts","webpack:///./src/values/Scale.ts","webpack:///./src/actors/Building/CloneMatrixView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Building/RefineryView.ts","webpack:///./src/actors/Building/StudyView.ts","webpack:///./src/actors/Building/PowerPlantView.ts","webpack:///./src/actors/Building/KitchenView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MineView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/LabView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/MissionControlView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/actors/Device.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/bookshelf.png","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","MissionControlView_1","MissionControlView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","CloneMatrixView_1","CloneMatrixView","LabView_1","LabView","LadderView_1","LadderView","MineView_1","MineView","Orientation","Left","Up","Right","Down","compass","flip","orientation","Error","excalibur_1","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","eachCons","measureDistance","b","drawLine","ctx","lineWidth","Color","White","beginPath","moveTo","x","y","lineTo","strokeStyle","toRGBA","stroke","drawRect","rectangle","edgeWidth","color","width","height","edge","fillStyle","fillRect","main","PureValue","Power","Hope","Shelter","Oxygen","emptyMarket","supply","demand","ResourceBlock","Food","Ore","Data","Meal","Hypothesis","Mineral","blockColors","Green","Blue","Red","Yellow","darken","Violet","blockColor","block","desaturate","lighten","t","this","__extends","setPrototypeOf","__proto__","constructor","create","Orientation_1","Util_1","Graph_1","Device_1","_super","structure","planet","_this","origin","built","hover","showLabel","facing","hideBox","childrenBuildings","level","devices","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","console","log","building","collisionType","CollisionType","PreventCollision","nameLabel","Label","levelLabel","fontSize","levelUp","text","draw","delta","aabb","processedColor","forEach","device","pos","getCenter","measureText","update","engine","produce","constrainCursor","clone","reshape","afterConstruct","machines","machine_1","devicePlaces","place","theDevice","Device","add","handleClick","slots","nodes","getWidth","getHeight","graph","supergraph","Graph","g","rootNode","findOrCreate","_i","_a","child","slot","parentSlot","childNode","redeem","res","gather","populate","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","find","bldg","edgeColor","mainColor","colorBase","clr","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","closestBuildingByType","matchingSlot","compass_1","warn","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","Actor","Economy_1","Scale_1","Machine_1","major","Scale","minor","Structure","description","view","zoom","dominantColor","LightGray","consumes","produces","productionTime","Corridor","Ladder","prereqs","MissionControl","arguments","third","SurfaceRoad","MainTunnel","CommandCenter","second","eighth","Dome","Biodome","Orchard","Study","OxygenAccumulator","fifth","CommonArea","first","Arcology","Laboratory","sixth","ExperimentBench","Kitchen","fourth","Stove","Mine","MiningDrill","SolarFarm","Library","WaterCondenser","Bookshelf","Refinery","MineralProcessor","Arbor","AugmentationChamber","CarbonDioxideScrubber","CloneMatrix","CloningVat","OxygenExtractor","WaterCondensingMachine","AirScrubber","SolarCell","HypermnesisApparatus","Factory","Academy","ComputerCore","decription","MineralWorkshop","PowerPlant","Starport","Launchpad","EntertainmentCenter","GamingRotunda","SuspendedAnimationTomb","Icicle","NegentropyPool","SingularityFountain","StrangeMatterWorkshop","AtomicCompiler","TimeChamber","TimeCrystal","MachineOperation","images","bookshelf","vat","bench","stove","Work","SpawnCitizen","CollectResource","Machine","behavior","image","majorUnit","seventh","minorUnit","minorScale","drawShape","xoff","yoff","h","w","bezierCurveTo","empty","edges","edgesInverse","isEmpty","node","newNode","contains","testNode","includes","measure","tolerance","dfs","src","dst","indexOf","union","otherGraph","edgeList","theEdges","index","_b","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","path","steps","srcIndex","reverse","Resources_1","Game","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","start","loader","Loader","key","Resources","addResource","citizenSpeed","Engine","_1","Structure_1","RefineryView","validConnectingStructures","StudyView","PowerPlantView","theSlots","slotY","leftSlot","rightSlot","KitchenView","SurfaceRoadView","StatusAnalysisView","market","DarkGray","powerDemand","powerSupply","powerStatus","powerStatusLabel","ResourceListEntry","resourceBlock","icon","count","credit","amt","ResourceListEntry_1","ResourcesList","entries","resource","ry","entry","increment","ResourcesList_1","StatusAnalysisView_1","Hud","game","onBuildingSelect","canvasWidth","canvasHeight","comprehendedStructures","builtStructures","messageLabel","_makePalette","resources","econ","statusY","status","setMessage","_paletteElement","left","canvas","offsetLeft","top_1","offsetTop","style","top","resourceGathered","updatePalette","bldgs","structuresForPalette","some","every","prereq","comprehended","parentElement","removeChild","document","createElement","id","position","border","body","appendChild","sort","_paletteButton","buttonFactory","onclick","bg","fg","paletteButton","label","textContent","display","fontFamily","fontWeight","padding","textTransform","background","onmouseover","onmouseleave","UIActor","floorHeight","originSlot","pickingOrigin","maxHeight","getTop","setHeight","rect","halfWidth","slotHeights","heights","y0","y1","btm","lst","right","slotCount","flagX","flagY","arc","PI","closePath","originX","newCursor","setWidth","abs","machine","initialPos","product","capacity","imageLoaded","Image","onload","drawImage","bx","by","produced","blockSize","interact","citizen","pop","progressBar","sent","carry","carrying","drop","setTimeout","ex","Player","Game_1","Citizen","walkSpeed","workInProgress","now","Date","getTime","progress","workStarted","workDuration","px","pw","py","strokeRect","vel","glideTo","actions","asPromise","duration","Promise","resolve","reject","pathTo","pathBetween","all","work","item","sinks","theSink","closestDevice","source","Citizen_1","Population","citizens","increase","home","NavigationTree","seekPath","dest","closestNode","NavigationTree_1","Colony","currentlyConstructing","maxPop","navTree","placeBuilding","buildNavTree","structureTypes","structureType","destination","srcNode","destNode","closestDeviceByType","machineTypes","ctrl","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","saturate","yBase","peak","mtnWidth","PlanetBackground","PlanetBackground_1","Colony_1","Population_1","Planet","hud","depth","createLayer","layerHeight","population","size","theLayer","Planet_1","player_1","Hud_1","SurfaceRoadView_1","KitchenView_1","PowerPlantView_1","StudyView_1","RefineryView_1","Construct","dragging","startConstructing","player","prepareNextBuilding","camera","onActivate","input","pointers","primary","dragOrigin","currentBuilding","constrained","button","Input","PointerButton","placementValid","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","onDeactivate","off","nextMissingRequiredStructure","requiredStructures","requiredStructureList","actualStructureNames","nextMissing","theNextOne","spawnBuilding","anotherBuilding","assembleBuildingFromStructure","structureViews","Scene","World","colors","Cyan","Vermillion","sword","Sword","Texture","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([47,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { MissionControlView } from './MissionControlView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { CloneMatrixView } from './CloneMatrixView';\r\nimport { LabView } from './LabView';\r\nimport { LadderView } from './LadderView';\r\nimport { MineView } from './MineView';\r\n\r\n\r\n// import { LivingQuartersView } from './LivingQuartersView';\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView, // as AccessTunnelView,\r\n    CommonAreaView,\r\n    DomeView,\r\n    MissionControlView,\r\n    TunnelView,\r\n    ArcologyView,\r\n    CloneMatrixView,\r\n    LabView,\r\n    LadderView,\r\n    MineView,\r\n\r\n}","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem)) //vec) => cursor.distance(vec)\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawRect(ctx: CanvasRenderingContext2D, rectangle: Rectangle, edgeWidth: number = 0, color: Color = Color.White) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White;\r\n    ctx.fillStyle = edge.toRGBA();\r\n    ctx.fillRect(x, y, width, height)\r\n  }\r\n\r\n  let main = color;\r\n  ctx.fillStyle = main.toRGBA();\r\n  ctx.fillRect(\r\n    x + edgeWidth,\r\n    y + edgeWidth,\r\n    width - edgeWidth * 2,\r\n    height - edgeWidth * 2\r\n  )\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Hope = 'Hope',\r\n    Shelter = 'Shelter',\r\n    Oxygen = 'Oxygen',\r\n}\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport const emptyMarket : Economy = {\r\n    Power: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n    Hope: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n    Shelter: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n    Oxygen: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Food = 'Food',\r\n    Ore = 'Ore',\r\n    Data = 'Data',\r\n    // derived\r\n    Meal = 'Meal',\r\n    Hypothesis = 'Hypothesis',\r\n    Mineral = 'Mineral'\r\n}\r\n\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Food: Color.Green,\r\n    Data: Color.Blue,\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(0.2),\r\n    Hypothesis: Color.Violet.darken(0.4),\r\n    Ore: Color.Red.darken(0.5),\r\n\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    //Color.Violet\r\n    //switch(block) {\r\n    //    case ResourceBlock.Food: baseColor = Color.Green; break\r\n    //    case ResourceBlock.Ore:  baseColor = Color.Red; break\r\n    //    case ResourceBlock.Data: baseColor = Color.Blue; break\r\n    //    case ResourceBlock.Meal: baseColor = Color.Yellow; break\r\n    //}\r\n    return baseColor.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, drawRect, drawLine } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0 //.1\r\n\r\n    nameLabel: Label\r\n    levelLabel: Label\r\n\r\n    built: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n    //product: ResourceBlock[] = []\r\n    //capacity: number = 4\r\n\r\n    level: number = 1\r\n\r\n    devices: Device[] = []\r\n\r\n    // colorBase() { return this.color.darken(0.1); }\r\n\r\n    constructor(public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          structure.origin.x,\r\n          structure.origin.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            console.log(\"HOVER ON\", { building: this })\r\n        })\r\n\r\n        // this.on('pointerdown', () => {\r\n        //     console.log(\"CLICKED BUILDING\", { building: this })\r\n        //     this.levelUp();\r\n        // })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        // this.nameLabel.fontSize = 11\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.levelLabel = new Label(`Lvl. ${this.level}`, 0, 0, 'Helvetica')\r\n        this.levelLabel.fontSize = 6\r\n        this.levelLabel.color = Color.White.darken(0.2)\r\n    }\r\n\r\n    levelUp() {\r\n        this.level += 1\r\n        this.levelLabel.text = `Lvl. ${this.level}`\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        this.devices.forEach(device => device.draw(ctx, delta))\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n            // this.levelLabel.text = `Lvl. ${this.level}`\r\n            // this.levelLabel.pos = this.getCenter()\r\n            // this.levelLabel.pos.y += 10\r\n            // this.levelLabel.pos.x -= ctx.measureText(this.structure.name).width / 4\r\n            // this.levelLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let debug = false;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n            if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n        let tryProduce = this.built;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.produce(this.step));\r\n        }\r\n        this.step += 1\r\n    }\r\n\r\n    setup(): void {}\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    } \r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {\r\n\r\n        let { machines } = this.structure; \r\n        if (machines && machines.length > 0) {\r\n            let machine = new machines[0]();\r\n            this.devicePlaces().forEach(place => {\r\n                let theDevice = new Device(this, machine, place)\r\n                this.devices.push(theDevice)\r\n                this.add(theDevice)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    handleClick(cursor: Vector): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): Vector[] {\r\n        return this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public populate(pos: Vector) {\r\n        this.planet.populate(pos) //this.pos)\r\n    }\r\n\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n}","import { Vector, Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Orchard, ExperimentBench, Stove, MiningDrill, Bookshelf, MineralProcessor, CommandCenter, CloningVat, OxygenExtractor, SolarCell, Launchpad, WaterCondensingMachine, AirScrubber, HypermnesisApparatus, AtomicCompiler, GamingRotunda, TimeCrystal, MineralWorkshop, Icicle, SingularityFountain } from './Machine';\r\n\r\nconst { major, minor } = Scale\r\n\r\n\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    dominantColor: Color = Color.LightGray\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n    productionTime: number = 500\r\n\r\n    constructor(public origin: Vector = new Vector(0, 0)) { }\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n\r\n    prereqs: (typeof Structure)[] = []\r\n}\r\n\r\nexport class MissionControl extends Structure {\r\n    name: string = 'Mission Control';\r\n    description: string = 'Keeping everything on track';\r\n    view: string = 'MissionControlView';\r\n    width: number = 4 * major.third\r\n    height: number = 4 * minor.third\r\n    zoom = 0.1\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = [ CommandCenter ]\r\n}\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MissionControl ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nclass Dome extends Structure {\r\n    name: string = 'Biodome';\r\n    description: string = 'Biome sweet biome';\r\n    dominantColor = Color.Green\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.eighth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n}\r\n\r\nexport class Biodome extends Dome {\r\n    machines = [Orchard]\r\n    prereqs = [ Study, OxygenAccumulator ]\r\n    produces = ResourceBlock.Food\r\n    productionTime = 5000\r\n}\r\n\r\n// let list = [ CloneMatrix ]\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            Ladder,\r\n            CommonArea\r\n            // CloneMatrix, Kitchen, Laboratory, Study, CommonArea,\r\n            // Mine, Refinery,\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            Ladder,\r\n            CommonArea\r\n            // CloneMatrix, Kitchen, Laboratory, Study, CommonArea ,\r\n            // Mine, Refinery,\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            //  Corridor, CloneMatrix, Kitchen, Laboratory, Study, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n            // CloneMatrix, Kitchen, Laboratory, Study, CommonArea ],\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n}\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Arcology, Dome, MissionControl ],\r\n        [Orientation.Right]: [ Arcology, Dome, MissionControl ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class Laboratory extends CommonArea {\r\n    name: string = 'Lab'\r\n    description: string = 'learn some things'\r\n    consumes = ResourceBlock.Hypothesis\r\n    produces = ResourceBlock.Data\r\n    dominantColor = Color.Blue\r\n    view: string = 'LabView'\r\n    width: number = major.sixth\r\n    height: number = major.fifth\r\n    productionTime = 6500\r\n    machines = [ExperimentBench]\r\n    prereqs = [ Kitchen, Study ]\r\n}\r\n\r\n\r\nexport class Kitchen extends CommonArea {\r\n    name: string = 'Kitchen'\r\n    description: string = 'veg -> meals'\r\n    dominantColor = Color.Green\r\n    consumes = ResourceBlock.Food\r\n    produces = ResourceBlock.Meal\r\n    view: string = 'KitchenView'\r\n    width: number = major.fourth\r\n    height: number = major.fifth\r\n    productionTime = 2000\r\n    machines = [Stove]\r\n}\r\n\r\n// a mine is maybe a wide structure that you\r\n// can gradually dig deeper??\r\nexport class Mine extends CommonArea {\r\n    name: string = 'Mine'\r\n    description: string = 'ore else'\r\n    dominantColor = Color.Red\r\n    produces = ResourceBlock.Ore\r\n    productionTime = 20000\r\n    view: string = 'MineView'\r\n    width: number = major.eighth // 20 * majorUnit\r\n    height: number = 3 * major.sixth //20 * majorUnit\r\n    //connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n    //    [Orientation.Left]: [ Mine, Refinery, Corridor ],\r\n    //    [Orientation.Right]: [ Mine, Refinery, Corridor ],\r\n    //    [Orientation.Up]: [ Ladder ],\r\n    //    [Orientation.Down]: [ Ladder ],\r\n    //}\r\n    machines = [MiningDrill]\r\n    prereqs = [SolarFarm, Library, WaterCondenser]\r\n}\r\n\r\nexport class Study extends CommonArea {\r\n    name: string = 'Study'\r\n    description: string = 'reflect'\r\n    dominantColor = Color.Blue\r\n    view: string = 'StudyView'\r\n    width = major.third\r\n    height = major.fifth\r\n    produces = ResourceBlock.Hypothesis\r\n    productionTime = 2000\r\n    machines = [Bookshelf]\r\n}\r\n\r\nexport class Refinery extends CommonArea {\r\n    name = 'Refinery'\r\n    description = 'flotate'\r\n    dominantColor = Color.Red\r\n    consumes = ResourceBlock.Ore\r\n    produces = ResourceBlock.Mineral\r\n    view = 'RefineryView'\r\n    width = major.fifth\r\n    height = major.fifth\r\n    productionTime = 9000\r\n    machines = [MineralProcessor]\r\n    prereqs = [Mine]\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n}\r\n\r\nexport class Arcology extends Structure {\r\n    name = 'Arcology'\r\n    description = 'megalith'\r\n    view = 'ArcologyView'\r\n    dominantColor = Color.Green\r\n    width = 12 * major.fifth\r\n    height = 34 * major.fifth\r\n    zoom = 0.01\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [ Arbor, AugmentationChamber, CarbonDioxideScrubber ]\r\n}\r\n\r\nexport class CloneMatrix extends CommonArea {\r\n    name = 'Clone Matrix'\r\n    description = 'you seem familiar'\r\n    dominantColor = Color.Blue\r\n    view = 'CloneMatrixView'\r\n    width = major.fifth\r\n    height = major.eighth\r\n    machines = [ CloningVat ]\r\n    prereqs = [ Study ]\r\n}\r\n\r\nexport class OxygenAccumulator extends Dome {\r\n    name = 'O2'\r\n    description = 'breathe free'\r\n    // view = 'OxygenAccumulatorView'\r\n    machines = [ OxygenExtractor ]\r\n    prereqs = []\r\n}\r\n\r\nexport class WaterCondenser extends Dome {\r\n    name = 'H2O'\r\n    description = 'drink deeply'\r\n    machines = [ WaterCondensingMachine ]\r\n    prereqs = [OxygenAccumulator]\r\n}\r\n\r\nexport class CarbonDioxideScrubber extends Dome {\r\n    name = 'CO2 Scrub'\r\n    description = 'purified'\r\n    machines = [AirScrubber]\r\n    prereqs = [WaterCondenser]\r\n}\r\n\r\nexport class SolarFarm extends Dome {\r\n    name = 'Solar Farm'\r\n    description = 'feel the warmth on your face'\r\n    // view = 'SolarFarmView'\r\n    machines = [ SolarCell ]\r\n    prereqs = [Kitchen, OxygenAccumulator]\r\n}\r\n\r\nexport class AugmentationChamber extends CommonArea {\r\n    name = 'Augmentation'\r\n    description = 'upgrade your life'\r\n    dominantColor = Color.Blue\r\n    machines = [ HypermnesisApparatus ]\r\n    prereqs = [CloneMatrix, Factory]\r\n}\r\n\r\nexport class Academy extends CommonArea {\r\n    name = 'Academy'\r\n    description = 'teach the generations'\r\n    dominantColor = Color.Blue\r\n    machines = [Bookshelf]\r\n    prereqs = [Laboratory, Library, CloneMatrix]\r\n}\r\n\r\nexport class Library extends CommonArea {\r\n    name = 'Library'\r\n    description = 'study the past'\r\n    dominantColor = Color.Blue\r\n    machines = [Bookshelf]\r\n    prereqs = [Kitchen]\r\n}\r\n\r\n// just an 'upgraded', larger dome with a place for a mid-size machine?\r\nexport class Arbor extends Dome {\r\n    name = 'Arbor'\r\n    description = 'conserve the land'\r\n    machines = [Orchard]\r\n    prereqs = [Biodome, WaterCondenser, CloneMatrix]\r\n    width: number  = 6 * major.eighth\r\n    height: number = 3 * major.eighth\r\n}\r\n\r\nexport class ComputerCore extends CommonArea {\r\n    name = 'Computer Core'\r\n    description = 'compute the last digit of pi'\r\n    dominantColor = Color.Blue\r\n    machines = []\r\n    prereqs  = [Academy]\r\n    width  = 20 * major.fifth\r\n    height = 10 * major.fifth\r\n}\r\n\r\nexport class Factory extends CommonArea {\r\n    name = 'Factory'\r\n    decription = 'grit with it'\r\n    dominantColor = Color.Red\r\n    machines = [MineralWorkshop]\r\n    prereqs = [ Library ]\r\n    width = 3 * major.eighth\r\n    height = major.sixth\r\n}\r\n\r\nexport class PowerPlant extends CommonArea {\r\n    name: string = 'Power Plant'\r\n    description: string = 'sunny day'\r\n    dominantColor = Color.Red\r\n    view: string = 'PowerPlantView'\r\n    width: number = 2 * major.eighth\r\n    height: number = 2 * major.eighth\r\n    prereqs = [ CarbonDioxideScrubber, Factory ]\r\n}\r\n\r\nexport class Starport extends Dome {\r\n    name = 'Starport'\r\n    description = 'you are cleared for take-off'\r\n    dominantColor = Color.Violet\r\n    prereqs = [ Arcology, ComputerCore, PowerPlant ]\r\n    machines = [Launchpad]\r\n}\r\n\r\n\r\nexport class EntertainmentCenter extends CommonArea {\r\n    name = 'Entertainment Complex'\r\n    description = 'let us have a good time'\r\n    dominantColor = Color.Violet\r\n    prereqs = [ Starport ] //, \r\n    machines = [GamingRotunda]\r\n}\r\n\r\nexport class SuspendedAnimationTomb extends CommonArea {\r\n    name = 'Cryo Tomb'\r\n    description = 'pawns on ice'\r\n    dominantColor = Color.Violet\r\n    prereqs = [ Starport ]\r\n    machines = [ Icicle ]\r\n}\r\n\r\nexport class NegentropyPool extends CommonArea {\r\n    name = 'Negentropy Pool'\r\n    description = 'extropic singularity'\r\n    dominantColor = Color.Violet\r\n    prereqs = [ SuspendedAnimationTomb ]\r\n    machines = [ SingularityFountain ]\r\n}\r\n\r\nexport class StrangeMatterWorkshop extends CommonArea {\r\n    name = 'Strange Matter Workshop'\r\n    description = 'advanced tools'\r\n    dominantColor = Color.Violet\r\n    prereqs = [ NegentropyPool ]\r\n    machines = [ AtomicCompiler ]\r\n}\r\n\r\nexport class TimeChamber extends CommonArea {\r\n    name = 'Time Chamber'\r\n    description = 'welcome to the world of tomorrow'\r\n    dominantColor = Color.Violet\r\n    prereqs = [ StrangeMatterWorkshop ] //, \r\n    machines = [ TimeCrystal ]\r\n}\r\n// export class AntimatterCapture extends CommonArea { }\r\n// export class MolecularEngine extends CommonArea { }\r\n// export class AtomicCompiler extends CommonArea { }","import { ResourceBlock } from \"./Economy\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { Color } from \"excalibur\";\r\n\r\nlet { major, minor } = Scale\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove: stove,\r\n}\r\n\r\nexport enum MachineOperation {\r\n  // generic functioning: consuming a block to produce a new block\r\n  Work,\r\n\r\n  // more interesting functions\r\n  SpawnCitizen,\r\n  CollectResource,\r\n\r\n  // ...ProduceValue? [i.e., hope]\r\n  // StoreResource ??\r\n}\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    width: number = major.second\r\n    height: number = major.second\r\n    color: Color = Color.LightGray\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n    productionTime: number = 1000\r\n\r\n    behavior: MachineOperation = MachineOperation.Work\r\n\r\n    image = images.bookshelf\r\n\r\n\r\n}\r\n\r\n// resource collection\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command'\r\n    description = 'gather resources'\r\n    behavior = MachineOperation.CollectResource\r\n\r\n    image = images.bench\r\n}\r\n\r\n// meals\r\n\r\nexport class Orchard extends Machine {\r\n    name = 'Orchard'\r\n    description = 'grow some food'\r\n    produces = ResourceBlock.Food\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    consumes = ResourceBlock.Food\r\n    produces = ResourceBlock.Meal\r\n    image = images.stove\r\n}\r\n\r\n// minerals\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Drill'\r\n    description = 'find some ores'\r\n    produces = ResourceBlock.Ore\r\n}\r\n\r\nexport class MineralProcessor extends Machine {\r\n    name = 'Processor'\r\n    description = 'extract some minerals'\r\n\r\n    consumes = ResourceBlock.Ore\r\n    produces = ResourceBlock.Mineral\r\n}\r\n\r\n// data\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    produces = ResourceBlock.Hypothesis\r\n}\r\n\r\nexport class ExperimentBench extends Machine {\r\n    name = 'Bench'\r\n    description = 'test some hypotheses'\r\n    consumes = ResourceBlock.Hypothesis\r\n    produces = ResourceBlock.Data\r\n    image = images.bench\r\n}\r\n\r\n// reproduction\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'grow some replacements'\r\n    // consumes = ResourceBlock.Meal\r\n    behavior = MachineOperation.SpawnCitizen \r\n    productionTime = 1500\r\n\r\n    height = major.third\r\n    // width = minor.fifth\r\n    // height = major.first\r\n\r\n    image = images.vat\r\n}\r\n\r\n// providence (power, life support...)\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    // behavior\r\n    // height = \r\n    image = images.vat\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n}\r\n\r\nexport class Launchpad extends Machine {\r\n    name = 'Launchpad'\r\n}\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H20 Condenser'\r\n}\r\n\r\nexport class AirScrubber extends Machine {\r\n    name = 'Air Scrubber'\r\n}\r\n\r\nexport class HypermnesisApparatus extends Machine {\r\n    name = 'Mind Upgrade'\r\n}\r\n\r\nexport class AtomicCompiler extends Machine {\r\n    name = 'Atomic Compiler'\r\n}\r\n\r\nexport class Icicle extends Machine {\r\n    name = 'Cryo Coffin'\r\n}\r\n\r\nexport class TimeCrystal extends Machine {\r\n    name = 'Quantum Portal'\r\n}\r\n\r\nexport class GamingRotunda extends Machine {\r\n    name = 'Gaming Rotunda'\r\n}\r\n\r\nexport class MineralWorkshop extends Machine {\r\n    name = 'Workshop'\r\n}\r\n\r\nexport class SingularityFountain extends Machine {\r\n    name = 'Singularity Fountain'\r\n}\r\n\r\n// maybe library node 'stores' data?\r\n//export class LibraryNode {\r\n//    name = 'Library Node'\r\n//\r\n//    consumes = ResourceBlock.\r\n//}","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { Building, CommonAreaView } from \".\";\r\n\r\nexport class CloneMatrixView extends CommonAreaView {\r\n    //afterConstruct() {\r\n    //    this.spawnCitizen()\r\n    //}\r\n\r\n    //protected spawnCitizen() {\r\n    //    setTimeout(() => this.planet.populate(this.pos), 100)\r\n    //}\r\n\r\n    //draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n    //    super.draw(ctx, delta)\r\n    //}\r\n}","import { DomeView } from \".\";\r\nimport { Color } from \"excalibur\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n\r\n    }\r\n\r\n    drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        // ctx.bezierCurveTo(-3 + xoff, 514 + yoff, 1 + xoff, 406 + yoff, 1 + xoff, 391 + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 100\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() { //loader: ex.Loader) {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Corridor, Mine, Refinery } from \"../../models/Structure\";\r\n\r\nexport class RefineryView extends CommonAreaView {\r\n    validConnectingStructures() { return [ Corridor, Mine, Refinery ]}\r\n\r\n}","import { CommonAreaView } from \".\";\r\n\r\nexport class StudyView extends CommonAreaView {}","import { Building } from \".\";\r\nimport { Corridor } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Vector, Polygon } from \"excalibur\";\r\n\r\nexport class PowerPlantView extends Building {\r\n    showLabel = true\r\n    edgeWidth = 5\r\n\r\n    validConnectingStructures() { return [ Corridor ]}\r\n\r\n    draw(ctx, delta) {\r\n        // octagon...\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() / 2\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n        return theSlots;\r\n    }\r\n\r\n   nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()/2 //-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)) //-16)\r\n        ];\r\n    }\r\n\r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n\r\n}","import { CommonAreaView } from \".\";\r\nimport { Color } from \"excalibur\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\n\r\nexport class KitchenView extends CommonAreaView {\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0 //.5\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { Label, Color, Actor } from \"excalibur\";\r\nimport { Economy } from \"../../models/Economy\";\r\nexport class StatusAnalysisView extends Actor {\r\n    private colonyStatusLabel: Label;\r\n    private powerStatusLabel: Label;\r\n    private atmosphereStatusLabel: Label;\r\n    private shelterStatusLabel: Label;\r\n    private automationStatusLabel: Label;\r\n    private continuityStatusLabel: Label;\r\n    constructor(market: Economy, x: number, y: number, w: number = 200, h: number = 100) {\r\n        super(x + w / 2, y - h / 2, w, h, Color.DarkGray.darken(0.8));\r\n        // this.colonyStatusLabel = new Label(\"Colony: Lost (no wealth/no knowledge/no starport)\", x, y)\r\n        // this.colonyStatusLabel.fontSize = 20\r\n        // this.colonyStatusLabel.color = Color.White\r\n        // this.add(this.colonyStatusLabel)\r\n        let { demand: powerDemand, supply: powerSupply } = market['Power'];\r\n        // this.providence = new ProvidenceList()\r\n        let powerStatus = powerDemand < powerSupply ? 'Up' : 'Down';\r\n        this.powerStatusLabel = new Label(`Power: ${powerStatus} (${powerSupply}/${powerDemand})`, -80, -20);\r\n        this.powerStatusLabel.fontSize = 20;\r\n        this.powerStatusLabel.color = Color.White;\r\n        this.add(this.powerStatusLabel);\r\n        // this.shelterStatusLabel = new Label(\"Shelter: Inadequate (no housing demand/no housing supply)\", x, y + 40)\r\n        // this.shelterStatusLabel.fontSize = 20\r\n        // this.shelterStatusLabel.color = Color.White\r\n        // this.add(this.shelterStatusLabel)\r\n        // this.atmosphereStatusLabel = new Label(\"Atmosphere: Toxic (no O2 demand/no O2 supply/no CO2 scrubbing)\", x, y + 60)\r\n        // this.atmosphereStatusLabel.fontSize = 20\r\n        // this.atmosphereStatusLabel.color = Color.White\r\n        // this.add(this.atmosphereStatusLabel)\r\n        // this.automationStatusLabel = new Label(\"Automation: Primitive (no algorithmic demand/no algorithmic supply)\", x, y + 80)\r\n        // this.automationStatusLabel.fontSize = 20\r\n        // this.automationStatusLabel.color = Color.White\r\n        // this.add(this.automationStatusLabel)\r\n        // this.continuityStatusLabel = new Label(\"Praxis Continuity: Mortal (no ghosts/no neural webs/no academies)\", x, y + 100)\r\n        // this.continuityStatusLabel.fontSize = 20\r\n        // this.continuityStatusLabel.color = Color.White\r\n        // this.add(this.continuityStatusLabel)\r\n    }\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 8, 'Helvetica');\r\n        this.count.fontSize = 12;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            // non-accruable\r\n            [ResourceBlock.Food]: null,\r\n            [ResourceBlock.Hypothesis]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            // displayed/accruable\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 60, 60, Color.DarkGray.darken(0.8));\r\n        let rx0 = -8, ry0 = -10;\r\n        let resources = [ResourceBlock.Meal, ResourceBlock.Data, ResourceBlock.Mineral];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0, ry = ry0 + index * 10;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        this.entries[resource].credit(1);\r\n    }\r\n}\r\n","import { Label, UIActor, Color } from \"excalibur\";\r\nimport { Biodome, Structure, Corridor, SurfaceRoad, Mine, Laboratory, Kitchen, PowerPlant, Study, Refinery, CloneMatrix, Arcology, Ladder, OxygenAccumulator, SolarFarm, WaterCondenser, CarbonDioxideScrubber, AugmentationChamber, Academy, Library, Arbor, ComputerCore, Factory, TimeChamber, EntertainmentCenter, NegentropyPool, Starport, SuspendedAnimationTomb, StrangeMatterWorkshop } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { Building } from \"../Building\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\n\r\nexport class Hud extends UIActor {\r\n    private messageLabel: Label\r\n\r\n\r\n    private resources: ResourcesList\r\n    private status: StatusAnalysisView\r\n\r\n    private _paletteElement: HTMLDivElement\r\n\r\n    static structuresForPalette = [\r\n        Academy,\r\n        Arbor,\r\n        Arcology,\r\n        AugmentationChamber,\r\n        Biodome,\r\n        CarbonDioxideScrubber,\r\n        CloneMatrix,\r\n        ComputerCore,\r\n        Corridor, \r\n        EntertainmentCenter,\r\n        Factory,\r\n        Kitchen,\r\n        Laboratory,\r\n        Ladder,\r\n        Library,\r\n        Mine, Refinery,\r\n        NegentropyPool,\r\n        OxygenAccumulator,\r\n        PowerPlant,\r\n        SolarFarm,\r\n        Starport,\r\n        StrangeMatterWorkshop,\r\n        Study,\r\n        SurfaceRoad,\r\n        SuspendedAnimationTomb,\r\n        TimeChamber,\r\n        WaterCondenser,\r\n    ];\r\n\r\n    comprehendedStructures: (typeof Structure)[] = []\r\n    builtStructures: (typeof Structure)[] = []\r\n\r\n    constructor(game: Game, protected onBuildingSelect = null) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.messageLabel = new Label('hi', 20, game.canvasHeight - 64, 'Verdana')\r\n        this.messageLabel.fontSize = 24\r\n        this.messageLabel.color = Color.White\r\n        this.add(this.messageLabel)\r\n\r\n        this._makePalette(onBuildingSelect)\r\n\r\n        this.resources = new ResourcesList(50, 40)\r\n        this.add(this.resources)\r\n\r\n        // start economy empty?\r\n        let econ = emptyMarket\r\n        let statusX = 20;\r\n        let statusY = game.canvasHeight - 200\r\n        this.status = new StatusAnalysisView(econ, statusX, statusY)\r\n        // this.add(this.status)\r\n\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this._paletteElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._paletteElement.style.left = `${left + 20}px`;\r\n            this._paletteElement.style.top = `${top + 100}px`;\r\n        }\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.resources.increment(resource)\r\n    }\r\n\r\n    updatePalette(bldgs: Building[]) {\r\n        this.builtStructures = //bldgs\r\n          Hud.structuresForPalette.filter((structure) => bldgs.some(b => b.structure instanceof structure))\r\n\r\n\r\n        this.comprehendedStructures = Hud.structuresForPalette.filter((structure: typeof Structure) => {\r\n            let s = new structure()\r\n            let prereqs: (typeof Structure)[] = s.prereqs\r\n            console.log(\"can i build\", { name: s.name, prereqs })\r\n            return prereqs.every((prereq: (typeof Structure)) => {\r\n                let built = this.builtStructures.some((s: (typeof Structure)) => s === prereq)\r\n                console.log(\"do i have any\", { prereq, built })\r\n                return built\r\n            })\r\n        })\r\n\r\n        console.log(\"Built\", { built: this.builtStructures, comprehended: this.comprehendedStructures })\r\n\r\n          // rebuild palette with updated available buildings\r\n        this._paletteElement.parentElement.removeChild(this._paletteElement)\r\n          this._makePalette(this.onBuildingSelect)\r\n    }\r\n\r\n    protected _makePalette(fn: (Structure) => any) {\r\n        this._paletteElement = document.createElement('div') \r\n        this._paletteElement.id = '_thePalette'\r\n        this._paletteElement.style.position = 'absolute'\r\n        this._paletteElement.style.border = '1px solid white'\r\n        document.body.appendChild(this._paletteElement)\r\n\r\n        this.comprehendedStructures\r\n        .map(structure => new structure())\r\n        .sort((a,b) => a.dominantColor > b.dominantColor ? -1 : 1)\r\n        .forEach((structure: Structure) => {\r\n            let _paletteButton = this.buttonFactory(structure);\r\n            this._paletteElement.appendChild(\r\n                _paletteButton\r\n            )\r\n            _paletteButton.onclick = (e) => { fn(structure) }\r\n        });\r\n    }\r\n\r\n    private buttonFactory(s: Structure) {\r\n        let bg = s.dominantColor.darken(0.4).desaturate(0.6) //.toRGBA()\r\n        bg.a = 0.8\r\n        let fg = s.dominantColor.lighten(0.8).desaturate(0.4) //.toRGBA()\r\n        let paletteButton = document.createElement('button');\r\n\r\n        let label = s.name\r\n        if (!this.builtStructures.map(s => new s().name).includes(s.name)) {\r\n            label += '*';\r\n\r\n        }\r\n\r\n        paletteButton.textContent = label; // `${s.name}`;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '10pt';\r\n\r\n        paletteButton.style.fontFamily = 'Helvetica';\r\n        paletteButton.style.fontWeight = '600';\r\n        paletteButton.style.padding = '8px';\r\n        paletteButton.style.width = '160px';\r\n        paletteButton.style.textTransform = 'uppercase'\r\n        paletteButton.style.border = '1px solid rgba(255,255,255,0.08)'\r\n\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA()\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.lighten(0.5).toRGBA()\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA()\r\n        }\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA()\r\n            paletteButton.style.color = fg.toRGBA()\r\n        }\r\n\r\n        return paletteButton;\r\n    }\r\n}","import { CommonAreaView } from '.'\r\nimport { Vector } from 'excalibur';\r\nimport { Corridor, Refinery, Mine } from '../../models/Structure';\r\n\r\nexport class MineView extends CommonAreaView {\r\n    floorHeight = 150\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    validConnectingStructures() { return [ Corridor, Mine, Refinery ]}\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    // edgeWidth = 1\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Color } from \"excalibur\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\n\r\nexport class LabView extends CommonAreaView {\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { MissionControl } from \"../../models/Structure\";\r\nimport { range, eachCons, measureDistance, drawRect } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n    // edgeWidth = 0.2\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y) //, Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        // connect node to first slot...\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            // we're determining depth of tunnel\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class MissionControlView extends Building {\r\n    hideBox = true\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n           \r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2 // + 1\r\n    }\r\n\r\n    //async interact(citizen: Citizen) {\r\n    //}\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor();\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n        // y is going to be surface height\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        // could draw a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3*(this.getWidth()/4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        return [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n    }\r\n}","import { Building } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 8\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    // maybe you can set height AND width of common area view??\r\n    // maybe just width...\r\n    colorBase() { return this.color.darken(0.1); }\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        // top slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        // bottom slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)) //-16)\r\n        ];\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine, MachineOperation } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\n\r\nexport class Device extends Actor {\r\n    product: ResourceBlock[] = []\r\n    capacity: number = 4\r\n\r\n    nameLabel: Label\r\n\r\n    image: any\r\n    imageLoaded: boolean = false\r\n\r\n    constructor(\r\n        public building: Building, private machine: Machine, private initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            machine.width,\r\n            machine.height,\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 8\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = function () {\r\n             this.imageLoaded = true\r\n        }\r\n        this.image.src = machine.image\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        // super.draw(ctx, delta)\r\n        ctx.drawImage(\r\n            this.image,\r\n            this.pos.x - this.getWidth() / 2,\r\n            this.pos.y - this.getHeight() / 2,\r\n            this.getWidth(), this.getHeight()\r\n        )\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.machine.name).width / 2\r\n            this.nameLabel.pos.y -= 20\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let bx = this.x - this.getWidth()/2, by = this.y - 10\r\n        let blockSize = 5\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).desaturate(0.3).lighten(0.2).toRGBA();\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get produces()       { return this.machine.produces }\r\n    get consumes()       { return this.machine.consumes }\r\n    get productionTime() { return this.machine.productionTime }\r\n\r\n    async interact(citizen: Citizen) {\r\n        if (this.machine.behavior === MachineOperation.Work) {\r\n            if (this.product.length > 0) {\r\n                this.product.pop()\r\n                await citizen.progressBar(200) //this.productionTime)\r\n                citizen.carry(this.produces)\r\n            } else {\r\n                if (this.consumes && citizen.carrying === this.consumes) {\r\n                    await citizen.progressBar(this.productionTime)\r\n                    citizen.carry(this.produces)\r\n                }\r\n            }\r\n        } else if (this.machine.behavior === MachineOperation.CollectResource) {\r\n            // assume we are gathering a resource here?\r\n            let resource = citizen.drop()\r\n            if (resource) {\r\n                this.building.redeem(resource) //planet.gather(resource)\r\n            }\r\n        }\r\n    }\r\n\r\n    public produce(step: number) {\r\n        if (step % this.productionTime === 0) {\r\n            if (this.machine.behavior === MachineOperation.Work) {\r\n\r\n                if (this.produces && !this.consumes && this.product.length < this.capacity) {\r\n                    this.product.push(this.produces)\r\n                }\r\n            } else if (this.machine.behavior === MachineOperation.SpawnCitizen) {\r\n                setTimeout(() => this.building.populate(this.pos), 100)\r\n            }\r\n        }\r\n    }\r\n\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons } from \"../Util\";\r\nimport { Machine, Stove, ExperimentBench, MineralProcessor, CommandCenter, Orchard, MiningDrill, Bookshelf } from \"../models/Machine\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\n\r\nexport class Citizen extends Actor {\r\n\r\n    walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock = null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    constructor(private device: Device, protected planet: Planet) {\r\n        super(device.x, device.y, Scale.minor.first, Scale.minor.third, Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = (now - this.workStarted) / this.workDuration //0.5\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            ctx.fillStyle = blockColor(this.carrying).toRGBA()\r\n            ctx.fillRect(this.x+4, this.y-3, 5, 5)\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            // draw progress bar?\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            // ctx.stroke(20)\r\n            ctx.strokeRect(px, py, pw, ph)\r\n\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n\r\n            this.vel.x += (Math.random())-0.5 // * 10.0)\r\n        }\r\n\r\n        let debugPath = false\r\n        if (this.path && debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 10\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    carry(c: ResourceBlock) { //c: Color) {\r\n        this.carrying = c;\r\n    }\r\n\r\n    drop(): ResourceBlock {\r\n        if (this.carrying) {\r\n            let c = this.carrying; //.clone();\r\n            this.carrying = null;\r\n            return c\r\n        }\r\n        return null\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        // console.log(\"PROGRESS BAR\")\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        // console.log(\"PROGRESS BAR DONE!\")\r\n        this.workInProgress = false\r\n    }\r\n\r\n    async pathTo(building: Building) { //}, onArrival: (Building) => any) {\r\n        // let building = this.planet.closestBuildingByType(this.pos, structure)\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            path.pop()\r\n            path.shift()\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = null\r\n            // onArrival(building);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    async work() {\r\n        if (this.carrying) {\r\n            let item: ResourceBlock = this.carrying;\r\n            let sinks: (typeof Machine)[] = []\r\n\r\n            if (ResourceBlock[item] === 'Food') {\r\n                sinks = [Stove]\r\n            } else if (ResourceBlock[item] === 'Hypothesis') {\r\n                sinks = [ExperimentBench]\r\n            } else if (ResourceBlock[item] === 'Ore') {\r\n                sinks = [MineralProcessor]\r\n            } else {\r\n                sinks = [CommandCenter]\r\n            }\r\n\r\n            if (sinks.length > 0) {\r\n                let theSink: Device = this.planet.closestDevice(this.pos, sinks)\r\n                if (theSink) {\r\n                    await this.pathTo(theSink.building)\r\n                    await this.glideTo(theSink.pos)\r\n                    await theSink.interact(this)\r\n                }\r\n            } else {\r\n                console.log(\"nowhere to deliver it\", this.carrying)\r\n            }\r\n        } else {\r\n            let source: Device = this.planet.closestDevice(this.pos,\r\n                [ Orchard, MiningDrill, Bookshelf ],\r\n                (d) => d.product.length > 0\r\n            )\r\n\r\n            if (source) {\r\n                await this.pathTo(source.building)\r\n                await this.glideTo(source.pos)\r\n                await source.interact(this)\r\n            } else {\r\n                console.log(\"i guess i can try again? (sleep for a bit first)\")\r\n                await new Promise((resolve, reject) => setTimeout(resolve, 150));\r\n            }\r\n        }\r\n\r\n        setTimeout(() => this.work(), 100)\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(home: Device) {\r\n        let citizen = new Citizen(home, this.planet);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure, MissionControl } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building = null;\r\n    maxPop: number = 8\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = false\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => structureTypes.some(structureType => (building.structure instanceof structureType)) && predicate(building));\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[], predicate: (Device) => boolean = () => true) {\r\n        let devices = flatSingle(this.buildings.map(b => b.devices))\r\n        devices = devices.filter(d => machineTypes.some(machine => d.machine instanceof machine) && predicate(d))\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d)\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure, CloneMatrix } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\n\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n\r\n    constructor(\r\n        public hud: Hud,\r\n        public color: Color,\r\n        public width: number = 2000000,\r\n        public depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, width, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2\r\n        // crust\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector) {\r\n        // we could have a colony pop limit for now?\r\n        if (this.population.citizens.length < this.colony.maxPop) {\r\n            // let home = this.closestBuildingByType(pos, [CloneMatrix])\r\n            let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(home)\r\n        }\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n}","import { Scene, Input, Vector } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MissionControl, MainTunnel, Corridor, SurfaceRoad, Kitchen, CloneMatrix, OxygenAccumulator } from \"../models/Structure\";\r\nimport { Building, DomeView, CorridorView, CommonAreaView, TunnelView, MissionControlView, LadderView, MineView, LabView, } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { SurfaceRoadView } from \"../actors/Building/SurfaceRoadView\";\r\nimport { KitchenView } from \"../actors/Building/KitchenView\";\r\nimport { PowerPlantView } from \"../actors/Building/PowerPlantView\";\r\nimport { StudyView } from \"../actors/Building/StudyView\";\r\nimport { RefineryView } from \"../actors/Building/RefineryView\";\r\nimport { ArcologyView } from \"../actors/Building/ArcologyView\";\r\nimport { CloneMatrixView } from \"../actors/Building/CloneMatrixView\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    static structureViews: { [key: string]: typeof Building } = {\r\n        TunnelView,\r\n        MissionControlView,\r\n        DomeView,\r\n        CorridorView,\r\n        CommonAreaView,\r\n        SurfaceRoadView,\r\n        LabView,\r\n        MineView,\r\n        KitchenView,\r\n        PowerPlantView,\r\n        StudyView,\r\n        RefineryView,\r\n\r\n        ArcologyView,\r\n        CloneMatrixView,\r\n\r\n        LadderView,\r\n    }\r\n    ////\r\n    static requiredStructureList: Array<typeof Structure> = [\r\n        MissionControl,\r\n\r\n        SurfaceRoad,\r\n        OxygenAccumulator,\r\n        // Dome,\r\n        MainTunnel,\r\n        Corridor,\r\n        Kitchen,\r\n        // Study,\r\n        // CloneMatrix,\r\n    ]\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n\r\n        this.hud = new Hud(game, (structure) => {\r\n            this.startConstructing(structure)\r\n        });\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(this.hud, game.world.color);\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(2, 10000)\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentBuilding = this.planet.currentlyConstructing\r\n                if (currentBuilding) {\r\n                    let constrained = currentBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentBuilding.reshape(this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', (e: Input.PointerUpEvent) => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentBuilding: Building = this.planet.currentlyConstructing\r\n                if (currentBuilding) {\r\n                    let placementValid = !currentBuilding.overlapsAny()\r\n                    if (currentBuilding && placementValid && currentBuilding.handleClick(e.pos)) {\r\n                        this.planet.placeBuilding(currentBuilding)\r\n                        this.planet.colony.currentlyConstructing = null\r\n                        this.prepareNextBuilding(e.pos)\r\n                        this.hud.updatePalette(this.planet.colony.buildings)\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingRequiredStructure(): Structure {\r\n        let requiredStructures: Structure[] = Construct.requiredStructureList.map(s => new s())\r\n        let actualStructureNames: string[] = this.buildings.map(building => building.structure.name)\r\n\r\n        return requiredStructures.find(structure => !actualStructureNames.includes(structure.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.setMessage(`Welcome to OSIRIS!`)\r\n        }\r\n    }\r\n\r\n    startConstructing(structure: Structure, pos: Vector = new Vector(0, 0)) {\r\n        structure.origin = pos\r\n        this.hud.setMessage(`Place ${structure.name}`)\r\n        let theNextOne = this.spawnBuilding(structure)\r\n        this.planet.colony.currentlyConstructing = theNextOne\r\n        this.camera.pos = theNextOne.pos\r\n        this.camera.zoom(structure.zoom, 250)\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(anotherBuilding.pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure): Building {\r\n        let View = Construct.structureViews[structure.view]\r\n        let building = new View(structure, this.planet)\r\n        return building;\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Red, Color.Blue, Color.Green] // Color.Viridian, Color.Magenta, Color.Chartreuse];\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ). // Color.Rose //World.colors).\r\n        lighten(0.15).\r\n        desaturate(0.65) // sample([Color.Blue, Color.Rose,Color.Blue]).lighten(0.1).desaturate(0.8)\r\n//   colony: Colony = new Colony()\r\n\r\n  \r\n}","module.exports = __webpack_public_path__ + \"0f6ac78b40c6bc151aee01b517f49ca1.png\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\nconst bookshelf = require('./images/bookshelf.png');\r\n// const bookshelfSvg = require('./images/bookshelf-plain.svg');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword),\r\n\r\n    Bookshelf: new ex.Texture(bookshelf),\r\n\r\n    // BookshelfSVG: new ex.Texture(bookshelfSvg)\r\n}\r\n\r\nexport { Resources }\r\n","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\n// scenes\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}