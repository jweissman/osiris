{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/values/DeviceSize.ts","webpack:///./src/Util.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Machine.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/models/Structure.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/values/Scale.ts","webpack:///./src/values/Graph.ts","webpack:///./src/actors/Device.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Hud/Palette.ts","webpack:///./src/actors/Hud/CardBody.ts","webpack:///./src/actors/Hud/CardTitle.ts","webpack:///./src/actors/Hud/Card.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MediumSurfaceRoomView.ts","webpack:///./src/actors/Building/MediumRoomThreeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/actors/player.ts","webpack:///./src/images/console-green-plain.svg","webpack:///./src/images/console-purple-plain.svg","webpack:///./src/images/console-plain.svg","webpack:///./src/images/workstation-plain.svg","webpack:///./src/images/houseplant-plain.svg","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/models/MechanicalOperation.ts","webpack:///./src/strategies/ProductionStrategy.ts","webpack:///./src/strategies/CapacityBasedProduction.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","fifth","eighth","excalibur_1","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","deleteByValueOnce","index","indexOf","eachCons","measureDistance","b","drawLine","ctx","lineWidth","Color","White","beginPath","moveTo","x","y","lineTo","strokeStyle","toRGBA","stroke","drawRect","rectangle","edgeWidth","color","filled","dashed","width","height","main","fillStyle","fillRect","edge","setLineDash","strokeRect","sleep","ms","Promise","resolve","setTimeout","shuffle","sort","zip","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","SurfaceRoadView_1","SurfaceRoadView","SmallDomeThreeView_1","SmallDomeThreeView","MidDomeView_1","MidDomeView","BigDomeView_1","BigDomeView","SmallRoomThreeView_1","SmallRoomThreeView","MediumRoomView_1","MediumRoomView","LargeRoomView_1","LargeRoomView","HugeRoomView_1","HugeRoomView","MediumRoomThreeView_1","MediumRoomThreeView","MediumSurfaceRoomView_1","MediumSurfaceRoomView","structureViews","Orientation_1","Util_1","Graph_1","SpaceFunction_1","DeviceSize_1","DevicePlace","pos","this","_super","structure","planet","_this","built","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","level","devices","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","currentlyViewing","collisionType","CollisionType","PreventCollision","nameLabel","Label","levelLabel","fontSize","darken","__extends","levelUp","text","spaceFunction","description","draw","delta","aabb","processedColor","forEach","device","getCenter","measureText","devicePlaces","place","position","visibleSize","update","engine","produce","constrainCursor","clone","reshape","afterConstruct","handleClick","_pos","slots","nodes","getWidth","getHeight","graph","supergraph","Graph","g","rootNode","findOrCreate","_i","_a","child","slot","parentSlot","childNode","redeem","res","gather","populate","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","find","bldg","edgeColor","lighten","mainColor","colorBase","clr","Red","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","closestBuildingByType","building","matchingSlot","compass_1","compass","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","updateFunction","hasPlaceForDevice","nextDevicePlace","getDevices","allSpaceFunctions","spaceFn","matched","unseenDevices","machines","machine","matchingDevice","console","log","sf","warn","Actor","PureValue","Power","Oxygen","Water","Shelter","Hope","Joy","Wisdom","Wealth","Beauty","Wonder","allValues","emptyMarket","supply","demand","availableCapacity","market","sumMarkets","ea","eb","newMarket","sa","da","_b","ResourceBlock","Biomass","Ore","Idea","Meal","Data","Mineral","Bioplasma","Alloy","Algorithm","Argent","Aurum","Omnium","blockColors","Green","Blue","Yellow","cStep","Viridian","DarkGray","Gray","Orange","blockColor","block","desaturate","t","setPrototypeOf","__proto__","constructor","create","__assign","assign","arguments","Economy_1","MechanicalOperation_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","plant","workstation","consolePurple","consoleGreen","Violet","store","mechanicalOperations","generate","recipe","spawn","Machine","LightGray","operation","type","image","prereqs","economy","forDome","hide","concretize","CommandCenter","MissionLog","OxygenExtractor","WaterCondensingMachine","SolarCell","StudyMachine","Workstation","Desk","Bookshelf","Fridge","Stove","Bed","Houseplant","PersonnelRegistry","CloningVat","MetalStorage","ResearchServer","Orchard","AlgaeVat","Cabin","Arbor","Botany","productionTime","DissolutionVat","PlasmaBank","Fabricator","OreRefinery","ThinkingPool","MolecularEngine","fromHex","SilverForest","Megafabricator","MiningDrill","Mainframe","Preserve","Microcity","LogicCrystal","allMachines","Left","Up","Down","orientation","Error","Machine_1","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","Structure","view","zoom","Corridor","Ladder","MainTunnel","second","MediumSurfaceRoom","SurfaceRoad","first","Dome","CommonArea","SmallRoomThree","sixth","SmallRoomTwo","SmallDome","MediumRoom","MediumRoomThree","LargeRoom","HugeRoom","seventh","SmallDomeThree","MidDome","LargeDome","Arcology","allStructures","Structure_1","SpaceFunction","MissionControl","LivingQuarters","Barracks","Kitchen","LifeSupportPod","Retreat","CloneMatrix","ReadingRoom","Library","Study","Lab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Farm","Factory","ComputerCore","majorUnit","fourth","minorUnit","minorScale","empty","edges","edgesInverse","isEmpty","node","newNode","contains","testNode","includes","measure","tolerance","dfs","src","dst","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","path","steps","srcIndex","reverse","retrieveResource","resource","Device","initialPos","product","inUse","imageLoaded","Image","onload","drawImage","imageX","imageY","iv","bx","by","yOff","produced","blockSize","interact","citizen","request","worked","op","recipe_1","carrying","some","it","consumes","isCarryingUnique","consumed","drop","progressBar","workTime","sent","carry","produces","requires","has","label","store_1","dispense","stores","capacity","res_1","stored","generationTime","generates","snap","snapped","Resources_1","Game","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","start","loader","Loader","key","Resources","addResource","citizenSpeed","Engine","Palette","all","onButtonClick","onButtonEnter","comprehend","comprehended","makePalette","_element","left","canvas","offsetLeft","top_1","offsetTop","style","top","updateBuilt","every","prereq","parentElement","removeChild","document","createElement","border","body","appendChild","title","textContent","fontFamily","fontWeight","padding","margin","btn","buttonFactory","onmouseenter","onclick","bg","fg","paletteButton","display","textTransform","background","onmouseover","saturate","onmouseleave","CardBody","entity","values","add","notes","fontStyle","FontStyle","Italic","show","econ","join","CardTitle","Black","announce","CardTitle_1","CardBody_1","Card","x0","cardBody","y0","ix","iy","present","EconomicValue","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","allValues_1","updateView","updatedEconomy","allValues_2","ResourceListEntry","resourceBlock","icon","credit","amt","ResourceListEntry_1","ResourcesList","entries","rx","ry","entry","increment","ResourcesList_1","EconomyView_1","StatusAnalysisView","w","h","brand","ty","version","resources","popLabel","messageLabel","incrementResource","setMessage","showEconomy","showPopCap","cap","StatusAnalysisView_1","Card_1","Palette_1","Hud","game","onBuildingSelect","onMachineSelect","onFunctionSelect","canvasWidth","canvasHeight","status","displayInfo","showCard","structurePalette","structuresForPalette","machinePalette","functionPalette","functionsForPalette","card","resourceGathered","updateDetails","rebuildPalettes","updatePalettes","updateEconomy","updateMaxPop","maxPop","updateBuildingPalette","updateMachinePalette","updateFunctionPalette","builtStructures","findAllDevices","builtMachines","machinesForPalette","builtReifiedFunctions","builtFunctions","rf","UIActor","devicePlaceSize","devicePlaceCount","theSlots","slotY","getTop","flagX","flagY","_1","floorHeight","originSlot","pickingOrigin","maxHeight","setHeight","drawShape","xoff","yoff","bezierCurveTo","rect","halfWidth","slotHeights","heights","y1","btm","lst","right","slotCount","arc","PI","closePath","wallColor","floorColor","leftSlot","rightSlot","originX","newCursor","setWidth","abs","ex","Player","input","output","__awaiter","throw","done","then","__generator","trys","ops","return","Symbol","iterator","TypeError","pop","Device_1","ProductionStrategy","pawn","sleepInterval","isActive","currentPlanet","recipes","operations","attempt","pause","setInterval","workRecipe","ingredient","gatherBlock","knowsRecipe","maker","closestDeviceByType","visitDevice","performRecipeTask","storeBlock","storesDesiredBlock","openStore","gathered","generatesDesiredBlock","gen","pathTo","glideTo","CapacityBasedProduction","storeWithCapacity","storage_1","recipeForStoredResource","Game_1","CapacityBasedProduction_1","Citizen","walkSpeed","workInProgress","productionStrategy","isWorking","work","now","Date","getTime","progress","workStarted","workDuration","carried","px","pw","py","isCarrying","carryingCopy","resToFind","actions","asPromise","duration","reject","pathBetween","Citizen_1","Population","citizens","increase","home","NavigationTree","seekPath","origin","dest","closestNode","NavigationTree_1","Colony","currentlyConstructing","navTree","placeBuilding","buildNavTree","structureTypes","st","destination","srcNode","destNode","machineTypes","ctrl","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","yBase","peak","mtnWidth","PlanetBackground","PlanetBackground_1","Colony_1","Population_1","Planet","hud","onBuildingHover","depth","createLayer","layerHeight","population","set","theLayer","theEconomy","popularDemand","closestDevice","theEconomyWithoutPeople","val","Planet_1","player_1","Hud_1","Construct","dragging","defaultMessage","placingFunction","buildIt","startConstructing","player","prepareNextBuilding","camera","onActivate","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction_1","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","Esc","onDeactivate","off","nextMissingStructureOrFunction","reqs","requiredStructuresAndFunctions","req","actualStructureNames","actualFunctionNames","actualNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","spawnFunction","anotherBuilding","assembleBuildingFromStructure","theStructure","Scene","World","colors","Cyan","Vermillion","bestowName","sword","Sword","Texture","World_1","Construct_1","theWorld","construct","goToScene"],"mappings":"aACA,SAAAA,EAAAC,GAOA,IANA,IAKAC,EAAAC,EALAC,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAGAM,EAAA,EAAAC,KACQD,EAAAH,EAAAK,OAAoBF,IAC5BJ,EAAAC,EAAAG,GACAG,EAAAP,IACAK,EAAAG,KAAAD,EAAAP,GAAA,IAEAO,EAAAP,GAAA,EAEA,IAAAD,KAAAG,EACAO,OAAAC,UAAAC,eAAAC,KAAAV,EAAAH,KACAc,EAAAd,GAAAG,EAAAH,IAIA,IADAe,KAAAhB,GACAO,EAAAC,QACAD,EAAAU,OAAAV,GAOA,OAHAW,EAAAR,KAAAS,MAAAD,EAAAb,OAGAe,IAEA,SAAAA,IAEA,IADA,IAAAC,EACAf,EAAA,EAAiBA,EAAAY,EAAAV,OAA4BF,IAAA,CAG7C,IAFA,IAAAgB,EAAAJ,EAAAZ,GACAiB,KACAC,EAAA,EAAkBA,EAAAF,EAAAd,OAA2BgB,IAAA,CAC7C,IAAAC,EAAAH,EAAAE,GACA,IAAAf,EAAAgB,KAAAF,MAEAA,IACAL,EAAAQ,OAAApB,IAAA,GACAe,EAAAM,IAAAC,EAAAN,EAAA,KAGA,OAAAD,EAIA,IAAAQ,KAKApB,GACAqB,EAAA,GAGAZ,KAGA,SAAAS,EAAA1B,GAGA,GAAA4B,EAAA5B,GACA,OAAA4B,EAAA5B,GAAA8B,QAGA,IAAAC,EAAAH,EAAA5B,IACAK,EAAAL,EACAgC,KACAF,YAUA,OANAhB,EAAAd,GAAAa,KAAAkB,EAAAD,QAAAC,IAAAD,QAAAJ,GAGAK,EAAAC,KAGAD,EAAAD,QAKAJ,EAAAO,EAAAnB,EAGAY,EAAAQ,EAAAN,EAGAF,EAAAS,EAAA,SAAAL,EAAAM,EAAAC,GACAX,EAAAY,EAAAR,EAAAM,IACA1B,OAAA6B,eAAAT,EAAAM,GACAI,gBACAC,cACAC,IAAAL,KAMAX,EAAAiB,EAAA,SAAAb,GACApB,OAAA6B,eAAAT,EAAA,cAAiDc,YAIjDlB,EAAAmB,EAAA,SAAAd,GACA,IAAAM,EAAAN,KAAAe,WACA,WAA2B,OAAAf,EAAAgB,SAC3B,WAAiC,OAAAhB,GAEjC,OADAL,EAAAS,EAAAE,EAAA,IAAAA,GACAA,GAIAX,EAAAY,EAAA,SAAAU,EAAAC,GAAsD,OAAAvC,OAAAC,UAAAC,eAAAC,KAAAmC,EAAAC,IAGtDvB,EAAAwB,EAAA,GAEA,IAAAC,EAAAC,OAAAC,aAAAD,OAAAC,iBACAC,EAAAH,EAAA1C,KAAA8C,KAAAJ,GACAA,EAAA1C,KAAAX,EACAqD,IAAAK,QACA,QAAAnD,EAAA,EAAgBA,EAAA8C,EAAA5C,OAAuBF,IAAAP,EAAAqD,EAAA9C,IACvC,IAAAU,EAAAuC,EAIArC,EAAAR,MAAA,OAEAU,qFCrIA,IAGYsC,EAHZC,EAAAhC,EAAA,IACMiC,EAAAD,EAAAE,MAAAD,MAAOD,EAAAE,MAAAC,MAEb,SAAYJ,GACRA,IAAAK,MAAA,WACAL,IAAAM,OAAA,YACAN,IAAAO,MAAA,WACAP,IAAAQ,KAAA,UAJJ,CAAYR,EAAA3B,EAAA2B,aAAA3B,EAAA2B,gBAQZ3B,EAAAoC,qBAAA,SAAqCC,GACjC,IAAIC,EAAK,GACT,OAAQD,GACJ,KAAKV,EAAWK,MAAOM,EAAKT,EAAMU,MAAO,MACzC,KAAKZ,EAAWM,OAAQK,EAAKT,EAAMW,MAAO,MAC1C,KAAKb,EAAWO,MAAOI,EAAKT,EAAMY,OAASZ,EAAMU,MAAO,MACxD,KAAKZ,EAAWQ,KAAMG,EAAK,EAAIT,EAAMY,OAEzC,OAAOH,kFCnBX,IAAAI,EAAA9C,EAAA,GAGM+C,EAAa,SAACC,EAAKC,EAAOC,GAC9B,OAAOF,EAAIG,OAAO,SAASC,EAAMC,GAC/B,IAAIC,GAASL,EAAMI,GAAOA,GAC1B,OAAKD,GAEMF,EAAS1D,MAAM,MAAQ4D,EAAK,GAAIE,EAAK,MAASF,EAAK,GACpDA,EAFAE,GAMV,MAAM,IAqCV,SAASC,EAAUC,EAAG7E,EAAGwC,GAEvB,IADA,IAAIF,KACKpB,EAAI,EAAGA,EAAIsB,EAAGtB,IACrBoB,EAAElC,KAAKyE,EAAE7E,EAAIkB,IAEf,OAAOoB,EAvCIb,EAAAqD,MAAQ,SAACT,EAAKU,GAAO,OAAAX,EAAWC,EAAKU,EAAIC,KAAKC,MAC9CxD,EAAAyD,MAAQ,SAACb,EAAKU,GAAO,OAAAX,EAAWC,EAAKU,EAAIC,KAAKG,MAG9C1D,EAAA2D,OAAS,SAACf,GAAQ,OAAAA,EAAIW,KAAKK,MAAML,KAAKM,SAAWjB,EAAInE,UAErDuB,EAAA8D,MAAQ,SAAC/C,GAAM,OAAAgD,MAAMhD,GAAGiD,KAAK,GAAGC,IAAI,SAACC,EAAKC,GAAQ,OAAAA,KAE/DnE,EAAAoE,QAAA,SAA2BC,EAAgBzB,EAAe0B,EAA0BC,GACjF,IAAIC,EAAqB5B,EAEzB,GADI2B,IAAa3B,EAAMA,EAAI6B,OAAOF,IAC9BC,EAED,OAAOxE,EAAAqD,MAAMmB,EADU,SAACE,GAAY,OAAAL,EAAOM,SAASL,EAAUI,OAKvD1E,EAAA4E,WAAa,SAAAhC,GAAO,SAAGiC,OAAMzF,SAAIwD,IAEjC5C,EAAA8E,cAAgB,SAAClC,EAAK8B,GAAS,OAAA9B,EAAI6B,OAAO,SAAAM,GAAK,OAAAA,IAAML,KAErD1E,EAAAgF,kBAAoB,SAACpC,EAAK8B,GACrC,IAAIO,EAAQrC,EAAIsC,QAAQR,IACT,IAAXO,GAAcrC,EAAIjD,OAAOsF,EAAO,IAGtCjF,EAAAmF,SAAA,SAAyB/B,EAAGrC,GAE1B,IADA,IAAIF,KACKtC,EAAI,EAAGA,EAAI6E,EAAE3E,OAASsC,EAAI,EAAGxC,IACpCsC,EAAElC,KAAKwE,EAASC,EAAG7E,EAAGwC,IAExB,OAAOF,GAWIb,EAAAoF,gBAAkB,SAAChC,EAAWiC,GAAc,OAAAjC,EAAEuB,SAASU,IAIpErF,EAAAsF,SAAA,SAAyBC,EAA+BnC,EAAWiC,EAAWjF,EAAwBoF,YAAxBpF,MAAWsC,EAAA+C,MAAMC,gBAAOF,MAAA,GACpGpF,EAAEgD,EAAI,GACNmC,EAAII,YACJJ,EAAIK,OAAOxC,EAAEyC,EAAGzC,EAAE0C,GAClBP,EAAIQ,OAAOV,EAAEQ,EAAGR,EAAES,GAClBP,EAAIS,YAAc5F,EAAE6F,SACpBV,EAAIC,UAAYA,EAChBD,EAAIW,UAGNlG,EAAAmG,SAAA,SACEZ,EACAa,EACAC,EACAC,EACAC,EACAC,YAHAH,MAAA,YACAC,MAAe5D,EAAA+C,MAAMC,gBACrBa,eAAA,IACAC,UAEM,IAAAX,EAAAO,EAAAP,EAAGC,EAAAM,EAAAN,EAAGW,EAAAL,EAAAK,MAAOC,EAAAN,EAAAM,OAQnB,GAAIH,EAAQ,CACV,IAAII,EAAOL,EACXf,EAAIqB,UAAYD,EAAKV,SACrBV,EAAIsB,SACFhB,EACAC,EACAW,EACAC,GAIJ,GAAIL,EAAY,EAAG,CACjB,IAAIS,EAAOpE,EAAA+C,MAAMC,MACjBH,EAAIS,YAAcc,EAAKb,SACvBV,EAAIC,UAAUa,EACVG,EAAUjB,EAAIwB,aAAa,EAAG,KAC3BxB,EAAIwB,gBAEXxB,EAAIyB,WACFnB,EAAGC,EAAGW,EAAOC,KAKnB1G,EAAAiH,MAAA,SAAsBC,GACpB,OAAO,IAAIC,QAAQ,SAAAC,GAAW,OAAAC,WAAWD,EAASF,MAGpDlH,EAAAsH,QAAA,SAAwB1E,GACrB,OAAOA,EAAI2E,KAAK,WAAM,OAAAhE,KAAKM,SAAW,GAAM,GAAK,KAGvC7D,EAAAwH,IAAM,SAACpE,EAAGiC,GAAM,OAAAjC,EAAEa,IAAI,SAACc,EAAExG,GAAM,OAACwG,EAAGM,EAAE9G,sFCxHlD,IAAAkJ,EAAA7H,EAAA,GA4CII,EAAA0H,SA5CKD,EAAAC,SAET,IAAAC,EAAA/H,EAAA,IA4CII,EAAA4H,aA5CKD,EAAAC,aACT,IAAAC,EAAAjI,EAAA,IAuDII,EAAA8H,eAvDKD,EAAAC,eACT,IAAAC,EAAAnI,EAAA,IA+CII,EAAAgI,SA/CKD,EAAAC,SACT,IAAAC,EAAArI,EAAA,IA2CII,EAAAkI,WA3CKD,EAAAC,WACT,IAAAC,EAAAvI,EAAA,IA2DII,EAAAoI,aA3DKD,EAAAC,aACT,IAAAC,EAAAzI,EAAA,IAwCII,EAAAsI,WAxCKD,EAAAC,WACT,IAAAC,EAAA3I,EAAA,IAyCII,EAAAwI,gBAzCKD,EAAAC,gBACT,IAAAC,EAAA7I,EAAA,IA2CII,EAAA0I,mBA3CKD,EAAAC,mBACT,IAAAC,EAAA/I,EAAA,IA2CII,EAAA4I,YA3CKD,EAAAC,YACT,IAAAC,EAAAjJ,EAAA,IA2CII,EAAA8I,YA3CKD,EAAAC,YACT,IAAAC,EAAAnJ,EAAA,IA4CII,EAAAgJ,mBA5CKD,EAAAC,mBACT,IAAAC,EAAArJ,EAAA,IA8CII,EAAAkJ,eA9CKD,EAAAC,eACT,IAAAC,EAAAvJ,EAAA,IAgDII,EAAAoJ,cAhDKD,EAAAC,cACT,IAAAC,EAAAzJ,EAAA,IAgDII,EAAAsJ,aAhDKD,EAAAC,aACT,IAAAC,EAAA3J,EAAA,IA4CII,EAAAwJ,oBA5CKD,EAAAC,oBACT,IAAAC,EAAA7J,EAAA,IAkDII,EAAA0J,sBAlDKD,EAAAC,sBAGT,IAAMC,GACF/B,aAAYD,EAAAC,aACZU,WAAUD,EAAAC,WACVJ,WAAUD,EAAAC,WACVM,gBAAeD,EAAAC,gBAEfR,SAAQD,EAAAC,SACRU,mBAAkBD,EAAAC,mBAClBE,YAAWD,EAAAC,YACXE,YAAWD,EAAAC,YAEXE,mBAAkBD,EAAAC,mBAElBlB,eAAcD,EAAAC,eACdoB,eAAcD,EAAAC,eACdM,oBAAmBD,EAAAC,oBACnBJ,cAAaD,EAAAC,cACbE,aAAYD,EAAAC,aAEZlB,aAAYD,EAAAC,aACZsB,sBAAqBD,EAAAC,uBA8BrB1J,EAAA2J,gbCtEJ,IAAAjH,EAAA9C,EAAA,GAIAgK,EAAAhK,EAAA,GAGAiK,EAAAjK,EAAA,GACAkK,EAAAlK,EAAA,IAGAmK,EAAAnK,EAAA,GACAoK,EAAApK,EAAA,GAGAqK,EAAA,WACI,SAAAA,EAAoBC,EAAqB7H,GAArB8H,KAAAD,MAAqBC,KAAA9H,OAI7C,OAHIzD,OAAA6B,eAAIwJ,EAAApL,UAAA,YAAA+B,IAAJ,WAAiB,OAAOuJ,KAAKD,qCAC7BtL,OAAA6B,eAAIwJ,EAAApL,UAAA,eAAA+B,IAAJ,WAAoB,OAAOoJ,EAAA5H,qBAAqB+H,KAAK9H,uCAEzD4H,EALA,GAAajK,EAAAiK,cAOb,IAAAvC,EAAA,SAAA0C,GAqBI,SAAA1C,EAAYwC,EAAoBG,EAAgCC,GAAhE,IAAAC,EACIH,EAAArL,KAAAoL,KACED,EAAIrE,EACJqE,EAAIpE,EACJuE,EAAU5D,MACV4D,EAAU3D,OACV4D,EAAOhE,QACR6D,YAP2BI,EAAAF,YAAgCE,EAAAD,SApBhEC,EAAAlE,UAAoB,EAKpBkE,EAAAC,SACAD,EAAAE,SACAF,EAAAG,aACAH,EAAAI,OAAsBf,EAAAgB,YAAYC,MAClCN,EAAAO,WAEAP,EAAAQ,qBAEAR,EAAAS,MAAgB,EAIRT,EAAAU,WAwHRV,EAAAW,KAAe,EA7GXX,EAAKY,OAAS,IAAIzI,EAAA0I,OAAO,EAAE,GAE3Bb,EAAKc,QACLd,EAAKe,OAASf,EAAKe,OAAO7G,OAAO,SAAA8G,GAAS,QAAEA,aAAiB7I,EAAA8I,OAAOC,oBAEpElB,EAAKmB,GAAG,eAAgB,WACpBnB,EAAKE,SACLF,EAAKD,OAAOqB,iBAAmBpB,IASnCA,EAAKmB,GAAG,eAAgB,WACpBnB,EAAKE,WAGTF,EAAKqB,cAAgBlJ,EAAAmJ,cAAcC,iBAEnCvB,EAAKwB,UAAY,IAAIrJ,EAAAsJ,MAAMzB,EAAKF,UAAU/J,KAAM,EAAG,EAAG,aAEtDiK,EAAKwB,UAAUzF,MAAQ5D,EAAA+C,MAAMC,MAE7B6E,EAAK0B,WAAa,IAAIvJ,EAAAsJ,MAAM,QAAQzB,EAAKS,MAAS,EAAG,EAAG,aACxDT,EAAK0B,WAAWC,SAAW,EAC3B3B,EAAK0B,WAAW3F,MAAQ5D,EAAA+C,MAAMC,MAAMyG,OAAO,IAAA3L,EAiTnD,OA1W8B4L,EAAA1E,EAAA0C,GA8D1B1C,EAAA7I,UAAAwN,QAAA,WACIlC,KAAKa,OAAS,EACdb,KAAK8B,WAAWK,KAAO,QAAQnC,KAAKa,OAGxCpM,OAAA6B,eAAIiH,EAAA7I,UAAA,QAAA+B,IAAJ,WACI,OAAIuJ,KAAKoC,cACEpC,KAAKoC,cAAcjM,KAEnB6J,KAAKE,UAAU/J,sCAI9B1B,OAAA6B,eAAIiH,EAAA7I,UAAA,eAAA+B,IAAJ,WACI,OAAIuJ,KAAKoC,cACEpC,KAAKoC,cAAcC,YAEnBrC,KAAKE,UAAUmC,6CAK9B9E,EAAA7I,UAAA4N,KAAA,SAAKlH,EAA+BmH,GAC3BvC,KAAKW,SACNjB,EAAA1D,SAASZ,EAAK4E,KAAKwC,OAAQxC,KAAK9D,UAAW8D,KAAKyC,kBAEpDzC,KAAKc,QAAQ4B,QAAQ,SAAAC,GAAU,OAAAA,EAAOL,KAAKlH,EAAKmH,KAE5CvC,KAAKO,YACLP,KAAK4B,UAAU7B,IAAMC,KAAK4C,YAC1B5C,KAAK4B,UAAU7B,IAAIrE,GAAKN,EAAIyH,YAAY7C,KAAKE,UAAU/J,MAAMmG,MAAQ,EACrE0D,KAAK4B,UAAUU,KAAKlH,EAAKmH,IA6BLvC,KAAK8C,eAAexO,OAAS,GACjD0L,KAAK8C,eAAeJ,QAAQ,SAAAzL,GACxB,IAAI8L,EAAQ9L,EAAE+L,SACV7K,EAAKlB,EAAEgM,YACXvD,EAAA1D,SAASZ,GACHM,EAAGqH,EAAMrH,EAAIvD,EAAG,EAAGwD,EAAGoH,EAAMpH,EAAIxD,EAAG,EAAGmE,MAAOnE,EAAIoE,OAAQpE,GAC3D,GACAI,EAAA+C,MAAMC,UACN,MAShBgC,EAAA7I,UAAAwO,OAAA,SAAOC,EAAcZ,GAArB,IAAAnC,EAAAJ,KACIC,EAAAvL,UAAMwO,OAAMtO,KAAAoL,KAACmD,EAAQZ,GACJvC,KAAKK,OAElBL,KAAKc,QAAQ4B,QAAQ,SAAAC,GAAU,OAAAA,EAAOS,QAAQhD,EAAKW,QAEvDf,KAAKe,MAAQ,GAGjBxD,EAAA7I,UAAAwM,MAAA,aAEA3D,EAAA7I,UAAA2O,gBAAA,SAAgBnJ,GACZ,OAAOA,EAAOoJ,SAElB/F,EAAA7I,UAAA6O,QAAA,SAAQrJ,GACJ8F,KAAKD,IAAM7F,EAAOoJ,SAGtB/F,EAAA7I,UAAA8O,eAAA,aAEAjG,EAAA7I,UAAA+O,YAAA,SAAYC,GAAiB,UAE7BnG,EAAA7I,UAAAiP,MAAA,WACI,UAGJpG,EAAA7I,UAAAkP,MAAA,WACI,IAAIlI,EAAIsE,KAAKD,IAAIrE,EAAIsE,KAAK6D,WAAW,EACjClI,EAAIqE,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAC1B,OACI,IAAIvL,EAAA0I,OAAO7H,KAAKK,MAAMiC,GAAItC,KAAKK,MAAMkC,GAAG,KAIhD4B,EAAA7I,UAAAoO,aAAA,WACI,UAIJvF,EAAA7I,UAAAqP,MAAA,SAAMC,kBAAA,IAAgCrE,EAAAsE,OAKlC,IAJA,IAAIC,EAAIF,EAEJJ,EAAQ5D,KAAK4D,QACbO,EAAWD,EAAEE,aAAaR,EAAM,GAAIlE,EAAAzE,iBACtBoJ,EAAA,EAAAC,EAAAtE,KAAKY,kBAALyD,EAAAC,EAAAhQ,OAAA+P,IAAwB,CAArC,IAAIE,EAAKD,EAAAD,GACNG,EAAON,EAAEE,aAAaG,EAAME,WAAW1E,IAAKL,EAAAzE,iBAChDiJ,EAAEvH,KAAKwH,EAAUK,GAEjB,IAAIE,EAAYR,EAAEE,aAAaG,EAAMX,QAAQ,GAAIlE,EAAAzE,iBACjDiJ,EAAEvH,KAAK6H,EAAME,GAEbH,EAAMR,MAAMG,GAEhB,OAAOA,GAIJ3G,EAAA7I,UAAAiQ,OAAP,SAAcC,GACV5E,KAAKG,OAAO0E,OAAOD,IAGhBrH,EAAA7I,UAAAoQ,SAAP,SAAgB/E,GACZC,KAAKG,OAAO2E,SAAS/E,IAIfxC,EAAA7I,UAAA8N,KAAV,WACI,OACI9G,EAAGsE,KAAKD,IAAIrE,EACZC,EAAGqE,KAAKD,IAAIpE,EACZW,MAAO0D,KAAK6D,WACZtH,OAAQyD,KAAK8D,cAIXvG,EAAA7I,UAAAqQ,SAAV,SAAmBC,GACf,IAAIC,EAAQjF,KAAKwC,OAAQ0C,EAAQF,EAAMxC,OAOvC,SALIyC,EAAMvJ,EAAIwJ,EAAMxJ,EAAIwJ,EAAM5I,OAC1B2I,EAAMvJ,EAAIuJ,EAAM3I,MAAQ4I,EAAMxJ,GAC9BuJ,EAAMtJ,EAAIuJ,EAAMvJ,EAAIuJ,EAAM3I,QAC1B0I,EAAMtJ,EAAIsJ,EAAM1I,OAAS2I,EAAMvJ,IAKhC4B,EAAA7I,UAAAyQ,YAAP,eAAA/E,EAAAJ,KACI,QAASA,KAAKG,OAAOiF,OAAOC,UAAUC,KAAK,SAAAC,GAAQ,OAAAA,IAASnF,GAAQA,EAAK2E,SAASQ,MAG5EhI,EAAA7I,UAAA8Q,UAAV,WAEI,OADWxF,KAAKyC,iBAAiBgD,QAAQ,MAInClI,EAAA7I,UAAAgR,UAAV,WAEI,OADW1F,KAAKyC,iBAAiBT,OAAO,MAIlCzE,EAAA7I,UAAAiR,UAAV,WACI,OAAO3F,KAAK7D,OAGNoB,EAAA7I,UAAA+N,eAAV,WACI,IAAImD,EAAM5F,KAAK2F,YAAYrC,QAM3B,OALKtD,KAAKK,QACFL,KAAKmF,gBAAiBS,EAAMrN,EAAA+C,MAAMuK,KACtCD,EAAI3M,EAAI,IAER+G,KAAKM,QAASsF,EAAI3M,EAAI,IACnB2M,GAGXnR,OAAA6B,eAAIiH,EAAA7I,UAAA,eAAA+B,IAAJ,WACI,OAAOuJ,KAAKE,UAAU4F,6CAIhBvI,EAAA7I,UAAAqR,SAAV,SACIhG,EACAiG,GAFJ,IAAA5F,EAAAJ,cAEIgG,MAAmEhG,KAAK8F,aAGpE,IADJ,IAAIG,gBACSC,GACL,IAAMC,EAAkBH,EAAiBE,GACrCE,EAAU3G,EAAA4G,KAAKH,GACDC,EAAgBrM,IAAI,SAAAoG,GAClC,OAAAE,EAAKD,OAAOmG,sBAAsBvG,GAAMG,MAElCwC,QAAQ,SAAA6D,GACVA,GACoBA,EAAS5C,QACfrJ,OAAO,SAAAkK,GAAQ,OAAAA,EAAKhE,SAAW4F,IAC5C1D,QAAQ,SAAA8D,GACLP,EAASzR,KAAKgS,QAXdnC,EAAA,EAAAoC,EAAAhH,EAAAiH,QAAArC,EAAAoC,EAAAnS,OAAA+P,IAAOhO,EAAXoQ,EAAApC,IAiBhB,GAAI4B,EAAS3R,OAAS,EAClB,OAAOoL,EAAAzF,QAAQ8F,EAAKkG,EAAU,SAACzB,GAAS,OAAAA,EAAKzE,OAM3CxC,EAAA7I,UAAAiS,YAAV,SACIzM,EACA8L,kBAAmEhG,KAAK8F,aAExE,IAAIc,EAAU5G,KAAK+F,SAAS7L,EAAQ8L,GACpC,GAAIY,EAAS,CACT,IAAIJ,EAAexG,KAAK2D,QACnB2B,KAAK,SAAA5P,GAAK,OAAAA,EAAE8K,QAAUf,EAAA4G,KAAKO,EAAQpG,UACxC,GAAIgG,EAAc,CACd,IAAIK,EAASD,EAAQ7G,IAAI+G,IAAIN,EAAazG,KAI1C,OAHAC,KAAKD,IAAIgH,SAASF,GAElB7G,KAAKyE,WAAamC,EACXA,KAKTrJ,EAAA7I,UAAAsS,UAAV,SAAoBtL,EAAWC,EAAW6E,GACtC,gBADsCA,MAAsBf,EAAAgB,YAAYC,QAEpEX,IAAK,IAAIxH,EAAA0I,OAAOvF,EAAEC,GAClB6E,OAAMA,EACNyG,OAAQjH,OAITzC,EAAA7I,UAAAwS,UAAP,SAAiBvE,GAETA,EAAO4D,WAAavG,OACpB2C,EAAO4D,SAAWvG,MAEtBA,KAAKc,QAAQtM,KAAKmO,GAClB3C,KAAKmH,kBAGF5J,EAAA7I,UAAA0S,kBAAP,WACI,OAAOpH,KAAKc,QAAQxM,OAAS0L,KAAK8C,eAAexO,QAG9CiJ,EAAA7I,UAAA2S,gBAAP,WAEI,OAAOrH,KAAK8C,eACR9C,KAAKc,QAAQxM,SAIdiJ,EAAA7I,UAAA4S,WAAP,WACI,OAAOtH,KAAKc,SAGRvD,EAAA7I,UAAAyS,eAAR,eAAA/G,EAAAJ,KACQ7G,EAAKyG,EAAA2H,kBAAkBjC,KAAK,SAAAkC,GAC5B,IAAIC,KACAC,EAAgBtH,EAAKU,QAAQvJ,QASjC,WAPaiQ,GACVG,SAASjF,QAAQ,SAAAkF,GAChB,IAAIC,EAAiBH,EAAcpC,KAAK,SAAApP,GAAK,OAAAA,EAAE0R,mBAAmBA,IAC7DC,IAAkBJ,MACvBC,EAAgBhI,EAAA/E,cAAc+M,EAAeG,KAG1CJ,IAEX,GAAItO,EAAI,CACJ2O,QAAQC,IAAI,gCAAkC5O,GAAEA,IAChD,IAAI6O,EAAK,IAAI7O,EACb6G,KAAKoC,cAAgB4F,EACrBhI,KAAK4B,UAAUO,KAAO6F,EAAG7R,UAEzB2R,QAAQG,KAAK,iCAKzB1K,EA1WA,CAA8BhF,EAAA2P,OAAjBrS,EAAA0H,0FCtBb,IAGY4K,EAHZ5P,EAAA9C,EAAA,IAGA,SAAY0S,GACRA,EAAAC,MAAA,QACAD,EAAAE,OAAA,SACAF,EAAAG,MAAA,QACAH,EAAAI,QAAA,UACAJ,EAAAK,KAAA,OACAL,EAAAM,IAAA,MACAN,EAAAO,OAAA,SACAP,EAAAQ,OAAA,SACAR,EAAAS,OAAA,SACAT,EAAAU,OAAA,SAVJ,CAAYV,EAAAtS,EAAAsS,YAAAtS,EAAAsS,eAaCtS,EAAAiT,WACTX,EAAUC,MACVD,EAAUE,OACVF,EAAUG,MACVH,EAAUI,QACVJ,EAAUK,KACVL,EAAUO,OACVP,EAAUQ,OACVR,EAAUS,OACVT,EAAUU,QAQdhT,EAAAkT,YAAA,WACI,OACIX,OAASY,OAAQ,EAAGC,OAAQ,GAC5BZ,QAAUW,OAAQ,EAAGC,OAAQ,GAC7BX,OAASU,OAAQ,EAAGC,OAAQ,GAC5BV,SAAWS,OAAQ,EAAGC,OAAQ,GAC9BT,MAAQQ,OAAQ,EAAGC,OAAQ,GAC3BR,KAAOO,OAAQ,EAAGC,OAAQ,GAC1BN,QAAUK,OAAQ,EAAGC,OAAQ,GAC7BP,QAAUM,OAAQ,EAAGC,OAAQ,GAC7BL,QAAUI,OAAQ,EAAGC,OAAQ,GAC7BJ,QAAUG,OAAQ,EAAGC,OAAQ,KAIrCpT,EAAAqT,kBAAA,SAAkCC,EAAiBxS,GAC/C,OAAOyC,KAAKK,MAAM0P,EAAOxS,GAAOqS,OAASG,EAAOxS,GAAOsS,SAG9CpT,EAAAuT,WAAoD,SAACC,EAAIC,GAClE,IAAIC,GAlBAnB,OAASY,OAAQ,EAAGC,OAAQ,GAC5BZ,QAAUW,OAAQ,EAAGC,OAAQ,GAC7BX,OAASU,OAAQ,EAAGC,OAAQ,GAC5BV,SAAWS,OAAQ,EAAGC,OAAQ,GAC9BT,MAAQQ,OAAQ,EAAGC,OAAQ,GAC3BR,KAAOO,OAAQ,EAAGC,OAAQ,GAC1BN,QAAUK,OAAQ,EAAGC,OAAQ,GAC7BP,QAAUM,OAAQ,EAAGC,OAAQ,GAC7BL,QAAUI,OAAQ,EAAGC,OAAQ,GAC7BJ,QAAUG,OAAQ,EAAGC,OAAQ,IAUjC,IAAK,IAAItS,KAASwR,EAAW,CACrB,IAAA7D,EAAA+E,EAAA1S,GAAE6S,EAAAlF,EAAA0E,OAAYS,EAAAnF,EAAA2E,OACdS,EAAAJ,EAAA3S,GACAqS,EAASQ,EADPE,EAAAV,OAEFC,EAASQ,EAFKC,EAAAT,OAGlBM,EAAU5S,IACNqS,OAAMA,EACNC,OAAMA,GAGd,OAAOM,GAGX,SAAYI,GAERA,EAAAC,QAAA,UACAD,EAAAE,IAAA,MACAF,EAAAG,KAAA,OAGAH,EAAAI,KAAA,OACAJ,EAAAK,KAAA,OACAL,EAAAM,QAAA,UACAN,EAAAO,UAAA,YAGAP,EAAAQ,MAAA,QACAR,EAAAS,UAAA,YAGAT,EAAAU,OAAA,SACAV,EAAAW,MAAA,QAGAX,EAAAY,OAAA,SArBJ,CAAY1U,EAAA8T,gBAAA9T,EAAA8T,mBAwBZ,IACMa,GACFZ,QAASrR,EAAA+C,MAAMmP,MACfT,KAAMzR,EAAA+C,MAAMoP,KAAKjF,QAHT,IAIRwE,QAAS1R,EAAA+C,MAAMuK,IAEfkE,KAAMxR,EAAA+C,MAAMqP,OAAO3I,OANX,IAOR8H,KAAMvR,EAAA+C,MAAMoP,KAAKjF,QAAQmF,IACzBf,IAAKtR,EAAA+C,MAAMuK,IAAI7D,OARP,IAURkI,UAAW3R,EAAA+C,MAAMuP,SAEjBV,MAAO5R,EAAA+C,MAAMwP,SAAS9I,OAZd,IAaRoI,UAAW7R,EAAA+C,MAAMoP,KAAK1I,OAbd,IAeRqI,OAAQ9R,EAAA+C,MAAMyP,KAAKtF,QAfX,IAgBR6E,MAAO/R,EAAA+C,MAAM0P,OAAOvF,QAhBZ,IAkBR8E,OAAQhS,EAAA+C,MAAMC,OAGlB1F,EAAAoV,WAAA,SAA2BC,GAEvB,OADgBV,EAAYU,GACXC,WAAW,eAAAvQ,EAAAwQ,EAAAxU,GAAA,iBAAAF,EAAAL,EAAA2J,WAAAiC,YAAAvL,EAAA,SAAAkE,EAAAwQ,GAAA,OAAA1U,EAAAjC,OAAA4W,iBAAAC,wBAAA1R,OAAA,SAAAgB,EAAAwQ,GAAAxQ,EAAA0Q,UAAAF,IAAA,SAAAxQ,EAAAwQ,GAAA,QAAAxU,KAAAwU,IAAAzW,eAAAiC,KAAAgE,EAAAhE,GAAAwU,EAAAxU,MAAAgE,EAAAwQ,IAAA,SAAAxQ,EAAAwQ,GAAA,SAAAxU,IAAAoJ,KAAAuL,YAAA3Q,EAAAlE,EAAAkE,EAAAwQ,GAAAxQ,EAAAlG,UAAA,OAAA0W,EAAA3W,OAAA+W,OAAAJ,IAAAxU,EAAAlC,UAAA0W,EAAA1W,UAAA,IAAAkC,KAAAxC,EAAA4L,WAAAyL,UAAA,kBAAArX,EAAAK,OAAAiX,QAAA,SAAA9Q,GAAA,QAAAwQ,EAAAxU,EAAA,EAAAF,EAAAiV,UAAArX,OAAAsC,EAAAF,EAAAE,IAAA,QAAAP,KAAA+U,EAAAO,UAAA/U,GAAAnC,OAAAC,UAAAC,eAAAC,KAAAwW,EAAA/U,KAAAuE,EAAAvE,GAAA+U,EAAA/U,IAAA,OAAAuE,IAAA3F,MAAA+K,KAAA2L,YAAAlX,OAAA6B,eAAA8U,EAAA,cAAAzU,OAAA,IClHhC,IAAAiV,EAAAnW,EAAA,GACA8C,EAAA9C,EAAA,GACAoK,EAAApK,EAAA,GACAoW,EAAApW,EAAA,IACAiK,EAAAjK,EAAA,GAkBMqW,GACFC,UAjBiBtW,EAAQ,IAkBzBuW,IAjBWvW,EAAQ,IAkBnBwW,MAjBgBxW,EAAQ,IAkBxByW,MAjBUzW,EAAQ,IAkBlB0W,MAjBU1W,EAAQ,IAkBlB2W,KAjBS3W,EAAQ,IAkBjB4W,IAjBQ5W,EAAQ,IAkBhB6W,OAjBW7W,EAAQ,IAkBnB8W,OAjBW9W,EAAQ,IAkBnB+W,MAjBU/W,EAAQ,IAkBlBgX,YAjBgBhX,EAAQ,IAmBxBqS,QAjBYrS,EAAQ,IAkBpBiX,cAjBkBjX,EAAQ,IAkB1BkX,aAjBiBlX,EAAQ,KAqBrBoQ,EAAAtN,EAAA+C,MAAAuK,IAAK4E,EAAAlS,EAAA+C,MAAAmP,MAAOC,EAAAnS,EAAA+C,MAAAoP,KAAMM,EAAAzS,EAAA+C,MAAA0P,OAAQ4B,EAAArU,EAAA+C,MAAAsR,OAAQjC,EAAApS,EAAA+C,MAAAqP,OAEpCkC,EAAAhB,EAAAiB,qBAAAD,MAAOE,EAAAlB,EAAAiB,qBAAAC,SAAUC,EAAAnB,EAAAiB,qBAAAE,OAAQC,EAAApB,EAAAiB,qBAAAG,MAE/BC,EAAA,oBAAAA,IACIlN,KAAA7J,KAAe,iBACf6J,KAAAqC,YAAsB,wBACtBrC,KAAA7D,MAAe5D,EAAA+C,MAAM6R,UACrBnN,KAAA9H,KAAmB2H,EAAArI,WAAWK,MAC9BmI,KAAAoN,WAAmCC,KAAM,QACzCrN,KAAAsN,MAAQxB,EAAOE,IACfhM,KAAAuN,WACAvN,KAAAwN,QAAmB5B,EAAA7C,cACnB/I,KAAAyN,WACAzN,KAAA0N,QAOJ,OAFIR,EAAAxY,UAAAiZ,WAAA,WAAwB,OAAO3N,MAEnCkN,EAjBA,GAAarX,EAAAqX,UAmBb,IAAAU,EAAA,SAAA3N,GAAA,SAAA2N,IAAA,IAAAxN,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,kBACPiK,EAAAiC,YAAc,sBACdjC,EAAAgN,UAAYP,GACPjB,EAAAjC,cAAcI,KAAM6B,EAAAjC,cAAcE,KACnC,GAEJzJ,EAAAkN,MAAQxB,EAAOa,aACfvM,EAAAlI,KAAO2H,EAAArI,WAAWM,OAClBsI,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,GAC5BZ,QAAUW,OAAQ,EAAGC,OAAQ,GAC7BT,MAAQQ,OAAQ,EAAGC,OAAQ,KAAAmC,EAEnC,OAfmCnJ,EAAA2L,EAAA3N,GAenC2N,EAfA,CAAmCV,GAAtBrX,EAAA+X,gBAiBb,IAAAC,EAAA,SAAA5N,GAAA,SAAA4N,IAAA,IAAAzN,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,cACPiK,EAAAiC,YAAc,cACdjC,EAAAgN,UAAYP,GACPjB,EAAAjC,cAAcK,MACf,GAEJ5J,EAAAkN,MAAQxB,EAAOY,cACftM,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,IAC5BT,MAAQQ,OAAQ,EAAGC,OAAQ,KAAAmC,EAEnC,OAbgCnJ,EAAA4L,EAAA5N,GAahC4N,EAbA,CAAgCX,GAAnBrX,EAAAgY,aAuBb,IAAAC,EAAA,SAAA7N,GAAA,SAAA6N,IAAA,IAAA1N,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,eACPiK,EAAAiC,YAAc,eACdjC,EAAAkN,MAAQxB,EAAOE,IACf5L,EAAAmN,SAAYQ,EAAwBC,GACpC5N,EAAAqN,WACArN,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHV,QAAUW,OAAQ,EAAGC,OAAQ,GAC7Bb,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAXqCnJ,EAAA6L,EAAA7N,GAWrC6N,EAXA,CAAqCZ,GAAxBrX,EAAAiY,kBAab,IAAAE,EAAA,SAAA/N,GAAA,SAAA+N,IAAA,IAAA5N,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,aACPiK,EAAAiC,YAAc,kBAEdjC,EAAAqN,WACArN,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAT+BnJ,EAAA+L,EAAA/N,GAS/B+N,EATA,CAA+Bd,GAAlBrX,EAAAmY,YAYb,IAAAD,EAAA,SAAA9N,GAAA,SAAA8N,IAAA,IAAA3N,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,gBACPiK,EAAAiC,YAAc,eACdjC,EAAAmN,SAAYS,GAEZ5N,EAAAqN,WACArN,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHT,OAASU,OAAQ,EAAGC,OAAQ,GAC5Bb,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAX4CnJ,EAAA8L,EAAA9N,GAW5C8N,EAXA,CAA4Cb,GAA/BrX,EAAAkY,yBAcb,IAAAE,EAAA,SAAAhO,GAAA,SAAAgO,IAAA,IAAA7N,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAgN,UAAYJ,GACNpB,EAAAjC,cAAcG,KAAM8B,EAAAjC,cAAcG,KAAM8B,EAAAjC,cAAcG,MACxD8B,EAAAjC,cAAcK,MAElB5J,EAAAjE,MAAQuO,IAEZ,OAPkCzI,EAAAgM,EAAAhO,GAM9BgO,EAAAvZ,UAAAiZ,WAAA,WAAwB,OAAO,IAAKjO,EAAAvC,SAAS+Q,EAAaC,IAAO,KACrEF,EAPA,CAAkCf,GAArBrX,EAAAoY,eASb,IAAAE,EAAA,SAAAlO,GAAA,SAAAkO,IAAA,IAAA/N,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,OACPiK,EAAAiC,YAAc,cACdjC,EAAAkN,MAAQxB,EAAOG,MACf7L,EAAAmN,SAAYO,KAEhB,OAN0B7L,EAAAkM,EAAAlO,GAKtBkO,EAAAzZ,UAAAiZ,WAAA,WAAe,OAAO3N,MAC1BmO,EANA,CAA0BF,GAAbpY,EAAAsY,OAQb,IAAAD,EAAA,SAAAjO,GAAA,SAAAiO,IAAA,IAAA9N,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,cACPiK,EAAAiC,YAAc,eACdjC,EAAAmN,SAAYa,GACZhO,EAAAkN,MAAQxB,EAAOW,YACfrM,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAGpC,OAViCnJ,EAAAiM,EAAAjO,GAS7BiO,EAAAxZ,UAAAiZ,WAAA,WAAe,OAAO3N,MAC1BkO,EAVA,CAAiCD,GAApBpY,EAAAqY,cAcb,IAAAE,EAAA,SAAAnO,GAAA,SAAAmO,IAAA,IAAAhO,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,QACPiK,EAAAiC,YAAc,aACdjC,EAAAgN,UAAYL,EAASnB,EAAAjC,cAAcG,MACnC1J,EAAAkN,MAAQxB,EAAOC,UACf3L,EAAAmN,SAAYO,EAAiBK,GAC7B/N,EAAAjE,MAAQuO,IACZ,OAP+BzI,EAAAmM,EAAAnO,GAO/BmO,EAPA,CAA+BlB,GAAlBrX,EAAAuY,YAUb,IAAAC,EAAA,SAAApO,GAAA,SAAAoO,IAAA,IAAAjO,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,SACPiK,EAAAiC,YAAc,cACdjC,EAAAgN,UAAYP,GAAOjB,EAAAjC,cAAcI,MAAO,GACxC3J,EAAAkN,MAAQxB,EAAOQ,OACflM,EAAAmN,SAAWa,GACXhO,EAAAjE,MAAQwO,EACRvK,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAX4BnJ,EAAAoM,EAAApO,GAW5BoO,EAXA,CAA4BnB,GAAfrX,EAAAwY,SAab,IAAAC,EAAA,SAAArO,GAAA,SAAAqO,IAAA,IAAAlO,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,QACPiK,EAAAiC,YAAc,cACdjC,EAAAgN,UAAYJ,GACPpB,EAAAjC,cAAcC,QAASgC,EAAAjC,cAAcC,SACtCgC,EAAAjC,cAAcI,MAElB3J,EAAAkN,MAAQxB,EAAOI,MAEf9L,EAAAmN,SAAWa,EAAWC,GACtBjO,EAAAjE,MAAQwO,EACRvK,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAf2BnJ,EAAAqM,EAAArO,GAe3BqO,EAfA,CAA2BpB,GAAdrX,EAAAyY,QAiBb,IAAAC,EAAA,SAAAtO,GAAA,SAAAsO,IAAA,IAAAnO,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,MACPiK,EAAAiC,YAAc,eACdjC,EAAAkN,MAAQxB,EAAOO,IACfjM,EAAAmN,SAAYO,GACZ1N,EAAAjE,MAAQ6O,EACR5K,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHR,SAAWS,OAAQ,EAAGC,OAAQ,KAAAmC,EAEtC,OAVyBnJ,EAAAsM,EAAAtO,GAUzBsO,EAVA,CAAyBrB,GAAZrX,EAAA0Y,MAYb,IAAAC,EAAA,SAAAvO,GAAA,SAAAuO,IAAA,IAAApO,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,cACPiK,EAAAiC,YAAc,UACdjC,EAAAmN,SAAYgB,GAEZnO,EAAAgN,UAAYL,EAASnB,EAAAjC,cAAcC,QAAS,GAC5CxJ,EAAAjE,MAAQsO,EACRrK,EAAAkN,MAAQxB,EAAOU,MACfpM,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHV,QAAUW,OAAQ,EAAGC,OAAQ,GAC7BX,OAASU,OAAQ,EAAGC,OAAQ,MAAAmC,EAEpC,OAbgCnJ,EAAAuM,EAAAvO,GAahCuO,EAbA,CAAgCtB,GAAnBrX,EAAA2Y,aAeb,IAAAC,EAAA,SAAAxO,GAAA,SAAAwO,IAAA,IAAArO,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,qBACPiK,EAAAiC,YAAc,kBACdjC,EAAAmN,SAAYmB,GACZtO,EAAAgN,UAAYP,GAAOjB,EAAAjC,cAAcK,MAAO,GACxC5J,EAAAjE,MAAQwO,EACRvK,EAAAkN,MAAQxB,EAAOhE,QACf1H,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,IAC5BP,QAAUM,OAAQ,GAAKC,OAAQ,KAAAmC,EAEvC,OAZuCnJ,EAAAwM,EAAAxO,GAYvCwO,EAZA,CAAuCvB,GAA1BrX,EAAA4Y,oBAgBb,IAAAE,EAAA,SAAA1O,GAAA,SAAA0O,IAAA,IAAAvO,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,gBACPiK,EAAAiC,YAAc,+BACdjC,EAAAgN,UAAYP,GAAOjB,EAAAjC,cAAcM,QAAS2B,EAAAjC,cAAcQ,OAAQ,GAChE/J,EAAAmN,SAAWa,GACXhO,EAAAjE,MAAQ0J,EACRzF,EAAAlI,KAAO2H,EAAArI,WAAWM,SACtB,OAPkCmK,EAAA0M,EAAA1O,GAOlC0O,EAPA,CAAkCzB,GAArBrX,EAAA8Y,eASb,IAAAC,EAAA,SAAA3O,GAAA,SAAA2O,IAAA,IAAAxO,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,kBACPiK,EAAAiC,YAAc,YACdjC,EAAAgN,UAAYP,GAAOjB,EAAAjC,cAAcK,KAAM4B,EAAAjC,cAAcS,WAAY,IACjEhK,EAAAkN,MAAQxB,EAAOS,OACfnM,EAAAmN,SAAWa,GACXhO,EAAAlI,KAAO2H,EAAArI,WAAWM,OAClBsI,EAAAjE,MAAQuO,EACRtK,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAZoCnJ,EAAA2M,EAAA3O,GAYpC2O,EAZA,CAAoC1B,GAAvBrX,EAAA+Y,iBAcb,IAAAC,EAAA,SAAA5O,GAAA,SAAA4O,IAAA,IAAAzO,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACGI,EAAAjK,KAAO,UACPiK,EAAAiC,YAAc,iBACdjC,EAAAgN,UAAYL,EAASnB,EAAAjC,cAAcC,SACnCxJ,EAAAlI,KAAO2H,EAAArI,WAAWM,OAClBsI,EAAAmN,SAAWuB,GACX1O,EAAAjE,MAAQsO,EACPrK,EAAAqN,WACArN,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,GAC5BX,OAASU,OAAQ,EAAGC,OAAQ,GAC5BZ,QAAUW,OAAQ,EAAGC,OAAQ,KAAAmC,EAErC,OAd6BnJ,EAAA4M,EAAA5O,GAc7B4O,EAdA,CAA6B3B,GAAhBrX,EAAAgZ,UAgBb,IAAAE,EAAA,SAAA9O,GAAA,SAAA8O,IAAA,IAAA3O,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACGI,EAAAjK,KAAO,QACPiK,EAAAiC,YAAc,qBACdjC,EAAAgN,UAAYJ,GACNpB,EAAAjC,cAAcC,QAASgC,EAAAjC,cAAcC,SACvCgC,EAAAjC,cAAcI,MAElB3J,EAAAkN,MAAQxB,EAAOK,MACf/L,EAAAmN,SAAWsB,GACXzO,EAAAlI,KAAO2H,EAAArI,WAAWM,OAClBsI,EAAAjE,MAAQ6O,EACP5K,EAAAqN,WACArN,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,GAC5BX,OAASU,OAAQ,EAAGC,OAAQ,GAC5BV,SAAWS,OAAQ,EAAGC,OAAQ,KAAAmC,EAEtC,OAlB2BnJ,EAAA8M,EAAA9O,GAkB3B8O,EAlBA,CAA2B7B,GAAdrX,EAAAkZ,QAoBb,IAAAC,EAAA,SAAA/O,GAAA,SAAA+O,IAAA,IAAA5O,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,QACPiK,EAAAiC,YAAc,yBACdjC,EAAAgN,UAAYL,EAASnB,EAAAjC,cAAcC,SACnCxJ,EAAAmN,SAAWsB,GACXzO,EAAAlI,KAAO2H,EAAArI,WAAWM,OAClBsI,EAAAjE,MAAQsO,EACRrK,EAAAqN,WAAUrC,EACd,OAR2BnJ,EAAA+M,EAAA/O,GAQ3B+O,EARA,CAA2B9B,GAAdrX,EAAAmZ,QAUb,IAAAF,EAAA,SAAA7O,GAAA,SAAA6O,IAAA,IAAA1O,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,YACPiK,EAAAiC,YAAc,wBACdjC,EAAAgN,UAAYL,EAASnB,EAAAjC,cAAcC,SACnCxJ,EAAAmN,SAAYO,EAAiBM,EAAWC,GACxCjO,EAAAlI,KAAO2H,EAAArI,WAAWM,OAClBsI,EAAAjE,MAAQyQ,EACRxM,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAX8BnJ,EAAA6M,EAAA7O,GAW9B6O,EAXA,CAA8B5B,GAAjBrX,EAAAiZ,WAab,IAAAG,EAAA,SAAAhP,GAAA,SAAAgP,IAAA,IAAA7O,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,SACPiK,EAAAiC,YAAc,YACdjC,EAAAgN,UAAYL,EAASnB,EAAAjC,cAAcC,SACnCxJ,EAAAmN,SAAYO,EAAiBM,GAC7BhO,EAAAlI,KAAO2H,EAAArI,WAAWM,OAClBsI,EAAAjE,MAAQsO,EACRrK,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAX4BnJ,EAAAgN,EAAAhP,GAW5BgP,EAXA,CAA4B/B,GAAfrX,EAAAoZ,SAab,IAAAP,EAAA,SAAAzO,GAAA,SAAAyO,IAAA,IAAAtO,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,cACPiK,EAAAiC,YAAc,cAEdjC,EAAAgN,UAAYH,IACZ7M,EAAA8O,eAAiB,KACjB9O,EAAAkN,MAAQxB,EAAOE,IACf5L,EAAAmN,SAAWuB,GACX1O,EAAAlI,KAAO2H,EAAArI,WAAWM,OAClBsI,EAAAjE,MAAQyQ,EACRxM,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAdgCnJ,EAAAyM,EAAAzO,GAchCyO,EAdA,CAAgCxB,GAAnBrX,EAAA6Y,aAgBb,IAAAS,EAAA,SAAAlP,GAAA,SAAAkP,IAAA,IAAA/O,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,kBACPiK,EAAAiC,YAAc,iBAEdjC,EAAAgN,UAAYJ,GACNpB,EAAAjC,cAAcC,QAASgC,EAAAjC,cAAcC,SACvCgC,EAAAjC,cAAcO,WAElB9J,EAAA8O,eAAiB,KACjB9O,EAAAkN,MAAQxB,EAAOE,IACf5L,EAAAmN,SAAW6B,GACXhP,EAAAlI,KAAO2H,EAAArI,WAAWM,OAClBsI,EAAAjE,MAAQyQ,EACRxM,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAjBoCnJ,EAAAkN,EAAAlP,GAiBpCkP,EAjBA,CAAoCjC,GAAvBrX,EAAAsZ,iBAmBb,IAAAC,EAAA,SAAAnP,GAAA,SAAAmP,IAAA,IAAAhP,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,gBACPiK,EAAAiC,YAAc,UACdjC,EAAAgN,UAAYP,GAAQjB,EAAAjC,cAAcO,YAClC9J,EAAAmN,SAAWuB,GACX1O,EAAAjE,MAAQsO,EACRrK,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAVgCnJ,EAAAmN,EAAAnP,GAUhCmP,EAVA,CAAgClC,GAAnBrX,EAAAuZ,aAab,IAAAC,EAAA,SAAApP,GAAA,SAAAoP,IAAA,IAAAjP,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,aACPiK,EAAAiC,YAAc,gBACdjC,EAAAgN,UAAYJ,GACPpB,EAAAjC,cAAcM,QAAS2B,EAAAjC,cAAcM,SACrC2B,EAAAjC,cAAcQ,OAEnB/J,EAAAlI,KAAO2H,EAAArI,WAAWM,OAClBsI,EAAAjE,MAAQ0J,EACRzF,EAAAmN,SAAWW,GACX9N,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAdgCnJ,EAAAoN,EAAApP,GAchCoP,EAdA,CAAgCnC,GAAnBrX,EAAAwZ,aAgBb,IAAAC,EAAA,SAAArP,GAAA,SAAAqP,IAAA,IAAAlP,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,WACPiK,EAAAiC,YAAc,uBACdjC,EAAAgN,UAAYJ,GACPpB,EAAAjC,cAAcE,IAAK+B,EAAAjC,cAAcE,IAAK+B,EAAAjC,cAAcE,KACpD+B,EAAAjC,cAAcM,SAEnB7J,EAAAlI,KAAO2H,EAAArI,WAAWM,OAClBsI,EAAAjE,MAAQ0J,EACRzF,EAAAmN,SAAWW,EAAamB,GACxBjP,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAdiCnJ,EAAAqN,EAAArP,GAcjCqP,EAdA,CAAiCpC,GAApBrX,EAAAyZ,cAgBb,IAAAC,EAAA,SAAAtP,GAAA,SAAAsP,IAAA,IAAAnP,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,gBACPiK,EAAAlI,KAAO2H,EAAArI,WAAWM,OAClBsI,EAAAmN,SAAYiC,GACZpP,EAAAjE,MAAQ5D,EAAA+C,MAAMmU,QAAQ,UACtBrP,EAAAgN,UAAYP,GAAOjB,EAAAjC,cAAcW,OAAQ,GACzClK,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHL,QAAUM,OAAQ,EAAGC,OAAQ,GAC7BJ,QAAUG,OAAQ,EAAGC,OAAQ,KAAAmC,EAErC,OAXkCnJ,EAAAsN,EAAAtP,GAWlCsP,EAXA,CAAkCrC,GAArBrX,EAAA0Z,eAab,IAAAG,EAAA,SAAAzP,GAAA,SAAAyP,IAAA,IAAAtP,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,gBACPiK,EAAAlI,KAAO2H,EAAArI,WAAWM,OAClBsI,EAAAmN,SAAYoC,GACZvP,EAAAjE,MAAQ5D,EAAA+C,MAAMmU,QAAQ,UACtBrP,EAAAgN,UAAYP,GAAOjB,EAAAjC,cAAcU,QAAS,IAC1CjK,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHH,QAAUI,OAAQ,EAAGC,OAAQ,GAC7BJ,QAAUG,OAAQ,EAAGC,OAAQ,KAEjC7I,EAAAqN,WAAUrC,EACd,OAZkCnJ,EAAAyN,EAAAzP,GAYlCyP,EAZA,CAAkCxC,GAArBrX,EAAA6Z,eAiBb,IAAAE,EAAA,SAAA3P,GAAA,SAAA2P,IAAA,IAAAxP,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,eACPiK,EAAAiC,YAAc,WACdjC,EAAAgN,UAAYL,EAASnB,EAAAjC,cAAcE,KACnCzJ,EAAAlI,KAAO2H,EAAArI,WAAWO,MAClBqI,EAAAmN,SAAY8B,GACZjP,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAViCnJ,EAAA2N,EAAA3P,GAUjC2P,EAVA,CAAiC1C,GAApBrX,EAAA+Z,cAYb,IAAAD,EAAA,SAAA1P,GAAA,SAAA0P,IAAA,IAAAvP,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,kBACPiK,EAAAlI,KAAO2H,EAAArI,WAAWO,MAClBqI,EAAAmN,SAAY8B,GACZjP,EAAAjE,MAAQ0J,EACRzF,EAAAgN,UAAYJ,GACPpB,EAAAjC,cAAcQ,MAAOyB,EAAAjC,cAAcS,WACpCwB,EAAAjC,cAAcU,QAElBjK,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAboCnJ,EAAA0N,EAAA1P,GAapC0P,EAbA,CAAoCzC,GAAvBrX,EAAA8Z,iBAeb,IAAAH,EAAA,SAAAvP,GAAA,SAAAuP,IAAA,IAAApP,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,mBACPiK,EAAAlI,KAAO2H,EAAArI,WAAWO,MAClBqI,EAAAmN,SAAYoC,GACZvP,EAAAjE,MAAQyQ,EACRxM,EAAAgN,UAAYJ,GACPpB,EAAAjC,cAAcO,UAAW0B,EAAAjC,cAAcS,WACxCwB,EAAAjC,cAAcW,OAElBlK,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,GAC5BX,OAASU,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAdqCnJ,EAAAuN,EAAAvP,GAcrCuP,EAdA,CAAqCtC,GAAxBrX,EAAA2Z,kBAgBb,IAAAK,GAAA,SAAA5P,GAAA,SAAA4P,IAAA,IAAAzP,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,YACPiK,EAAAlI,KAAO2H,EAAArI,WAAWO,MAClBqI,EAAAjE,MAAQuO,EACRtK,EAAAmN,SAAWqB,GACXxO,EAAAgN,UAAYJ,GACNpB,EAAAjC,cAAcK,KAAM4B,EAAAjC,cAAcK,MACpC4B,EAAAjC,cAAcS,WAElBhK,EAAAkN,MAAQxB,EAAOS,OACfnM,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHX,OAASY,OAAQ,EAAGC,OAAQ,KAAAmC,EAEpC,OAd+BnJ,EAAA4N,EAAA5P,GAc/B4P,EAdA,CAA+B3C,GAAlBrX,EAAAga,aAgBb,IAAAC,GAAA,SAAA7P,GAAA,SAAA6P,IAAA,IAAA1P,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,WACPiK,EAAAlI,KAAO2H,EAAArI,WAAWO,MAClBqI,EAAAmN,SAAYyB,GACZ5O,EAAAjE,MAAQsO,EACRrK,EAAAqN,WAEArN,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHT,OAASU,OAAQ,EAAGC,OAAQ,GAC5BZ,QAAUW,OAAQ,GAAIC,OAAQ,KAAAmC,EAEtC,OAZ8BnJ,EAAA6N,EAAA7P,GAY9B6P,EAZA,CAA8B5C,GAAjBrX,EAAAia,YAiBb,IAAAC,GAAA,SAAA9P,GAAA,SAAA8P,IAAA,IAAA3P,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,YACPiK,EAAAlI,KAAO2H,EAAArI,WAAWQ,KAClBoI,EAAAmN,SAAYoC,GACZvP,EAAAjE,MAAQ6O,EACR5K,EAAAqN,WACArN,EAAAoN,QAAO/B,KACAG,EAAA7C,eACHT,OAASU,OAAQ,EAAGC,OAAQ,GAC5Bb,OAASY,OAAQ,EAAGC,OAAQ,GAC5BR,KAAOO,OAAQ,EAAGC,OAAQ,GAC1BT,MAAQQ,OAAQ,EAAGC,OAAQ,GAC3BL,QAAUI,OAAQ,EAAGC,OAAQ,GAC7BJ,QAAUG,OAAQ,EAAGC,OAAQ,KAAAmC,EAErC,OAf+BnJ,EAAA8N,EAAA9P,GAe/B8P,EAfA,CAA+B7C,GAAlBrX,EAAAka,aAiBb,IAAAC,GAAA,SAAA/P,GAAA,SAAA+P,IAAA,IAAA5P,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,gBACPiK,EAAAlI,KAAO2H,EAAArI,WAAWQ,KAClBoI,EAAAmN,SAAYoC,GACZvP,EAAAjE,MAAQuO,IACZ,OALkCzI,EAAA+N,EAAA/P,GAKlC+P,EALA,CAAkC9C,GAArBrX,EAAAma,gBASAna,EAAAoa,aACTnB,EACAE,EACAT,EACAH,EACAW,EACAL,EACAP,EACAkB,EACAhB,EACAG,EACAmB,EACAC,EACAf,EACAf,EACAgC,GACAlB,EACAZ,EACAM,EACAP,EACAG,EACA6B,GACAC,GACAf,EAEAK,EACAF,EACAD,EACAR,EACAkB,GAEApB,EACAe,EACAD,EACAG,iCCrlBJ,IAAYjP,mDAAZ,SAAYA,GAAcA,IAAAyP,KAAA,UAAMzP,IAAA0P,GAAA,QAAI1P,IAAAC,MAAA,WAAOD,IAAA2P,KAAA,UAA3C,CAAY3P,EAAA5K,EAAA4K,cAAA5K,EAAA4K,iBAEC5K,EAAA6Q,SACTjG,EAAYyP,KACZzP,EAAYC,MACZD,EAAY0P,GACZ1P,EAAY2P,MAIhBva,EAAAwQ,KAAA,SAAqBgK,GACjB,OAAQA,GACJ,KAAK5P,EAAYyP,KAAM,OAAOzP,EAAYC,MAC1C,KAAKD,EAAYC,MAAO,OAAOD,EAAYyP,KAC3C,KAAKzP,EAAY0P,GAAI,OAAO1P,EAAY2P,KACxC,KAAK3P,EAAY2P,KAAM,OAAO3P,EAAY0P,GAE9C,MAAM,IAAIG,MAAM,0BAA2BD,maClB/C,IAAA9X,EAAA9C,EAAA,GAEAgC,EAAAhC,EAAA,IACAgK,EAAAhK,EAAA,GACA8a,EAAA9a,EAAA,GAEAoK,EAAApK,EAAA,GAEQiC,EAAAD,EAAAE,MAAAD,MAAOE,EAAAH,EAAAE,MAAAC,MAET4Y,EAAgBD,EAAAN,YAAY3V,OAAO,SAAAsN,GAAW,WAAKA,GAAW1P,OAAS2H,EAAArI,WAAWK,QAClF4Y,EAAiBF,EAAAN,YAAY3V,OAAO,SAAAsN,GAAW,WAAKA,GAAW1P,OAAS2H,EAAArI,WAAWM,SACnF4Y,EAAgBH,EAAAN,YAAY3V,OAAO,SAAAsN,GAAW,WAAKA,GAAW1P,OAAS2H,EAAArI,WAAWO,QAClF4Y,EAAeJ,EAAAN,YAAY3V,OAAO,SAAAsN,GAAW,WAAKA,GAAW1P,OAAS2H,EAAArI,WAAWQ,OAEjF4Y,EAAYJ,EAAclW,OAAO,SAAAsN,GAAW,WAAKA,GAAW6F,UAC5DoD,EAAaL,EAAclW,OAAO,SAAAsN,GAAW,YAAMA,GAAW6F,UAE9DqD,EAAUL,EAAenW,OAAO,SAAAsN,GAAW,WAAKA,GAAW6F,UAC3DsD,EAAWN,EAAenW,OAAO,SAAAsN,GAAW,YAAMA,GAAW6F,UAE7DuD,EAAYN,EAAcpW,OAAO,SAAAsN,GAAW,WAAKA,GAAW6F,UAC5DwD,EAAaP,EAAcpW,OAAO,SAAAsN,GAAW,YAAMA,GAAW6F,UAE9DyD,EAAWP,EAAarW,OAAO,SAAAsN,GAAW,WAAKA,GAAW6F,UAC1D0D,EAAYR,EAAarW,OAAO,SAAAsN,GAAW,YAAMA,GAAW6F,UAElE2D,EAAA,eAAAxW,EACIoF,KAAA7J,KAAe,mBACf6J,KAAAqC,YAAsB,0BACtBrC,KAAAqR,KAAe,0BACfrR,KAAA1D,MAAgB,GAChB0D,KAAAzD,OAAiB,GACjByD,KAAAsR,KAAe,EACftR,KAAA7D,MAAe5D,EAAA+C,MAAMyP,KAErB/K,KAAA8F,cAAWxB,MACN7E,EAAAgB,YAAYyP,OAASqB,GACtBjN,EAAC7E,EAAAgB,YAAYC,QAAU6Q,GACvBjN,EAAC7E,EAAAgB,YAAY0P,KAAOqB,GACpBlN,EAAC7E,EAAAgB,YAAY2P,OAASoB,MAG1BxR,KAAA2H,YACA3H,KAAAuN,WAGAvN,KAAA0N,SApBS7X,EAAAub,YAwBb,IAAAK,EAAA,SAAAxR,GAAA,SAAAwR,UAAArR,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAe,cACfiK,EAAAiC,YAAsB,YACtBjC,EAAAiR,KAAe,aACfjR,EAAA9D,MAAgB5E,EAAMga,OACtBtR,EAAA7D,OAAiB7E,EAAMY,OACvB8H,EAAAkR,KAAO,IACPlR,EAAA0F,cAAWxB,MACN7E,EAAAgB,YAAYyP,OAASqB,GACtBjN,EAAC7E,EAAAgB,YAAYC,QAAU6Q,GACvBjN,EAAC7E,EAAAgB,YAAY0P,KAAOwB,GACpBrN,EAAC7E,EAAAgB,YAAY2P,cAErB,OAbgCnO,EAAAwP,EAAAxR,GAahCwR,EAbA,CAAgCL,GAAnBvb,EAAA4b,aAgBb,IAAAG,EAAA,SAAA3R,GAAA,SAAA2R,UAAAxR,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAe,OACfiK,EAAAiC,YAAsB,gBACtBjC,EAAAiR,KAAe,kBACfjR,EAAA9D,MAAgB1E,EAAMS,MACtB+H,EAAA7D,OAAiB3E,EAAMia,MACvBzR,EAAA0F,cAAWxB,MACN7E,EAAAgB,YAAYyP,OAAS4B,EAAMH,GAC5BrN,EAAC7E,EAAAgB,YAAYC,QAAWoR,EAAMH,GAC9BrN,EAAC7E,EAAAgB,YAAY0P,OACb7L,EAAC7E,EAAAgB,YAAY2P,cAErB,OAZiCnO,EAAA2P,EAAA3R,GAYjC2R,EAZA,CAAiCR,GAApBvb,EAAA+b,cAcb,IAAAL,EAAA,SAAAtR,GAAA,SAAAsR,UAAAnR,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAe,WACfiK,EAAAiC,YAAsB,iBACtBjC,EAAAiR,KAAe,eACfjR,EAAA9D,MAAgB1E,EAAMS,MACtB+H,EAAA7D,OAAiB3E,EAAMQ,MACvBgI,EAAAkR,KAAO,GACPlR,EAAA0F,cAAWxB,MACN7E,EAAAgB,YAAYyP,OACTuB,EACAM,GAEJzN,EAAC7E,EAAAgB,YAAYC,QACT+Q,EACAM,GAEJzN,EAAC7E,EAAAgB,YAAY0P,OACb7L,EAAC7E,EAAAgB,YAAY2P,YAEjBhQ,EAAAmN,SAAWqE,KACf,OApB8B3P,EAAAsP,EAAAtR,GAoB9BsR,EApBA,CAA8BH,GAAjBvb,EAAA0b,WAsBb,IAAAC,EAAA,SAAAvR,GAAA,SAAAuR,UAAApR,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,SACPiK,EAAAiC,YAAc,qBACdjC,EAAAiR,KAAO,aACPjR,EAAA9D,MAAQ1E,EAAMQ,MACdgI,EAAA7D,OAAS,IAAM7E,EAAMU,MACrBgI,EAAAkR,KAAO,GACPlR,EAAA0F,cAAWxB,MACN7E,EAAAgB,YAAY0P,KAAO4B,GACpBzN,EAAC7E,EAAAgB,YAAY2P,OAAS2B,GACtBzN,EAAC7E,EAAAgB,YAAYyP,SACb5L,EAAC7E,EAAAgB,YAAYC,aAEjBN,EAAAmN,SAAWgE,EAAUS,KACzB,OAd4B/P,EAAAuP,EAAAvR,GAc5BuR,EAdA,CAA4BJ,GAAfvb,EAAA2b,SAkBb,IAAAM,EAAA,SAAA7R,GAAA,SAAA6R,UAAA1R,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAiC,YAAsB,oBAEtBjC,EAAAiR,KAAe,WACfjR,EAAA9D,MAAiB,EAAI5E,EAAMua,MAC3B7R,EAAA7D,OAAiB7E,EAAMY,OACvB8H,EAAAkR,KAAO,GACPlR,EAAA0F,cAAWxB,MACN7E,EAAAgB,YAAYyP,OAAS0B,GACtBtN,EAAC7E,EAAAgB,YAAYC,QAAUkR,GACvBtN,EAAC7E,EAAAgB,YAAY0P,OACb7L,EAAC7E,EAAAgB,YAAY2P,YAGjBhQ,EAAAuH,UACI4I,EAAAvC,UACAuC,EAAAzC,gBAAiByC,EAAAxC,0BAEzB,OAlBmB9L,EAAA6P,EAAA7R,GAkBnB6R,EAlBA,CAAmBV,GAqBnBW,EAAA,SAAA9R,GAAA,SAAA8R,UAAA3R,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAe,UACfiK,EAAAiC,YAAsB,cACtBjC,EAAAiR,KAAe,iBACfjR,EAAA9D,MAAgB5E,EAAMY,OACtB8H,EAAA7D,OAAiB7E,EAAMW,MAEvB+H,EAAA0F,cAAWxB,MACN7E,EAAAgB,YAAYyP,OACTqB,EAAUQ,GAEdzN,EAAC7E,EAAAgB,YAAYC,QACT6Q,EACAQ,GAEJzN,EAAC7E,EAAAgB,YAAY0P,KAAOqB,GACpBlN,EAAC7E,EAAAgB,YAAY2P,OAASoB,MAG1BpR,EAAAuH,YAEAvH,EAAAmN,aAEJ,OAvByBtL,EAAA8P,EAAA9R,GAuBzB8R,EAvBA,CAAyBX,GAyBzBc,EAAA,SAAAjS,GAAA,SAAAiS,IAAA,IAAA9R,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,eACPiK,EAAA9D,MAAQ5E,EAAMY,OACd8H,EAAAmN,SAAY4E,GACZ/R,EAAAuH,SAAWkJ,IAEf,OANkC5O,EAAAiQ,EAAAjS,GAMlCiS,EANA,CAAkCH,GAArBlc,EAAAqc,eAQb,IAAAF,EAAA,SAAA/R,GAAA,SAAA+R,IAAA,IAAA5R,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,eACPiK,EAAAmN,SAAW2E,GACX9R,EAAAiR,KAAO,qBACPjR,EAAA9D,MAAQ,EAAI5E,EAAMY,OAClB8H,EAAAuH,SAAWkJ,IACf,OANoC5O,EAAA+P,EAAA/R,GAMpC+R,EANA,CAAoCD,GAAvBlc,EAAAmc,iBAQb,IAAAI,EAAA,SAAAnS,GAAA,SAAAmS,IAAA,IAAAhS,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,WACPiK,EAAAmN,SAAYyE,GACZ5R,EAAAiR,KAAO,iBACPjR,EAAA9D,MAAQ,EAAI5E,EAAMY,OAClB8H,EAAA7D,OAAS,EAAI7E,EAAMU,MAGnBgI,EAAAuH,SAAWoJ,IACf,OATgC9O,EAAAmQ,EAAAnS,GAShCmS,EATA,CAAgCL,GAAnBlc,EAAAuc,aAWb,IAAAC,EAAA,SAAApS,GAAA,SAAAoS,IAAA,IAAAjS,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,eACPiK,EAAAmN,SAAY6E,GACZhS,EAAAiR,KAAO,sBACPjR,EAAA9D,MAAQ,EAAI5E,EAAMY,OAClB8H,EAAA7D,OAAS,EAAI7E,EAAMU,MAEnBgI,EAAAuH,SAAWoJ,IACf,OARqC9O,EAAAoQ,EAAApS,GAQrCoS,EARA,CAAqCN,GAAxBlc,EAAAwc,kBAUb,IAAAC,EAAA,SAAArS,GAAA,SAAAqS,IAAA,IAAAlS,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,WACPiK,EAAAiR,KAAO,gBACPjR,EAAAmN,SAAY6E,GACZhS,EAAA9D,MAAQ,EAAI5E,EAAMY,OAClB8H,EAAA7D,OAAS,EAAI7E,EAAMW,MAGnB+H,EAAAuH,SAAWsJ,IACf,OAT+BhP,EAAAqQ,EAAArS,GAS/BqS,EATA,CAA+BP,GAAlBlc,EAAAyc,YAWb,IAAAC,EAAA,SAAAtS,GAAA,SAAAsS,IAAA,IAAAnS,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,YACPiK,EAAAiR,KAAO,eACPjR,EAAA9D,MAAQ,GAAK5E,EAAMY,OACnB8H,EAAA7D,OAAS,EAAI7E,EAAMY,OAEnB8H,EAAAmN,SAAW+E,GACXlS,EAAAuH,SAAWwJ,IACf,OAR8BlP,EAAAsQ,EAAAtS,GAQ9BsS,EARA,CAA8BR,GAAjBlc,EAAA0c,WAYb,IAAAZ,EAAA,SAAA1R,GAAA,SAAA0R,UAAAvR,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,gBACPiK,EAAAiC,YAAc,sBAEdjC,EAAAiR,KAAe,wBAEfjR,EAAA9D,MAAgB,EAAI5E,EAAMY,OAC1B8H,EAAA7D,OAAiB,EAAI7E,EAAMua,MAE3B7R,EAAAkR,KAAO,GAEPlR,EAAAmN,SAAY4E,GAEZ/R,EAAA0F,cAAWxB,MACN7E,EAAAgB,YAAYyP,OAAS0B,GACtBtN,EAAC7E,EAAAgB,YAAYC,QAAUkR,GACvBtN,EAAC7E,EAAAgB,YAAY0P,KAAOsB,GACpBnN,EAAC7E,EAAAgB,YAAY2P,OAASqB,MAG1BrR,EAAAuH,SAAWoJ,EAEX3Q,EAAAsN,QAAO9W,EACX,OAvBuCqL,EAAA0P,EAAA1R,GAuBvC0R,EAvBA,CAAuCG,GAA1Bjc,EAAA8b,oBAyBb,IAAAQ,EAAA,SAAAlS,GAAA,SAAAkS,IAAA,IAAA/R,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,WACPiK,EAAA9D,MAAQ,EAAI5E,EAAM8a,QAClBpS,EAAA7D,OAAS7E,EAAM8a,QACfpS,EAAAuH,SAAWiJ,IACf,OAL+B3O,EAAAkQ,EAAAlS,GAK/BkS,EALA,CAA+BL,GAAlBjc,EAAAsc,YAOb,IAAAM,EAAA,SAAAxS,GAAA,SAAAwS,IAAA,IAAArS,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,eACPiK,EAAAiR,KAAO,qBACPjR,EAAA9D,MAAQ,EAAI5E,EAAMW,MAClB+H,EAAA7D,OAAS,EAAI7E,EAAMW,MACnB+H,EAAAuH,SAAWiJ,IACf,OANoC3O,EAAAwQ,EAAAxS,GAMpCwS,EANA,CAAoCX,GAAvBjc,EAAA4c,iBAQb,IAAAC,EAAA,SAAAzS,GAAA,SAAAyS,IAAA,IAAAtS,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,WACPiK,EAAAiR,KAAO,cACPjR,EAAA9D,MAAQ,EAAI5E,EAAM8a,QAClBpS,EAAA7D,OAAS,EAAI7E,EAAM8a,QACnBpS,EAAAmN,SAAY4E,EAAWC,GACvBhS,EAAAuH,SAAWmJ,IACf,OAP6B7O,EAAAyQ,EAAAzS,GAO7ByS,EAPA,CAA6BZ,GAAhBjc,EAAA6c,UASb,IAAAC,EAAA,SAAA1S,GAAA,SAAA0S,IAAA,IAAAvS,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,WACPiK,EAAAiR,KAAO,cACPjR,EAAA9D,MAAQ,EAAI5E,EAAMY,OAClB8H,EAAA7D,OAAS,EAAI7E,EAAMY,OACnB8H,EAAAmN,SAAWmF,EAASJ,GACpBlS,EAAAuH,SAAWqJ,IACf,OAP+B/O,EAAA0Q,EAAA1S,GAO/B0S,EAPA,CAA+Bb,GAAlBjc,EAAA8c,YASb,IAAAC,EAAA,SAAA3S,GAAA,SAAA2S,IAAA,IAAAxS,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAjK,KAAO,WACPiK,EAAAiR,KAAO,eACPjR,EAAA9D,MAAQ,GAAK5E,EAAMY,OACnB8H,EAAA7D,OAAS,GAAK7E,EAAMY,OACpB8H,EAAAmN,SAAWoF,EAAWJ,GACtBnS,EAAAuH,SAAWuJ,IAEf,OAR8BjP,EAAA2Q,EAAA3S,GAQ9B2S,EARA,CAA8Bd,GAAjBjc,EAAA+c,WA6BA/c,EAAAgd,eAELV,EACAM,EACAC,EACAC,EACAC,EACAjB,EAEAO,EACAF,EACAI,EACAC,EACAC,EACAC,kaCxUR,IAAAhC,EAAA9a,EAAA,GACA8C,EAAA9C,EAAA,GACAqd,EAAArd,EAAA,GAEAsd,EAAA,WACK/S,KAAA7J,KAAe,YACf6J,KAAAqC,YAAsB,wBACtBrC,KAAA2H,YACA3H,KAAA7D,MAAe5D,EAAA+C,MAAMyP,KAErB/K,KAAAuN,WAEAvN,KAAAE,UAA8B,KAC9BF,KAAA0N,SATQ7X,EAAAkd,gBAYb,IAAAC,EAAA,SAAA/S,GAAA,SAAA+S,IAAA,IAAA5S,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAsN,QACAtN,EAAAjK,KAAO,kBACPiK,EAAAiC,YAAc,8BACdjC,EAAAF,UAAY4S,EAAAnB,kBACZvR,EAAAmN,WACAnN,EAAAuH,UAAa4I,EAAA3C,cAAe2C,EAAA1C,cACjC,OAPoC5L,EAAA+Q,EAAA/S,GAOpC+S,EAPA,CAAoCD,GAAvBld,EAAAmd,iBAUb,IAAAC,EAAA,SAAAhT,GAAA,SAAAgT,IAAA,IAAA7S,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,kBACPiK,EAAAiC,YAAc,aACdjC,EAAAuH,UAAa4I,EAAAhC,OAClB,OAJoCtM,EAAAgR,EAAAhT,GAIpCgT,EAJA,CAAoCF,GAAvBld,EAAAod,iBAMb,IAAAC,EAAA,SAAAjT,GAAA,SAAAiT,IAAA,IAAA9S,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,WACPiK,EAAAiC,YAAc,cACdjC,EAAAuH,UAAa4I,EAAAhC,IAAKgC,EAAAhC,IAAKgC,EAAAhC,OAC5B,OAJuBtM,EAAAiR,EAAAjT,GAIvBiT,EAJA,CAAuBH,GAMvBI,EAAA,SAAAlT,GAAA,SAAAkT,IAAA,IAAA/S,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,UACPiK,EAAAiC,YAAc,gBACdjC,EAAAuH,UAAa4I,EAAAjC,MAAOiC,EAAAlC,UACzB,OAJ6BpM,EAAAkR,EAAAlT,GAI7BkT,EAJA,CAA6BJ,GAAhBld,EAAAsd,UAMb,IAAAC,EAAA,SAAAnT,GAAA,SAAAmT,IAAA,IAAAhT,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,eACPiK,EAAAiC,YAAc,gBACdjC,EAAAuH,UAAa4I,EAAAzC,gBAAiByC,EAAAxC,0BACnC,OAJoC9L,EAAAmR,EAAAnT,GAIpCmT,EAJA,CAAoCL,GAAvBld,EAAAud,iBAMb,IAAAC,EAAA,SAAApT,GAAA,SAAAoT,IAAA,IAAAjT,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,UACPiK,EAAAiC,YAAc,eACdjC,EAAAuH,UAAa4I,EAAAxB,MAAOwB,EAAAxB,SACzB,OAJsB9M,EAAAoR,EAAApT,GAItBoT,EAJA,CAAsBN,GAMtBO,EAAA,SAAArT,GAAA,SAAAqT,IAAA,IAAAlT,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,eACPiK,EAAAiC,YAAc,aACdjC,EAAAuH,UAAa4I,EAAA7B,WAAY6B,EAAA7B,cAC9B,OAJiCzM,EAAAqR,EAAArT,GAIjCqT,EAJA,CAAiCP,GAApBld,EAAAyd,cAMb,IAAAC,EAAA,SAAAtT,GAAA,SAAAsT,IAAA,IAAAnT,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,eACPiK,EAAAiC,YAAc,yBACdjC,EAAAuH,UAAa4I,EAAAnC,UAAWmC,EAAAnC,aAC7B,OAJ0BnM,EAAAsR,EAAAtT,GAI1BsT,EAJA,CAA0BR,GAM1BS,EAAA,SAAAvT,GAAA,SAAAuT,IAAA,IAAApT,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,UACPiK,EAAAiC,YAAc,cACdjC,EAAAuH,UAAa4I,EAAAnC,UAAWmC,EAAAnC,UAAWmC,EAAAnC,aACxC,OAJ6BnM,EAAAuR,EAAAvT,GAI7BuT,EAJA,CAA6BT,GAAhBld,EAAA2d,UAMb,IAAAC,EAAA,SAAAxT,GAAA,SAAAwT,IAAA,IAAArT,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,QACPiK,EAAAiC,YAAc,cACdjC,EAAAuH,UAAa4I,EAAAtC,aAAcsC,EAAAnC,aAChC,OAJoBnM,EAAAwR,EAAAxT,GAIpBwT,EAJA,CAAoBV,GAMpBW,EAAA,SAAAzT,GAAA,SAAAyT,IAAA,IAAAtT,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,MACPiK,EAAAiC,YAAc,iBACdjC,EAAAuH,UAAa4I,EAAArC,YAAaqC,EAAArC,YAAaqC,EAAArC,eAC5C,OAJkBjM,EAAAyR,EAAAzT,GAIlByT,EAJA,CAAkBX,GAMlBY,EAAA,SAAA1T,GAAA,SAAA0T,IAAA,IAAAvT,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,UACPiK,EAAAiC,YAAc,gBACdjC,EAAAuH,UAAa4I,EAAA3B,eAAgB2B,EAAA3B,kBAClC,OAJ6B3M,EAAA0R,EAAA1T,GAI7B0T,EAJA,CAA6BZ,GAAhBld,EAAA8d,UAMb,IAAAC,EAAA,SAAA3T,GAAA,SAAA2T,IAAA,IAAAxT,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,YACPiK,EAAAiC,YAAc,cACdjC,EAAAuH,UAAa4I,EAAAvB,MAAOuB,EAAAvB,SACzB,OAJwB/M,EAAA2R,EAAA3T,GAIxB2T,EAJA,CAAwBb,GAMxBc,EAAA,SAAA5T,GAAA,SAAA4T,IAAA,IAAAzT,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,aACPiK,EAAAiC,YAAc,UACdjC,EAAAuH,UAAa4I,EAAAzB,SAAUyB,EAAAzB,YAC5B,OAJwB7M,EAAA4R,EAAA5T,GAIxB4T,EAJA,CAAwBd,GAMxBe,EAAA,SAAA7T,GAAA,SAAA6T,IAAA,IAAA1T,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,cACPiK,EAAAiC,YAAc,UACdjC,EAAAuH,UAAa4I,EAAAvC,UAAWuC,EAAAvC,aAC7B,OAJyB/L,EAAA6R,EAAA7T,GAIzB6T,EAJA,CAAyBf,GAMzBgB,EAAA,SAAA9T,GAAA,SAAA8T,IAAA,IAAA3T,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,WACPiK,EAAAiC,YAAc,YACdjC,EAAAuH,UAAa4I,EAAAlB,WAAYkB,EAAAlB,cAC9B,OAJuBpN,EAAA8R,EAAA9T,GAIvB8T,EAJA,CAAuBhB,GAMvBiB,EAAA,SAAA/T,GAAA,SAAA+T,IAAA,IAAA5T,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,UACPiK,EAAAiC,YAAc,eACdjC,EAAAuH,UAAa4I,EAAA/B,WAAY+B,EAAA/B,WAAY+B,EAAA/B,cAC1C,OAJsBvM,EAAA+R,EAAA/T,GAItB+T,EAJA,CAAsBjB,GAMtBkB,EAAA,SAAAhU,GAAA,SAAAgU,IAAA,IAAA7T,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,OACPiK,EAAAiC,YAAc,sBACdjC,EAAAuH,UAAa4I,EAAA1B,QAAS0B,EAAA1B,WAC3B,OAJmB5M,EAAAgS,EAAAhU,GAInBgU,EAJA,CAAmBlB,GAMnBmB,EAAA,SAAAjU,GAAA,SAAAiU,IAAA,IAAA9T,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,UACPiK,EAAAiC,YAAc,mBACdjC,EAAAuH,UAAa4I,EAAAZ,eAAgBY,EAAAZ,kBAClC,OAJsB1N,EAAAiS,EAAAjU,GAItBiU,EAJA,CAAsBnB,GAOtBoB,EAAA,SAAAlU,GAAA,SAAAkU,IAAA,IAAA/T,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACKI,EAAAjK,KAAO,gBACPiK,EAAAiC,YAAc,mBACdjC,EAAAuH,UAAa4I,EAAAV,UAAWU,EAAAV,aAC7B,OAJkC5N,EAAAkS,EAAAlU,GAIlCkU,EAJA,CAAkCpB,GAArBld,EAAAse,eAMAte,EAAA0R,mBACTiM,EACAN,EACAE,EACAE,EACAL,EACAE,EACAU,EACAF,EACAC,EACAE,EACAT,EACAI,EACAM,EACAR,EACAS,EACAC,EACAC,EACAR,EAEAS,EAEAnB,kFC1ISnd,EAAA8B,OACTD,OAtBAma,MAJc,GAKdH,OAAQ0C,GACRhc,MAAOgc,GACPC,OAAQD,GACR/b,MAAO+b,GACPnC,MAAOmC,GACP5B,QAAS4B,IACT9b,OAAQ8b,KAgBRxc,OAZAia,MAdc,EAedH,OAAS4C,EACTlc,MAASkc,GACTD,OAASC,GACTjc,MAASic,GACTrC,MAASqC,GACT9B,QAAS8B,GACThc,OAASgc,MAKFC,8EC3BX,IAAA7U,EAAAjK,EAAA,GAEAwO,EAAA,oBAAAA,IACYjE,KAAAwU,SACDxU,KAAA4D,SACC5D,KAAAyU,SACAzU,KAAA0U,gBA8IZ,OA5IWzQ,EAAAvP,UAAAigB,QAAP,WACI,OAAO3U,KAAKwU,OAGhB/f,OAAA6B,eAAW2N,EAAAvP,UAAA,QAAA+B,IAAX,WAAoB,OAAOuJ,KAAK4D,MAAMtP,wCAE/B2P,EAAAvP,UAAAkgB,KAAP,SAAYC,GACR7U,KAAKwU,SACAxU,KAAK8U,SAASD,IACf7U,KAAK4D,MAAMpP,KAAKqgB,IAIjB5Q,EAAAvP,UAAAogB,SAAP,SAAgBC,GACZ,OAAO/U,KAAK4D,MAAMoR,SAASD,IAGxB9Q,EAAAvP,UAAA0P,aAAP,SAAoB2Q,EAAaE,EAAiCC,kBAAA,GAC9D,IAAItR,EAAQ5D,KAAKmV,MACblb,EAAUyF,EAAAxG,MAAM0K,EAAO,SAACgR,GAAY,OAAAK,EAAQF,EAAUH,KAC1D,OAAI3a,GAAWgb,EAAQhb,EAAS8a,GAAYG,EACjCjb,EAEJ8a,GAGJ9Q,EAAAvP,UAAAiI,KAAP,SAAYyY,EAAQC,GAChBrV,KAAK4U,KAAKQ,GACVpV,KAAK4U,KAAKS,GAEV,IAAI3f,EAAIsK,KAAKjF,QAAQqa,GAAMlf,EAAI8J,KAAKjF,QAAQsa,GAC5CrV,KAAKyU,MAAM/e,GAAKsK,KAAKyU,MAAM/e,OAC3BsK,KAAKyU,MAAM/e,GAAGlB,KAAK0B,GAEnB8J,KAAK0U,aAAaxe,GAAK8J,KAAK0U,aAAaxe,OACzC8J,KAAK0U,aAAaxe,GAAG1B,KAAKkB,IAGvBuO,EAAAvP,UAAA4gB,MAAP,SAAaC,GAAb,IAAAnV,EAAAJ,KACGuV,EAAWC,WAAW9S,QAAQ,SAAC4B,OAACrL,EAAAqL,EAAA,GAAEpJ,EAAAoJ,EAAA,GAAO,OAAAlE,EAAKzD,KAAK1D,EAAEiC,MAGjD+I,EAAAvP,UAAA8gB,SAAP,WAEI,IADA,IAAIC,KACapR,EAAA,EAAAC,EAAAtE,KAAK4D,MAALS,EAAAC,EAAAhQ,OAAA+P,IAAY,CAAxB,IAAIuQ,EAAItQ,EAAAD,GACLvJ,EAAQkF,KAAKjF,QAAQ6Z,GACzB,GAAI5U,KAAKyU,MAAM3Z,GACX,IAAuB,IAAA4O,EAAA,EAAAgM,EAAA1V,KAAKyU,MAAM3Z,GAAX4O,EAAAgM,EAAAphB,OAAAoV,IAAmB,CAArC,IAAIiM,EAAUD,EAAAhM,GACXkM,EAAY5V,KAAK4D,MAAM+R,GACtBF,EAAST,UAAUY,EAAWhB,KAC/Ba,EAASjhB,MAAMogB,EAAMgB,KAKrC,OAAOH,GAGJxR,EAAAvP,UAAAmhB,SAAP,SAAgBd,GAAhB,IAAA3U,EAAAJ,KACQlF,EAAQkF,KAAKjF,QAAQga,GAEzB,OADa/U,KAAK8V,gBAAgBhb,GACpBhB,IAAI,SAAClD,GAAM,OAAAwJ,EAAKwD,MAAMhN,MAGhCqN,EAAAvP,UAAAohB,gBAAR,SAAwBC,GACpB,IAAIC,EAAKhW,KAAKyU,MAAMsB,OAChBE,EAAQjW,KAAK0U,aAAaqB,OAE9B,OADiBC,EAAEtb,OAAKub,IAIrBhS,EAAAvP,UAAAygB,IAAP,SAAWe,EAAaC,GAAxB,IAAA/V,EAAAJ,cAAWkW,MAAA,eAAaC,UACpB,IAAIC,EAASF,EAAOlW,KAAKjF,QAAQmb,GAAQ,EACzC,OAAOlW,KAAKqW,SAASD,GAAQtc,IAAI,SAAAlD,GAAK,OAAAwJ,EAAKwD,MAAMhN,MAG7CqN,EAAAvP,UAAA2hB,SAAR,SAAiBC,EAAoBH,GAArC,IAAA/V,EAAAJ,KASI,gBATasW,MAAA,YAAoBH,UACjCA,EAAQ3hB,KAAK8hB,GACEtW,KAAK8V,gBAAgBQ,GAC3B5T,QAAQ,SAAC6T,GACTJ,EAAQnB,SAASuB,IAClBnW,EAAKiW,SAASE,EAAYJ,KAI3BA,GAGJlS,EAAAvP,UAAA8hB,IAAP,SAAWN,EAAaO,GAAxB,IAAArW,EAAAJ,cAAWkW,MAAA,eAAaO,MAAA,WAAyC,WAC7D,IAAIL,EAASF,EAAOlW,KAAKjF,QAAQmb,GAAQ,EACzC,OAAOlW,KAAK0W,SAASN,EAAQK,GAAI3c,IAAI,SAAAlD,GAAK,OAAAwJ,EAAKwD,MAAMhN,MAGjDqN,EAAAvP,UAAAgiB,SAAR,SAAiBJ,EAAuBG,YAAvBH,MAAA,eAAuBG,MAAA,WAA8C,WAClF,IAAIE,KACAR,KAEJ,IADAA,EAAQ3hB,KAAK8hB,GACNH,EAAQ7hB,OAAS0L,KAAK4D,MAAMtP,QAAQ,CACvC,IAAwB,IAAA+P,EAAA,EAAAuS,EAAAT,EAAA9R,EAAAuS,EAAAtiB,OAAA+P,IAAS,CAE7B,IAFC,IAAIwS,EAAWD,EAAAvS,GAESC,EAAA,EAAAwS,EADL9W,KAAK8V,gBAAgBe,GAChBvS,EAAAwS,EAAAxiB,OAAAgQ,IAAK,CAAzB,IAAIyS,EAAYD,EAAAxS,GACjB,IAAK6R,EAAQnB,SAAS+B,GAAe,CACjC,IAAKN,EAAGI,EAAaE,GAAe,CAChCJ,KACA,MAEJR,EAAQ3hB,KAAKuiB,IAGrB,GAAIJ,EAAM,MAEd,GAAIA,EAAM,MAEd,OAAOR,GAGJlS,EAAAvP,UAAAsiB,aAAP,SAAoB5B,EAAQC,EAAQ4B,GAApC,IAAA7W,EAAAJ,cAAoCiX,MAAA,KAChC,IAAIC,KACAC,EAAWnX,KAAKjF,QAAQsa,GAC5BrV,KAAKwW,IAAIpB,EAAK,SAACgC,EAAMC,GAEjB,OADAH,EAASG,GAAQD,EACVC,IAASF,IAMpB,IAJA,IAAIG,KACAD,EAAOF,EACPI,EAAQ,EACRC,EAAWxX,KAAKjF,QAAQqa,IACpBkC,EAAKtC,SAASwC,IAAaD,EAAQN,GACvCK,EAAK9iB,KAAK6iB,GACVA,EAAOH,EAASG,GAChBE,GAAS,EAGb,OADgBD,EAAKxd,IAAI,SAAAlD,GAAK,OAAAwJ,EAAKwD,MAAMhN,KACxB6gB,WAGbxT,EAAAvP,UAAAqG,QAAR,SAAgB6Z,GACZ,OAAO5U,KAAK4D,MAAM7I,QAAQ6Z,IAGlC3Q,EAlJA,GAAapO,EAAAoO,iwDCFb,IAAA1L,EAAA9C,EAAA,GAGAmW,EAAAnW,EAAA,GAGAqd,EAAArd,EAAA,GACAoK,EAAApK,EAAA,GAEAiK,EAAAjK,EAAA,GAkBAI,EAAA6hB,iBAAA,SAAiC9S,GAC7B,OACIyI,KAAM,WACNsK,SAAU/S,IAOlB,IAAAgT,EAAA,SAAA3X,GAUI,SAAA2X,EACWhQ,EACPiQ,GAFJ,IAAAzX,EAIIH,EAAArL,KAAAoL,KACI6X,EAAWnc,EACXmc,EAAWlc,EACXkE,EAAA5H,qBAAqB2P,EAAQ1P,MAC7B2H,EAAA5H,qBAAqB2P,EAAQ1P,MAC7B0P,EAAQzL,QACX6D,YATMI,EAAAwH,UATXxH,EAAA0X,WAIA1X,EAAA2X,SAEA3X,EAAA4X,eAcI5X,EAAKwB,UAAY,IAAIrJ,EAAAsJ,MAAMzB,EAAKwH,QAAQzR,KAAM,EAAG,EAAG,aACpDiK,EAAKwB,UAAUG,SAAW,EAC1B3B,EAAKwB,UAAUzF,MAAQ5D,EAAA+C,MAAMC,MAE7B6E,EAAKkN,MAAQ,IAAI2K,MACjB7X,EAAKkN,MAAM4K,OAAS,WAAQ9X,EAAK4X,gBACjC5X,EAAKkN,MAAM8H,IAAMxN,EAAQ0F,QA0KjC,OAtM4BrL,EAAA2V,EAAA3X,GA+BxBxL,OAAA6B,eAAIshB,EAAAljB,UAAA,UAAA+B,IAAJ,WAAe,OAAOuJ,KAAKD,IAAIrE,EAAIsE,KAAK6D,WAAa,GAAArN,YAAA,EAAAD,cAAA,IACrD9B,OAAA6B,eAAIshB,EAAAljB,UAAA,UAAA+B,IAAJ,WAAe,OAAOuJ,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAAc,EAAI,IAAAtN,YAAA,EAAAD,cAAA,IAE1DqhB,EAAAljB,UAAA4N,KAAA,SAAKlH,EAA+BmH,GAC5BvC,KAAKgY,aAQL5c,EAAI+c,UACAnY,KAAKsN,MACLtN,KAAKoY,OACLpY,KAAKqY,OAGLrY,KAAK6D,WACL7D,KAAK8D,aAIb,IAAIwU,EAAK,IAAI/f,EAAA0I,OAAOjB,KAAKoY,OAAQpY,KAAKqY,QAKlCrY,KAAK4B,UAAU7B,IAAMuY,EAGrBtY,KAAK4B,UAAUU,KAAKlH,EAAKmH,GAGvB,IAAAgW,EAAAD,EAAA5c,EAAO8c,EAAAF,EAAA3c,EAET8c,EAAOzY,KAAK4B,UAAUG,SAC1B/B,KAAK8X,QAAQpV,QAAQ,SAACgW,EAAU5d,GAC5BM,EAAIqB,UAAYmP,EAAAX,WAAWyN,GAAU5c,SACrCV,EAAIsB,SAAS6b,EAJD,EAIkBzd,EAAO0d,EAJzB,EAI0CC,EAAME,EAAaA,MAIjFlkB,OAAA6B,eAAIshB,EAAAljB,UAAA,aAAA+B,IAAJ,WAAkB,OAAOuJ,KAAK4H,QAAQwF,2CAEhCwK,EAAAljB,UAAAkkB,SAAN,SAAeC,EAAkBC,yGAC7B,OAAI9Y,KAAK+X,OACL,OAGAgB,KAEY,YADZC,EAAKhZ,KAAKoN,WACPC,MAAsC,SAAjByL,EAAQzL,MAAhC,MACI4L,EAAiBD,EAEjBH,EAAQK,SAASC,KAAK,SAAAC,GAAM,OAAAH,EAAOI,SAASrE,SAASoE,MACrDpZ,KAAK+X,SACDc,EAAQS,iBAAiBL,EAAOI,WAChCJ,EAAOI,SAAS3W,QAAQ,SAAA6W,GAAY,OAAAV,EAAQW,KAAKD,MACjD,EAAMV,EAAQY,YAAYR,EAAOS,aAFjC,OAFJ,qBAIIpV,EAAAqV,OACAd,EAAQe,MAAMX,EAAOY,UAErBd,MAAS,YAETjR,QAAQG,KAAK,kCAAoC6R,SAAUb,EAAOI,SAAUU,IAAKlB,EAAQK,4BAE7FlZ,KAAK+X,SAAQriB,EAAAskB,MAAA,mCAEE,UAAZhB,EAAG3L,MAAH,OAEH4M,EAAyBjB,EACzBF,GAA4B,aAAjBA,EAAQzL,MACnBrN,KAAK+X,UACLgB,EAAS/Y,KAAKka,SAASrB,EAASC,KAE5B,EAAMD,EAAQY,YAAY,OAD1B,OAHJ,aAIInV,EAAAqV,+BAEJ3Z,KAAK+X,UAAQ,YACNe,GAA4B,UAAjBA,EAAQzL,MAC1BwL,EAAQK,SAASC,KAAK,SAAAC,GAAM,OAAAa,EAAME,OAAOnF,SAASoE,OAC9CpZ,KAAK8X,QAAQxjB,OAAS2lB,EAAMG,UACxBC,EAAM,KACNJ,EAAME,OAAOhB,KAAK,SAAAmB,GAAwC,OAA5BD,EAAMxB,EAAQW,KAAKc,MAC7CD,IACAra,KAAK8X,QAAQtjB,KAAK6lB,GAClBra,KAAKuG,SAAS5B,OAAO0V,GACrBtB,QAIRjR,QAAQG,KAAK,+BACb8Q,OAASrjB,EAAAskB,MAAA,oCAGE,cAAZhB,EAAG3L,MAAH,OACPrN,KAAK+X,UACLgB,EAAS/Y,KAAKka,SAASrB,EAASC,KAE5B,EAAMD,EAAQY,YAAY,OAD1B,eACAnV,EAAAqV,0BAEJ3Z,KAAK+X,SAAQriB,EAAAskB,MAAA,WAGjB,SAAOjB,SAGHnB,EAAAljB,UAAAwlB,SAAR,SAAiBrB,EAAkBC,GAC/B,SAAIA,GAA4B,aAAjBA,EAAQzL,OACFrN,KAAK8X,QAAQxS,KAAK,SAAArO,GAAK,OAAAA,IAAM6hB,EAAQnB,cAElDjY,EAAA7E,kBAAkBmF,KAAK8X,QAASgB,EAAQnB,UACxCkB,EAAQe,MAAMd,EAAQnB,eAO3BC,EAAAljB,UAAA0O,QAAP,SAAerC,GAAf,IAAAX,EAAAJ,KACwC,cAAhCA,KAAK4H,QAAQwF,UAAUC,KACnBtM,EAAOf,KAAK4H,QAAQwF,UAAUmN,gBAAmB,GAC7Cva,KAAK8X,QAAQxjB,OAAS0L,KAAK4H,QAAQwF,UAAUgN,UAC7Cpa,KAAK8X,QAAQtjB,KAAKwL,KAAK4H,QAAQwF,UAAUoN,WAIV,UAAhCxa,KAAK4H,QAAQwF,UAAUC,MAC9BnQ,WAAW,WAAM,OAAAkD,EAAKmG,SAASzB,SAAS1E,EAAKL,MAAM,MAK3D6X,EAAAljB,UAAA+lB,KAAA,SAAKta,EAAgBJ,GAArB,IAAAK,EAAAJ,cAAqBD,MAAcC,KAAKD,KACpC,IAAIwF,EAAOpF,EAAOiF,OAAOkB,sBAAsBvG,EAE3C+S,EAAAD,cAEA,SAACtN,GAEG,OADeA,EAAK6B,qBACD7B,EAAKrF,UAAUyH,SAASwR,KAAK,SAAAjM,GAAW,OAAA9M,EAAKwH,mBAAmBsF,MAKvFwN,KAiBJ,OAhBInV,IAGAmV,EAFWnV,EAAK8B,kBAAkBrE,SACrBxI,SAASuF,GACR,KAGd2a,GACA1a,KAAKuG,SAAWhB,EAChBvF,KAAKD,IAAMC,KAAKuG,SAASc,kBAAkBrE,UAK3ChD,KAAKD,IAAMA,EAGR2a;EAMf9C,EAtMA,CAA4Brf,EAAA2P,OAAfrS,EAAA+hB,waCrCb,IAAArf,EAAA9C,EAAA,GAEAklB,EAAAllB,EAAA,IAEAmlB,EAAA,SAAA3a,GAIE,SAAA2a,EAAmBC,GAAnB,IAAAza,EACEH,EAAArL,KAAAoL,MACE1D,MAAO,IACPC,OAAQ,IACRue,YAAaviB,EAAAwiB,YAAYC,WACzBC,gBAAiBJ,EAAMK,YACvBlb,YANeI,EAAAya,UAerB,OAnB0B5Y,EAAA2Y,EAAA3a,GAYjB2a,EAAAlmB,UAAAymB,MAAP,WACE,IAAIC,EAAS,IAAI7iB,EAAA8iB,OACjB,IAAK,IAAIC,KAAOX,EAAAY,UACdH,EAAOI,YAAYb,EAAAY,UAAUD,IAE/B,OAAOrb,EAAAvL,UAAMymB,MAAKvmB,KAAAoL,KAACob,IAfdR,EAAAa,aAAuB,IAiBhCb,EAnBA,CAA0BriB,EAAAmjB,QAAb7lB,EAAA+kB,sFCJb,IAAAriB,EAAA9C,EAAA,GAGAkmB,EAAA,WAII,SAAAA,EACYxlB,EACAuF,EACAC,EACAigB,EACAC,EACAC,EACAC,YAFAF,MAAA,eACAC,MAAA,eACAC,UANA/b,KAAA7J,OACA6J,KAAAtE,IACAsE,KAAArE,IACAqE,KAAA4b,MACA5b,KAAA6b,gBACA7b,KAAA8b,gBACA9b,KAAA+b,aATZ/b,KAAAK,SACAL,KAAAgc,gBAUIhc,KAAKic,cAuGb,OApGIN,EAAAjnB,UAAA4N,KAAA,SAAKlH,GACD,GAAI4E,KAAKkc,SAAU,CACf,IAAIC,EAAO/gB,EAAIghB,OAAOC,WAClBC,EAAMlhB,EAAIghB,OAAOG,UACrBvc,KAAKkc,SAASM,MAAML,KAAUA,EAAOnc,KAAKtE,EAAC,KAC3CsE,KAAKkc,SAASM,MAAMC,IAASH,EAAMtc,KAAKrE,EAAC,OAIjDggB,EAAAjnB,UAAAgoB,YAAA,SAAYrc,GAAZ,IAAAD,EAAAJ,KACIA,KAAKK,MAAQA,EACTL,KAAK+b,WACL/b,KAAKgc,aAAehc,KAAK4b,IAAIthB,OAAO,SAACM,GAGjC,WAFYA,GACoB2S,QACjBoP,MAAM,SAACC,GAElB,OADYxc,EAAKC,MAAM8Y,KAAK,SAACzjB,GAAkB,OAAAA,IAAMknB,QAK7D5c,KAAKgc,aAAehc,KAAKK,MAE7BL,KAAKic,eAGDN,EAAAjnB,UAAAunB,YAAR,eAAA7b,EAAAJ,KAII,GAHIA,KAAKkc,UACLlc,KAAKkc,SAASW,cAAcC,YAAY9c,KAAKkc,UAE3Clc,KAAKgc,aAAa1nB,OAAS,EAAjC,CAOA,GALA0L,KAAKkc,SAAWa,SAASC,cAAc,OACvChd,KAAKkc,SAASM,MAAMxZ,SAAW,WAC/BhD,KAAKkc,SAASM,MAAMS,OAAS,OAC7BF,SAASG,KAAKC,YAAYnd,KAAKkc,UAE3Blc,KAAK7J,KAAM,CACX,IAAIinB,EAAQL,SAASC,cAAc,MACnCI,EAAMC,YAAcrd,KAAK7J,KACzBinB,EAAMZ,MAAMc,WAAa,UACzBF,EAAMZ,MAAMza,SAAW,MACvBqb,EAAMZ,MAAMe,WAAa,MACzBH,EAAMZ,MAAMrgB,MAAQ5D,EAAA+C,MAAMC,MAAMO,SAChCshB,EAAMZ,MAAMvB,gBAAkB1iB,EAAA+C,MAAMsR,OAAO5K,OAAO,KAAMlG,SACxDshB,EAAMZ,MAAMgB,QAAU,MACtBJ,EAAMZ,MAAMiB,OAAS,MACrBzd,KAAKkc,SAASiB,YACVC,GAIRpd,KAAKgc,aACAliB,IAAI,SAACS,GAAqB,WAAIA,IAC9B6C,KAAK,SAACnE,EAAGiC,GAAM,OAAAjC,EAAEkD,MAAQjB,EAAEiB,OAAS,EAAI,IACxCuG,QAAQ,SAAAnI,GACL,IAAIA,EAAKmT,KAAT,CACA,IAAIsM,EAAQzf,EAAKpE,KACZiK,EAAKC,MAAMvG,IAAI,SAAA9D,GAAK,WAAIA,GAAIG,OAAM6e,SAASza,EAAKpE,QACjD6jB,GAAS,MAEb,IAAIpU,EAAMrL,EAAK4B,MACXuhB,EAAMtd,EAAKud,cAAc3D,EAAOpU,GACpCxF,EAAK8b,SAASiB,YAAYO,GACtBtd,EAAK0b,gBACL4B,EAAIE,aAAe,WAAQxd,EAAK0b,cAAcvhB,KAE9C6F,EAAKyb,gBACL6B,EAAIG,QAAU,WAAQzd,EAAKyb,cAActhB,UAKjDohB,EAAAjnB,UAAAipB,cAAR,SAAsB3D,EAAe7d,GACjC,IAAI2hB,EAAK3hB,EAAM6F,OAAO,IAAKmJ,WAAW,IAAK7H,QAC3Cwa,EAAG7kB,EAAI,GACP,IAAI8kB,EAAK5hB,EAAMsJ,QAAQ,IAAK0F,WAAW,IAAK7H,QACxC0a,EAAgBjB,SAASC,cAAc,UAqB3C,OApBAgB,EAAcX,YAAcrD,EAE5BgE,EAAcxB,MAAMyB,QAAU,QAC9BD,EAAcxB,MAAMza,SAAW,MAC/Bic,EAAcxB,MAAMc,WAAa,UACjCU,EAAcxB,MAAMe,WAAa,MACjCS,EAAcxB,MAAMgB,QAAU,MAC9BQ,EAAcxB,MAAMlgB,MAAQ,QAC5B0hB,EAAcxB,MAAM0B,cAAgB,YACpCF,EAAcxB,MAAMS,OAAS,OAC7Be,EAAcxB,MAAM2B,WAAaL,EAAGhiB,SACpCkiB,EAAcxB,MAAMrgB,MAAQ4hB,EAAGjiB,SAC/BkiB,EAAcI,YAAc,WACxBJ,EAAcxB,MAAM2B,WAAaL,EAAGO,SAAS,IAAK5Y,QAAQ,KAAM3J,SAChEkiB,EAAcxB,MAAMrgB,MAAQ4hB,EAAGtY,QAAQ,IAAK3J,UAEhDkiB,EAAcM,aAAe,WACzBN,EAAcxB,MAAM2B,WAAaL,EAAGhiB,SACpCkiB,EAAcxB,MAAMrgB,MAAQ4hB,EAAGjiB,UAE5BkiB,GAEfrC,EApHA,GAAa9lB,EAAA8lB,yaCHb,IAAApjB,EAAA9C,EAAA,GAEA8a,EAAA9a,EAAA,GACAmW,EAAAnW,EAAA,GAKA8oB,EAAA,SAAAte,GAKI,SAAAse,EAAoBC,EAAwD9iB,EAAWC,GAAvF,IAAAyE,EACIH,EAAArL,KAAAoL,KAAMtE,EAAGC,EAAG,EAAG,IAAEqE,YADDI,EAAAoe,SAIhBpe,EAAKqe,OAAS,IAAIlmB,EAAAsJ,MAAM,IACxBzB,EAAKqe,OAAO1c,SAAW,GACvB3B,EAAKse,IAAIte,EAAKqe,QAEdre,EAAKue,MAAQ,IAAIpmB,EAAAsJ,MAAM,mBAAoB,EAAG,IAC9CzB,EAAKue,MAAM5c,SAAW,GACtB3B,EAAKse,IAAIte,EAAKue,OAEdve,EAAKiC,YAAc,IAAI9J,EAAAsJ,MAAM,cAAe,EAAG,IAC/CzB,EAAKiC,YAAYN,SAAW,GAC5B3B,EAAKiC,YAAYuc,UAAYrmB,EAAAsmB,UAAUC,OACvC1e,EAAKse,IAAIte,EAAKiC,aAEdjC,EAAK2e,KAAKP,KAiDlB,OAvE8Bvc,EAAAsc,EAAAte,GAyB1Bse,EAAA7pB,UAAAqqB,KAAA,SAAKP,GACD,GAAIA,EAGA,GAFAxe,KAAKqC,YAAYF,KAAOqc,EAAOnc,YAE3Bmc,aAAkBjO,EAAArD,QAAS,CAC3B,IAAIuR,KACAO,EAAOR,EAAOhR,QAClB,IAAK,IAAI7W,KAASiV,EAAAzD,UAAW,CACrB,IAAA7D,EAAA0a,EAAAroB,GACA4L,EADE+B,EAAA0E,OAAQ1E,EAAA2E,OAEV1G,EAAQ,EACRkc,EAAOjqB,KAAK,IAAI+N,EAAK,IAAI5L,GAClB4L,EAAQ,GACfkc,EAAOjqB,KAAQ+N,EAAK,IAAI5L,GAGhCqJ,KAAKye,OAAOtc,KAAOsc,EAAOQ,KAAK,OAG/Bjf,KAAK2e,MAAMxc,KAAO,GAClB,IAAI6W,EAAKwF,EAAOpR,UACZ4L,IACgB,WAAZA,EAAG3L,KACHrN,KAAK2e,MAAMxc,KAAO,SAAS6W,EAAGK,SAAS4F,KAAK,OAAM,OAAOjG,EAAGa,SAAQ,IACjD,cAAZb,EAAG3L,KACVrN,KAAK2e,MAAMxc,KAAO,aAAa6W,EAAGwB,UAAS,IACxB,UAAZxB,EAAG3L,KACVrN,KAAK2e,MAAMxc,KAAO,UAAU6W,EAAGmB,OAAO8E,KAAK,OACxB,UAAZjG,EAAG3L,OACVrN,KAAK2e,MAAMxc,KAAO,yBAU1BnC,KAAKye,OAAOtc,KAAO,GACnBnC,KAAK2e,MAAMxc,KAAO,IAMlCoc,EAvEA,CAA8BhmB,EAAA2P,OAAjBrS,EAAA0oB,0aCRb,IAAAhmB,EAAA9C,EAAA,GACAqd,EAAArd,EAAA,GACA8a,EAAA9a,EAAA,GACAoK,EAAApK,EAAA,GACAmK,EAAAnK,EAAA,GACA6H,EAAA7H,EAAA,GACAypB,EAAA,SAAAjf,GAII,SAAAif,EAAoBV,EAAwD9iB,EAAWC,GAAvF,IAAAyE,EACIH,EAAArL,KAAAoL,KAAMtE,EAAGC,EAAG,GAAI,GAAI6iB,GAAUA,EAAOriB,OAAS5D,EAAA+C,MAAMyP,OAAK/K,YADzCI,EAAAoe,SAEhBpe,EAAKjK,KAAO,IAAIoC,EAAAsJ,MAAM2c,GAAUA,EAAOroB,MAAQ,KAAM,GAAI,IACzDiK,EAAKjK,KAAK4L,SAAW,GACrB3B,EAAKjK,KAAKgG,MAAQ5D,EAAA+C,MAAM6jB,MACxB/e,EAAKse,IAAIte,EAAKjK,MAEdiK,EAAKiN,KAAO,IAAI9U,EAAAsJ,MAAM,KAAM,IAAK,IACjCzB,EAAKiN,KAAKtL,SAAW,GACrB3B,EAAKiN,KAAKlR,MAAQ5D,EAAA+C,MAAMyP,KACxB3K,EAAKiN,KAAKuR,UAAYrmB,EAAAsmB,UAAUC,OAChC1e,EAAKse,IAAIte,EAAKiN,MAEVmR,GACApe,EAAKgf,SAASZ,KAY1B,OA9B+Bvc,EAAAid,EAAAjf,GAsB3Bif,EAAAxqB,UAAA0qB,SAAA,SAASZ,GACLxe,KAAK7J,KAAKgM,KAAOqc,EAAOroB,KACxB6J,KAAK7D,MAAQqiB,EAAOriB,MAAMgP,WAAW,IAAKnJ,OAAO,IAC7Cwc,aAAkBjO,EAAArD,UAAWlN,KAAKqN,KAAKlL,KAAUtC,EAAArI,WAAWgnB,EAAOtmB,MAAK,YACxEsmB,aAAkB1L,EAAA1B,YAAapR,KAAKqN,KAAKlL,KAAO,aAChDqc,aAAkB5e,EAAAmT,gBAAiB/S,KAAKqN,KAAKlL,KAAO,YACpDqc,aAAkBlhB,EAAAC,WAAYyC,KAAKqN,KAAKlL,KAAO,aAE3D+c,EA9BA,CAA+B3mB,EAAA2P,OAAlBrS,EAAAqpB,2aCNb,IAAA3mB,EAAA9C,EAAA,GAEA8a,EAAA9a,EAAA,GACA4pB,EAAA5pB,EAAA,IACA6pB,EAAA7pB,EAAA,IAIA8pB,EAAA,SAAAtf,GAKI,SAAAsf,EAAoBf,EAAwD9iB,EAAWC,GAAvF,IAAAyE,EACIH,EAAArL,KAAAoL,KAAMtE,EAAI,IAAKC,EAAI,GAAI,IAAK,IAAKpD,EAAA+C,MAAMC,QAAMyE,KAD7Bwe,OAAApe,EAAAoe,SAGhBpe,EAAKgd,MAAQ,IAAIiC,EAAAH,UAAUV,GAAQgB,KADf,IAEpBpf,EAAKse,IAAIte,EAAKgd,OACdhd,EAAKqf,SAAW,IAAIH,EAAAf,SAASC,GAAQgB,KAASE,IAC9Ctf,EAAKse,IAAIte,EAAKqf,UAEdrf,EAAKkN,MAAQ,IAAI2K,QAwBzB,OArC0BhW,EAAAsd,EAAAtf,GAgBtBsf,EAAA7qB,UAAA4N,KAAA,SAAKlH,EAA+BmH,GAEhC,GADAtC,EAAAvL,UAAM4N,KAAI1N,KAAAoL,KAAC5E,EAAKmH,GACZvC,KAAKwe,QACDxe,KAAKwe,kBAAkBjO,EAAArD,QAAS,CAChC,IAAIyS,EAAK3f,KAAKD,IAAIrE,EAAI,GAAIkkB,EAAK5f,KAAKD,IAAIpE,EAAI,GAE5CP,EAAI+c,UAAUnY,KAAKsN,MAAOqS,EAAIC,EADpB,SAMtBL,EAAA7qB,UAAAmrB,QAAA,SAAQrB,GACJxe,KAAKod,MAAMgC,SAASZ,GACpBxe,KAAKyf,SAASV,KAAKP,GAEnBxe,KAAKwe,OAASA,EACVxe,KAAKwe,kBAAkBjO,EAAArD,UACvBlN,KAAKsN,MAAM8H,IAAMpV,KAAKwe,OAAOlR,QAIzCiS,EArCA,CAA0BhnB,EAAA2P,OAAbrS,EAAA0pB,saCRb,IAAAhnB,EAAA9C,EAAA,GACAqqB,EAAA,SAAA7f,GAGI,SAAA6f,EAAY3pB,EAAcuF,EAAWC,GAArC,IAAAyE,EACIH,EAAArL,KAAAoL,KAAMtE,EAAGC,EAAG,EAAG,IAAEqE,YACjBI,EAAKwB,UAAY,IAAIrJ,EAAAsJ,MAAM1L,EAAMuF,EAAGC,GACpCyE,EAAKwB,UAAUG,SAAW,GAC1B3B,EAAKwB,UAAUzF,MAAQ5D,EAAA+C,MAAMC,MAAMyG,OAAO,IAC1C5B,EAAKse,IAAIte,EAAKwB,WACdxB,EAAK2f,WAAa,IAAIxnB,EAAAsJ,MAAM,IAAKnG,EAAI,GAAIC,GACzCyE,EAAK2f,WAAWhe,SAAW,GAC3B3B,EAAK2f,WAAW5jB,MAAQ5D,EAAA+C,MAAMC,MAAMyG,OAAO,IAC3C5B,EAAKse,IAAIte,EAAK2f,cAatB,OAzBmC9d,EAAA6d,EAAA7f,GAc/B6f,EAAAprB,UAAAsrB,SAAA,SAASC,GACLjgB,KAAK+f,WAAW5d,KAAO,GAAG8d,EAC1B,IAAIhqB,EAAIsC,EAAA+C,MAAMyP,KACVkV,EAAQ,EACRhqB,EAAIsC,EAAA+C,MAAMmP,MAELwV,EAAQ,IACbhqB,EAAIsC,EAAA+C,MAAMuK,KAEd7F,KAAK+f,WAAW5jB,MAAQlG,GAEhC6pB,EAzBA,CAAmCvnB,EAAA2P,OAAtBrS,EAAAiqB,+aCDb,IAAAvnB,EAAA9C,EAAA,GACAmW,EAAAnW,EAAA,GACAyqB,EAAAzqB,EAAA,IAEA0qB,EAAA,SAAAlgB,GAcI,SAAAkgB,EAAYhX,EAAiBzN,EAAWC,GAAxC,IAAAyE,EACIH,EAAArL,KAAAoL,KAAMtE,EAAGC,EAAG,EAAG,IAAEqE,KAdbI,EAAAggB,aACJhY,MAAO,KACPC,OAAQ,KACRC,MAAO,KACPC,QAAS,KACTC,KAAM,KACNC,IAAK,KACLC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,MAOR,IADA,IAAI/N,EAAQ,EACMuJ,EAAA,EAAAgc,EAAAzU,EAAA9C,UAAAzE,EAAAgc,EAAA/rB,OAAA+P,IAAW,CAAxB,IAAI1N,EAAK0pB,EAAAhc,GACN0b,EAA6B,IAAIG,EAAAJ,cAAcnpB,EAAkB,GAAVmE,IAAe,GAC1EsF,EAAKggB,YAAYzpB,GAASopB,EAC1B3f,EAAKse,IAAIqB,UAGb3f,EAAKkgB,WAAWnX,KAaxB,OArCiClH,EAAAke,EAAAlgB,GA2B7BkgB,EAAAzrB,UAAA4rB,WAAA,SAAWC,GAGP,IAFA,IAAIpX,EAASoX,EAEKlc,EAAA,EAAAmc,EAAA5U,EAAA9C,UAAAzE,EAAAmc,EAAAlsB,OAAA+P,IAAW,CAAxB,IAAI1N,EAAK6pB,EAAAnc,GACVrE,KAAKogB,YAAYzpB,GAAOqpB,SACpBpU,EAAA1C,kBAAkBC,EAAQxS,MAK1CwpB,EArCA,CAAiC5nB,EAAA2P,OAApBrS,EAAAsqB,6aCJb,IAAA5nB,EAAA9C,EAAA,GACAmW,EAAAnW,EAAA,GACAgrB,EAAA,SAAAxgB,GAGI,SAAAwgB,EAAY/kB,EAAWC,EAAW+kB,EAAwC/pB,GAA1E,IAAAyJ,EACIH,EAAArL,KAAAoL,KAAMtE,EAAGC,EAAG,GAAI,KAAGqE,KADmDI,EAAAzJ,QAEtE,IAAIgqB,EAAO,IAAIpoB,EAAA2P,MAAMxM,EAAGC,EAAG,GAAI,GAAIiQ,EAAAX,WAAWyV,WAC9CtgB,EAAKse,IAAIiC,GACTvgB,EAAK6f,MAAQ,IAAI1nB,EAAAsJ,MAAM,IAAIlL,EAAS+E,EAAI,GAAIC,EAAI,EAAG,aACnDyE,EAAK6f,MAAMle,SAAW,GACtB3B,EAAK6f,MAAM9jB,MAAQ5D,EAAA+C,MAAMC,MACzB6E,EAAKse,IAAIte,EAAK6f,SAMtB,OAhBuChe,EAAAwe,EAAAxgB,GAYnCwgB,EAAA/rB,UAAAksB,OAAA,SAAOC,GACH7gB,KAAKrJ,OAASkqB,EACd7gB,KAAKigB,MAAM9d,KAAO,IAAInC,KAAKrJ,OAEnC8pB,EAhBA,CAAuCloB,EAAA2P,OAA1BrS,EAAA4qB,mbCFb,IAAAloB,EAAA9C,EAAA,GACAmW,EAAAnW,EAAA,GACAqrB,EAAArrB,EAAA,IACAsrB,EAAA,SAAA9gB,GAkBI,SAAA8gB,EAAYrlB,EAAWC,SAAvByE,EACIH,EAAArL,KAAAoL,KAAMtE,EAAGC,EAAG,EAAG,EAAGpD,EAAA+C,MAAMwP,SAAS9I,OAAO,MAAKhC,KAJjB,OAdhCI,EAAA4gB,UAAO1c,MAGEsH,EAAAjC,cAAcC,SAAU,KACzBtF,EAACsH,EAAAjC,cAAcG,MAAO,KACtBxF,EAACsH,EAAAjC,cAAcE,KAAM,KACrBvF,EAACsH,EAAAjC,cAAcI,MAAO,KACtBzF,EAACsH,EAAAjC,cAAcM,SAAU,KACzB3F,EAACsH,EAAAjC,cAAcK,MAAO,KACtB1F,EAACsH,EAAAjC,cAAcQ,OAAQ,KACvB7F,EAACsH,EAAAjC,cAAcO,WAAY,KAC3B5F,EAACsH,EAAAjC,cAAcS,WAAY,KAC3B9F,EAACsH,EAAAjC,cAAcU,QAAS,KACxB/F,EAACsH,EAAAjC,cAAcW,OAAQ,KACvBhG,EAACsH,EAAAjC,cAAcY,QAAS,KAAA7T,IAOxBkV,EAAAjC,cAAcI,KACd6B,EAAAjC,cAAcK,KACd4B,EAAAjC,cAAcM,QAEd2B,EAAAjC,cAAcO,UACd0B,EAAAjC,cAAcQ,MACdyB,EAAAjC,cAAcS,UAEdwB,EAAAjC,cAAcU,OACduB,EAAAjC,cAAcW,OAER5H,QAAQ,SAACiV,EAAU7c,GACzB,IAAImmB,EAdE,EAciB,GAARnmB,EAAYomB,EAAmB,EAARpmB,EAdvB,IAeXqmB,EAAQ,IAAIL,EAAAL,kBAAkBQ,EAAIC,EAAIvJ,EAAU,GACpDvX,EAAKse,IAAIyC,GACT/gB,EAAK4gB,QAAQrJ,GAAYwJ,MAUrC,OA/CmClf,EAAA8e,EAAA9gB,GAyC/B8gB,EAAArsB,UAAA0sB,UAAA,SAAUzJ,GACN,IAAI/S,EAAM5E,KAAKghB,QAAQrJ,GACnB/S,GACAA,EAAIgc,OAAO,IAGvBG,EA/CA,CAAmCxoB,EAAA2P,OAAtBrS,EAAAkrB,+aCHb,IAAAxoB,EAAA9C,EAAA,GAEA4rB,EAAA5rB,EAAA,IACA6rB,EAAA7rB,EAAA,IAEA8rB,EAAA,SAAAthB,GAQI,SAAAshB,EAAYpY,EAAiBqY,EAAmBC,YAAnBD,MAAA,cAAmBC,MAAA,IAAhD,IAAArhB,EACIH,EAAArL,KAAAoL,KAAM,EAAE,EAAGwhB,EAAGC,EAAGlpB,EAAA+C,MAAMwP,SAAS9I,OAAO,MAAKhC,KAIxC0hB,EAAQ,IAAInpB,EAAAsJ,MAAM,SAAU,EAAG8f,IACnCD,EAAM3f,SAAW,GACjB2f,EAAMvlB,MAAQ5D,EAAA+C,MAAMyP,KACpB2W,EAAM9C,UAAYrmB,EAAAsmB,UAAUC,OAC5B1e,EAAKse,IAAIgD,GAET,IAAIE,EAAU,IAAIrpB,EAAAsJ,MAAM,SAAU,GAAI8f,WACtCC,EAAQ7f,SAAW,EACnB6f,EAAQzlB,MAAQ5D,EAAA+C,MAAMyP,KAAK/I,OAAO,IAClC5B,EAAKse,IAAIkD,GAGTxhB,EAAKyhB,UAAY,IAAIR,EAAAN,cAAc,GAd1B,IAeT3gB,EAAKse,IAAIte,EAAKyhB,WAEdzhB,EAAKoN,QAAU,IAAI8T,EAAAnB,YAAYhX,EAAQ,IAjB9B,IAkBT/I,EAAKse,IAAIte,EAAKoN,SAEdpN,EAAK0hB,SAAW,IAAIvpB,EAAAsJ,MAAM,GAAI,IApBrB,GAoB+B,aACxCzB,EAAK0hB,SAAS/f,SAAW,GACzB3B,EAAK0hB,SAAS3lB,MAAQ5D,EAAA+C,MAAMC,MAC5B6E,EAAKse,IAAIte,EAAK0hB,UAEd1hB,EAAK2hB,aAAe,IAAIxpB,EAAAsJ,MAAM,KAAM,KAzB3B,GAyBqC,aAC9CzB,EAAK2hB,aAAahgB,SAAW,GAC7B3B,EAAK2hB,aAAa5lB,MAAQ5D,EAAA+C,MAAMC,MAChC6E,EAAK2hB,aAAanD,UAAYrmB,EAAAsmB,UAAUC,OACxC1e,EAAKse,IAAIte,EAAK2hB,gBAiBtB,OAzDwC9f,EAAAsf,EAAAthB,GA2CpCshB,EAAA7sB,UAAAstB,kBAAA,SAAkBpd,GACd5E,KAAK6hB,UAAUT,UAAUxc,IAG7B2c,EAAA7sB,UAAAutB,WAAA,SAAW9f,GAAgBnC,KAAK+hB,aAAa5f,KAAOA,GAEpDof,EAAA7sB,UAAAwtB,YAAA,SAAY3B,GACRvgB,KAAKwN,QAAQ8S,WAAWC,IAG5BgB,EAAA7sB,UAAAytB,WAAA,SAAW9K,EAAW+K,GAClBpiB,KAAK8hB,SAAS3f,KAAO,QAAQkV,EAAI,IAAI+K,GAG7Cb,EAzDA,CAAwChpB,EAAA2P,OAA3BrS,EAAA0rB,obCLb,IAAAhpB,EAAA9C,EAAA,GACAqd,EAAArd,EAAA,GAEAmW,EAAAnW,EAAA,GAEA8a,EAAA9a,EAAA,GACAiK,EAAAjK,EAAA,GAEA4sB,EAAA5sB,EAAA,IAGA6sB,EAAA7sB,EAAA,IACAmK,EAAAnK,EAAA,GACA8sB,EAAA9sB,EAAA,IAGA+sB,EAAA,SAAAviB,GAgBI,SAAAuiB,EACYC,EACEC,EACAC,EACAC,YAFAF,MAAA,eACAC,MAAA,eACAC,MAAA,MAJd,IAAAxiB,EAMIH,EAAArL,KAAAoL,KAAM,EAAG,EAAGyiB,EAAKI,YAAaJ,EAAKK,eAAa9iB,KALxCI,EAAAqiB,OACEriB,EAAAsiB,mBACAtiB,EAAAuiB,kBACAviB,EAAAwiB,mBAIVxiB,EAAK2iB,OAAS,IAAIV,EAAAd,mBAAmB3V,EAAA7C,eACrC3I,EAAKse,IAAIte,EAAK2iB,QAEd,IAAIC,EAAc,SAACpoB,GAAM,OAAAwF,EAAK6iB,SAASroB,WACvCwF,EAAK8iB,iBAAmB,IAAIX,EAAA5G,QAAQ,YAAa,GAAI,GAAI6G,EAAIW,qBAAsBT,EAAkBM,GACrG5iB,EAAKgjB,eAAiB,IAAIb,EAAA5G,QAAQ,UAAW,GAAI,IAAKpL,EAAAN,YAAa0S,EAAiBK,GACpF5iB,EAAKijB,gBAAkB,IAAId,EAAA5G,QAAQ,WAAY,IAAK,GAAI6G,EAAIc,oBAAqBV,EAAkBI,MAEnG5iB,EAAKmjB,KAAO,IAAIjB,EAAA/C,KAAK,KAAM,GAAI,KAC/Bnf,EAAKse,IAAIte,EAAKmjB,QA6DtB,OA9FyBthB,EAAAugB,EAAAviB,GAoCrBuiB,EAAA9tB,UAAAutB,WAAA,SAAW9f,GAAgBnC,KAAK+iB,OAAOd,WAAW9f,IAElDqgB,EAAA9tB,UAAA4N,KAAA,SAAKlH,EAA+BmH,GAChCtC,EAAAvL,UAAM4N,KAAI1N,KAAAoL,KAAC5E,EAAKmH,GAChBvC,KAAKkjB,iBAAiB5gB,KAAKlH,GAC3B4E,KAAKojB,eAAe9gB,KAAKlH,GACzB4E,KAAKqjB,gBAAgB/gB,KAAKlH,IAG9BonB,EAAA9tB,UAAA8uB,iBAAA,SAAiB7L,GACb3X,KAAK+iB,OAAOf,kBAAkBrK,IAGlC6K,EAAA9tB,UAAA+uB,cAAA,SAActjB,EAAgBujB,sBACtBA,GACA1jB,KAAK2jB,eAAexjB,EAAOiF,QAE/BpF,KAAK4jB,cAAczjB,GACnBH,KAAK6jB,aAAa1jB,EAAOqN,QAAQ5B,EAAAzD,UAAUI,SAASU,OAAQ9I,EAAO2jB,SAGvEtB,EAAA9tB,UAAAuuB,SAAA,SAASzE,GACLxe,KAAKujB,KAAK1D,QAAQrB,IAGdgE,EAAA9tB,UAAAmvB,aAAR,SAAqBxM,EAAM+K,GACvBpiB,KAAK+iB,OAAOZ,WAAW9K,EAAM+K,IAGzBI,EAAA9tB,UAAAkvB,cAAR,SAAsBzjB,GAClBH,KAAK+iB,OAAOb,YAAY/hB,EAAOqN,UAG3BgV,EAAA9tB,UAAAivB,eAAR,SAAuBve,GACnBpF,KAAK+jB,sBAAsB3e,GAC3BpF,KAAKgkB,qBAAqB5e,GAC1BpF,KAAKikB,sBAAsB7e,IAGvBod,EAAA9tB,UAAAqvB,sBAAR,SAA8B3e,GAC1B,IAAI8e,EACA1B,EAAIW,qBAAqB7oB,OAAO,SAAC4F,GAAc,OAAAkF,EAAOC,UAAU8T,KAAK,SAAAje,GAAK,OAAAA,EAAEgF,qBAAqBA,MAErGF,KAAKkjB,iBAAiBxG,YAAYwH,IAG9B1B,EAAA9tB,UAAAsvB,qBAAR,SAA6B5e,GACzB,IAAItE,EAAUsE,EAAO+e,iBACjBC,EAAgB5B,EAAI6B,mBAAmB/pB,OAAO,SAACsN,GAAY,OAAA9G,EAAQqY,KAAK,SAAAjjB,GAAK,OAAAA,EAAE0R,mBAAmBA,MACtG5H,KAAKojB,eAAe1G,YAAY0H,IAG5B5B,EAAA9tB,UAAAuvB,sBAAR,SAA8B7e,GAC1B,IAAIkf,EAAwB5kB,EAAAjF,WAAW2K,EAAOC,UAAUvL,IAAI,SAAAoB,GAAK,OAAAA,EAAEkH,iBAC/DmiB,EAAiB/B,EAAIc,oBAAoBhpB,OAAO,SAACnB,GAAO,OAAAmrB,EAAsBnL,KAAK,SAAAqL,GAAM,OAAAA,aAAcrrB,MAC3G6G,KAAKqjB,gBAAgB3G,YAAY6H,IApF9B/B,EAAAW,sBACHrQ,EAAAlB,YACAkB,EAAAvB,SACAuB,EAAAtB,eACGsB,EAAAD,eAEA2P,EAAA6B,mBAAqB9T,EAAAN,YACrBuS,EAAAc,oBAAsB1jB,EAAA2H,kBAgFjCib,EA9FA,CAAyBjqB,EAAAksB,SAAZ5uB,EAAA2sB,qaChBb,IAAAjqB,EAAA9C,EAAA,GACA6H,EAAA7H,EAAA,GACAgK,EAAAhK,EAAA,GAGAoK,EAAApK,EAAA,GAEA8J,EAAA,SAAAU,GAAA,SAAAV,IAAA,IAAAa,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAO,WAEAP,EAAAskB,gBAAkB7kB,EAAArI,WAAWM,OAC7BsI,EAAAukB,iBAAmB,EAAAvZ,EAwFvB,OA5F2CnJ,EAAA1C,EAAAU,GAMvCV,EAAA7K,UAAAoO,aAAA,eAAA1C,EAAAJ,KACQwhB,EAAIxhB,KAAK6D,WAAW,EACpBnI,EAAIsE,KAAKD,IAAIrE,EAAI8lB,EACjB7lB,EAAIqE,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAS1B,OARAnI,GAAKkE,EAAA5H,qBAAqB+H,KAAK0kB,iBAAmB,KAG9C,IAAInsB,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,WAChBqE,KAAK2kB,iBAAmB,GAAK,IAAIpsB,EAAA0I,OAAOvF,EAAEC,QAC9C,IAAIpD,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,KAGd7B,IAAI,SAAA5D,GAAK,WAAIoH,EAAAwC,YAAY5J,EAAGkK,EAAKskB,oBAgB/CnlB,EAAA7K,UAAAiP,MAAA,WACI,IAAIihB,KACJA,EAASpwB,KACLwL,KAAKgH,UACDhH,KAAKD,IAAIrE,EAAIsE,KAAK6D,WAAa,EAC/B7D,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAClBrE,EAAAgB,YAAY2P,OAIpB,IAAIyU,EAAQ7kB,KAAK8D,YAiBjB,OAhBA8gB,EAASpwB,KACLwL,KAAKgH,UACDhH,KAAKD,IAAIrE,EAAGsE,KAAKD,IAAIpE,EAAIkpB,EACzBplB,EAAAgB,YAAYyP,OAIpB0U,EAASpwB,KACLwL,KAAKgH,UACDhH,KAAKD,IAAIrE,EAAIsE,KAAK6D,WAClB7D,KAAKD,IAAIpE,EAAIkpB,EACbplB,EAAAgB,YAAYC,QAKbkkB,GAGXrlB,EAAA7K,UAAA2O,gBAAA,SAAgBnJ,GAEZ,OADAA,EAAOyB,EAAIqE,KAAKG,OAAO2kB,SAChB5qB,GAGXqF,EAAA7K,UAAA6O,QAAA,SAAQrJ,GACJ8F,KAAKD,IAAM7F,EACX8F,KAAKD,IAAIpE,GAAKqE,KAAK8D,YAAc,GAGrCvE,EAAA7K,UAAA4N,KAAA,SAAKlH,EAA+BmH,GAChC,IAAIpG,EAAQ6D,KAAK0F,YAEjBtK,EAAIqB,UAAYN,EAAML,SAEtBV,EAAIsB,SAASsD,KAAKD,IAAIrE,EAAGsE,KAAKD,IAAIpE,EAAGqE,KAAK6D,WAAY7D,KAAK8D,aAG3D,IACIihB,EAAQ/kB,KAAKD,IAAIrE,EAASsE,KAAK6D,WAAa,EAAvB,EACrBmhB,EAAQhlB,KAAKD,IAAIpE,EAFA,GAGrBP,EAAIsB,SAASqoB,EAAOC,EAAO,EAHN,IAIrB5pB,EAAIsB,SAASqoB,EAAOC,EAAO,GAAI,GAE/B/kB,EAAAvL,UAAM4N,KAAI1N,KAAAoL,KAAC5E,EAAKmH,IAGpBhD,EAAA7K,UAAAiR,UAAA,WAAc,OAAOpN,EAAA+C,MAAMC,OAC/BgE,EA5FA,CAA2CjC,EAAAC,UAA9B1H,EAAA0J,ubCPb,IAAA0lB,EAAAxvB,EAAA,GACAoK,EAAApK,EAAA,GAIA4J,EAAA,SAAAY,GAAA,SAAAZ,IAAA,IAAAe,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAskB,gBAAkB7kB,EAAArI,WAAWM,OAC7BsI,EAAAukB,iBAAmB,EAAAvZ,EAcvB,OAhByCnJ,EAAA5C,EAAAY,GAgBzCZ,EAhBA,CAAyC4lB,EAAAtnB,gBAA5B9H,EAAAwJ,qbCLb,IAAA4lB,EAAAxvB,EAAA,GACA8C,EAAA9C,EAAA,GACA6H,EAAA7H,EAAA,GACAoK,EAAApK,EAAA,GAEA0J,EAAA,SAAAc,GAAA,SAAAd,IAAA,IAAAiB,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAskB,gBAAkB7kB,EAAArI,WAAWQ,OAWjC,OAZkCiK,EAAA9C,EAAAc,GAE9Bd,EAAAzK,UAAAoO,aAAA,WACI,IAAI0e,EAAIxhB,KAAK6D,WAAW,EACpBnI,EAAIsE,KAAKD,IAAIrE,EAAI8lB,EACjB7lB,EAAIqE,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAAc9D,KAAKklB,YAAcrlB,EAAA5H,qBAAqB4H,EAAArI,WAAWQ,MAAM,EAKjG,OAHI,IAAIO,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,GACpB,IAAIpD,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,IAEd7B,IAAI,SAAA5D,GAAK,WAAIoH,EAAAwC,YAAY5J,EAAG2J,EAAArI,WAAWQ,SAEzDmH,EAZA,CAAkC8lB,EAAAtnB,gBAArB9H,EAAAsJ,8aCLb,IAAA8lB,EAAAxvB,EAAA,GACA8C,EAAA9C,EAAA,GACA6H,EAAA7H,EAAA,GACAoK,EAAApK,EAAA,GAEAwJ,EAAA,SAAAgB,GAAA,SAAAhB,IAAA,IAAAmB,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAskB,gBAAkB7kB,EAAArI,WAAWO,QAYjC,OAbmCkK,EAAAhD,EAAAgB,GAE/BhB,EAAAvK,UAAAoO,aAAA,WACI,IAAI0e,EAAIxhB,KAAK6D,WAAW,EACpBnI,EAAIsE,KAAKD,IAAIrE,EAAI8lB,EACjB7lB,EAAIqE,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAAcjE,EAAA5H,qBAAqB4H,EAAArI,WAAWO,OAAO,EAM/E,OAJI,IAAIQ,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,GACpB,IAAIpD,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,IAGd7B,IAAI,SAAA5D,GAAK,WAAIoH,EAAAwC,YAAY5J,EAAG2J,EAAArI,WAAWO,UAEzDkH,EAbA,CAAmCgmB,EAAAtnB,gBAAtB9H,EAAAoJ,+aCLb,IAAAgmB,EAAAxvB,EAAA,GACAoK,EAAApK,EAAA,GAIAsJ,EAAA,SAAAkB,GAAA,SAAAlB,IAAA,IAAAqB,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAskB,gBAAkB7kB,EAAArI,WAAWM,OAC7BsI,EAAAukB,iBAAmB,EAAAvZ,EAYvB,OAdoCnJ,EAAAlD,EAAAkB,GAcpClB,EAdA,CAAoCkmB,EAAAtnB,gBAAvB9H,EAAAkJ,gbCLb,IAKAF,EAAA,SAAAoB,GAAA,SAAApB,IAAA,IAAAuB,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAukB,iBAAmB,EAAAvZ,EAavB,OAdwCnJ,EAAApD,EAAAoB,GAcxCpB,EAdA,CALApJ,EAAA,GAKwCkI,gBAA3B9H,EAAAgJ,obCLb,IAAAgB,EAAApK,EAAA,GACA6H,EAAA7H,EAAA,GACA8C,EAAA9C,EAAA,GAGAkJ,EAAA,SAAAsB,GAAA,SAAAtB,mDAaA,OAbiCsD,EAAAtD,EAAAsB,GAE7BtB,EAAAjK,UAAAoO,aAAA,WACI,IAAI0e,EAAIxhB,KAAK6D,WAAW,EACpBnI,EAAIsE,KAAKD,IAAIrE,EAAI8lB,EACjB7lB,EAAIqE,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAAc,GAMxC,OAJI,IAAIvL,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,GACpB,IAAIpD,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,IAGd7B,IAAI,SAAA5D,GAAK,WAAIoH,EAAAwC,YAAY5J,EAAG2J,EAAArI,WAAWO,UAEzD4G,EAbA,CAFAlJ,EAAA,GAEiCoI,UAApBhI,EAAA8I,6aCLb,IAAAsmB,EAAAxvB,EAAA,GACA8C,EAAA9C,EAAA,GACA6H,EAAA7H,EAAA,GACAoK,EAAApK,EAAA,GAEAgJ,EAAA,SAAAwB,GAAA,SAAAxB,mDAaA,OAbiCwD,EAAAxD,EAAAwB,GAE7BxB,EAAA/J,UAAAoO,aAAA,WACI,IAAI0e,EAAIxhB,KAAK6D,WAAW,EACpBnI,EAAIsE,KAAKD,IAAIrE,EAAI8lB,EACjB7lB,EAAIqE,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAAc,GAMxC,OAJI,IAAIvL,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,GACpB,IAAIpD,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,IAGd7B,IAAI,SAAA5D,GAAK,WAAIoH,EAAAwC,YAAY5J,EAAG2J,EAAArI,WAAWM,WAEzD2G,EAbA,CAAiCwmB,EAAApnB,UAApBhI,EAAA4I,6aCLb,IAAAwmB,EAAAxvB,EAAA,GACA8C,EAAA9C,EAAA,GACA6H,EAAA7H,EAAA,GACAoK,EAAApK,EAAA,GAEA8I,EAAA,SAAA0B,GAAA,SAAA1B,mDAcA,OAdwC0D,EAAA1D,EAAA0B,GAEpC1B,EAAA7J,UAAAoO,aAAA,WACI,IAAI0e,EAAIxhB,KAAK6D,WAAW,EACpBnI,EAAIsE,KAAKD,IAAIrE,EAAI8lB,EACjB7lB,EAAIqE,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAAc,EAOxC,OALI,IAAIvL,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,GACpB,IAAIpD,EAAA0I,OAAOvF,EAAGC,GACd,IAAIpD,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,IAGd7B,IAAI,SAAA5D,GAAK,WAAIoH,EAAAwC,YAAY5J,EAAG2J,EAAArI,WAAWK,UAEzD0G,EAdA,CAAwC0mB,EAAApnB,UAA3BhI,EAAA0I,obCLb,IAEAF,EAAA,SAAA4B,GAAA,SAAA5B,mDAIA,OAJqC4D,EAAA5D,EAAA4B,GAEjC5B,EAAA3J,UAAAiR,UAAA,WAAc,OAAO3F,KAAK7D,MAAMsJ,QAAQ,KAE5CpH,EAJA,CAFA5I,EAAA,GAEqCgI,cAAxB5H,EAAAwI,ibCFb,IAAA4mB,EAAAxvB,EAAA,GACAgK,EAAAhK,EAAA,GAIA0I,EAAA,SAAA8B,GAAA,SAAA9B,IAAA,IAAAiC,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAA+kB,WAAmB,KAAA/Z,EAiCvB,OAlCgCnJ,EAAA9D,EAAA8B,GAE5B9B,EAAAzJ,UAAA2O,gBAAA,SAAgBnJ,GAMb,OALI8F,KAAKolB,gBAGLlrB,EAAOwB,EAAIsE,KAAKD,IAAIrE,GAEjBxB,GAGViE,EAAAzJ,UAAA6O,QAAA,SAAQrJ,GACJ,GAAI8F,KAAKolB,cAAe,CACpB,IAAIxe,EAAU5G,KAAK2G,YAAYzM,GAC3B0M,IACA5G,KAAKQ,OAASoG,EAAQpG,OAElBoG,IACA5G,KAAKmlB,WAAave,SAI1B,GAAI5G,KAAKQ,SAAWf,EAAAgB,YAAY0P,GAAI,CAChC,IAAIkV,EAAYrlB,KAAKmlB,WAAWplB,IAAIpE,EAAIqE,KAAKG,OAAO2kB,SAAW,GAE3DrD,EAAIroB,KAAKC,IAAIgsB,EAAWjsB,KAAKG,IAAI,IAAKyG,KAAKmlB,WAAWplB,IAAIpE,EAAIzB,EAAOyB,IACzEqE,KAAKslB,UAAW7D,EAAE,GAAI,IACtBzhB,KAAKD,IAAIpE,EAAIqE,KAAKmlB,WAAWplB,IAAIpE,EAAIqE,KAAK8D,iBAEtC2d,EAAIroB,KAAKG,IAAI,IAAKW,EAAOyB,EAAIqE,KAAKmlB,WAAWplB,IAAIpE,GACrDqE,KAAKslB,UAAW7D,EAAE,GAAI,KAItCtjB,EAlCA,CAAgC8mB,EAAAlnB,YAAnBlI,EAAAsI,4aCLb,IAAA8mB,EAAAxvB,EAAA,GACA8C,EAAA9C,EAAA,GACA6H,EAAA7H,EAAA,GACAoK,EAAApK,EAAA,GAEAwI,EAAA,SAAAgC,GAAA,SAAAhC,mDAiCA,OAjCkCgE,EAAAhE,EAAAgC,GAE9BhC,EAAAvJ,UAAAoO,aAAA,WACI,IAAI0e,EAAI,EAAExhB,KAAK6D,WAAW,EACtBnI,EAAIsE,KAAKD,IAAIrE,EAAI8lB,EACjB7lB,EAAIqE,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAAY,EAOtC,OALI,IAAIvL,EAAA0I,OAAOvF,EAAGC,EAAE,KAChB,IAAIpD,EAAA0I,OAAOvF,EAAGC,GACd,IAAIpD,EAAA0I,OAAOvF,EAAGC,EAAE,MAGV7B,IAAI,SAAA5D,GAAK,WAAIoH,EAAAwC,YAAY5J,EAAG2J,EAAArI,WAAWQ,SAGrDiG,EAAAvJ,UAAA4N,KAAA,SAAKlH,EAA+BmH,GAChCvC,KAAKulB,UAAUnqB,EAAK4E,KAAKD,IAAIrE,EAAGsE,KAAKD,IAAIpE,GACzCqE,KAAKsH,aAAa5E,QAAQ,SAAAC,GAAU,OAAAA,EAAOL,KAAKlH,EAAKmH,MAIjDtE,EAAAvJ,UAAA6wB,UAAR,SAAkBnqB,EAAKoqB,EAAMC,GACzB,IAAIhE,EAAIzhB,KAAK8D,YACT0d,EAAIxhB,KAAK6D,WACbzI,EAAII,YACJJ,EAAIK,OAAO,EAAI+pB,EAAM/D,EAAIgE,GACzBrqB,EAAIsqB,cAAc,EAAIF,EAAM/D,EAAI,IAAMgE,EAAM,IAAMD,EAAM,GAAKC,EAAMjE,EAAI,GAAKgE,EAAM,EAAIC,GACtFrqB,EAAIsqB,cAAclE,EAAI,GAAKgE,EAAM,EAAIC,EAAMjE,EAAI,EAAIgE,EAAM,GAAKC,EAAMjE,EAAI,GAAKgE,EAAM,GAAKC,GACxFrqB,EAAIsqB,cAAclE,EAAI,EAAIgE,EAAM,GAAKC,EAAMjE,EAAIgE,EAAO/D,EAAE,GAAMgE,EAAMjE,EAAIgE,EAAM/D,EAAIgE,GAClFrqB,EAAIQ,OAAO,EAAI4pB,EAAM/D,EAAIgE,GACzBrqB,EAAIqB,UAAYuD,KAAK0F,YAAY5J,SACjCV,EAAIvB,QAEZoE,EAjCA,CAAkCgnB,EAAApnB,UAArBhI,EAAAoI,8aCLb,IAAA1F,EAAA9C,EAAA,GACA6H,EAAA7H,EAAA,GACAiK,EAAAjK,EAAA,GAEAgK,EAAAhK,EAAA,GACAkK,EAAAlK,EAAA,IAEAsI,EAAA,SAAAkC,GAAA,SAAAlC,IAAA,IAAAqC,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAglB,iBACAhlB,EAAAO,WAAUyK,EA6Id,OA/IgCnJ,EAAAlE,EAAAkC,GAI5BlC,EAAArJ,UAAAiR,UAAA,WAAc,OAAO3F,KAAK7D,MAAM6F,OAAO,KAEvCjE,EAAArJ,UAAA4N,KAAA,SAAKlH,EAAKmH,GACN,IAAIojB,EAAO3lB,KAAKwC,OAChB9C,EAAA1D,SAASZ,EAAKuqB,EAAM,EAAG3lB,KAAK7D,MAAM6F,OAAO,KAGzC2jB,EAAKjqB,EAAIiqB,EAAKjqB,EAAIsE,KAAK6D,WADf,EAER8hB,EAAKrpB,OAAgB0D,KAAK6D,WAFlB,EAEM,EACdnE,EAAA1D,SAASZ,EAAKuqB,EAAM,EAAG3lB,KAAK7D,MAAM6F,OAAO,KACzC/B,EAAAvL,UAAM4N,KAAI1N,KAAAoL,KAAC5E,EAAKmH,IAGpBxE,EAAArJ,UAAAkP,MAAA,WACI,IAAIlI,EAAIsE,KAAKD,IAAIrE,EAAIsE,KAAK6D,WAAW,EACjClI,EAAIqE,KAAKD,IAAIpE,EACjB,OACI,IAAIpD,EAAA0I,OAAO7H,KAAKK,MAAMiC,GAAIC,KAIlCoC,EAAArJ,UAAAqP,MAAA,SAAMC,kBAAA,IAAgCrE,EAAAsE,OAClC,IAAIC,EAAIF,EAEJ4hB,EAAY5lB,KAAK6D,WAAW,EAC5BnI,EAAIsE,KAAKD,IAAIrE,EAAIkqB,EAEjB1P,EAAOhS,EAAEE,aAAapE,KAAK4D,QAAQ,GAAIlE,EAAAzE,iBACvC4W,EAAQ3N,EAAEE,aAAa,IAAI7L,EAAA0I,OAAOvF,EAAEsE,KAAK6lB,cAAc,IAAKnmB,EAAAzE,iBAChEiJ,EAAEvH,KAAKuZ,EAAKrE,GAEZ,IAAIiU,EAAU9lB,KAAK6lB,cAEnBnmB,EAAA1E,SAAS8qB,EAAS,GAAGpjB,QAAQ,SAAC4B,OAACob,EAAApb,EAAA,GAAGyhB,EAAAzhB,EAAA,GAC1BmY,EAAMvY,EAAEE,aAAa,IAAI7L,EAAA0I,OAAOvF,EAAEgkB,GAAKhgB,EAAAzE,iBACvC+qB,EAAM9hB,EAAEE,aAAa,IAAI7L,EAAA0I,OAAOvF,EAAEqqB,GAAKrmB,EAAAzE,iBAC3CiJ,EAAEvH,KAAK8f,EAAKuJ,KAGhB,IAAIA,EAAM9hB,EAAEE,aAAa,IAAI7L,EAAA0I,OAAOvF,EAAGsE,KAAKD,IAAIpE,EAAIqE,KAAK8D,aAAcpE,EAAAzE,iBACnEgrB,EAAM/hB,EAAEE,aAAa,IAAI7L,EAAA0I,OAAOvF,EAAGoqB,EAAQA,EAAQxxB,OAAO,IAAKoL,EAAAzE,iBACnEiJ,EAAEvH,KAAKqpB,EAAIC,GAEXH,EAAQpjB,QAAQ,SAAAqjB,GACZ,IAAIC,EAAM9hB,EAAEE,aAAa,IAAI7L,EAAA0I,OAAOvF,EAAEqqB,GAAKrmB,EAAAzE,iBAEvCkhB,EAAOjY,EAAEE,aAAa,IAAI7L,EAAA0I,OAAOvF,EAAEkqB,EAAUG,GAAKrmB,EAAAzE,iBACtDiJ,EAAEvH,KAAKwf,EAAK6J,GAEZ,IAAIE,EAAQhiB,EAAEE,aAAa,IAAI7L,EAAA0I,OAAOvF,EAAEkqB,EAAUG,GAAKrmB,EAAAzE,iBACvDiJ,EAAEvH,KAAKqpB,EAAIE,KAGf,IAAkB,IAAA7hB,EAAA,EAAAC,EAAAtE,KAAKY,kBAALyD,EAAAC,EAAAhQ,OAAA+P,IAAwB,CAArC,IAAIE,EAAKD,EAAAD,GACNG,EAAON,EAAEE,aAAaG,EAAME,WAAW1E,IAAKL,EAAAzE,iBAC5CyJ,EAAYR,EAAEE,aAAaG,EAAMX,QAAQ,GAAIlE,EAAAzE,iBACjDiJ,EAAEvH,KAAK+H,EAAWF,GAClBN,EAAEvH,KAAK6H,EAAME,GAEbH,EAAMR,MAAMG,GAGhB,OAAOA,GAGHnG,EAAArJ,UAAAmxB,YAAR,WAII,IAHA,IACIM,EAAY/sB,KAAKK,MAAOuG,KAAK8D,YADlB,IAEXgiB,KACUzhB,EAAA,EAAAC,EAAA5E,EAAA/F,MAAMwsB,GAAN9hB,EAAAC,EAAAhQ,OAAA+P,IAAkB,CAA3B,IAAIjQ,EAACkQ,EAAAD,GACNyhB,EAAQtxB,KACJ,GAAKwL,KAAKD,IAAIpE,EALP,GAKWvH,GAG1B,OAAO0xB,GAGX/nB,EAAArJ,UAAAiP,MAAA,WACI,IAAIihB,KAEJA,EAASpwB,KACLwL,KAAKgH,UACDhH,KAAKD,IAAIrE,EAAIsE,KAAK6D,WAAW,EAC7B7D,KAAKD,IAAIpE,EACT8D,EAAAgB,YAAY0P,KAIpB,IAAc,IAAA9L,EAAA,EAAAC,EAAAtE,KAAK6lB,cAALxhB,EAAAC,EAAAhQ,OAAA+P,IAAoB,CAA7B,IAAI1I,EAAC2I,EAAAD,GACNugB,EAASpwB,KACLwL,KAAKgH,UACDhH,KAAKD,IAAIrE,EAAGC,EACZ8D,EAAAgB,YAAYyP,OAIpB0U,EAASpwB,KACLwL,KAAKgH,UACDhH,KAAKD,IAAIrE,EAAIsE,KAAK6D,WAClBlI,EACA8D,EAAAgB,YAAYC,QAYxB,OAPAkkB,EAASpwB,KACLwL,KAAKgH,UACDhH,KAAKD,IAAIrE,EAAIsE,KAAK6D,WAAW,EAC7B7D,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAClBrE,EAAAgB,YAAY2P,OAGbwU,GAGX7mB,EAAArJ,UAAA+O,YAAA,SAAYvJ,GACR,OAAI8F,KAAKolB,gBACLplB,KAAKolB,kBAAgB,IAM7BrnB,EAAArJ,UAAA2O,gBAAA,SAAgBnJ,GAMZ,OALI8F,KAAKolB,cACLplB,KAAK2G,YAAYzM,GAEjBA,EAAOyB,EAAIvC,KAAKG,IAAIyG,KAAKG,OAAO2kB,SAAW,IAAK5qB,EAAOyB,GAEpDzB,GAGX6D,EAAArJ,UAAA6O,QAAA,SAAQrJ,GACJ8F,KAAKD,IAAIpE,EAAIqE,KAAKG,OAAO2kB,SAAW,EAC/B9kB,KAAKolB,eACRplB,KAAKslB,UAAUprB,EAAOyB,EAAIqE,KAAKG,OAAO2kB,WAIhD/mB,EA/IA,CAAgCT,EAAAC,UAAnB1H,EAAAkI,4aCPb,IAAAxF,EAAA9C,EAAA,GACA6H,EAAA7H,EAAA,GACAgK,EAAAhK,EAAA,GACAoK,EAAApK,EAAA,GAEAoI,EAAA,SAAAoC,GAAA,SAAApC,IAAA,IAAAuC,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAO,WACAP,EAAAG,aAAY6K,EA6DhB,OA/D8BnJ,EAAApE,EAAAoC,GAI1BpC,EAAAnJ,UAAAiP,MAAA,WACI,IAAIihB,KACAC,EAAQ7kB,KAAK8D,YAkBjB,OAfA8gB,EAASpwB,KACLwL,KAAKgH,UACDhH,KAAKD,IAAIrE,EAAGsE,KAAKD,IAAIpE,EAAIkpB,EACzBplB,EAAAgB,YAAYyP,OAIpB0U,EAASpwB,KACLwL,KAAKgH,UACDhH,KAAKD,IAAIrE,EAAIsE,KAAK6D,WAClB7D,KAAKD,IAAIpE,EAAIkpB,EACbplB,EAAAgB,YAAYC,QAIbkkB,GAGX/mB,EAAAnJ,UAAA6O,QAAA,SAAQrJ,GACJ8F,KAAK2G,YAAYzM,IAGrB2D,EAAAnJ,UAAA4N,KAAA,SAAKlH,EAA+BmH,GAChC,IAAIpG,EAAe6D,KAAK0F,YAExBtK,EAAII,YACJJ,EAAIgrB,IACApmB,KAAKD,IAAIrE,EAAIsE,KAAK6D,WAAW,EAC7B7D,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAClB9D,KAAK8D,YAAY,IACjB,EACA1K,KAAKitB,OAGTjrB,EAAIkrB,YACJlrB,EAAIqB,UAAYN,EAAML,SACtBV,EAAIvB,OAEJoG,EAAAvL,UAAM4N,KAAI1N,KAAAoL,KAAC5E,EAAKmH,IAGpB1E,EAAAnJ,UAAAiR,UAAA,WAAc,OAAOpN,EAAA+C,MAAMC,MAAMyG,OAAO,MAExCnE,EAAAnJ,UAAAoO,aAAA,WACI,IAAI0e,EAAIxhB,KAAK6D,WAAW,EACpBnI,EAAIsE,KAAKD,IAAIrE,EAAI8lB,EACjB7lB,EAAIqE,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAAc,EAMxC,OAJI,IAAIvL,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,GACpB,IAAIpD,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,IAGd7B,IAAI,SAAA5D,GAAK,WAAIoH,EAAAwC,YAAY5J,EAAG2J,EAAArI,WAAWK,UAEzDgG,EA/DA,CAA8BP,EAAAC,UAAjB1H,EAAAgI,0aCLb,IAAAP,EAAA7H,EAAA,GACAgK,EAAAhK,EAAA,GAEA8C,EAAA9C,EAAA,GACAoK,EAAApK,EAAA,GACAiK,EAAAjK,EAAA,GAEAkI,EAAA,SAAAsC,GAAA,SAAAtC,IAAA,IAAAyC,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAA8kB,YAAsB,GACtB9kB,EAAAlE,UAAoB,GACpBkE,EAAAG,aACAH,EAAAO,WAqFAP,EAAAskB,gBAA8B7kB,EAAArI,WAAWK,MACzCuI,EAAAukB,iBAA2B,EAAAvZ,EAC/B,OA3FoCnJ,EAAAtE,EAAAsC,GAMhCtC,EAAAjJ,UAAAiR,UAAA,WAAc,OAAO3F,KAAK7D,MAAM6F,OAAO,KAEvCrE,EAAAjJ,UAAA4N,KAAA,SAAKlH,EAA+BmH,GAEhC,IAAIgkB,EAAYvmB,KAAKyC,iBACjB+jB,EAAaxmB,KAAKyC,iBAAiBT,OAAO,IAE9CtC,EAAA1D,SAASZ,EAAK4E,KAAKwC,OAAQ,GAAK+jB,GAEhC7mB,EAAA1D,SACIZ,GACEM,EAAGsE,KAAKtE,EAAGC,EAAGqE,KAAKrE,EAAIqE,KAAK8D,YAAc9D,KAAKklB,YAC/C5oB,MAAO0D,KAAK6D,WAAYtH,OAAQyD,KAAKklB,aACrC,GACAsB,GAGNvmB,EAAAvL,UAAM4N,KAAI1N,KAAAoL,KAAC5E,EAAKmH,IAGpB5E,EAAAjJ,UAAAiP,MAAA,WACI,IAAIihB,KACAC,EAAQ7kB,KAAK8D,YAAc9D,KAAKklB,YAChCuB,EAAiBzmB,KAAKgH,UACtBhH,KAAKD,IAAIrE,EACTsE,KAAKD,IAAIpE,EAAIkpB,EACbplB,EAAAgB,YAAYyP,MAEhB0U,EAASpwB,KAAKiyB,GAEd,IAAIC,EAAkB1mB,KAAKgH,UACvBhH,KAAKD,IAAIrE,EAAIsE,KAAK6D,WAClB7D,KAAKD,IAAIpE,EAAIkpB,EACbplB,EAAAgB,YAAYC,OAmBhB,OAjBAkkB,EAASpwB,KAAKkyB,GAEd9B,EAASpwB,KACLwL,KAAKgH,UACDhH,KAAKD,IAAIrE,EAAIsE,KAAK6D,WAAW,EAC7B7D,KAAKD,IAAIpE,EACT8D,EAAAgB,YAAY0P,KAIpByU,EAASpwB,KACLwL,KAAKgH,UACDhH,KAAKD,IAAIrE,EAAIsE,KAAK6D,WAAW,EAC7B7D,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAClBrE,EAAAgB,YAAY2P,OAGbwU,GAGXjnB,EAAAjJ,UAAAkP,MAAA,WACI,IAAIlI,EAAIsE,KAAKD,IAAIrE,EAAIsE,KAAK6D,WAAW,EACjClI,EAAIqE,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAAY9D,KAAKklB,YAC3C,OACI,IAAI3sB,EAAA0I,OAAO7H,KAAKK,MAAMiC,GAAItC,KAAKK,MAAMkC,MAI7CgC,EAAAjJ,UAAA6O,QAAA,SAAQrJ,GACJ8F,KAAK2G,YAAYzM,IAGrByD,EAAAjJ,UAAAoO,aAAA,eAAA1C,EAAAJ,KACQwhB,EAAIxhB,KAAK6D,WAAW,EACpBnI,EAAIsE,KAAKD,IAAIrE,EAAI8lB,EACjB7lB,EAAIqE,KAAKD,IAAIpE,EAAIqE,KAAK8D,YAAc9D,KAAKklB,YAS7C,OARAvpB,GAAKkE,EAAA5H,qBAAqB+H,KAAK0kB,iBAAmB,KAG9C,IAAInsB,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,WAChBqE,KAAK2kB,iBAAmB,GAAK,IAAIpsB,EAAA0I,OAAOvF,EAAEC,QAC9C,IAAIpD,EAAA0I,OAAOvF,EAAI8lB,EAAE,EAAG7lB,KAGd7B,IAAI,SAAA5D,GAAK,WAAIoH,EAAAwC,YAAY5J,EAAGkK,EAAKskB,oBAMnD/mB,EA3FA,CAAoCL,EAAAC,UAAvB1H,EAAA8H,gbCPb,IAAAL,EAAA7H,EAAA,GAEAgK,EAAAhK,EAAA,GAGAgI,EAAA,SAAAwC,GAAA,SAAAxC,IAAA,IAAA2C,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAAlE,UAAoB,EAEpBkE,EAAAglB,iBACAhlB,EAAAI,OAAsBf,EAAAgB,YAAYyP,KA8ClC9P,EAAAumB,QAAkB,EAAAvb,EAsBtB,OAxEkCnJ,EAAAxE,EAAAwC,GAM9BxC,EAAA/I,UAAAiR,UAAA,WAAc,OAAO3F,KAAK7D,MAAM6F,OAAO,KAEvCvE,EAAA/I,UAAAiP,MAAA,WACI,IAAIihB,KACAC,EAAQ7kB,KAAK8D,YAAc,EAiB/B,OAfA8gB,EAASpwB,KACLwL,KAAKgH,UACDhH,KAAKD,IAAIrE,EAAGsE,KAAKD,IAAIpE,EAAIkpB,EACzBplB,EAAAgB,YAAYyP,OAIpB0U,EAASpwB,KACLwL,KAAKgH,UACDhH,KAAKD,IAAIrE,EAAIsE,KAAK6D,WAClB7D,KAAKD,IAAIpE,EAAIkpB,EACbplB,EAAAgB,YAAYC,QAIbkkB,GAIXnnB,EAAA/I,UAAA+O,YAAA,SAAYvJ,GACR,OAAI8F,KAAKolB,gBACLplB,KAAKolB,iBACLplB,KAAKuD,QAAQvD,KAAKqD,gBAAgBnJ,SAM1CuD,EAAA/I,UAAA2O,gBAAA,SAAgBnJ,GACZ,IAAI0sB,EAAY1sB,EAAOoJ,QAMvB,OALItD,KAAKolB,gBAELwB,EAAUjrB,EAAIqE,KAAKD,IAAIpE,GAGpBirB,GAIXnpB,EAAA/I,UAAA6O,QAAA,SAAQrJ,GAEJ,GAAI8F,KAAKolB,cAAe,CACpB,IAAIxe,EAAU5G,KAAK2G,YAAYzM,GAC3B0M,IACA5G,KAAKQ,OAASoG,EAAQpG,OAElBoG,GAAW5G,KAAKQ,SAAWf,EAAAgB,YAAYyP,OACvClQ,KAAK2mB,QAAU/f,EAAQ7G,IAAIrE,SAK/BsE,KAAKQ,SAAWf,EAAAgB,YAAYyP,MAC5BlQ,KAAK6mB,SAASztB,KAAK0tB,IAAI9mB,KAAK2mB,QAAUzsB,EAAOwB,IAC7CsE,KAAKD,IAAIrE,EAAIsE,KAAK2mB,QAAU3mB,KAAK6D,YAEjC7D,KAAK6mB,SAASztB,KAAK0tB,IAAI9mB,KAAKD,IAAIrE,EAAIxB,EAAOwB,KAI3D+B,EAxEA,CAAkCH,EAAAC,UAArB1H,EAAA4H,8aCLb,IAAAspB,EAAAtxB,EAAA,GAEAuxB,EAAA,SAAA/mB,GACE,SAAA+mB,IAAA,IAAA5mB,EACEH,EAAArL,KAAAoL,OAAOA,YACPI,EAAKymB,SAAS,GACdzmB,EAAKklB,UAAU,GACfllB,EAAK1E,EAAI,EACT0E,EAAKzE,EAAI,EACTyE,EAAKjE,MAAQ,IAAI4qB,EAAGzrB,MAAM,IAAK,IAAK,KAAA8P,EAExC,OAT4BnJ,EAAA+kB,EAAA/mB,GAS5B+mB,EATA,CAA4BD,EAAG7e,OAAlBrS,EAAAmxB,0BCFblxB,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA2D,EAAAwQ,EAAAxU,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA2D,EAAAwQ,EAAAxU,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA2D,EAAAwQ,EAAAxU,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA2D,EAAAwQ,EAAAxU,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA2D,EAAAwQ,EAAAxU,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA2D,EAAAwQ,EAAAxU,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA2D,EAAAwQ,EAAAxU,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA2D,EAAAwQ,EAAAxU,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA2D,EAAAwQ,EAAAxU,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA2D,EAAAwQ,EAAAxU,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA2D,EAAAwQ,EAAAxU,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA2D,EAAAwQ,EAAAxU,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA2D,EAAAwQ,EAAAxU,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA2D,EAAAwQ,EAAAxU,GAAA,aAAAnC,OAAA6B,eAAA8U,EAAA,cAAAzU,OAAA,ICgE3Bd,EAAAiX,sBACTD,MAjCJ,SAAejI,EAAsBwV,GACjC,gBADiCA,MAAA,KAE7B/M,KAAM,QACN8M,OAAQvV,EACRwV,SAAQA,IA8BZrN,SA1BJ,SAAkBnI,EAAoBwd,GAClC,gBADkCA,MAAA,IAE9B/U,KAAM,YACNmN,UAAW5V,EACX2V,eAAgB,IAChBH,SAAUgI,IAsBdpV,OAlBJ,SAAgBia,EAAwBC,GACpC,OACI7Z,KAAM,SACNgM,SAAU4N,EACVpN,SAAUqN,EACVxN,SAAU,MAcdzM,MAVJ,WACI,OACII,KAAM,qBAAAzS,EAAAwQ,EAAAxU,GAAA,iBAAAF,EAAAsJ,WAAAmnB,WAAA,SAAAvsB,EAAAwQ,EAAAxU,EAAAF,GAAA,WAAAE,MAAAoG,UAAA,SAAA3G,EAAAjC,GAAA,SAAAsB,EAAAkF,GAAA,IAAA3E,EAAAS,EAAAoC,KAAA8B,IAAA,MAAAA,GAAAxG,EAAAwG,IAAA,SAAA3B,EAAA2B,GAAA,IAAA3E,EAAAS,EAAA0wB,MAAAxsB,IAAA,MAAAA,GAAAxG,EAAAwG,IAAA,SAAA3E,EAAA2E,KAAAysB,KAAAhxB,EAAAuE,EAAAjE,OAAA,IAAAC,EAAA,SAAAwU,KAAAxQ,EAAAjE,SAAA2wB,KAAA5xB,EAAAuD,GAAAhD,GAAAS,IAAAzB,MAAA2F,EAAAwQ,QAAAtS,WAAAzC,EAAA2J,WAAAunB,aAAA,SAAA3sB,EAAAwQ,GAAA,IAAAxU,EAAAF,EAAAL,EAAAjC,EAAAsB,GAAAskB,MAAA,EAAAL,KAAA,gBAAAtjB,EAAA,SAAAA,EAAA,UAAAA,EAAA,IAAAmxB,QAAAC,QAAA,OAAArzB,GAAA0E,KAAAG,EAAA,GAAAmuB,MAAAnuB,EAAA,GAAAyuB,OAAAzuB,EAAA,uBAAA0uB,SAAAvzB,EAAAuzB,OAAAC,UAAA,kBAAA5nB,OAAA5L,EAAA,SAAA6E,EAAA7E,GAAA,gBAAA6E,GAAA,gBAAA7E,GAAA,GAAAwC,EAAA,UAAAixB,UAAA,wCAAAnyB,GAAA,OAAAkB,EAAA,EAAAF,IAAAL,EAAA,EAAAjC,EAAA,GAAAsC,EAAAgxB,OAAAtzB,EAAA,GAAAsC,EAAA0wB,SAAA/wB,EAAAK,EAAAgxB,SAAArxB,EAAAzB,KAAA8B,GAAA,GAAAA,EAAAoC,SAAAzC,IAAAzB,KAAA8B,EAAAtC,EAAA,KAAAizB,KAAA,OAAAhxB,EAAA,OAAAK,EAAA,EAAAL,IAAAjC,GAAA,EAAAA,EAAA,GAAAiC,EAAAM,QAAAvC,EAAA,kBAAAiC,EAAAjC,EAAA,oBAAAsB,EAAAskB,SAAArjB,MAAAvC,EAAA,GAAAizB,MAAA,UAAA3xB,EAAAskB,QAAAtjB,EAAAtC,EAAA,GAAAA,GAAA,mBAAAA,EAAAsB,EAAA+xB,IAAAK,MAAApyB,EAAA8xB,KAAAM,MAAA,sBAAAzxB,KAAAX,EAAA8xB,MAAAlzB,OAAA,GAAA+B,IAAA/B,OAAA,UAAAF,EAAA,QAAAA,EAAA,KAAAsB,EAAA,kBAAAtB,EAAA,MAAAiC,GAAAjC,EAAA,GAAAiC,EAAA,IAAAjC,EAAA,GAAAiC,EAAA,KAAAX,EAAAskB,MAAA5lB,EAAA,gBAAAA,EAAA,IAAAsB,EAAAskB,MAAA3jB,EAAA,IAAAX,EAAAskB,MAAA3jB,EAAA,GAAAA,EAAAjC,EAAA,SAAAiC,GAAAX,EAAAskB,MAAA3jB,EAAA,IAAAX,EAAAskB,MAAA3jB,EAAA,GAAAX,EAAA+xB,IAAAjzB,KAAAJ,GAAA,MAAAiC,EAAA,IAAAX,EAAA+xB,IAAAK,MAAApyB,EAAA8xB,KAAAM,MAAA,SAAA1zB,EAAAgX,EAAAxW,KAAAgG,EAAAlF,GAAA,MAAAkF,GAAAxG,GAAA,EAAAwG,GAAAlE,EAAA,UAAAE,EAAAP,EAAA,OAAAjC,EAAA,SAAAA,EAAA,UAAAuC,MAAAvC,EAAA,GAAAA,EAAA,UAAAizB,MAAA,KAAAjzB,EAAA6E,OAAAxE,OAAA6B,eAAA8U,EAAA,cAAAzU,OAAA,IC3Dd,IAAAoxB,EAAAtyB,EAAA,IAGAiK,EAAAjK,EAAA,GAEAuyB,EAAA,WAGI,SAAAA,EAAsBC,GAAAjoB,KAAAioB,OAFdjoB,KAAAkoB,cAAwB,IACtBloB,KAAAmoB,YAkHd,OA/GI1zB,OAAA6B,eAAc0xB,EAAAtzB,UAAA,UAAA+B,IAAd,WAAiC,OAAOuJ,KAAKioB,KAAKG,+CAClD3zB,OAAA6B,eAAc0xB,EAAAtzB,UAAA,WAAA+B,IAAd,WAAoC,OAAOuJ,KAAKG,OAAOiF,OAAO+e,kDAC9D1vB,OAAA6B,eAAc0xB,EAAAtzB,UAAA,cAAA+B,IAAd,WAAoD,OAAOuJ,KAAKc,QAAQhH,IAAI,SAAA5D,GAAK,OAAAA,EAAEkX,6CACnF3Y,OAAA6B,eAAc0xB,EAAAtzB,UAAA,WAAA+B,IAAd,WACI,IAAI4xB,KAMJ,OALAroB,KAAKsoB,WAAW5lB,QAAQ,SAAAsW,GACJ,WAAZA,EAAG3L,MACHgb,EAAQ7zB,KAAKwkB,KAGdqP,mCAGLL,EAAAtzB,UAAA6zB,QAAN,kBAAA7xB,EAAAsJ,UAAA,wBAAApF,EAAAoF,KAAA,OAAA3J,EAAA2J,KAAA,SAAAoL,GAAA,OAAAA,EAAA4O,OAAA,OACI,OAAIha,KAAKmoB,UACL,GAECnoB,KAAKmoB,UAAN,MAEA,EAAMnoB,KAAK/K,gBAAXqP,EAAAqV,wBAGJ,SAAM3Z,KAAKwoB,uBAAXlkB,EAAAqV,OACA8O,YAAY,WAAQroB,EAAKmoB,WAAavoB,KAAKkoB,yBAG/BF,EAAAtzB,UAAA8zB,MAAhB,kBAAA9xB,EAAAsJ,UAAA,2BAAA3J,EAAA2J,KAAA,SAAApF,GAAA,OAAAA,EAAAof,OAAA,OACI,SAAMta,EAAA5C,MAAMkD,KAAKkoB,8BAAjB5jB,EAAAqV,iBAGYqO,EAAAtzB,UAAAg0B,WAAhB,SAA2B1b,6GACA1I,EAAA0I,EAAOqM,iCAAPhV,EAAAC,EAAAhQ,QAAdq0B,EAAUrkB,EAAAD,IACf,EAAMrE,KAAK4oB,YAAYD,MADW,YAClCjf,EAAAiQ,+BADmBtV,wBAGnBwkB,EAAc,SAAC3yB,GAAc,OAAAA,EAAEkX,YAAcJ,IAC7C8b,EAAQ9oB,KAAKG,OAAOiF,OAAO2jB,oBAAoB/oB,KAAKioB,KAAKloB,OAAS8oB,KAElE,EAAM7oB,KAAKgpB,YAAYF,KADvB,YAEA,OADApf,EAAAiQ,QACA,EAAM3Z,KAAKipB,kBAAkBH,EAAO9b,kBAApCtD,EAAAiQ,qBAEA,SAAM3Z,KAAKwoB,gBACX,OADA9e,EAAAiQ,QACA,EAAM3Z,KAAK0oB,WAAW1b,WAAtBtD,EAAAiQ,0CAIQqO,EAAAtzB,UAAAu0B,kBAAhB,SAAkCH,EAAe9b,2FAClC,SAAM8b,EAAMlQ,SAAS5Y,KAAKioB,MAAQ5a,KAAM,OAAQL,OAAMA,mBAAtD1I,EAAAqV,QACT,MACA,EAAM3Z,KAAKwoB,gBAEX,OAFAlkB,EAAAqV,OACA7R,QAAQG,KAAK,+CACb,EAAMjI,KAAKipB,kBAAkBH,EAAO9b,WAApC1I,EAAAqV,wCAKUqO,EAAAtzB,UAAAw0B,WAAhB,SAA2BtkB,4GAEnBukB,EAAqB,SAACjzB,GAAc,MAAqB,UAArBA,EAAEkX,UAAUC,MAChDnX,EAAE4hB,QAAQxjB,OAAS4B,EAAEkX,UAAUgN,UAC/BlkB,EAAEkX,UAAU+M,OAAOnF,SAASpQ,IAC5BwkB,EAAYppB,KAAKG,OAAOiF,OAAO2jB,oBAAoB/oB,KAAKioB,KAAKloB,OAASopB,GACtE7O,KACA8O,GACA,EAAMppB,KAAKgpB,YAAYI,KADvB,YAEI,OADJ9kB,EAAAqV,QACI,EAAMyP,EAAUxQ,SAAS5Y,KAAKioB,MAAQ5a,KAAM,QAASsK,SAAU/S,YAA/DN,EAAAqV,SACAW,MAASjkB,EAAA2jB,MAAA,gBAIZM,GAAD,MACA,EAAMta,KAAKwoB,gBACX,OADAlkB,EAAAqV,QACA,EAAM3Z,KAAKkpB,WAAWtkB,WAAtBN,EAAAqV,wCAIQqO,EAAAtzB,UAAAk0B,YAAhB,SAA4BhkB,oHACpBykB,KACAC,EAAwB,SAACpzB,GAAc,MAAsB,cAArBA,EAAEkX,UAAUC,MACpDnX,EAAE4hB,QAAQqB,KAAK,SAAAmB,GAAU,OAAA1V,IAAQ0V,KAEjCiP,EAAcvpB,KAAKG,OAAOiF,OAAO2jB,oBAAoB/oB,KAAKioB,KAAKloB,OAASupB,GACxEH,EAAqB,SAACjzB,GAAc,MAAsB,UAArBA,EAAEkX,UAAUC,MAC/CnX,EAAE4hB,QAAQqB,KAAK,SAAAmB,GAAU,OAAA1V,IAAQ0V,KAEnCzN,EAAgB7M,KAAKG,OAAOiF,OAAO2jB,oBAAoB/oB,KAAKioB,KAAKloB,OAASopB,IAE1ExmB,EAAS4mB,GAAO1c,IAGhB,EAAM7M,KAAKgpB,YAAYrmB,KADvB,YAEI,OADJ2B,EAAAqV,QACI,EAAMhX,EAAOiW,SAAS5Y,KAAKioB,KAAMF,EAAArQ,iBAAiB9S,mBAAlDN,EAAAqV,SACA0P,OAAW,mBAGXrc,EAAShN,KAAKqoB,QAAQ/iB,KAAK,SAAA0H,GAAU,OAAAA,EAAO6M,WAAajV,MAEzD,EAAM5E,KAAK0oB,WAAW1b,KADtB,YACA1I,EAAAqV,OACA0P,KAAWhzB,EAAA2jB,MAAA,gBAIdqP,GAAD,MACA,EAAMrpB,KAAKwoB,gBACX,OADAlkB,EAAAqV,QACA,EAAM3Z,KAAK4oB,YAAYhkB,WAAvBN,EAAAqV,wCAIMqO,EAAAtzB,UAAAs0B,YAAd,SAA0BrmB,2FACtB,SAAM3C,KAAKioB,KAAKuB,OAAO7mB,EAAO4D,kBAC9B,OADAjC,EAAAqV,QACA,EAAM3Z,KAAKioB,KAAKwB,QAAQ9mB,EAAO5C,oBAA/BuE,EAAAqV,iBAERqO,EApHA,GAAsBnyB,EAAAmyB,8wDCNtB,IAAAtoB,EAAAjK,EAAA,GAKAi0B,EAAA,SAAAzpB,GAAA,SAAAypB,mDAoBA,OApB6CznB,EAAAynB,EAAAzpB,GACnCypB,EAAAh1B,UAAAO,MAAN,kBAAAb,EAAA4L,UAAA,wBAAApF,EAAAwQ,EAAAxU,EAAAF,EAAAL,EAAA,OAAAX,EAAAsK,KAAA,SAAA5L,GAAA,OAAAA,EAAA4lB,OAAA,OACI,OAAIha,KAAKmoB,UAAY,IACrBnoB,KAAKmoB,YACCwB,EAAoB,SAACzzB,GAAc,MAAqB,UAArBA,EAAEkX,UAAUC,MACjDnX,EAAE4hB,QAAQxjB,OAAS4B,EAAEkX,UAAUgN,WAC7BvN,EAAgBnN,EAAAvC,QAAQ6C,KAAKc,SAASwE,KAAKqkB,KACX,UAAzB9c,EAAMO,UAAUC,MACnBuc,EAA2B/c,EAAMO,UACjCyc,EAA0B,SAACnzB,GAAc,OAAAkzB,EAAQzP,OAAOhB,KAAK,SAAAmB,GAAU,OAAA5jB,EAAEmjB,WAAaS,MACxFtN,EAAStN,EAAAvC,QAAQ6C,KAAKqoB,SAAS/iB,KAAKukB,KAEpC,EAAM7pB,KAAK0oB,WAAW1b,KADtB,OAJJ,aAMI,OADA1I,EAAAqV,QACA,EAAM3Z,KAAKkpB,WAAWlc,EAAO6M,kBAA7BvV,EAAAqV,wBAGR,SAAM3Z,KAAKwoB,uBAAXlkB,EAAAqV,OACA3Z,KAAKmoB,aAAW,SAGxBuB,EApBA,CAFAj0B,EAAA,IAE6CuyB,oBAAhCnyB,EAAA6zB,mxDCLb,IAAAnxB,EAAA9C,EAAA,GAGAmW,EAAAnW,EAAA,GACAq0B,EAAAr0B,EAAA,IACAiK,EAAAjK,EAAA,GAEAgC,EAAAhC,EAAA,IAEAs0B,EAAAt0B,EAAA,IAEAu0B,EAAA,SAAA/pB,GAaI,SAAA+pB,EAAoBrnB,EAA0BxC,GAA9C,IAAAC,EACIH,EAAArL,KAAAoL,KAAM2C,EAAOjH,EAAGiH,EAAOhH,EAAGlE,EAAAE,MAAMC,MAAMia,MAAOpa,EAAAE,MAAMC,MAAMQ,MAAOG,EAAA+C,MAAMC,QAAMyE,YAD5DI,EAAAuC,SAA0BvC,EAAAD,SAX9CC,EAAA6pB,UAAoBH,EAAAlP,KAAKa,aACzBrb,EAAA8Y,YACA9Y,EAAAkX,QAEAlX,EAAA8pB,kBASI9pB,EAAKe,OAASf,EAAKe,OAAO7G,OAAO,SAAA8G,GAAS,QAAEA,aAAiB7I,EAAA8I,OAAOC,oBAEpElB,EAAK+pB,mBAAqB,IAAIJ,EAAAL,wBAAwBtpB,KA0H9D,OA3I6B6B,EAAA+nB,EAAA/pB,GAoBzBxL,OAAA6B,eAAI0zB,EAAAt1B,UAAA,aAAA+B,IAAJ,WAAkB,OAAOuJ,KAAKoqB,2CAC9B31B,OAAA6B,eAAI0zB,EAAAt1B,UAAA,iBAAA+B,IAAJ,WAAsB,OAAOuJ,KAAKG,wCAElC6pB,EAAAt1B,UAAAwO,OAAA,SAAOC,EAAQZ,GAOX,GANAtC,EAAAvL,UAAMwO,OAAMtO,KAAAoL,KAACmD,EAAQZ,GAGrBvC,KAAKqqB,OAGDrqB,KAAKkqB,eAAgB,CACrB,IAAII,OAAWC,MAAQC,UACvBxqB,KAAKyqB,SACHrxB,KAAKC,KACAixB,EAAMtqB,KAAK0qB,aAAe1qB,KAAK2qB,aAChC,KAKdX,EAAAt1B,UAAA4N,KAAA,SAAKlH,EAA+BmH,GAApC,IAAAnC,EAAAJ,KASI,GARAC,EAAAvL,UAAM4N,KAAI1N,KAAAoL,KAAC5E,EAAKmH,GACZvC,KAAKkZ,UACLlZ,KAAKkZ,SAASxW,QAAQ,SAACkoB,EAAS5wB,GAC5BoB,EAAIqB,UAAYmP,EAAAX,WAAW2f,GAAS9uB,SACpCV,EAAIsB,SAAS0D,EAAK1E,EAAI,EAAG0E,EAAKzE,EAAI,EAAI3B,EAAK,EAAG,KAIlDgG,KAAKkqB,eAAgB,CACrB9uB,EAAIC,UAAY,EAChB,IACIwvB,EAAK7qB,KAAKtE,EAAIovB,EAAMC,EAAK/qB,KAAKrE,EAAI,GACtCP,EAAIS,YAActD,EAAA+C,MAAMC,MAAMO,SAC9BV,EAAIyB,WAAWguB,EAAIE,EAHV,GAAS,GAIlB3vB,EAAIqB,UAAYlE,EAAA+C,MAAMsR,OAAO5K,OAAO,IAAKlG,SACzCV,EAAIsB,SAASmuB,EAAIE,EALR,GAAS,GAMlB3vB,EAAIqB,UAAYlE,EAAA+C,MAAMsR,OAAO9Q,SAC7BV,EAAIsB,SAASmuB,EAAIE,EAPR,GAOY/qB,KAAKyqB,SAPR,GAWlBzqB,KAAKsX,MAcb0S,EAAAt1B,UAAAklB,MAAA,SAAM3jB,GACF+J,KAAKkZ,SAAS1kB,KAAKyB,IAGvB+zB,EAAAt1B,UAAA4kB,iBAAA,SAAiBuI,GACb,IAAImJ,KACAC,EAAejrB,KAAKkZ,SAAS3hB,QAUjC,OATIyI,KAAKkZ,SAAS5kB,OAAS,GACvButB,EAAUnf,QAAQ,SAAAwoB,GACVD,EAAa3lB,KAAK,SAAAV,GAAO,OAAAA,IAAQsmB,IACjCxrB,EAAA7E,kBAAkBowB,EAAcC,GAEhCF,OAILA,GAGXhB,EAAAt1B,UAAA8kB,KAAA,SAAK5U,GACD,OAAI5E,KAAKkZ,SAAS5kB,OAAS,GACnB0L,KAAKkZ,SAAS5T,KAAK,SAAA5O,GAAK,OAAAA,IAAMkO,KAC9BlF,EAAA7E,kBAAkBmF,KAAKkZ,SAAUtU,GAC1BA,GAGR,MAGXolB,EAAAt1B,UAAA+0B,QAAA,SAAQ1pB,GACJ,OAAOC,KAAKmrB,QAAQ1vB,OAAOsE,EAAIrE,EAAGqE,EAAIpE,EAAGqE,KAAKiqB,WAAWmB,aAGvDpB,EAAAt1B,UAAA+kB,YAAN,SAAkB4R,2FAId,OAHArrB,KAAKkqB,kBACLlqB,KAAK0qB,iBAAmBH,MAAQC,UAChCxqB,KAAK2qB,aAAeU,GACpB,EAAM,IAAIruB,QAAQ,SAACC,EAASquB,GAAW,OAAApuB,WAAWD,EAASouB,oBAA3D/mB,EAAAqV,OACA3Z,KAAKkqB,mBAAiB,SAGpBF,EAAAt1B,UAAA80B,OAAN,SAAajjB,wGACT,GAAIvG,KAAKsX,KAAKhjB,OAAS,EACnB,MAAM,IAAIgc,MAAM,4BAGhBgH,EAAOtX,KAAKG,OAAOorB,YAAYvrB,KAAKD,IAAIuD,QAASiD,IAC5CjS,OAAS,GACd0L,KAAKsX,KAAOA,EACZA,EAAKwQ,MACLxQ,EAAKviB,SACL,EAAMiI,QAAQ4e,IACVtE,EAAKxd,IAAI,SAAAiH,GAAQ,OAAAX,EAAKqpB,QAAQ1oB,SALlC,YAIAuD,EAAAqV,OAGA3Z,KAAKsX,yBAET,mBAGJ0S,EAAAt1B,UAAA21B,KAAA,WACIrqB,KAAKmqB,mBAAmB5B,WAGhCyB,EA3IA,CAA6BzxB,EAAA2P,OAAhBrS,EAAAm0B,yaCXb,IAAAzxB,EAAA9C,EAAA,GACA+1B,EAAA/1B,EAAA,IAIAg2B,EAAA,SAAAxrB,GAEI,SAAAwrB,EAAoBtrB,GAApB,IAAAC,EACIH,EAAArL,KAAAoL,KAAM,GAAIG,EAAO2D,YAAc,EAAG,EAAG,IAAE9D,YADvBI,EAAAD,SADpBC,EAAAsrB,YAGItrB,EAAKe,OAASf,EAAKe,OAAO7G,OAAO,SAAA8G,GAAS,QAAEA,aAAiB7I,EAAA8I,OAAOC,sBAS5E,OAbgCW,EAAAwpB,EAAAxrB,GAO5BwrB,EAAA/2B,UAAAi3B,SAAA,SAASC,GACL,IAAI/S,EAAU,IAAI2S,EAAAxB,QAAQ4B,EAAM5rB,KAAKG,QACrC0Y,EAAQwR,OACRrqB,KAAK0rB,SAASl3B,KAAKqkB,GACnB7Y,KAAK0e,IAAI7F,IAEjB4S,EAbA,CAAgClzB,EAAA2P,OAAnBrS,EAAA41B,4FCFb,IAAA/rB,EAAAjK,EAAA,GAEAo2B,EAAA,WAGG,SAAAA,EAAY3V,GACRlW,KAAK+D,MAAQmS,EAAKnS,QAiBzB,OAdG8nB,EAAAn3B,UAAAo3B,SAAA,SAASC,EAAgBC,GACtB,OAAOhsB,KAAK+D,MAAMiT,aAAa+U,EAAQC,IAG1CH,EAAAn3B,UAAAu3B,YAAA,SAAYlX,GACR,IAAInR,EAAQ5D,KAAK+D,MAAMoR,MAIvB,OAHczV,EAAAxG,MAAM0K,EAChB,SAACgR,GAAiB,OAAAxb,KAAK0tB,IAAI/R,EAASva,SAASoa,QAE7C3a,GAKX4xB,EArBA,GAAah2B,EAAAg2B,gbCLb,IAAAtzB,EAAA9C,EAAA,GAEAiK,EAAAjK,EAAA,GAEAy2B,EAAAz2B,EAAA,IAIA02B,EAAA,SAAAlsB,GAKI,SAAAksB,EAAYzwB,EAAWC,GAAvB,IAAAyE,EACIH,EAAArL,KAAAoL,KAAMtE,EAAGC,EAAG,EAAG,IAAEqE,YAJrBI,EAAAiF,aACAjF,EAAAgsB,sBAA2C,KAIvChsB,EAAKe,OAASf,EAAKe,OAAO7G,OAAO,SAAA8G,GAAS,QAAEA,aAAiB7I,EAAA8I,OAAOC,sBAyF5E,OAhG4BW,EAAAkqB,EAAAlsB,GAUxBksB,EAAAz3B,UAAA4N,KAAA,SAAKlH,EAA+BmH,GAChCtC,EAAAvL,UAAM4N,KAAI1N,KAAAoL,KAAC5E,EAAKmH,GAGZvC,KAAKqsB,SAsBbF,EAAAz3B,UAAA43B,cAAA,SAAc/lB,GACVA,EAASlG,SACLkG,EAAS9B,aACT8B,EAAS9B,WAAWwC,OAAOrG,kBAAkBpM,KAAK+R,GAClDvG,KAAKusB,gBAETvsB,KAAKqF,UAAU7Q,KAAK+R,GACpBA,EAAS/C,iBACTxD,KAAK0e,IAAInY,IAGb4lB,EAAAz3B,UAAA4R,sBAAA,SAAsBpM,EAAgBsyB,EAA2CpyB,YAA3CoyB,mBAA2CpyB,MAAA,WAAyC,WACtH,IAAIC,EAAW2F,KAAKqF,UACnB/K,OAAO,SAAAiM,GACJ,SAACimB,EAAel4B,OAAS,IACvBk4B,EAAerT,KAAK,SAAAsT,GAAM,OAAAlmB,EAASrG,qBAAqBusB,MAEtDryB,EAAUmM,KAGlB,GAAIlM,GAAYA,EAAS/F,OAAS,EAE9B,OAAOoL,EAAAxG,MAAMmB,EADU,SAACkM,GAAa,OAAArM,EAAOM,SAAS+L,EAAS3C,QAAQ,OAK9EuoB,EAAAz3B,UAAA62B,YAAA,SAAYQ,EAAgBW,GACnB1sB,KAAKqsB,SACNrsB,KAAKusB,eAET,IAAII,EAAU3sB,KAAKqsB,QAAQJ,YAAYF,GACnCC,EAAOU,EAAY9oB,QAAQ,GAC3BgpB,EAAW5sB,KAAKqsB,QAAQJ,YAAYD,GAExC,OADWhsB,KAAKqsB,QAAQP,SAASa,EAASC,IAI9CT,EAAAz3B,UAAAq0B,oBAAA,SAAoB7uB,EAAgB2yB,EAAuCzyB,YAAvCyyB,mBAAuCzyB,MAAA,WAAuC,WAC9G,IAAI0G,EAAUd,KAAKmkB,iBAMnB,IALArjB,EAAUA,EAAQxG,OAAO,SAAApE,GACrB,SAAC22B,EAAav4B,OAAS,IAAIu4B,EAAa1T,KAAK,SAAAvR,GAAW,OAAA1R,EAAE0R,mBAAmBA,MACzExN,EAAUlE,OAGH4K,EAAQxM,OAAS,EAE5B,OAAOoL,EAAAxG,MAAM4H,EADG,SAAC5K,GAAM,OAAAgE,EAAOM,SAAStE,MAKvCi2B,EAAAz3B,UAAA63B,aAAR,WACI,IAAIO,EAAO9sB,KAAKqF,UAAU,GACtBynB,IACA9sB,KAAKqsB,QAAU,IAAIH,EAAAL,eAAeiB,KAI1CX,EAAAz3B,UAAAyvB,eAAA,WACI,OAAOzkB,EAAAjF,WAAWuF,KAAKqF,UAAUvL,IAAI,SAAAoB,GAAK,OAAAA,EAAEoM,iBAEpD6kB,EAhGA,CAA4B5zB,EAAA2P,OAAfrS,EAAAs2B,waCRb,IAAA5zB,EAAA9C,EAAA,GACAiK,EAAAjK,EAAA,GAQAs3B,EAAA,SAAA9sB,GAAA,SAAA8sB,IAAA,IAAA3sB,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YACII,EAAA4sB,WAwDJ,OAzD+B/qB,EAAA8qB,EAAA9sB,GAK3B8sB,EAAAr4B,UAAAu4B,aAAA,WAQI,IAPA,IAKIC,EAAOltB,KAAK6D,WAAa,EACzBspB,EAAentB,KAAK6D,WANR,GAOEQ,EAAA,EAAAC,EAAA5E,EAAA/F,MAAM,GAAN0K,EAAAC,EAAAhQ,OAAA+P,IAGd,IAHC,IAAI+oB,EAAK9oB,EAAAD,GACNgpB,EAAc,IAAID,EAClBE,EAAQ,EAAIF,GAASD,EAAe,GAC1BzjB,EAAA,EAAAgM,EAAAhW,EAAA/F,MAVF,IAUE+P,EAAAgM,EAAAphB,OAAAoV,IAAkB,CAA3B,IAAItV,EAACshB,EAAAhM,GACN1J,KAAKgtB,MAAMx4B,MACPkH,EAAWtH,EAAI+4B,EAAXD,GAA4B9zB,KAAKM,SAAW4zB,EAAUA,EAAQ,GAClE/wB,OAAQnD,KAAKG,IAAI,GAAI,IAZhB,IAYwBH,KAAKM,UAAyBN,KAAKM,SAAW2zB,EAAcA,EAAY,QAQrHN,EAAAr4B,UAAA4N,KAAA,SAAKlH,EAA+BmH,GAChC,IAAIgrB,EAAYvtB,KAAK7D,MAAMgP,WAAW,KAElCqiB,EAAcxtB,KAAK7D,MAAMkiB,SAAS,IAAK5Y,QAAQ,IAEnDrK,EAAIqB,UAAY8wB,EAAUzxB,SAG1B,IAAI2xB,EAAQztB,KAAKD,IAAIpE,EAAE,EAEvBqE,KAAKgtB,MAAMtqB,QAAQ,SAAAgrB,GACf,IAAIhO,EAAK+N,EAAQC,EAAKnxB,OAClBoxB,EAAyB,IAAdD,EAAKnxB,OACpBnB,EAAII,YACJJ,EAAIK,OAAOiyB,EAAKhyB,EAAGgkB,GACnBtkB,EAAIQ,OAAO8xB,EAAKhyB,EAAIiyB,EAAUF,GAC9BryB,EAAIQ,OAAO8xB,EAAKhyB,EAAIiyB,EAAUF,GAE9BryB,EAAIqB,UAAY8wB,EAAUzxB,SAC1BV,EAAIvB,OAEJuB,EAAII,YACJJ,EAAIK,OAAOiyB,EAAKhyB,EAAGgkB,GACnBtkB,EAAIQ,OAAO8xB,EAAKhyB,EAAOiyB,EAAS,EAAZ,EAAgBF,GACpCryB,EAAIQ,OAAO8xB,EAAKhyB,EAAIiyB,EAAUF,GAC9BryB,EAAIqB,UAAY+wB,EAAY1xB,SAC5BV,EAAIvB,UAIhBkzB,EAzDA,CANA,SAAA9sB,GACI,SAAA2tB,EAAYjyB,EAAWW,EAAeH,UAClC8D,EAAArL,KAAAoL,KAAM,EAAGrE,EAAGW,EAAO,IAAKH,IAAM6D,KAEtC,OAJ+BiC,EAAA2rB,EAAA3tB,GAI/B2tB,EAJA,CAA+Br1B,EAAA2P,QAMlBrS,EAAAk3B,2aCTb,IAAAhG,EAAAtxB,EAAA,GACA8C,EAAA9C,EAAA,GAEAiK,EAAAjK,EAAA,GACAo4B,EAAAp4B,EAAA,IAGAmW,EAAAnW,EAAA,GACAq4B,EAAAr4B,EAAA,IACAs4B,EAAAt4B,EAAA,IACA8a,EAAA9a,EAAA,GAIAu4B,EAAA,SAAA/tB,GAII,SAAA+tB,EACWC,EACA9xB,EACC+xB,EACA1M,EACA2M,YADA3M,MAAA,cACA2M,MAAA,KALZ,IAAA/tB,EAOIH,EAAArL,KAAAoL,KAAM,EAAGmuB,EAAM,EAAG3M,EAAG2M,EAAOhyB,IAAM6D,KAN3BI,EAAA6tB,MACA7tB,EAAAjE,QACCiE,EAAA8tB,kBACA9tB,EAAAohB,IACAphB,EAAA+tB,QAGR/tB,EAAKe,OAASf,EAAKe,OAAO7G,OAAO,SAAA8G,GAAS,QAAEA,aAAiB2lB,EAAG1lB,OAAOC,oBAEvE,IAAImsB,GAASU,EAAM,EAEnB/tB,EAAKguB,YAAYX,EADC,GACmBrtB,EAAKjE,MAAMsJ,QAAQ,MAKxD,IAFA,IACI4oB,EAAcF,EADD,GAEH9pB,EAAA,EAAAC,EAAA5E,EAAA/F,MAFG,IAEH0K,EAAAC,EAAAhQ,OAAA+P,IAAmB,CAA5B,IAAIjQ,EAACkQ,EAAAD,GACNjE,EAAKguB,YACDX,EARU,GAQaY,EAAY,EAAMA,GAAej6B,EAAE,GAC1Di6B,EACAjuB,EAAKjE,MAAM6F,OAAO,IAAO,IAAO5N,WAIxCgM,EAAKse,IAAI,IAAImP,EAAAd,WAAWoB,EAAM,EAAG/tB,EAAKyD,WAAYzD,EAAKjE,MAAMsJ,QAAQ,OAErErF,EAAKgF,OAAS,IAAI0oB,EAAA3B,OAAO,GAAGgC,EAAM,GAClC/tB,EAAKse,IAAIte,EAAKgF,QAEdhF,EAAKkuB,WAAa,IAAIP,EAAAtC,WAAWrrB,GACjCA,EAAKse,IAAIte,EAAKkuB,cAgFtB,OAnH4BrsB,EAAA+rB,EAAA/tB,GAsCxBxL,OAAA6B,eAAI03B,EAAAt5B,UAAA,oBAAA65B,IAAJ,SAAqBhoB,GACjBvG,KAAKkuB,gBAAgB3nB,oCAGjBynB,EAAAt5B,UAAA05B,YAAR,SAAoBzyB,EAAWzD,EAAciE,GACzC,IAAIqyB,EAAW,IAAIj2B,EAAA2P,MAAM,EAAGvM,EAAGqE,KAAK6D,WAAY3L,EAAMiE,GACtD6D,KAAK0e,IAAI8P,IAGbR,EAAAt5B,UAAA4N,KAAA,SAAKlH,EAA+BmH,GAChCtC,EAAAvL,UAAM4N,KAAI1N,KAAAoL,KAAC5E,EAAKmH,GAEZvC,KAAKosB,uBACLpsB,KAAKosB,sBAAsB9pB,KAAKlH,EAAKmH,IAI7C9N,OAAA6B,eAAI03B,EAAAt5B,UAAA,WAAA+B,IAAJ,WACI,IAEIg4B,EAFUzuB,KAAKoF,OAAO+e,iBACFrqB,IAAI,SAAC5D,GAAc,OAAAA,EAAE0R,QAAQ4F,UAC1B5U,OAAOgT,EAAAxC,WAAYwC,EAAA7C,eAE1C2lB,EAAgB1uB,KAAKsuB,WAAW5C,SAASp3B,OAI7C,OAHAm6B,EAAoBlmB,QAAEU,OAASylB,EAC/BD,EAAmBpmB,OAAEY,QAAUylB,EAC/BD,EAAkBnmB,MAAEW,QAAUylB,EACvBD,mCAGXT,EAAAt5B,UAAAwO,OAAA,SAAOC,EAAQZ,GACXtC,EAAAvL,UAAMwO,OAAMtO,KAAAoL,KAACmD,EAAQZ,GAErBvC,KAAKoF,OAAOC,UAAU3C,QAAQ,SAAA6D,GAAY,OAAAA,EAASrD,OAAOC,EAAQZ,KAClEvC,KAAKsuB,WAAW5C,SAAShpB,QAAQ,SAAAmW,GAAW,OAAAA,EAAQ3V,OAAOC,EAAQZ,MAGvE9N,OAAA6B,eAAI03B,EAAAt5B,UAAA,yBAAA+B,IAAJ,WACI,OAAOuJ,KAAKoF,OAAOgnB,uDAGvB4B,EAAAt5B,UAAAmQ,OAAA,SAAO8S,GACH3X,KAAKiuB,IAAIzK,iBAAiB7L,IAG9BqW,EAAAt5B,UAAA43B,cAAA,SAAc/lB,GACVvG,KAAKoF,OAAOknB,cAAc/lB,IAG9BynB,EAAAt5B,UAAAoQ,SAAA,SAAS/E,GACL,GAAIC,KAAKsuB,WAAW5C,SAASp3B,OAAS0L,KAAK8jB,OAAQ,CAC/C,IAAI8H,EAAO5rB,KAAK2uB,cAAc5uB,GAAMwQ,EAAA7B,aACpC1O,KAAKsuB,WAAW3C,SAASC,KAIjCn3B,OAAA6B,eAAI03B,EAAAt5B,UAAA,UAAA+B,IAAJ,WACI,IAEIm4B,EAFU5uB,KAAKoF,OAAO+e,iBACFrqB,IAAI,SAAC5D,GAAc,OAAAA,EAAE0R,QAAQ4F,UACb5U,OAAOgT,EAAAxC,WAAYwC,EAAA7C,eAEvD0V,GAAW7S,EAAAzD,UAAUI,QAASqD,EAAAzD,UAAUG,MAAOsD,EAAAzD,UAAUE,QAC7D,OAAOjP,KAAKG,IAAI,EAAGH,KAAKC,IAAGpE,MAARmE,KACZqlB,EAAO3kB,IAAI,SAAA+0B,GAAO,OAAAjjB,EAAA1C,kBAAkB0lB,EAAyBC,wCAIxEb,EAAAt5B,UAAA4R,sBAAA,SAAsBpM,EAAgBsyB,EAAsCpyB,GACxE,gBADwEA,MAAA,WAAuC,WACxG4F,KAAKoF,OAAOkB,sBAAsBpM,EAAQsyB,EAAgBpyB,IAGrE4zB,EAAAt5B,UAAAi6B,cAAA,SAAcz0B,EAAgB2yB,EAAuCzyB,GACjE,gBAD0ByyB,mBAAuCzyB,MAAA,WAAuC,WACjG4F,KAAKoF,OAAO2jB,oBAAoB7uB,EAAQ2yB,EAAczyB,IAGjE4zB,EAAAt5B,UAAA62B,YAAA,SAAYQ,EAAgBW,GACxB,OAAO1sB,KAAKoF,OAAOmmB,YAAYQ,EAAQW,IAE/CsB,EAnHA,CAA4Bz1B,EAAA2P,OAAfrS,EAAAm4B,waCdb,IAAAz1B,EAAA9C,EAAA,GAEAq5B,EAAAr5B,EAAA,IACAs5B,EAAAt5B,EAAA,IACAqd,EAAArd,EAAA,GACA6H,EAAA7H,EAAA,GACAu5B,EAAAv5B,EAAA,IACAsyB,EAAAtyB,EAAA,IACA8a,EAAA9a,EAAA,GACAmK,EAAAnK,EAAA,GACAiK,EAAAjK,EAAA,GAEAoK,EAAApK,EAAA,GAGAw5B,EAAA,SAAAhvB,GAAA,SAAAgvB,IAAA,IAAA7uB,EAAA,OAAAH,KAAAhL,MAAA+K,KAAA2L,YAAA3L,YAMII,EAAA8uB,YAGA9uB,EAAA+uB,eAAyB,oCAEzB/uB,EAAAgvB,gBAAiC,KAAAhkB,EAsPrC,OAjQ+BnJ,EAAAgtB,EAAAhvB,GA6B3BgvB,EAAAv6B,UAAAwO,OAAA,SAAOC,EAAQZ,GACXtC,EAAAvL,UAAMwO,OAAMtO,KAAAoL,KAACmD,EAAQZ,GAErBvC,KAAKiuB,IAAIxK,cAAczjB,KAAKG,YAGzB8uB,EAAAv6B,UAAAu4B,aAAP,SAAoBxK,GAApB,IAAAriB,EAAAJ,KACIA,KAAKyiB,KAAOA,EAEZ,IAAI4M,EAAU,SAACz0B,GAAM,OAAAwF,EAAKkvB,kBAAkB10B,IAE5CoF,KAAKiuB,IAAM,IAAIe,EAAAxM,IAAIC,EAAM4M,EAASA,EAASA,GAC3CrvB,KAAK0e,IAAI1e,KAAKiuB,KAEdjuB,KAAKG,OAAS,IAAI2uB,EAAAd,OAAOhuB,KAAKiuB,IAAKxL,EAAK5H,MAAM1e,MAAO,SAACjB,GAAM,OAAAkF,EAAK6tB,IAAIhL,SAAS/nB,KAC9E8E,KAAK0e,IAAI1e,KAAKG,QAEdH,KAAKuvB,OAAS,IAAIR,EAAA/H,OAClBhnB,KAAK0e,IAAI1e,KAAKuvB,QAEdvvB,KAAKwvB,sBACLxvB,KAAKyvB,OAAOne,KAAK,MACjBtR,KAAKyvB,OAAOne,KAAK,EAAG,MAGjB2d,EAAAv6B,UAAAg7B,WAAP,eAAAtvB,EAAAJ,KACIA,KAAKyiB,KAAKwE,MAAM0I,SAASC,QAAQruB,GAAG,OAAQ,SAAC3G,GACzC,GAAIwF,EAAK8uB,SACL9uB,EAAKqvB,OAAO1vB,IAAMK,EAAKqvB,OAAO1vB,IAAI2e,IAC9Bte,EAAKyvB,WAAW/oB,IAAIlM,EAAEmF,UAEvB,CACHK,EAAKmvB,OAAOxvB,IAAMnF,EAAEmF,IAEpB,IAAI+vB,EAAoB1vB,EAAKD,OAAOisB,sBACpC,GAAI0D,aAA6BxyB,EAAAC,SAAU,CAEvC,IAAIwyB,EAAcD,EAAkBzsB,gBAAgBjD,EAAKmvB,OAAOxvB,KAChEK,EAAKmvB,OAAOxvB,IAAMgwB,EAElBD,EAAkBvsB,QAAQnD,EAAKmvB,OAAOxvB,UAC/B+vB,aAA6B/H,EAAAnQ,QACpCkY,EAAkBrV,KAAKra,EAAKD,OAAQC,EAAKmvB,OAAOxvB,QAK5DC,KAAKyiB,KAAKwE,MAAM0I,SAASC,QAAQruB,GAAG,KAAM,WAClCnB,EAAK8uB,WAAY9uB,EAAK8uB,eAG9BlvB,KAAKyiB,KAAKwE,MAAM0I,SAASC,QAAQruB,GAAG,OAAQ,SAAC3G,GACzC,GAAIA,EAAEo1B,QAAUz3B,EAAA03B,MAAMC,cAAchgB,KAAM,CACtC,IAAM4f,EAAoB1vB,EAAKD,OAAOisB,sBACtC,GAAI0D,EACA,GAAIA,aAA6BxyB,EAAAC,SAAU,CACvC,IAAI4yB,EAA4BL,EAC5BM,GAAkBD,EAA0BhrB,cAChD,GAAIgrB,GAA6BC,GAAkBD,EAA0B1sB,YAAY7I,EAAEmF,KAAM,CAG7F,GAFAK,EAAKD,OAAOmsB,cAAc6D,GAEtB/vB,EAAKgvB,gBAAiB,CACtB,IAAIj2B,EAAKiH,EAAKgvB,gBACdtnB,QAAQC,KAAM5O,GAAEA,EAAEoM,KAAM4qB,IACxBzwB,EAAArC,IAAIlE,EAAGwO,SAAUwoB,EAA0BrtB,gBAAgBJ,QAAQ,SAAC4B,OAACsD,EAAAtD,EAAA,GAASvB,EAAAuB,EAAA,GAC1EwD,QAAQC,IAAI,qBAAuBH,QAAOA,EAAE7E,MAAKA,IACjD,IAAI/M,OAAS4R,GAAW+F,aACpBhL,EAAS,IAAIolB,EAAAnQ,OAAO5hB,EAAG+M,EAAMC,UACjCmtB,EAA0BjpB,UAAUvE,KAExCvC,EAAKgvB,gBAAkB,KAG3BhvB,EAAK6tB,IAAIhM,WAAW7hB,EAAK+uB,gBACzB/uB,EAAKD,OAAOiF,OAAOgnB,sBAAwB,KAC3ChsB,EAAKovB,oBAAoB50B,EAAEmF,KAC3BK,EAAK6tB,IAAIxK,cAAcrjB,EAAKD,aAE7B,CACH,IAAIkwB,EAA0BP,EAC1BO,EAAwB5V,KAAKra,EAAKD,UACvBkwB,EAAwB9pB,SAC9BW,UAAUmpB,GACfjwB,EAAKD,OAAOiF,OAAOgnB,sBAAwB,KAC3ChsB,EAAK6tB,IAAIhM,WAAW7hB,EAAK+uB,gBACzB/uB,EAAK6tB,IAAIxK,cAAcrjB,EAAKD,eAIjCvF,EAAEo1B,SAAWz3B,EAAA03B,MAAMC,cAAcI,SACxClwB,EAAK8uB,YACL9uB,EAAKyvB,WAAaj1B,EAAEmF,OAI5BC,KAAKyiB,KAAKwE,MAAM0I,SAASC,QAAQruB,GAAG,QAAS,SAAC3G,GAC1C,IAAI21B,EAAInwB,EAAKqvB,OAAOe,UAGhB51B,EAAE61B,OAAS,EACXrwB,EAAKqvB,OAAOne,KAAKlY,KAAKC,IAAIk3B,EAHnB,IACW,IAGX31B,EAAE61B,OAAS,GAClBrwB,EAAKqvB,OAAOne,KAAKlY,KAAKG,IAAIg3B,EALnB,IACD,QAQdvwB,KAAKyiB,KAAKwE,MAAMyJ,SAASnvB,GAAG,QAAS,SAAC3G,GAC9BA,EAAE0gB,MAAQ/iB,EAAA03B,MAAMU,KAAKC,EACjBxwB,EAAKiF,WAAajF,EAAKiF,UAAU,KACjCjF,EAAKqvB,OAAOoB,KAAKzwB,EAAKiF,UAAU,GAAGtF,IAAK,KACxCK,EAAKqvB,OAAOne,KAAK,GAAK,MAEnB1W,EAAE0gB,MAAQ/iB,EAAA03B,MAAMU,KAAKG,MAC5B1wB,EAAKD,OAAOiF,OAAOgnB,sBAAwB,KAC3ChsB,EAAKgvB,gBAAkB,SAK5BH,EAAAv6B,UAAAq8B,aAAP,WACI/wB,KAAKyiB,KAAKwE,MAAM0I,SAASC,QAAQoB,IAAI,QACrChxB,KAAKyiB,KAAKwE,MAAM0I,SAASC,QAAQoB,IAAI,QACrChxB,KAAKyiB,KAAKwE,MAAM0I,SAASC,QAAQoB,IAAI,MACrChxB,KAAKyiB,KAAKwE,MAAM0I,SAASC,QAAQoB,IAAI,UAGzCv8B,OAAA6B,eAAI24B,EAAAv6B,UAAA,aAAA+B,IAAJ,WAAkB,OAAOuJ,KAAKG,OAAOiF,OAAOC,2CAGpC4pB,EAAAv6B,UAAAu8B,+BAAR,WACI,IAAIC,EAAOjC,EAAUkC,+BAA+Br3B,IAAI,SAAAs3B,GAAO,WAAIA,IAE/DC,EAAuBrxB,KAAKqF,UAAUvL,IAAI,SAAAyM,GAAY,OAAAA,EAASrG,UAAU/J,OACzEm7B,EAAsB5xB,EAAAjF,WACtBuF,KAAKqF,UAAUvL,IAAI,SAAAyM,GAAY,OAAAA,EAASnE,eAAiBmE,EAASnE,cAAcjM,QAEhFo7B,EAAkBF,EAAoB32B,OAAK42B,GAC/C,OAAOJ,EAAK5rB,KAAK,SAAA8rB,GAAO,OAACG,EAAYvc,SAASoc,EAAIj7B,SAG5C84B,EAAAv6B,UAAA86B,oBAAV,SAA8BzvB,kBAAA,IAAkBxH,EAAA0I,OAAO,EAAE,IACrD,IAAIf,EAAY,KACZsxB,EAAcxxB,KAAKixB,iCACnBO,IAAetxB,EAAYsxB,GAC3BtxB,GACAF,KAAKsvB,kBAAkBpvB,EAAWH,IAI1CkvB,EAAAv6B,UAAA46B,kBAAA,SAAkBmC,EAAyD1xB,kBAAA,IAAkBxH,EAAA0I,OAAO,EAAG,IACnGjB,KAAKiuB,IAAIhL,SAASwO,GAElB,IAAIC,EAAa,KACjB,GAAID,aAA8B3e,EAAA1B,UAAW,CACzC,IAAIlR,EAAYuxB,EAChBzxB,KAAKiuB,IAAIhM,WAAW,SAAS/hB,EAAU/J,KAAI,KAAK+J,EAAUmC,YAAW,KACrEqvB,EAAa1xB,KAAK2xB,cAAczxB,EAAWH,GAC3CC,KAAKyvB,OAAOne,KAAKpR,EAAUoR,KAAM,KACjCtR,KAAKyvB,OAAO1vB,IAAM2xB,EAAW3xB,SAC1B,GAAI0xB,aAA8BlhB,EAAArD,QAAS,CAC9C,IAAItF,EAAU6pB,EACdzxB,KAAKiuB,IAAIhM,WAAW,WAAWra,EAAQzR,KAAI,KAAKyR,EAAQvF,YAAW,KACnEqvB,EAAa1xB,KAAK4xB,YAAYhqB,EAAS7H,QAEpC,GAAI0xB,aAA8B7xB,EAAAmT,cAAe,CACpD,IAAI5Z,EAAoBs4B,EACxBzxB,KAAKiuB,IAAIhM,WAAW,SAAS9oB,EAAGhD,KAAI,KAAKgD,EAAGkJ,YAAW,KACvDqvB,EAAa1xB,KAAK6xB,cAAc14B,EAAI4G,GACpCC,KAAKovB,gBAAkBj2B,EAI3B6G,KAAKG,OAAOiF,OAAOgnB,sBAAwB,KACvCsF,IACA1xB,KAAKG,OAAOiF,OAAOgnB,sBAAwBsF,IAKzCzC,EAAAv6B,UAAAk9B,YAAV,SAAsBhqB,EAAkB7H,GACpC,IAAI4C,EAAS,IAAIolB,EAAAnQ,OAAOhQ,EAAS7H,GAKjC,OAJI4C,EAAO8X,KAAKza,KAAKG,UACjBH,KAAKyvB,OAAO1vB,IAAM4C,EAAO5C,KAGtB4C,GAGDssB,EAAAv6B,UAAAi9B,cAAV,SAAwBzxB,EAAsBH,GAC1C,IAAI+xB,EAAkB9xB,KAAK+xB,8BAA8B7xB,EAAWH,GAEpE,OADA+xB,EAAgBvuB,QAAQuuB,EAAgBzuB,gBAAgBtD,IACjD+xB,GAGH7C,EAAAv6B,UAAAq9B,8BAAR,SAAsC7xB,EAAsBH,GAGxD,OADe,MADJzC,EAAAkC,eAAeU,EAAUmR,OACZtR,EAAKG,EAAWF,KAAKG,SAIvC8uB,EAAAv6B,UAAAm9B,cAAV,SAAwB14B,EAAmB4G,GACvC,IAAIiyB,EAA2B74B,EAAG+G,WAAa,IAAI/G,EAAG+G,UACtD,IAAK8xB,EAAc,CACfA,EAAe,IAAIlf,EAAAd,eACnB,IAAIrK,EAAWxO,EAAGwO,SAAS7N,IAAI,SAAA9D,GAAK,WAAIA,IAEpC2R,EAASwR,KAAK,SAAAnjB,GAAK,OAAAA,EAAEkC,OAAS2H,EAAArI,WAAWM,WACzCk6B,EAAe,IAAIlf,EAAAT,iBAGnB1K,EAASwR,KAAK,SAAAnjB,GAAK,OAAAA,EAAEkC,OAAS2H,EAAArI,WAAWO,UACzCi6B,EAAe,IAAIlf,EAAAR,WAGnB3K,EAASwR,KAAK,SAAAnjB,GAAK,OAAAA,EAAEkC,OAAS2H,EAAArI,WAAWQ,SACzCg6B,EAAe,IAAIlf,EAAAP,UAGnB5K,EAASwR,KAAK,SAAAnjB,GAAK,OAAAA,EAAEyX,YACrBukB,EAAe,IAAIlf,EAAAX,WAI3BrK,QAAQC,IAAI,kBAAoB5O,GAAEA,EAAE+G,UAAW8xB,IAC/C,IAAIzrB,EAAWvG,KAAK+xB,8BAA8BC,EAAcjyB,GAEhE,OADAwG,EAAShD,QAAQgD,EAASlD,gBAAgBkD,EAASxG,MAC5CwG,GAjPJ0oB,EAAAkC,gCACHvxB,EAAAoT,eACAF,EAAAlB,YACAhS,EAAAwT,eACAN,EAAArB,WACAqB,EAAAvB,SACA3R,EAAAuT,QACAvT,EAAAqT,eACArT,EAAA0T,YACA1T,EAAA4T,QACA5T,EAAA+T,QACA/T,EAAAuU,cAwOR8a,EAjQA,CAA+B12B,EAAA05B,OAAlBp8B,EAAAo5B,2FCfb,IAAA12B,EAAA9C,EAAA,GAEAiK,EAAAjK,EAAA,GAIAy8B,EAAA,oBAAAA,IAGElyB,KAAA7D,MAAeuD,EAAAlG,OAAO04B,EAAMC,QACxBnwB,OAAO,IACPmJ,WAAW,IACfnL,KAAAkb,SAAkBxb,EAAAlG,QAASjB,EAAA+C,MAAM82B,KAAM75B,EAAA+C,MAAM+2B,aACvC5sB,QAAQ,KACR0F,WAAW,KAgBnB,OAbW+mB,EAAAI,WAAP,WAWI,OAAO5yB,EAAAlG,QATH,UACA,UACA,UACA,SACA,YACA,QACA,QACA,gBAnBH04B,EAAAC,QAAU55B,EAAA+C,MAAM0P,QAuBzBknB,EAxBA,GAAar8B,EAAAq8B,yBCNbp8B,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA2D,EAAAwQ,EAAAxU,GAAA,aAAAnC,OAAA6B,eAAA8U,EAAA,cAAAzU,OAAA,ICAxC,IAAAowB,EAAAtxB,EAAA,GACM88B,EAAQ98B,EAAQ,IAElB8lB,GACAiX,MAAO,IAAIzL,EAAG0L,QAAQF,IAIjB18B,EAAA0lB,2FCRT,IAAAuO,EAAAr0B,EAAA,IACAi9B,EAAAj9B,EAAA,IACAk9B,EAAAl9B,EAAA,IAEMm9B,EAAW,IAAIF,EAAAR,MACfzP,EAAO,IAAIqH,EAAAlP,KAAKgY,GAEhBC,EAAY,IAAIF,EAAA1D,UAAUxM,GAChCA,EAAK/D,IAAI,YAAamU,GAEtBpQ,EAAKtH,QAAQmM,KAAK,WAChB7E,EAAKqQ,UAAU","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([68,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.fifth; break;\r\n        case DeviceSize.Large: sz = major.eighth + major.third; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport const deleteByValueOnce = (arr, elem) => {\r\n  let index = arr.indexOf(elem);\r\n  if (index !== -1) arr.splice(index, 1);\r\n}\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true,\r\n  dashed: boolean = false\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  // if (edgeWidth > 0) {\r\n  //   let edge = Color.White;\r\n  //   ctx.fillStyle = edge.toRGBA();\r\n  //   ctx.fillRect(x, y, width, height)\r\n  // }\r\n\r\n  if (filled) {\r\n    let main = color;\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x, //+ edgeWidth,\r\n      y, //+ edgeWidth,\r\n      width, // - edgeWidth * 2,\r\n      height // - edgeWidth * 2\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White;\r\n    ctx.strokeStyle = edge.toRGBA();\r\n    ctx.lineWidth=edgeWidth\r\n    if (dashed) { ctx.setLineDash([5, 10]) } //ctx.lineDashOffset = 5 }\r\n    else { ctx.setLineDash([]) }\r\n    // ctx.strokeStyle = Stroke.So\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}\r\n\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function shuffle(arr) {\r\n   return arr.sort(() => Math.random() > 0.5 ? 1 : -1) \r\n}\r\n\r\nexport const zip = (a, b) => a.map((e,i) => [e, b[i]])","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\nimport { SmallDomeThreeView } from './SmallDomeThreeView';\r\nimport { MidDomeView } from './MidDomeView';\r\nimport { BigDomeView } from './BigDomeView';\r\nimport { SmallRoomThreeView } from './SmallRoomThreeView';\r\nimport { MediumRoomView } from './MediumRoomView';\r\nimport { LargeRoomView } from './LargeRoomView';\r\nimport { HugeRoomView } from './HugeRoomView';\r\nimport { MediumRoomThreeView } from './MediumRoomThreeView';\r\nimport { MediumSurfaceRoomView } from './MediumSurfaceRoomView';\r\n\r\n\r\nconst structureViews: { [key: string]: typeof Building } = {\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n    MediumSurfaceRoomView,\r\n}\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n\r\n    MediumSurfaceRoomView,\r\n\r\n\r\n    structureViews\r\n\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, drawRect, deleteByValue } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { World } from \"../../models/World\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0 //.1\r\n\r\n    nameLabel: Label\r\n    levelLabel: Label\r\n\r\n    built: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    level: number = 1\r\n\r\n    spaceFunction: SpaceFunction\r\n\r\n    private devices: Device[] = []\r\n    givenName: string\r\n\r\n    constructor(pos: Vector, public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            this.planet.currentlyViewing = this\r\n            // console.log(\"HOVER ON\", { building: this })\r\n        })\r\n\r\n        // this.on('pointerdown', () => {\r\n        //     console.log(\"CLICKED BUILDING\", { building: this })\r\n        //     this.levelUp();\r\n        // })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        // this.nameLabel.fontSize = 11\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.levelLabel = new Label(`Lvl. ${this.level}`, 0, 0, 'Helvetica')\r\n        this.levelLabel.fontSize = 6\r\n        this.levelLabel.color = Color.White.darken(0.2)\r\n\r\n        // this.givenName = World.bestowName() \r\n    }\r\n\r\n    levelUp() {\r\n        this.level += 1\r\n        this.levelLabel.text = `Lvl. ${this.level}`\r\n    }\r\n\r\n    get name() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.name // `${this.givenName} ${this.spaceFunction.name}`;\r\n        } else {\r\n            return this.structure.name //`${this.givenName} ${this.structure.name}`;\r\n        }\r\n    }\r\n\r\n    get description() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.description\r\n        } else {\r\n            return this.structure.description\r\n        }\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        this.devices.forEach(device => device.draw(ctx, delta))\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n            // this.levelLabel.text = `Lvl. ${this.level}`\r\n            // this.levelLabel.pos = this.getCenter()\r\n            // this.levelLabel.pos.y += 10\r\n            // this.levelLabel.pos.x -= ctx.measureText(this.structure.name).width / 4\r\n            // this.levelLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let debug = false;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = true\r\n        if (showDevicePlaces && this.devicePlaces().length > 0) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    0.1,\r\n                    Color.White,\r\n                    false,\r\n                    true\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n        let tryProduce = this.built;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.produce(this.step));\r\n        }\r\n        this.step += 1\r\n    }\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public populate(pos: Vector) {\r\n        this.planet.populate(pos) //this.pos)\r\n    }\r\n\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        // device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        this.updateFunction()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices\r\n    }\r\n\r\n    private updateFunction() {\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let matched = true;\r\n            let unseenDevices = this.devices.slice()\r\n\r\n            let sf = new spaceFn()\r\n            sf.machines.forEach(machine => {\r\n                let matchingDevice = unseenDevices.find(d => d.machine instanceof machine)\r\n                if (!matchingDevice) { matched = false; }\r\n                unseenDevices = deleteByValue(unseenDevices, matchingDevice)\r\n                // return true\r\n            })\r\n            return matched;\r\n        })\r\n        if (fn) {\r\n            console.log(\"Determined building function\", { fn })\r\n            let sf = new fn()\r\n            this.spaceFunction = sf\r\n            this.nameLabel.text = sf.name //label\r\n        } else {\r\n            console.warn(\"Could not identify function!\")\r\n        }\r\n    }\r\n\r\n    // get function() { }\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport const allValues = [\r\n    PureValue.Power,\r\n    PureValue.Oxygen,\r\n    PureValue.Water,\r\n    PureValue.Shelter,\r\n    PureValue.Hope,\r\n    PureValue.Wisdom,\r\n    PureValue.Wealth,\r\n    PureValue.Beauty,\r\n    PureValue.Wonder\r\n]\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return Math.floor(market[value].supply - market[value].demand)\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply,\r\n            demand,\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Biomass = 'Biomass',\r\n    Ore = 'Ore',\r\n    Idea = 'Idea',\r\n\r\n    // derived\r\n    Meal = 'Meal',\r\n    Data = 'Data',\r\n    Mineral = 'Mineral',\r\n    Bioplasma = 'Bioplasma',\r\n\r\n    // higher-order\r\n    Alloy = \"Alloy\",\r\n    Algorithm = \"Algorithm\",\r\n\r\n    // superb\r\n    Argent = \"Argent\",\r\n    Aurum = \"Aurum\",\r\n\r\n    // hyperbolic\r\n    Omnium = \"Omnium\",\r\n}\r\n\r\nlet cStep = 0.3\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Biomass: Color.Green,\r\n    Data: Color.Blue.lighten(cStep),\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(cStep),\r\n    Idea: Color.Blue.lighten(cStep*2), //.desaturate(cStep),\r\n    Ore: Color.Red.darken(cStep),\r\n\r\n    Bioplasma: Color.Viridian,\r\n\r\n    Alloy: Color.DarkGray.darken(cStep), //(cStep),\r\n    Algorithm: Color.Blue.darken(cStep), //.desaturate(cStep),\r\n\r\n    Argent: Color.Gray.lighten(cStep),\r\n    Aurum: Color.Orange.lighten(cStep),\r\n\r\n    Omnium: Color.White,\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    return baseColor.desaturate(0.1) //.lighten(0.1) //.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Color, FontStyle, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { MechanicalOperation, mechanicalOperations } from \"./MechanicalOperation\";\r\nimport { shuffle } from \"../Util\";\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\nconst plant = require('../images/houseplant-plain.svg')\r\nconst workstation = require('../images/workstation-plain.svg')\r\n\r\nconst console = require('../images/console-plain.svg')\r\nconst consolePurple = require('../images/console-purple-plain.svg')\r\nconst consoleGreen = require('../images/console-green-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n    plant,\r\n    workstation,\r\n\r\n    console,\r\n    consolePurple,\r\n    consoleGreen,\r\n}\r\n\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nlet { store, generate, recipe, spawn } = mechanicalOperations\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n    size: DeviceSize = DeviceSize.Small\r\n    operation: MechanicalOperation = { type: 'noop' }\r\n    image = images.vat\r\n    prereqs: (typeof Machine)[] = []\r\n    economy: Economy = emptyMarket()\r\n    forDome: boolean = false\r\n    hide: boolean = false\r\n\r\n    capacity: boolean\r\n\r\n\r\n    concretize(): Machine { return this; } //return shuffle(allMachines)[0] }\r\n    // concretions: Machine[] = []\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command Console'\r\n    description = 'gather resources...'\r\n    operation = store(\r\n        [ResourceBlock.Meal, ResourceBlock.Ore],\r\n        6\r\n    )\r\n    image = images.consoleGreen\r\n    size = DeviceSize.Medium\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 1, demand: 0 },\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class MissionLog extends Machine {\r\n    name = 'Mission Log'\r\n    description = 'gather data'\r\n    operation = store(\r\n        [ResourceBlock.Data],\r\n        8\r\n    )\r\n    image = images.consolePurple\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n//export class Energon extends Machine {\r\n//    name = 'Energon'\r\n//    description = 'food paste'\r\n//}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 3, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 5, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H20 Condenser'\r\n    description = 'have a drink'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 4, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n/// small subsurface\r\nexport class StudyMachine extends Machine {\r\n    operation = recipe(\r\n        [ ResourceBlock.Idea, ResourceBlock.Idea, ResourceBlock.Idea ],\r\n        ResourceBlock.Data\r\n    )\r\n    color = Blue\r\n    concretize(): Machine { return new (shuffle([Workstation, Desk])[0])() }\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    description = 'get to work'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    description = 'hackety hack'\r\n    prereqs = [ Bookshelf ]\r\n    image = images.workstation\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n    concretize() { return this }\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    operation = generate(ResourceBlock.Idea)\r\n    image = images.bookshelf\r\n    prereqs = [ OxygenExtractor, Desk ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    operation = store([ResourceBlock.Meal], 6)\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    operation = recipe(\r\n        [ResourceBlock.Biomass, ResourceBlock.Biomass],\r\n        ResourceBlock.Meal\r\n    )\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    description = 'sweet dreams'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    description = 'so nice'\r\n    prereqs = [ Bed ]\r\n    // produces = ResourceBlock.Food\r\n    operation = generate(ResourceBlock.Biomass, 1)\r\n    color = Green\r\n    image = images.plant\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Water: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\nexport class PersonnelRegistry extends Machine {\r\n    name = 'Personnel Registry'\r\n    description = 'track everybody'\r\n    prereqs = [ CloningVat ]\r\n    operation = store([ResourceBlock.Data], 4)\r\n    color = Yellow\r\n    image = images.console\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Wisdom: { supply: 0.1, demand: 0 },\r\n    }\r\n}\r\n\r\n// medium\r\n\r\nexport class MetalStorage extends Machine {\r\n    name = 'Metal Storage'\r\n    description = 'contain minerals and alloys?'\r\n    operation = store([ResourceBlock.Mineral, ResourceBlock.Alloy], 8)\r\n    prereqs = [Bookshelf]\r\n    color = Red\r\n    size = DeviceSize.Medium\r\n}\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    operation = store([ResourceBlock.Data, ResourceBlock.Algorithm], 10)\r\n    image = images.server\r\n    prereqs = [Bookshelf]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   operation = generate(ResourceBlock.Biomass)\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Oxygen: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   description = 'home on the plains'\r\n   operation = recipe(\r\n       [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n       ResourceBlock.Meal\r\n   )\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    description = 'arbor around the clock'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    description = 'where there is a will'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    description = 'plant lab'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'we all grow'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = spawn()\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class DissolutionVat extends Machine {\r\n    name = 'Dissolution Vat'\r\n    description = 'back to basics'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = recipe(\r\n        [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n        ResourceBlock.Bioplasma\r\n    )\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [PlasmaBank]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class PlasmaBank extends Machine {\r\n    name = 'Bioplasm Bank'\r\n    description = 'hold on'\r\n    operation = store([ ResourceBlock.Bioplasma ])\r\n    prereqs = [AlgaeVat]\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    description = 'you made that'\r\n    operation = recipe(\r\n        [ResourceBlock.Mineral, ResourceBlock.Mineral],\r\n         ResourceBlock.Alloy\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n}\r\n\r\nexport class OreRefinery extends Machine {\r\n    name = 'Refinery'\r\n    description = 'wheat from the chaff'\r\n    operation = recipe(\r\n        [ResourceBlock.Ore, ResourceBlock.Ore, ResourceBlock.Ore],\r\n         ResourceBlock.Mineral\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation, Fabricator]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class ThinkingPool extends Machine {\r\n    name = 'Thinking Pool'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = store([ResourceBlock.Aurum], 8)\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class SilverForest extends Machine {\r\n    name = 'Silver Forest'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Megafabricator ]\r\n    color = Color.fromHex('c0c0c0')\r\n    operation = store([ResourceBlock.Argent], 12)\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Beauty: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n    forDome = true\r\n}\r\n\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    description = 'ore away'\r\n    operation = generate(ResourceBlock.Ore)\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    operation = recipe(\r\n        [ResourceBlock.Alloy, ResourceBlock.Algorithm],\r\n        ResourceBlock.Argent\r\n    )\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class MolecularEngine extends Machine {\r\n    name = 'Molecular Engine'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Megafabricator ]\r\n    color = Violet\r\n    operation = recipe(\r\n        [ResourceBlock.Bioplasma, ResourceBlock.Algorithm],\r\n        ResourceBlock.Aurum\r\n    )\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n        Water: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Mainframe extends Machine {\r\n    name = 'Mainframe'\r\n    size = DeviceSize.Large\r\n    color = Blue\r\n    prereqs = [ResearchServer]\r\n    operation = recipe(\r\n        [ ResourceBlock.Data, ResourceBlock.Data ],\r\n        ResourceBlock.Algorithm\r\n    )\r\n    image = images.server\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 6 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    // operation = generate()\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n        Oxygen: { supply: 12, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n\r\n    OreRefinery,\r\n    PlasmaBank,\r\n    DissolutionVat,\r\n    MetalStorage,\r\n    Mainframe,\r\n\r\n    PersonnelRegistry,\r\n    MolecularEngine,\r\n    ThinkingPool,\r\n    SilverForest,\r\n\r\n]","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    color: Color = Color.Gray\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n\r\n    hide: boolean = false\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MediumSurfaceRoom ],\r\n        [Orientation.Right]: [  Dome, MediumSurfaceRoom ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    description: string = 'Biome sweet biome';\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.sixth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n\r\n    prereqs = [\r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n    // two small slots\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 2 * major.eighth\r\n    height = 2 * major.third\r\n    // two medium slots...\r\n    \r\n    machines = midBelow\r\n}\r\n\r\nexport class MediumRoomThree extends CommonArea {\r\n    name = 'Mid Room (3)'\r\n    prereqs = [ MediumRoom ]\r\n    view = 'MediumRoomThreeView'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.third\r\n\r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 4 * major.eighth\r\n    height = 3 * major.fifth\r\n\r\n    // two big slots?\r\n    machines = largeBelow\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class MediumSurfaceRoom extends Dome {\r\n    name = 'Mid Surf Bldg'\r\n    description = 'home away from home';\r\n\r\n    view: string = 'MediumSurfaceRoomView';\r\n\r\n    width: number = 6 * major.eighth\r\n    height: number = 1 * major.sixth\r\n\r\n    zoom = 0.1\r\n\r\n    prereqs = [ SmallDome ]\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = midBelow\r\n\r\n    hide = true // need another one which cares about connecting to roads\r\n}\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = 2 * major.seventh\r\n    height = major.seventh\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 3 * major.fifth\r\n    height = 2 * major.fifth\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 3 * major.seventh\r\n    height = 2 * major.seventh\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n\r\n}\r\n\r\n//////\r\n\r\n// export class MissionControl extends Structure {\r\n//     name: string = 'Mission Control';\r\n//     description: string = 'Keeping everything on track';\r\n//     view: string = 'MissionControlView';\r\n//     width: number = 6 * major.eighth\r\n//     height: number = 1 * major.sixth\r\n//     zoom = 0.1\r\n//     connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n//         [Orientation.Left]: [ SurfaceRoad ],\r\n//         [Orientation.Right]: [ SurfaceRoad ],\r\n//         [Orientation.Up]: [ MainTunnel ],\r\n//         [Orientation.Down]: [ MainTunnel ],\r\n//     }\r\n\r\n//     machines = [ CommandCenter ]\r\n// }\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n        MediumSurfaceRoom,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        MediumRoomThree,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine, Mainframe, CommandCenter, MissionLog } from './Machine';\r\nimport { Color } from 'excalibur';\r\nimport { Structure, MediumSurfaceRoom } from './Structure';\r\n\r\nexport class SpaceFunction {\r\n     name: string = '(generic)'\r\n     description: string = '(generic description)'\r\n     machines: (typeof Machine)[] = []\r\n     color: Color = Color.Gray\r\n\r\n     prereqs: (typeof SpaceFunction)[] =  [] \r\n\r\n     structure: typeof Structure = null\r\n     hide: boolean = false\r\n}\r\n\r\nexport class MissionControl extends SpaceFunction {\r\n     hide = true\r\n     name = 'Mission Control'\r\n     description = 'keeping everything on track'\r\n     structure = MediumSurfaceRoom\r\n     prereqs = [] //ComputerCore, Factory, Farm ]\r\n     machines = [ CommandCenter, MissionLog ]\r\n}\r\n\r\n\r\nexport class LivingQuarters extends SpaceFunction {\r\n     name = 'Living Quarters'\r\n     description = 'good night'\r\n     machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n     name = 'Barracks'\r\n     description = 'sleep tight'\r\n     machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nexport class Kitchen extends SpaceFunction {\r\n     name = 'Kitchen'\r\n     description = 'stay together'\r\n     machines = [ Stove, Fridge ]\r\n}\r\n\r\nexport class LifeSupportPod extends SpaceFunction {\r\n     name = 'Life Support'\r\n     description = 'keep it going'\r\n     machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n     name = 'Retreat'\r\n     description = 'take it easy'\r\n     machines = [ Cabin, Cabin ]\r\n}\r\n\r\nexport class CloneMatrix extends SpaceFunction {\r\n     name = 'Clone Matrix'\r\n     description = 'clone home'\r\n     machines = [ CloningVat, CloningVat ]\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n     name = 'Reading Room'\r\n     description = 'butterflies in the sky'\r\n     machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nexport class Library extends SpaceFunction {\r\n     name = 'Library'\r\n     description = 'take a look'\r\n     machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n}\r\n\r\nclass Study extends SpaceFunction {\r\n     name = 'Study'\r\n     description = 'plan it out'\r\n     machines = [ StudyMachine, Bookshelf ]\r\n}\r\n\r\nclass Lab extends SpaceFunction {\r\n     name = 'Lab'\r\n     description = 'make it happen'\r\n     machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nexport class Archive extends SpaceFunction {\r\n     name = 'Archive'\r\n     description = 'write it down'\r\n     machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n     name = 'Arboretum'\r\n     description = 'walk it out'\r\n     machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n     name = 'Algae Farm'\r\n     description = 'make do'\r\n     machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nclass SolarArray extends SpaceFunction {\r\n     name = 'Solar Array'\r\n     description = 'warm up'\r\n     machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nclass Workshop extends SpaceFunction {\r\n     name = 'Workshop'\r\n     description = 'take form'\r\n     machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\nclass Nursery extends SpaceFunction {\r\n     name = 'Nursery'\r\n     description = 'quiet please'\r\n     machines = [ Houseplant, Houseplant, Houseplant ]\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n     name = 'Farm'\r\n     description = 'food for the masses'\r\n     machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n     name = 'Factory'\r\n     description = 'production lines'\r\n     machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\n\r\nexport class ComputerCore extends SpaceFunction {\r\n     name = 'Computer Core'\r\n     description = 'let us calculate'\r\n     machines = [ Mainframe, Mainframe ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    Lab,\r\n\r\n    ComputerCore,\r\n\r\n    MissionControl,\r\n]","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\nimport { Recipe, ResourceStorage } from \"../models/MechanicalOperation\";\r\nimport { range, deleteByValueOnce, drawRect } from \"../Util\";\r\n\r\ninterface RetrieveResource {\r\n    type: 'retrieve'\r\n    resource: ResourceBlock\r\n    // count: number\r\n}\r\n\r\ninterface WorkRecipe {\r\n    type: 'work'\r\n    recipe: Recipe\r\n}\r\n\r\ninterface StoreResource {\r\n    type: 'store'\r\n    resource: ResourceBlock\r\n}\r\n\r\nexport function retrieveResource(res: ResourceBlock): RetrieveResource {\r\n    return {\r\n        type: 'retrieve',\r\n        resource: res,\r\n        // count: 1\r\n    }\r\n}\r\n\r\nexport type InteractionRequest = StoreResource | RetrieveResource | WorkRecipe // | ...\r\n\r\nexport class Device extends Actor {\r\n    // could also use for storage?\r\n    product: ResourceBlock[] = []\r\n    nameLabel: Label\r\n    image: any\r\n    building: Building\r\n    inUse: boolean = false\r\n\r\n    imageLoaded: boolean = false\r\n\r\n    constructor(\r\n        public machine: Machine,\r\n        initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = () => { this.imageLoaded = true }\r\n        this.image.src = machine.image\r\n    }\r\n\r\n    get imageX() { return this.pos.x - this.getWidth() / 2 }\r\n    get imageY() { return this.pos.y - this.getHeight() / 2 - 10 }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (this.imageLoaded) {\r\n            // drawRect(\r\n            //     ctx,\r\n            //     { x: this.imageX, y: this.imageY, width: this.getWidth(), height: this.getHeight ()},\r\n            //     2,\r\n            //     Color.Green\r\n            // )\r\n\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.imageX,\r\n                this.imageY,\r\n\r\n                // this.pos.y - this.getHeight() / 2 - 10,\r\n                this.getWidth(),\r\n                this.getHeight()\r\n            )\r\n        }\r\n\r\n        let iv = new Vector(this.imageX, this.imageY) //this.pos //getCenter()\r\n        // iv.y += this.getHeight() / 2\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = iv // this.getCenter()\r\n            // this.nameLabel.pos.x -= 10\r\n            // this.nameLabel.pos.y += 8 + this.getHeight()/2\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let { x: bx, y: by } = iv //bx = this.x - this.getWidth()/2 + 5, by = this.y - 23\r\n        let blockSize = 5\r\n        let yOff = this.nameLabel.fontSize\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).toRGBA()\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize + yOff, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get operation() { return this.machine.operation }\r\n\r\n    async interact(citizen: Citizen, request: InteractionRequest): Promise<boolean> {\r\n        if (this.inUse) {\r\n            return false\r\n        }\r\n\r\n        let worked = false\r\n        let op = this.operation\r\n        if (op.type === 'recipe' && request.type === 'work') {\r\n            let recipe: Recipe = op\r\n            // do we have all the things?\r\n            if (citizen.carrying.some(it => recipe.consumes.includes(it))) {\r\n                this.inUse = true\r\n                if (citizen.isCarryingUnique(recipe.consumes)) {\r\n                    recipe.consumes.forEach(consumed => citizen.drop(consumed))\r\n                    await citizen.progressBar(recipe.workTime)\r\n                    citizen.carry(recipe.produces)\r\n\r\n                    worked = true\r\n                } else {\r\n                    console.warn(\"not carrying all requirements?\", { requires: recipe.consumes, has: citizen.carrying })\r\n                }\r\n                this.inUse = false\r\n            }\r\n        } else if (op.type === 'store') {\r\n            // accept it! (whatever you have that matches...?)\r\n            let store: ResourceStorage = op\r\n            if (request && request.type === 'retrieve') { // assume dispense request for now?\r\n                this.inUse = true\r\n                worked = this.dispense(citizen, request)\r\n                if (worked) {\r\n                    await citizen.progressBar(500)\r\n                }\r\n                this.inUse = false\r\n            } else if (request && request.type === 'store' &&\r\n                citizen.carrying.some(it => store.stores.includes(it))) { // maybe trying to store?\r\n                if (this.product.length < store.capacity) {\r\n                    let res = null\r\n                    if (store.stores.some(stored => { res = citizen.drop(stored); return res })) {\r\n                        if (res) {\r\n                            this.product.push(res)\r\n                            this.building.redeem(res)\r\n                            worked = true\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.warn(\"no capacity in this store!!\")\r\n                    worked = false\r\n                }\r\n            }\r\n        } else if (op.type === 'generator') {\r\n            this.inUse = true\r\n            worked = this.dispense(citizen, request)\r\n            if (worked) {\r\n                await citizen.progressBar(500)\r\n            }\r\n            this.inUse = false\r\n        }\r\n\r\n        return worked\r\n    }\r\n\r\n    private dispense(citizen: Citizen, request: InteractionRequest) {\r\n        if (request && request.type === 'retrieve') {\r\n            let canFulfill = this.product.find(p => p === request.resource)\r\n            if (canFulfill) {\r\n                deleteByValueOnce(this.product, request.resource)\r\n                citizen.carry(request.resource)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    public produce(step: number) {\r\n        if (this.machine.operation.type === 'generator') {\r\n            if (step % this.machine.operation.generationTime === 0) {\r\n                if (this.product.length < this.machine.operation.capacity) {\r\n                    this.product.push(this.machine.operation.generates)\r\n                }\r\n            }\r\n\r\n        } else if (this.machine.operation.type === 'spawn') {\r\n            setTimeout(() => this.building.populate(this.pos), 100)\r\n        }\r\n    }\r\n\r\n    // todo only snap when close enough? try to prevent some mis-clicks?\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            // hmmm\r\n            allStructures,\r\n            // machines count < device slots count\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        let snapped = false\r\n        if (bldg) {\r\n            let spot = bldg.nextDevicePlace().position\r\n            let d = spot.distance(pos)\r\n            snapped = d < 150\r\n        }\r\n\r\n        if (snapped) {  //bldg && d < 300) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n            //devicePlaces()[\r\n            //    this.building.devices.length\r\n            //]\r\n        } else {\r\n            this.pos = pos\r\n        }\r\n\r\n        return snapped //!!bldg;\r\n    }\r\n\r\n    // finalize() {\r\n    // this.building.devices.push(this)\r\n    // }\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 100\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { Color } from \"excalibur\";\r\nimport { EntityKind } from \"../../values/Entity\";\r\n\r\nexport class Palette {\r\n    private _element: HTMLDivElement;\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(\r\n        private name: string,\r\n        private x: number,\r\n        private y: number,\r\n        private all: EntityKind[],\r\n        private onButtonClick: (EntityKind) => any = null,\r\n        private onButtonEnter: (EntityKind) => any = null,\r\n        private comprehend = true \r\n    ) {\r\n        this.makePalette();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    updateBuilt(built: (EntityKind)[]) {\r\n        this.built = built;\r\n        if (this.comprehend) {\r\n            this.comprehended = this.all.filter((e: EntityKind) => {\r\n                let s = new e();\r\n                let prereqs: (EntityKind)[] = s.prereqs;\r\n                return prereqs.every((prereq: EntityKind) => {\r\n                    let built = this.built.some((s: EntityKind) => s === prereq);\r\n                    return built;\r\n                });\r\n            });\r\n        } else {\r\n            this.comprehended = this.built\r\n        }\r\n        this.makePalette();\r\n    }\r\n\r\n    private makePalette() {\r\n        if (this._element) {\r\n            this._element.parentElement.removeChild(this._element);\r\n        }\r\n        if (!(this.comprehended.length > 0)) { return }\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.border = 'none'; //1px solid black'; //0.5px solid white';\r\n        document.body.appendChild(this._element);\r\n\r\n        if (this.name) {\r\n            let title = document.createElement('h2')\r\n            title.textContent = this.name\r\n            title.style.fontFamily = 'Verdana'\r\n            title.style.fontSize = '7pt'\r\n            title.style.fontWeight = '400'\r\n            title.style.color = Color.White.toRGBA()\r\n            title.style.backgroundColor = Color.Violet.darken(0.92).toRGBA()\r\n            title.style.padding = '4px'\r\n            title.style.margin = '0px'\r\n            this._element.appendChild(\r\n                title\r\n            )\r\n        }\r\n\r\n        this.comprehended\r\n            .map((elem: EntityKind) => new elem())\r\n            .sort((a, b) => a.color > b.color ? -1 : 1)\r\n            .forEach(elem => {\r\n                if (elem.hide) { return }\r\n                let label = elem.name;\r\n                if (!this.built.map(m => new m().name).includes(elem.name)) {\r\n                    label += ' *';\r\n                }\r\n                let clr = elem.color;\r\n                let btn = this.buttonFactory(label, clr);\r\n                this._element.appendChild(btn);\r\n                if (this.onButtonEnter) {\r\n                    btn.onmouseenter = () => { this.onButtonEnter(elem); };\r\n                }\r\n                if (this.onButtonClick) {\r\n                    btn.onclick = () => { this.onButtonClick(elem); };\r\n                }\r\n            });\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.5).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = label;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '7pt';\r\n        paletteButton.style.fontFamily = 'Verdana';\r\n        paletteButton.style.fontWeight = '500';\r\n        paletteButton.style.padding = '3px';\r\n        paletteButton.style.width = '124px';\r\n        paletteButton.style.textTransform = 'uppercase';\r\n        paletteButton.style.border = 'none' //1px solid rgba(255,255,255,0.08)';\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA();\r\n            paletteButton.style.color = fg.toRGBA();\r\n        };\r\n        return paletteButton;\r\n    }\r\n}\r\n","import { Label, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { PureValue } from \"../../models/Economy\";\r\nimport { SmallDomeThreeView } from \"../Building/SmallDomeThreeView\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\n\r\nexport class CardBody extends Actor {\r\n    description: Label\r\n    values: Label\r\n    notes: Label\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building, x: number, y: number) {\r\n        super(x, y, 0, 0)\r\n        // resources / recipes\r\n\r\n        this.values = new Label('')\r\n        this.values.fontSize = 10\r\n        this.add(this.values)\r\n\r\n        this.notes = new Label('behavioral notes', 0, 30)\r\n        this.notes.fontSize = 11\r\n        this.add(this.notes)\r\n\r\n        this.description = new Label('description', 0, 60)\r\n        this.description.fontSize = 12\r\n        this.description.fontStyle = FontStyle.Italic\r\n        this.add(this.description)\r\n\r\n        this.show(entity)\r\n    }\r\n\r\n    show(entity: Machine | Structure | SpaceFunction | Building) {\r\n        if (entity) {\r\n            this.description.text = entity.description;\r\n\r\n            if (entity instanceof Machine) {\r\n                let values = []\r\n                let econ = entity.economy\r\n                for (let value in PureValue) {\r\n                    let { supply, demand } = econ[value]\r\n                    let delta = supply - demand\r\n                    if (delta > 0) {\r\n                        values.push(`+${delta} ${value}`)\r\n                    } else if (delta < 0) {\r\n                        values.push(`${delta} ${value}`)\r\n                    }\r\n                }\r\n                this.values.text = values.join(' | ')\r\n\r\n                // let theNotes = []\r\n                this.notes.text = ''\r\n                let op = entity.operation\r\n                if (op) {\r\n                    if (op.type === 'recipe') {\r\n                        this.notes.text = `Turns ${op.consumes.join(' + ')} -> ${op.produces}.`\r\n                    } else if (op.type === 'generator') {\r\n                        this.notes.text = `Generates ${op.generates}.`\r\n                    } else if (op.type === 'store') {\r\n                        this.notes.text = `Stores ${op.stores.join(' + ')}`\r\n                    } else if (op.type === 'spawn') {\r\n                        this.notes.text = 'Decants clones.'\r\n                    }\r\n                }\r\n                \r\n                // if (entity.consumes && entity.produces) {\r\n                //     this.notes.text = `Turns ${entity.consumes} into ${entity.produces}.`\r\n                // } else if (entity.produces) {\r\n                //     this.notes.text = `Generates ${entity.produces}.`\r\n                // } // if entity.stores...?\r\n            } else { //} if (entity instanceof Structure) {\r\n                this.values.text = ''\r\n                this.notes.text = ''\r\n            }\r\n\r\n        }\r\n        // other bonuses? behaviors?\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nexport class CardTitle extends Actor {\r\n    \r\n    name: Label;\r\n    type: Label;\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building, x: number, y: number) {\r\n        super(x, y, 14, 32, entity && entity.color || Color.Gray);\r\n        this.name = new Label(entity && entity.name || '..', 20, 16)\r\n        this.name.fontSize = 28\r\n        this.name.color = Color.Black\r\n        this.add(this.name)\r\n\r\n        this.type = new Label('..', 232, 16)\r\n        this.type.fontSize = 10\r\n        this.type.color = Color.Gray\r\n        this.type.fontStyle = FontStyle.Italic\r\n        this.add(this.type)\r\n\r\n        if (entity) {\r\n            this.announce(entity)\r\n        }\r\n    }\r\n\r\n    announce(entity: Machine | Structure | SpaceFunction | Building): any {\r\n        this.name.text = entity.name\r\n        this.color = entity.color.desaturate(0.5).darken(0.2)\r\n        if (entity instanceof Machine) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n        if (entity instanceof Structure) { this.type.text = 'Structure' }\r\n        if (entity instanceof SpaceFunction) { this.type.text = 'Function' }\r\n        if (entity instanceof Building) { this.type.text = 'Building' }\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { CardTitle } from \"./CardTitle\";\r\nimport { CardBody } from \"./CardBody\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\n\r\nexport class Card extends Actor {\r\n    title: CardTitle\r\n    cardBody: CardBody\r\n    image: any\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building, x: number, y: number) {\r\n        super(x + 160, y + 90, 320, 180, Color.White);\r\n        let x0 = -150, y0 = -50;\r\n        this.title = new CardTitle(entity, x0 - 3, y0); //x, y)\r\n        this.add(this.title);\r\n        this.cardBody = new CardBody(entity, x0 + 14, y0 + 40)\r\n        this.add(this.cardBody)\r\n\r\n        this.image = new Image();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        if (this.entity) {\r\n            if (this.entity instanceof Machine) {\r\n                let ix = this.pos.x + 48, iy = this.pos.y - 16\r\n                let isz = 92\r\n                ctx.drawImage(this.image, ix, iy, isz, isz)\r\n            }\r\n        }\r\n    }\r\n\r\n    present(entity: Machine | Structure | SpaceFunction | Building): any {\r\n        this.title.announce(entity)\r\n        this.cardBody.show(entity)\r\n\r\n        this.entity = entity\r\n        if (this.entity instanceof Machine) {\r\n            this.image.src = this.entity.image\r\n        }\r\n    }\r\n\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor } from \"excalibur\";\r\nimport { Economy, PureValue, availableCapacity, allValues } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n\r\n        let index = 0\r\n        for (let value of allValues) {\r\n            let valueLabel: EconomicValue =  new EconomicValue(value, (index++ * 34), 0)\r\n            this.valueLabels[value] = valueLabel\r\n            this.add(valueLabel)\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value of allValues) {\r\n            this.valueLabels[value].setCount(\r\n                availableCapacity(market, value)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 6, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            [ResourceBlock.Biomass]: null,\r\n            [ResourceBlock.Idea]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n            [ResourceBlock.Alloy]: null,\r\n            [ResourceBlock.Bioplasma]: null,\r\n            [ResourceBlock.Algorithm]: null,\r\n            [ResourceBlock.Argent]: null,\r\n            [ResourceBlock.Aurum]: null,\r\n            [ResourceBlock.Omnium]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0, Color.DarkGray.darken(0.8));\r\n        let rx0 = 0, ry0 = -2.5;\r\n        let resources = [\r\n            ResourceBlock.Meal,\r\n            ResourceBlock.Data,\r\n            ResourceBlock.Mineral,\r\n\r\n            ResourceBlock.Bioplasma,\r\n            ResourceBlock.Alloy,\r\n            ResourceBlock.Algorithm,\r\n\r\n            ResourceBlock.Argent,\r\n            ResourceBlock.Aurum,\r\n        ];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0 + index * 18, ry = ry0 + index * 0;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n\r\n    constructor(market: Economy, w: number = 10000, h: number = 36) {\r\n        super(0,0, w, h, Color.DarkGray.darken(0.8));\r\n\r\n        let ty = 14\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+2)\r\n        brand.fontSize = 12\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.0.1\", 48, ty + 2)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(80, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 400, ty)\r\n        this.add(this.economy)\r\n\r\n        this.popLabel = new Label(\"\", 1000, ty, 'Helvetica')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 1080, ty, 'Helvetica')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.messageLabel.fontStyle = FontStyle.Italic\r\n        this.add(this.messageLabel)\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n    \r\n}\r\n","import { UIActor, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, SmallRoomThree, SmallRoomTwo, MediumRoom, MidDome, SmallDome, LargeRoom, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, sumMarkets, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { Desk, Bookshelf, Machine, CloningVat, WaterCondensingMachine, OxygenExtractor, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Cabin, Orchard, SolarCell, Megafabricator, Arbor, Fabricator, MiningDrill, Preserve, Workstation, Houseplant, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Card } from \"./Card\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Palette } from \"./Palette\";\r\nimport { Building } from \"../Building\";\r\n\r\nexport class Hud extends UIActor {\r\n    private structurePalette: Palette //<Structure> \r\n    private machinePalette: Palette //<Machine>\r\n    private functionPalette: Palette\r\n    private card: Card\r\n\r\n    private status: StatusAnalysisView\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n    static machinesForPalette = allMachines\r\n    static functionsForPalette = allSpaceFunctions\r\n\r\n    constructor(\r\n        private game: Game,\r\n        protected onBuildingSelect = null,\r\n        protected onMachineSelect = null,\r\n        protected onFunctionSelect = null\r\n    ) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.status = new StatusAnalysisView(emptyMarket());\r\n        this.add(this.status)\r\n\r\n        let displayInfo = (e) => this.showCard(e)\r\n        this.structurePalette = new Palette('Structure', 20, 35, Hud.structuresForPalette, onBuildingSelect, displayInfo)\r\n        this.machinePalette = new Palette('Machine', 20, 300, allMachines, onMachineSelect, displayInfo) // (e) => this.showCard(e))\r\n        this.functionPalette = new Palette('Function', 220, 35, Hud.functionsForPalette, onFunctionSelect, displayInfo, false)\r\n\r\n        this.card = new Card(null, 20, 800) // game.canvasHeight - 200)\r\n        this.add(this.card)\r\n    }\r\n\r\n    setMessage(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        this.structurePalette.draw(ctx)\r\n        this.machinePalette.draw(ctx)\r\n        this.functionPalette.draw(ctx)\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true) {\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n    }\r\n\r\n    showCard(entity: Machine | Structure | SpaceFunction | Building) {\r\n        this.card.present(entity)\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n        this.updateFunctionPalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        let builtStructures =\r\n            Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n\r\n        this.structurePalette.updateBuilt(builtStructures)\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let devices = colony.findAllDevices()\r\n        let builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine))\r\n        this.machinePalette.updateBuilt(builtMachines)\r\n    }\r\n\r\n    private updateFunctionPalette(colony: Colony) {\r\n        let builtReifiedFunctions = flatSingle(colony.buildings.map(b => b.spaceFunction))\r\n        let builtFunctions = Hud.functionsForPalette.filter((fn) => builtReifiedFunctions.some(rf => rf instanceof fn))\r\n        this.functionPalette.updateBuilt(builtFunctions)\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MediumSurfaceRoomView extends Building {\r\n    hideBox = true\r\n\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() //- this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    // afterConstruct() {\r\n    //     let { machines } = this.structure;\r\n    //     if (machines && machines.length > 0) {\r\n    //         let machine = new machines[0]();\r\n    //         this.devicePlaces().forEach(place => {\r\n    //             let theDevice = new Device(machine, place.position)\r\n    //             this.addDevice(theDevice)\r\n    //         })\r\n    //     }\r\n\r\n    // }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor()\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        // a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomThreeView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Huge\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Large\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 2\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaceCount = 3\r\n    //devicePlaces() {\r\n    //    let w = this.getWidth()/2\r\n    //    let x = this.pos.x + w;\r\n    //    let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n    //    let ds = [\r\n    //        new Vector(x - w / 2, y),\r\n    //        new Vector(x, y),\r\n    //        new Vector(x + w / 2, y),\r\n    //    ]\r\n\r\n    //    return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    //}\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { range, eachCons, measureDistance, drawRect } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawRect } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 12\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        let wallColor = this.processedColor() //.darken(0.4)\r\n        let floorColor = this.processedColor().darken(0.4)\r\n\r\n        drawRect(ctx, this.aabb(), 0.5, wallColor)\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight,\r\n              width: this.getWidth(), height: this.floorHeight },\r\n              0.2,\r\n              floorColor\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    devicePlaceSize: DeviceSize = DeviceSize.Small\r\n    devicePlaceCount: number = 2\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","module.exports = __webpack_public_path__ + \"1d893905e4eea3bbc48b0e129e318ea6.svg\";","module.exports = __webpack_public_path__ + \"bd556d00e484db4e52d198d0bf39d0f2.svg\";","module.exports = __webpack_public_path__ + \"650cd431226df0755357c71d61bef1f2.svg\";","module.exports = __webpack_public_path__ + \"9ed5e1137b47b9fc3d2bbf4534777307.svg\";","module.exports = __webpack_public_path__ + \"3aeb9dd24809ba3fbd4eeb31a28c3b19.svg\";","module.exports = __webpack_public_path__ + \"6cc6f6773bb6eb26fcef87b9629f7b87.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"24611230ec712ba7ee38b99561aedd87.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { ResourceBlock } from \"./Economy\";\r\n\r\nexport type MechanicalOperation = Recipe | Generator | ResourceStorage | SpawnClone | Noop;\r\n\r\nexport interface Noop {\r\n    type: 'noop'\r\n}\r\n\r\nexport interface Recipe {\r\n    type: 'recipe'\r\n    consumes: ResourceBlock[]\r\n    produces: ResourceBlock\r\n    workTime: number\r\n}\r\n\r\nexport interface Generator {\r\n    type: 'generator'\r\n    generates: ResourceBlock\r\n    generationTime: number\r\n    capacity: number\r\n}\r\n\r\nexport interface ResourceStorage {\r\n    type: 'store'\r\n    stores: ResourceBlock[]\r\n    capacity: number\r\n}\r\n\r\nexport interface SpawnClone {\r\n    type: 'spawn'\r\n}\r\n\r\nfunction store(res: ResourceBlock[], capacity: number = 10): ResourceStorage {\r\n    return {\r\n        type: 'store',\r\n        stores: res,\r\n        capacity\r\n    }\r\n}\r\n\r\nfunction generate(res: ResourceBlock, cap: number = 4): Generator {\r\n    return {\r\n        type: 'generator',\r\n        generates: res,\r\n        generationTime: 1000,\r\n        capacity: cap\r\n    }\r\n}\r\n\r\nfunction recipe(input: ResourceBlock[], output: ResourceBlock): Recipe {\r\n    return {\r\n        type: 'recipe',\r\n        consumes: input,\r\n        produces: output,\r\n        workTime: 1000,\r\n    }\r\n}\r\n\r\nfunction spawn(): SpawnClone {\r\n    return {\r\n        type: 'spawn',\r\n    }\r\n}\r\n\r\nexport const mechanicalOperations = {\r\n    store,\r\n    generate,\r\n    recipe,\r\n    spawn\r\n}","import { Planet } from \"../actors/Planet/Planet\";\r\nimport { Device, retrieveResource } from \"../actors/Device\";\r\nimport { MechanicalOperation, Recipe } from \"../models/MechanicalOperation\";\r\nimport { Citizen } from \"../actors/Citizen\";\r\nimport { sleep } from \"../Util\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nexport abstract class ProductionStrategy {\r\n    private sleepInterval: number = 250\r\n    protected isActive: boolean = false;\r\n    constructor(protected pawn: Citizen) { }\r\n    protected abstract async apply();\r\n    protected get planet(): Planet { return this.pawn.currentPlanet; }\r\n    protected get devices(): Device[] { return this.planet.colony.findAllDevices(); }\r\n    protected get operations(): MechanicalOperation[] { return this.devices.map(d => d.operation); }\r\n    protected get recipes(): Recipe[] {\r\n        let recipes: Recipe[] = [];\r\n        this.operations.forEach(op => {\r\n            if (op.type === 'recipe') {\r\n                recipes.push(op);\r\n            }\r\n        });\r\n        return recipes;\r\n    }\r\n\r\n    async attempt(): Promise<void> {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n        if (!this.isActive) {\r\n            // note apply will need to set this.isActive around its critical section\r\n            await this.apply();\r\n        }\r\n\r\n        await this.pause()\r\n        setInterval(() => { this.attempt() }, this.sleepInterval)\r\n    }\r\n\r\n    protected async pause() {\r\n        await sleep(this.sleepInterval)\r\n    }\r\n\r\n    protected async workRecipe(recipe: Recipe) {\r\n        for (let ingredient of recipe.consumes) {\r\n            await this.gatherBlock(ingredient);\r\n        }\r\n        let knowsRecipe = (d: Device) => d.operation === recipe\r\n        let maker = this.planet.colony.closestDeviceByType(this.pawn.pos, [], knowsRecipe)\r\n        if (maker) {\r\n            await this.visitDevice(maker)\r\n            await this.performRecipeTask(maker, recipe)\r\n        } else {\r\n            await this.pause()\r\n            await this.workRecipe(recipe);\r\n        }\r\n    }\r\n\r\n    protected async performRecipeTask(maker: Device, recipe: Recipe) {\r\n      let worked = await maker.interact(this.pawn, { type: 'work', recipe })\r\n      if (!worked) {\r\n          await this.pause()\r\n          console.warn(\"waiting for machine to become available...\")\r\n          await this.performRecipeTask(maker, recipe)\r\n      }\r\n    }\r\n\r\n\r\n    protected async storeBlock(res: ResourceBlock) {\r\n\r\n        let storesDesiredBlock = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.operation.capacity &&\r\n            d.operation.stores.includes(res)\r\n        let openStore = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n        let stored = false\r\n        if (openStore) {\r\n            await this.visitDevice(openStore)\r\n            if (await openStore.interact(this.pawn, { type: 'store', resource: res })) {\r\n                stored = true\r\n            }\r\n        }\r\n\r\n        if (!stored) {\r\n            await this.pause()\r\n            await this.storeBlock(res)\r\n        }\r\n    }\r\n\r\n    protected async gatherBlock(res: ResourceBlock) {\r\n        let gathered = false\r\n        let generatesDesiredBlock = (d: Device) => (d.operation.type === 'generator') &&\r\n            d.product.some(stored => res === stored)\r\n\r\n        let gen: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], generatesDesiredBlock)\r\n        let storesDesiredBlock = (d: Device) => (d.operation.type === 'store') &&\r\n              d.product.some(stored => res === stored)\r\n\r\n        let store: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n\r\n        let device = gen || store\r\n\r\n        if (device) {\r\n            await this.visitDevice(device)\r\n            if (await device.interact(this.pawn, retrieveResource(res))) {\r\n                gathered = true\r\n            }\r\n        } else {\r\n            let recipe = this.recipes.find(recipe => recipe.produces === res);\r\n            if (recipe) {\r\n                await this.workRecipe(recipe);\r\n                gathered = true\r\n            }\r\n        }\r\n\r\n        if (!gathered) {\r\n            await this.pause() // sleep(1000)\r\n            await this.gatherBlock(res)\r\n        }\r\n    }\r\n\r\n    private async visitDevice(device: Device) {\r\n        await this.pawn.pathTo(device.building)\r\n        await this.pawn.glideTo(device.pos)\r\n    }\r\n}\r\n","import { shuffle } from \"../Util\";\r\nimport { Device, retrieveResource as retrieveResource } from \"../actors/Device\";\r\nimport { Recipe, ResourceStorage } from \"../models/MechanicalOperation\";\r\nimport { ProductionStrategy } from \"./ProductionStrategy\";\r\n\r\nexport class CapacityBasedProduction extends ProductionStrategy {\r\n    async apply() {\r\n        if (this.isActive) { return; }\r\n        this.isActive = true\r\n        const storeWithCapacity = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.operation.capacity\r\n        const store: Device = shuffle(this.devices).find(storeWithCapacity)\r\n        if (store && store.operation.type === 'store') {\r\n            const storage: ResourceStorage = store.operation\r\n            const recipeForStoredResource = (r: Recipe) => storage.stores.some(stored => r.produces === stored)\r\n            let recipe = shuffle(this.recipes).find(recipeForStoredResource)\r\n            if (recipe) {\r\n                await this.workRecipe(recipe)\r\n                await this.storeBlock(recipe.produces)\r\n            }\r\n        }\r\n        await this.pause()\r\n        this.isActive = false\r\n    }\r\n\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons, deleteByValueOnce, sleep } from \"../Util\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { ProductionStrategy } from \"../strategies/ProductionStrategy\";\r\nimport { CapacityBasedProduction } from \"../strategies/CapacityBasedProduction\";\r\n\r\nexport class Citizen extends Actor {\r\n\r\n    walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock[] = [] // null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    private productionStrategy: ProductionStrategy\r\n\r\n    constructor(private device: Device, protected planet: Planet) {\r\n        super(device.x, device.y, Scale.minor.first, Scale.minor.third, Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.productionStrategy = new CapacityBasedProduction(this)\r\n    }\r\n\r\n    get isWorking() { return this.isWorking }\r\n    get currentPlanet() { return this.planet }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // make sure we are busy!\r\n        this.work()\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = \r\n              Math.min(\r\n                  (now - this.workStarted) / this.workDuration,\r\n                  1\r\n              )\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            this.carrying.forEach((carried, idx) => {\r\n                ctx.fillStyle = blockColor(carried).toRGBA()\r\n                ctx.fillRect(this.x + 4, this.y - 3 * idx, 5, 5)\r\n            })\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            ctx.strokeRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n        }\r\n\r\n        let debugPath = false\r\n        if (this.path && debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 10\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    carry(c: ResourceBlock) {\r\n        this.carrying.push(c);\r\n    }\r\n\r\n    isCarryingUnique(resources: ResourceBlock[]): boolean {\r\n        let isCarrying = true\r\n        let carryingCopy = this.carrying.slice()\r\n        if (this.carrying.length > 0) {\r\n            resources.forEach(resToFind => {\r\n                if (carryingCopy.find(res => res === resToFind)) {\r\n                    deleteByValueOnce(carryingCopy, resToFind)\r\n                } else {\r\n                    isCarrying = false;\r\n                }\r\n            })\r\n        }\r\n        return isCarrying\r\n    }\r\n\r\n    drop(res: ResourceBlock): ResourceBlock {\r\n        if (this.carrying.length > 0) {\r\n            if (this.carrying.find(r => r === res)) {\r\n                deleteByValueOnce(this.carrying, res)\r\n                return res\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        this.workInProgress = false\r\n    }\r\n\r\n    async pathTo(building: Building) {\r\n        if (this.path.length > 0) {\r\n            throw new Error(\"Already pathing!!\")\r\n        }\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            path.pop()\r\n            path.shift()\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = []\r\n        }\r\n        return true;\r\n    }\r\n\r\n    work() {\r\n        this.productionStrategy.attempt()\r\n    }\r\n\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(home: Device) {\r\n        let citizen = new Citizen(home, this.planet);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\n\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = false\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findAllDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d)\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings[0] //.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices(): Device[] {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\n\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n\r\n    constructor(\r\n        public hud: Hud,\r\n        public color: Color,\r\n        private onBuildingHover: (b: Building) => any,\r\n        private w: number = 2000000,\r\n        private depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, w, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n    }\r\n\r\n    set currentlyViewing(building: Building) {\r\n        this.onBuildingHover(building)\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        let devices = this.colony.findAllDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(home)\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        let devices = this.colony.findAllDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [ PureValue.Shelter, PureValue.Water, PureValue.Oxygen ]\r\n        return Math.max(0, Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        ))\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n}","import { Scene, Input, Vector } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MainTunnel, Corridor, SurfaceRoad, SmallDome, SmallRoomThree, MediumRoomThree, LargeRoom, HugeRoom } from \"../models/Structure\";\r\nimport { Building, structureViews, } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { SpaceFunction, CloneMatrix, Kitchen, LivingQuarters, LifeSupportPod, Library, Archive, ComputerCore, MissionControl } from \"../models/SpaceFunction\";\r\nimport { flatSingle, zip } from \"../Util\";\r\nimport { DevicePlace } from \"../actors/Building/Building\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    placingFunction: SpaceFunction = null\r\n\r\n\r\n    static requiredStructuresAndFunctions: (typeof SpaceFunction | typeof Structure)[] = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        LifeSupportPod,\r\n        MainTunnel,\r\n        Corridor,\r\n        Kitchen,\r\n        LivingQuarters,\r\n        CloneMatrix,\r\n        Library,\r\n        Archive,\r\n        ComputerCore,\r\n        \r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, false)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        let buildIt = (e) => this.startConstructing(e)\r\n\r\n        this.hud = new Hud(game, buildIt, buildIt, buildIt)\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(this.hud, game.world.color, (b) => this.hud.showCard(b))\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(2, 10000)\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n\r\n                            if (this.placingFunction) {\r\n                                let fn = this.placingFunction\r\n                                console.log({ fn, bldg: buildingUnderConstruction })\r\n                                zip(fn.machines, buildingUnderConstruction.devicePlaces()).forEach(([machine, place]: [typeof Machine, DevicePlace]) => {\r\n                                    console.log(\"would add machine\", { machine, place })\r\n                                    let m = (new machine()).concretize()\r\n                                    let device = new Device(m, place.position)\r\n                                    buildingUnderConstruction.addDevice(device)\r\n                                })\r\n                                this.placingFunction = null\r\n                            }\r\n\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                this.planet.colony.currentlyConstructing = null\r\n                this.placingFunction = null\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingStructureOrFunction(): Structure | SpaceFunction {\r\n        let reqs = Construct.requiredStructuresAndFunctions.map(req => new req())\r\n\r\n        let actualStructureNames = this.buildings.map(building => building.structure.name)\r\n        let actualFunctionNames = flatSingle(\r\n            this.buildings.map(building => building.spaceFunction && building.spaceFunction.name)\r\n        )\r\n        let actualNames = [...actualStructureNames, ...actualFunctionNames]\r\n        return reqs.find(req => !actualNames.includes(req.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingStructureOrFunction() //this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        }\r\n    }\r\n\r\n    startConstructing(structureOrMachine: Structure | Machine | SpaceFunction, pos: Vector = new Vector(0, 0)) {\r\n        this.hud.showCard(structureOrMachine)\r\n        \r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            this.hud.setMessage(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            this.camera.zoom(structure.zoom, 250)\r\n            this.camera.pos = theNextOne.pos\r\n        } else if (structureOrMachine instanceof Machine) {\r\n            let machine = structureOrMachine\r\n            this.hud.setMessage(`Install ${machine.name} (${machine.description})`)\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            // this.camera.zoom(1.5, 250)\r\n        } else if (structureOrMachine instanceof SpaceFunction) {\r\n            let fn: SpaceFunction = structureOrMachine\r\n            this.hud.setMessage(`Place ${fn.name} (${fn.description})`)\r\n            theNextOne = this.spawnFunction(fn, pos)\r\n            this.placingFunction = fn\r\n\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        if (device.snap(this.planet)) {\r\n            this.camera.pos = device.pos\r\n \r\n        }\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n\r\n    protected spawnFunction(fn: SpaceFunction, pos: Vector): Building {\r\n        let theStructure: Structure = (fn.structure && new fn.structure()) // || new SmallRoomThree()\r\n        if (!theStructure) {\r\n            theStructure = new SmallRoomThree()\r\n            let machines = fn.machines.map(m => new m())\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Medium)) {\r\n                theStructure = new MediumRoomThree()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Large)) {\r\n                theStructure = new LargeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Huge)) {\r\n                theStructure = new HugeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.forDome)) {\r\n                theStructure = new SmallDome()\r\n            }\r\n        }\r\n\r\n        console.log(\"SPAWN FUNCTION\", { fn, structure: theStructure })\r\n        let building = this.assembleBuildingFromStructure(theStructure, pos)\r\n        building.reshape(building.constrainCursor(building.pos))\r\n        return building\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Orange] //Red, Color.Blue, Color.Green]\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ).\r\n        lighten(0.15).\r\n        desaturate(0.65)\r\n\r\n  \r\n    static bestowName(): any {\r\n        let nameList = [\r\n            'Aragorn',\r\n            'Anodyne',\r\n            'Carolyn',\r\n            'Exeter',\r\n            'Colwreath',\r\n            'India',\r\n            'Comma',\r\n            'Terabithia'\r\n        ]\r\n        return sample(nameList)\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword),\r\n\r\n}\r\n\r\nexport { Resources }\r\n","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}