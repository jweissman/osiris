{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Util.ts","webpack:///./src/values/DeviceSize.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Machine.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/Painting.ts","webpack:///./src/models/Structure.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/Game.ts","webpack:///./src/strategies/Strategy.ts","webpack:///./src/actors/Device.ts","webpack:///./src/actors/Building/BackgroundPatterns.ts","webpack:///./src/values/Scale.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Resources.ts","webpack:///./src/actors/player.ts","webpack:///./src/strategies/EatingStrategy.ts","webpack:///./src/strategies/WhenHungryEatingStrategy.ts","webpack:///./src/strategies/SleepingStrategy.ts","webpack:///./src/strategies/AnyBedSleepingStrategy.ts","webpack:///./src/strategies/ConstructionStrategy.ts","webpack:///./src/strategies/ProximityBasedConstruction.ts","webpack:///./src/values/InteractionRequest.ts","webpack:///./src/strategies/ProductionStrategy.ts","webpack:///./src/strategies/CapacityBasedProduction.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/actors/Hud/Palette.ts","webpack:///./src/actors/Hud/CardBody.ts","webpack:///./src/actors/Hud/CardTitle.ts","webpack:///./src/actors/Hud/Card.ts","webpack:///./src/actors/Hud/MusicPlayer.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MediumSurfaceRoomView.ts","webpack:///./src/actors/Building/MediumRoomThreeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/images/wood-panel-bg.png","webpack:///./src/images/ussf.png","webpack:///./src/images/window-bg.png","webpack:///./src/images/beige-bg.png","webpack:///./src/images/checker-bg.png","webpack:///./src/images/tech-bg.png","webpack:///./src/images/poster-wall-bg.png","webpack:///./src/images/books-bg.png","webpack:///./src/images/leafy-bg.png","webpack:///./src/images/raised-square-bg.png","webpack:///./src/images/couch-plain.svg","webpack:///./src/images/fabricator-plain.svg","webpack:///./src/images/mega-console-plain.svg","webpack:///./src/images/console-red-plain.svg","webpack:///./src/images/console-green-plain.svg","webpack:///./src/images/console-purple-plain.svg","webpack:///./src/images/console-plain.svg","webpack:///./src/images/workstation-plain.svg","webpack:///./src/images/houseplant-plain.svg","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/models/MechanicalOperation.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/sounds/future tense.mp3","webpack:///./src/sounds/understanding.mp3","webpack:///./src/sounds/indivision.mp3","webpack:///./src/sounds/assembler.mp3","webpack:///./src/sounds/crater-rock.mp3","webpack:///./src/images/sword.png","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","deleteByValueOnce","index","indexOf","eachCons","eachChunk","array","measureDistance","b","sleep","ms","Promise","resolve","setTimeout","shuffle","sort","zip","countOccurrences","counts","forEach","containsUniq","testElems","doesContain","arrCopy","missingItem_1","testElem","find","mixColors","factor","aFactor","bFactor","Color","g","t","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","fourth","eighth","second","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","SurfaceRoadView_1","SurfaceRoadView","SmallDomeThreeView_1","SmallDomeThreeView","MidDomeView_1","MidDomeView","BigDomeView_1","BigDomeView","SmallRoomThreeView_1","SmallRoomThreeView","MediumRoomView_1","MediumRoomView","LargeRoomView_1","LargeRoomView","HugeRoomView_1","HugeRoomView","MediumRoomThreeView_1","MediumRoomThreeView","MediumSurfaceRoomView_1","MediumSurfaceRoomView","structureViews","Orientation_1","Game_1","Util_1","Graph_1","Economy_1","SpaceFunction_1","DeviceSize_1","Machine_1","BackgroundPatterns_1","Painting_1","DevicePlace","pos","this","_super","structure","planet","_this","x","y","width","height","infra","color","darken","Transparent","edgeWidth","placed","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","devices","active","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","some","currentlyViewing","toggleActive","collisionType","CollisionType","PreventCollision","nameLabel","Label","White","__extends","poly","aabbPoly","draw","ctx","delta","drawRect","aabb","processedColor","spaceFunction","getCenter","measureText","Game","debugPath","slots","slot","rect","Gray","lighten","nodes","node","Yellow","devicePlaces","place","position","visibleSize","update","engine","device","tryProduce","description","economy","emptyUnlessActive","isActive","emptyMarket","machineEconomies","buildingEconomy","__assign","Oxygen","demand","supply","sumMarkets","inUse","wasEquil","equilibrium","_i","allValues_1","allValues","localCap","availableCapacity","globalCap","agg","constrainCursor","clone","reshape","afterConstruct","handleClick","_pos","getWidth","getHeight","graph","supergraph","Graph","rootNode","findOrCreate","_a","child","parentSlot","edge","childNode","redeem","res","gather","debit","spend","populate","elite","pathFromRect","angledRoofPoly","angleStartY","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","bldg","edgeColor","mainColor","colorBase","clr","Red","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","closestBuildingByType","building","matchingSlot","compass_1","compass","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","subEqual","add","updateFunction","machine","onPlacement","hasPlaceForDevice","nextDevicePlace","getDevices","allTheMachines","StudyMachine","allMachines","CommandCenter","MissionLog","machines","console","log","allSpaceFunctions","spaceFn","sf","text","background","BackgroundPattern","Grid","Actor","PureValue","market","Power","Water","Shelter","Hope","Joy","Wisdom","Wealth","Beauty","Wonder","ea","eb","newMarket","sa","da","_b","every","ResourceBlock","Biomass","Ore","Idea","Meal","Data","Mineral","Bioplasma","Alloy","Algorithm","Argent","Aurum","Omnium","blockColors","Green","Blue","cStep","Viridian","DarkGray","Orange","blockColor","block","desaturate","setPrototypeOf","__proto__","constructor","create","assign","arguments","MechanicalOperation_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","plant","workstation","consolePurple","consoleGreen","consoleRed","megaconsole","fabricator","couch","Violet","store","mechanicalOperations","generate","recipe","spawn","accelerateTime","Machine","LightGray","cost","operation","type","image","prereqs","forDome","hide","concretize","built","produceResource","OxygenExtractor","WaterCondensingMachine","SolarCell","Workstation","Desk","Bookshelf","Couch","Fridge","Stove","Bed","Houseplant","PersonnelRegistry","CloningVat","OrientationConsole","productionTime","AlgaeVat","DissolutionVat","PlasmaBank","Fabricator","LifeSciencesConsole","Botany","MetalStorage","ResearchServer","Orchard","Cabin","Arbor","MineralProcessor","ThinkingFountain","Mainframe","Megafabricator","MolecularEngine","fromHex","SilverForest","TimeCrystal","HoloProjector","SacredGrove","AtomicCompiler","MiningDrill","Preserve","LogicPool","Cathedral","Microcity","LogicCrystal","Left","Up","Down","orientation","Error","drawPatternedPoly","path","pattern","gridPattern","getBackgroundPattern","save","translate","beginPath","moveTo","pt","lineTo","closePath","fillStyle","restore","drawLine","lineWidth","strokeStyle","toRGBA","stroke","drawPatternedRect","rectangle","filled","dashed","main","fillRect","setLineDash","strokeRect","drawPoly","drawStar","cx","cy","outerRadius","innerRadius","spikes","rot","PI","cos","sin","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","Structure","view","zoom","Corridor","Ladder","MainTunnel","MediumSurfaceRoom","SurfaceRoad","fifth","first","Dome","seventh","CommonArea","SmallRoomThree","sixth","SmallRoomTwo","SmallDome","MediumRoom","MediumRoomThree","LargeRoom","HugeRoom","SmallDomeThree","MidDome","LargeDome","Arcology","allStructures","Structure_1","SpaceFunction","Beige","bonuses","capacity","workSpeed","MissionControl","Window","LivingQuarters","Barracks","Kitchen","Checker","LifeSupportPod","Retreat","CloneMatrix","CloneReception","ReadingRoom","Library","Books","Study","Wood","ComputerLab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Leafy","Farm","Factory","ComputerCore","Tech","LifeSciencesLab","Refinery","Mine","HoloMatrix","TimeChamber","Resources_1","world","displayMode","DisplayMode","FullScreen","backgroundColor","Black","start","loader","Loader","key","Resources","addResource","then","citizenSpeed","startHour","Engine","InteractionRequest_1","Strategy","pawn","sleepInterval","currentPlanet","findPoweredDevices","recipes","operations","op","attempt","label","sent","pause","gatherBlock","debug","gathered","generatesDesiredBlock","product","stored","gen","closestDeviceByType","storesDesiredBlock","visitDevice","waitTimes","warn","interact","retrieveResource","visit","workRecipe","produces","knowsRecipe","reserved","maker","made","gatherIngredients","consumes","performRecipeTask","blocks","isCarryingUnique","blocks_1","ingredient","tries","timesToAttempt","worked","Device","initialPos","imageLoaded","fontSize","Image","onload","src","globalAlpha","drawImage","imageX","imageY","iv","bx","by","yOff","produced","blockSize","assemble","citizen","progressBar","drop","request","recipe_1","carrying","it","includes","consumed","workTime","getEffectiveWorkTime","carry","requires","has","store_1","dispense","stores","getEffectiveOperationalCapacity","res_1","bonus","round","resource","generationTime","generates","snap","snapped","raisedSquare","leafy","bookish","posters","tech","checker","beige","ussf","wood","loadBg","scale","loading","Poster","USSF","backgroundPatterns","bg","matrix","DOMMatrix","createPattern","setTransform","majorUnit","minorUnit","minorScale","empty","edges","edgesInverse","isEmpty","newNode","contains","testNode","measure","tolerance","dfs","dst","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","steps","srcIndex","reverse","sword","craterRock","assembler","indivision","understanding","futureTense","Sword","Texture","CraterRock","Sound","Assembler","Indivision","Understanding","FutureTense","ex","Player","setWidth","setHeight","EatingStrategy","EatingStrategy_1","WhenHungryEatingStrategy","canApply","isHungry","storedResources","desk","eat","SleepingStrategy","SleepingStrategy_1","AnyBedSleepingStrategy","isTired","hour","takeRest","Strategy_1","ConstructionStrategy","unbuiltDevice","findAllDevices","ProxmityBasedConstruction","constructDevice","resources","ProductionStrategy","storeBlock","openStore","CapacityBasedProduction","findStore","storage_1","recipeForStoredResource","CapacityBasedProduction_1","ProximityBasedConstruction_1","AnyBedSleepingStrategy_1","WhenHungryEatingStrategy_1","Citizen","home","isPlanning","workInProgress","sleeping","hunger","energy","currentBuilding","productionStrategy","constructionStrategy","sleepingStrategy","eatingStrategy","speedMultiplier","timeFactor","work","now","Date","getTime","progress","workStarted","workDuration","rotate","carried","saturate","px","pw","py","c_1","duration","reject","pathBetweenPoints","followPath","target","glideTo","actions","walkSpeed","asPromise","all","choice","strategies","strat","Citizen_1","Population","citizens","increase","NavigationTree","seekPath","origin","dest","closestNode","abs","NavigationTree_1","Colony","currentlyConstructing","debugTree","navTree","gradient","createLinearGradient","addColorStop","placeBuilding","buildNavTree","structureTypes","st","pathBetween","destination","srcNode","destNode","machineTypes","ctrl","activeBuildings","PlanetBackground","MountainLayers","layers","skyColor","layerHeight","layerCount","peakCount","onInitialize","layerIndex","unshift","baseY","deltas","genPeaks","wc","sc","ndx","ls_1","layer","drawLayer","ox","oy","peakWidth","dMax","last","maxDiff","times","pick","Mountains","peaks","xOff","peakDistance","drift","baseColor","brightColor","yBase","peak","y0","mtnWidth","PlanetBackground_1","Colony_1","Population_1","Device_1","Planet","hud","onBuildingHover","onDeviceHover","w","depth","sky","createLayer","backMountainLayers","mountains","mountainLayers","population","currentHour","setTime","time","nextHour","inc","oldC","skyColorForHour","newC","mixC","colorMap","night","dawn","morning","afternoon","evening","set","buildingOrDevice","theLayer","theEconomy","popularDemand","resourceGathered","resourceExpended","maxPop","theEconomyWithoutPeople","values","val","closestDevice","acc","Palette","onButtonClick","onButtonEnter","comprehend","comprehended","dragging","makePalette","_element","left","canvas","offsetLeft","top_1","offsetTop","style","top","updateBuilt","prereq","parentElement","removeChild","document","createElement","display","flexWrap","border","addEventListener","clientX","clientY","body","appendChild","title","textContent","fontFamily","fontWeight","padding","margin","btn","buttonFactory","onmouseenter","onclick","fg","paletteButton","textTransform","onmouseover","onmouseleave","CardBody","entity","describeResources","freqs","keys","join","notes","fontStyle","FontStyle","Italic","footer","show","describeEconomy","resourceDescription","domeStatus","bonusMessages","econ","CardTitle","announce","CardTitle_1","CardBody_1","Card","x0","cardBody","ix","iy","present","MusicPlayer","playlist","paused","makePlayer","startMusic","_titleElem","currentTrack","play","advancePlaylist","_wrapper","textAlign","inlineBlock","iconFactory","handleAction","action","song","stop","trackNames","append","iconContent","icon","innerHTML","EconomicValue","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","val1","val2","addValue","updateView","updatedEconomy","Tooltip","message","messageLabel","ResourceListEntry","resourceBlock","hovering","tooltip","visible","credit","amt","UIActor","ResourceListEntry_1","ResourcesList","entries","res1","res2","rx","ry","addEntry","entry","increment","decrement","ResourcesList_1","EconomyView_1","MusicPlayer_1","StatusAnalysisView","h","brand","ty","version","clock","popLabel","musicPlayer","Crater Rock","Future Tense","incrementResource","decrementResource","setMessage","showEconomy","showPopCap","cap","setClock","days","toString","hh","hours","minutes","ampm","padStart","StatusAnalysisView_1","Card_1","Palette_1","Hud","game","onBuildingSelect","onMachineSelect","onFunctionSelect","canvasWidth","canvasHeight","hidePalettes","status","displayInfo","showCard","machinePalette","structurePalette","structuresForPalette","functionPalette","functionsForPalette","card","showPalettes","updateDetails","rebuildPalettes","updatePalettes","updateEconomy","updateMaxPop","updateBuildingPalette","updateMachinePalette","updateFunctionPalette","builtStructures","builtMachines","machinesForPalette","builtReifiedFunctions","builtFunctions","rf","devicePlaceSize","devicePlaceCount","sg","leftSlot","rightSlot","right","theSlots","slotY","getTop","backgroundPattern","flagX","flagY","flagpoleHeight","_1","floorHeight","originSlot","pickingOrigin","maxHeight","drawShape","xoff","yoff","bezierCurveTo","halfWidth","slotHeights","heights","y1","btm","lst","slotCount","arc","floorColor","floorEdgeHeight","originX","newCursor","input","output","Hud_1","Planet_1","player_1","Construct","defaultMessage","placingFunction","firstBuilding","buildIt","startConstructing","player","prepareNextBuilding","camera","addTimer","Timer","stepTime","onActivate","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction_1","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","moveCam","direction","camMoveSpeed","dv","move","keyboard","Keys","H","Esc","W","A","S","D","onDeactivate","off","nextMissingStructureOrFunction","reqs","requiredStructuresAndFunctions","req","actualStructureNames","actualFunctionNames","actualNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","spawnFunction","anotherBuilding","assembleBuildingFromStructure","theStructure","Scene","World","colors","Cyan","Vermillion","Chartreuse","World_1","Construct_1","theWorld","construct","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([98,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { getBackgroundPattern, BackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport const deleteByValueOnce = (arr, elem) => {\r\n  let index = arr.indexOf(elem);\r\n  if (index !== -1) arr.splice(index, 1);\r\n}\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport function eachChunk(a, n) {\r\n  return a.reduce(function (result, value, index, array) {\r\n    if (index % n === 0)\r\n      result.push(array.slice(index, index + n));\r\n    return result;\r\n  }, []);\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function shuffle(arr) {\r\n  return arr.sort(() => Math.random() > 0.5 ? 1 : -1)\r\n}\r\n\r\nexport const zip = (a, b) => a.map((e, i) => [e, b[i]])\r\n\r\nexport const countOccurrences = (arr) => {\r\n  let counts = {}\r\n  arr.forEach((elem) => {\r\n    counts[elem] = counts[elem] || 0\r\n    counts[elem] += 1\r\n  })\r\n  return counts\r\n}\r\n\r\nexport function containsUniq<T>(arr: T[], testElems: T[]) {\r\n  let doesContain = false\r\n  let arrCopy = arr.slice()\r\n  if (arr.length > 0) {\r\n    let missingItem = false\r\n    testElems.forEach(testElem => {\r\n      if (arrCopy.find(e => e === testElem)) {\r\n        deleteByValueOnce(arrCopy, testElem)\r\n      } else {\r\n        missingItem = true\r\n      }\r\n    })\r\n    doesContain = !missingItem\r\n  }\r\n  return doesContain\r\n}\r\n\r\n\r\nexport function mixColors(a: Color, b: Color, factor: number = 0.5): Color {\r\n  let aFactor = factor, bFactor = (1-factor)\r\n  return new Color(\r\n    (a.r * aFactor) + (b.r * bFactor),\r\n    (a.g * aFactor) + (b.g * bFactor),\r\n    (a.b * aFactor) + (b.b * bFactor),\r\n    1\r\n  )\r\n}","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.fourth; break;\r\n        case DeviceSize.Large: sz = major.eighth + major.second; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\nimport { SmallDomeThreeView } from './SmallDomeThreeView';\r\nimport { MidDomeView } from './MidDomeView';\r\nimport { BigDomeView } from './BigDomeView';\r\nimport { SmallRoomThreeView } from './SmallRoomThreeView';\r\nimport { MediumRoomView } from './MediumRoomView';\r\nimport { LargeRoomView } from './LargeRoomView';\r\nimport { HugeRoomView } from './HugeRoomView';\r\nimport { MediumRoomThreeView } from './MediumRoomThreeView';\r\nimport { MediumSurfaceRoomView } from './MediumSurfaceRoomView';\r\n\r\n\r\nconst structureViews: { [key: string]: typeof Building } = {\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n    MediumSurfaceRoomView,\r\n}\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n\r\n    MediumSurfaceRoomView,\r\n\r\n\r\n    structureViews\r\n\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, deleteByValue, containsUniq } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock, emptyMarket, Economy, sumMarkets, equilibrium, allValues, availableCapacity } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { World } from \"../../models/World\";\r\nimport { Machine, allMachines, CommandCenter, MissionLog, StudyMachine } from \"../../models/Machine\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { EconomicValue } from \"../Hud/EconomicValue\";\r\nimport { drawRect, pathFromRect } from \"../../Painting\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0\r\n\r\n    nameLabel: Label\r\n\r\n    placed: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    spaceFunction: SpaceFunction\r\n\r\n    private devices: Device[] = []\r\n    givenName: string\r\n\r\n    private active: boolean = true\r\n    // private built: boolean = false\r\n\r\n    constructor(pos: Vector, public structure: Structure, public planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          structure.infra ? planet.color.darken(0.3) : Color.Transparent\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            if (!this.devices.some(d => d.hover)) {\r\n                this.planet.currentlyViewing = this\r\n            }\r\n        })\r\n\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED BUILDING\", { building: this })\r\n            this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.color = Color.White\r\n\r\n        if (this.structure.infra) { this.active = true }\r\n    }\r\n\r\n    poly() { return this.aabbPoly() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        // this.devices.forEach(device => device.draw(ctx, delta))\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.showLabel && this.spaceFunction) {\r\n            this.nameLabel.pos = this.pos //get getCenter().\r\n            this.nameLabel.pos.x = this.getCenter().x //ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n        }\r\n\r\n        // let debug = true;\r\n        if (Game.debugPath) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = true\r\n        if (showDevicePlaces && this.devicePlaces().length > 0 && this.devices.length < this.devicePlaces().length) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    0.1,\r\n                    Color.White,\r\n                    false,\r\n                    true\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n\r\n        let tryProduce = this.placed;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.tryProduce(this.step));\r\n        }\r\n\r\n        // this.devices.forEach(d => d.update(engine, delta))\r\n\r\n        this.step += 1\r\n    }\r\n\r\n    get name() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.name\r\n        } else {\r\n            return this.structure.name\r\n        }\r\n    }\r\n\r\n    get description() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.description\r\n        } else {\r\n            return this.structure.description\r\n        }\r\n    }\r\n\r\n    economy(emptyUnlessActive: boolean = true): Economy {\r\n        if (emptyUnlessActive && !this.isActive) {\r\n            return emptyMarket()\r\n        } else {\r\n            let machineEconomies = this.devices.map(d => d.economy)\r\n            //machine.economy)\r\n\r\n            let buildingEconomy = {\r\n                ...emptyMarket(),\r\n                Oxygen: { demand: 1, supply: 0 }, // structural demand\r\n                // Water: { demand: 0.1, supply: 0 },\r\n            }\r\n\r\n            let aggregate = [...machineEconomies, buildingEconomy]\r\n                .reduce(sumMarkets, emptyMarket())\r\n\r\n            return aggregate\r\n        }\r\n    }\r\n\r\n    private toggleActive() {\r\n        if (!this.structure.infra) {\r\n            if (this.active) {\r\n                if (this.devices.some(d => d.inUse)) { return }\r\n                let wasEquil = equilibrium(this.planet.economy)\r\n                this.active = false\r\n                if (wasEquil) {\r\n                    if (!equilibrium(this.planet.economy)) {\r\n                        this.active = true\r\n                        // return\r\n                    }\r\n                    // this.active = true\r\n                } else {\r\n                    // we weren't at equilibrium previously\r\n                    // permit it, if we don't have any supply that would go negative without us?\r\n                    // console.log(\"can we toggle?\")\r\n                    for (let value of allValues) {\r\n                        let localCap = availableCapacity(this.economy(false), value)\r\n                        let globalCap = availableCapacity(this.planet.economy, value)\r\n                        // console.log(\"value\", { value, localCap, globalCap})\r\n                        if (localCap > 0 && globalCap < 0) {\r\n                            // don't permit it to be turned off\r\n                            this.active = true\r\n                        }\r\n                    }\r\n                }\r\n            } else { // this.active is false now\r\n                let agg = [\r\n                    this.planet.economy,\r\n                    this.economy(false)\r\n                ].reduce(sumMarkets, emptyMarket())\r\n\r\n                if (equilibrium(agg)) {\r\n                    this.active = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get isActive() { return !!this.active }\r\n\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public debit(res: ResourceBlock) {\r\n        this.planet.spend(res)\r\n    }\r\n\r\n    public populate(pos: Vector, elite: boolean = false) {\r\n        this.planet.populate(pos, elite) //this.pos)\r\n    }\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected aabbPoly(): {x:number,y:number}[] {\r\n        return pathFromRect(this.aabb());\r\n        //return [\r\n        //    // bottom-left\r\n        //    { x: this.pos.x, y: this.pos.y + this.getHeight() },\r\n\r\n        //    // upper-left\r\n        //    { x: this.pos.x, y: this.pos.y },\r\n\r\n        //    // upper-right\r\n        //    { x: this.pos.x + this.getWidth(), y: this.pos.y },\r\n\r\n        //    // bottom-right\r\n        //    { x: this.pos.x + this.getWidth(), y: this.pos.y + this.getHeight() },\r\n        //];\r\n    }\r\n\r\n    protected angledRoofPoly(): {x: number, y: number}[] {\r\n        let angleStartY = 1 * (this.getHeight() / 3) - 3\r\n        let angleStartX = 20 // 1 * (this.getWidth() / 10)\r\n        return [\r\n            // bottom-left\r\n            { x: this.pos.x, y: this.pos.y + this.getHeight() },\r\n\r\n            // upper-left\r\n            { x: this.pos.x, y: this.pos.y + angleStartY },\r\n            { x: this.pos.x + angleStartX, y: this.pos.y },\r\n\r\n            // upper-right\r\n            { x: this.pos.x + this.getWidth() - angleStartX, y: this.pos.y },\r\n            { x: this.pos.x + this.getWidth(), y: this.pos.y + angleStartY },\r\n\r\n            // bottom-right\r\n            { x: this.pos.x + this.getWidth(), y: this.pos.y + this.getHeight() },\r\n        ]\r\n            \r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.placed)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (!this.active) {\r\n            clr = clr.darken(0.8)\r\n        }\r\n\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        // device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        device.pos.subEqual(this.pos) // = this.devicePlaces()[0].position\r\n        // console.log(\"DEVICE IS AT\", { pos: device.pos })\r\n        this.add(device)\r\n        this.updateFunction()\r\n        device.machine.onPlacement(device)\r\n        this.toggleActive()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices //.filter(d => d.built)\r\n    }\r\n\r\n    private updateFunction() {\r\n        let allTheMachines = [ StudyMachine, ...allMachines, CommandCenter, MissionLog ]\r\n        let machines = this.devices.map(\r\n            d => allTheMachines.find((m: typeof Machine) => d.machine instanceof m) //this.devices.some(d => d.machine instanceof m))\r\n        ) //\r\n        // debugger\r\n        console.log(\"MY MACHINES\", { machines })\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let sf = new spaceFn()\r\n\r\n            return containsUniq(\r\n              machines,\r\n              sf.machines\r\n            );\r\n        })\r\n        if (fn) {\r\n            // console.log(\"Determined building function\", { fn })\r\n            let sf = new fn()\r\n            this.spaceFunction = sf\r\n            this.nameLabel.text = sf.name\r\n        } else {\r\n            // console.warn(\"Could not identify function!\")\r\n        }\r\n    }\r\n\r\n    get backgroundPattern() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.background\r\n        } else {\r\n            return BackgroundPattern.Grid\r\n        }\r\n    }\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport const allValues: PureValue[] = [\r\n    PureValue.Power,\r\n    PureValue.Oxygen,\r\n    PureValue.Water,\r\n    PureValue.Shelter,\r\n    PureValue.Hope,\r\n    PureValue.Joy,\r\n    PureValue.Wisdom,\r\n    PureValue.Wealth,\r\n    PureValue.Beauty,\r\n    PureValue.Wonder\r\n]\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return Math.floor(market[value].supply - market[value].demand)\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply,\r\n            demand,\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport const equilibrium: (e: Economy) => boolean = (e) => {\r\n    return allValues.every(value => availableCapacity(e, value) >= 0)\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Biomass = 'Biomass',\r\n    Ore = 'Ore',\r\n    Idea = 'Idea',\r\n\r\n    // derived\r\n    Meal = 'Meal',\r\n    Data = 'Data',\r\n    Mineral = 'Mineral',\r\n    Bioplasma = 'Bioplasma',\r\n\r\n    // higher-order\r\n    Alloy = \"Alloy\",\r\n    Algorithm = \"Algorithm\",\r\n\r\n    // superb\r\n    Argent = \"Argent\",\r\n    Aurum = \"Aurum\",\r\n\r\n    // hyperbolic\r\n    Omnium = \"Omnium\",\r\n}\r\n\r\nlet cStep = 0.3\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Biomass: Color.Green,\r\n    Data: Color.Blue.lighten(cStep),\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(cStep),\r\n    Idea: Color.Blue.lighten(cStep*2), //.desaturate(cStep),\r\n    Ore: Color.Red.darken(cStep),\r\n\r\n    Bioplasma: Color.Viridian,\r\n\r\n    Alloy: Color.DarkGray.darken(cStep), //(cStep),\r\n    Algorithm: Color.Blue.darken(cStep), //.desaturate(cStep),\r\n\r\n    Argent: Color.Gray.lighten(cStep),\r\n    Aurum: Color.Orange.lighten(cStep),\r\n\r\n    Omnium: Color.White,\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    return baseColor.desaturate(0.1) //.lighten(0.1) //.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Color, FontStyle, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { MechanicalOperation, mechanicalOperations } from \"./MechanicalOperation\";\r\nimport { shuffle, range } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\nconst plant = require('../images/houseplant-plain.svg')\r\nconst workstation = require('../images/workstation-plain.svg')\r\n\r\nconst console = require('../images/console-plain.svg')\r\nconst consolePurple = require('../images/console-purple-plain.svg')\r\nconst consoleGreen = require('../images/console-green-plain.svg')\r\nconst consoleRed = require('../images/console-red-plain.svg')\r\nconst megaconsole = require('../images/mega-console-plain.svg')\r\n\r\nconst fabricator = require('../images/fabricator-plain.svg')\r\n\r\nconst couch = require('../images/couch-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n    plant,\r\n    workstation,\r\n\r\n    console,\r\n    consolePurple,\r\n    consoleGreen,\r\n    consoleRed,\r\n    megaconsole,\r\n\r\n    fabricator,\r\n\r\n    couch,\r\n}\r\n\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nlet { store, generate, recipe, spawn, accelerateTime } = mechanicalOperations\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n\r\n    cost: ResourceBlock[] = [ResourceBlock.Mineral]\r\n\r\n    size: DeviceSize = DeviceSize.Small\r\n    operation: MechanicalOperation = { type: 'noop' }\r\n    image = images.vat\r\n    prereqs: (typeof Machine)[] = []\r\n    economy: Economy = emptyMarket()\r\n    forDome: boolean = false\r\n    hide: boolean = false\r\n\r\n    capacity: boolean\r\n\r\n\r\n    concretize(): Machine { return this; } \r\n\r\n    onPlacement(device: Device) {\r\n        // ...whatever we need to script here?\r\n    }\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command Console'\r\n    description = 'commander, we need your help'\r\n    operation = store(\r\n        [ResourceBlock.Mineral], //,ResourceBlock.Biomass],\r\n        24\r\n    )\r\n    image = images.megaconsole\r\n    size = DeviceSize.Medium\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 6, demand: 0 },\r\n        Oxygen: { supply: 16, demand: 0 },\r\n        Water: { supply: 1, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 },\r\n        Shelter: { supply: 1, demand: 0}\r\n    }\r\n\r\n    onPlacement(device: Device) {\r\n        device.built = true\r\n        for (let i in range(20)) {\r\n            device.produceResource(ResourceBlock.Mineral)\r\n        }\r\n        let { building } = device\r\n        building.populate(device.pos.add(building.pos), true)\r\n    }\r\n}\r\n\r\nexport class MissionLog extends Machine {\r\n    name = 'Mission Log'\r\n    description = 'gather data'\r\n    operation = store(\r\n        [ResourceBlock.Data],\r\n        8\r\n    )\r\n    image = images.consolePurple\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n//export class Energon extends Machine {\r\n//    name = 'Energon'\r\n//    description = 'food paste'\r\n//}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 6, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 10, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H2O Condenser'\r\n    description = 'have a drink'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 6, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n/// small subsurface\r\n\r\nexport class StudyMachine extends Machine {\r\n    operation = recipe(\r\n        [ ResourceBlock.Idea, ResourceBlock.Idea, ResourceBlock.Idea ],\r\n        ResourceBlock.Data\r\n    )\r\n    color = Blue\r\n    concretize(): Machine { return new (shuffle([Workstation, Desk])[0])() }\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    description = 'get to work'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    description = 'hackety hack'\r\n    prereqs = [ Bookshelf ]\r\n    image = images.workstation\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Couch extends Machine {\r\n    name = 'Couch'\r\n    description = 'take it easy'\r\n    prereqs = []\r\n    image = images.couch\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Joy: { supply: 0.1, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    operation = generate(ResourceBlock.Idea)\r\n    image = images.bookshelf\r\n    prereqs = [ ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    operation = store([ResourceBlock.Meal], 6)\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    operation = recipe(\r\n        [ResourceBlock.Biomass, ResourceBlock.Biomass],\r\n        ResourceBlock.Meal\r\n    )\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    description = 'sweet dreams'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    description = 'so nice'\r\n    prereqs = [ Bed ]\r\n    // produces = ResourceBlock.Food\r\n    cost = [ ResourceBlock.Biomass ]\r\n    operation = generate(ResourceBlock.Biomass, 1)\r\n    color = Green\r\n    image = images.plant\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Water: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\nexport class PersonnelRegistry extends Machine {\r\n    name = 'Personnel Registry'\r\n    description = 'track everybody'\r\n    prereqs = [ CloningVat ]\r\n    operation = store([ResourceBlock.Data], 4)\r\n    color = Yellow\r\n    image = images.console\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Wisdom: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class OrientationConsole extends Machine {\r\n    name = 'Orientation Console'\r\n    description = 'welcome to the colony'\r\n    prereqs = [CloningVat]\r\n    operation = generate(ResourceBlock.Data, 1)\r\n    image = images.consoleRed\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'we all grow'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = spawn()\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class DissolutionVat extends Machine {\r\n    name = 'Dissolution Vat'\r\n    description = 'back to basics'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = recipe(\r\n        [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n        ResourceBlock.Bioplasma\r\n    )\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [PlasmaBank]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class PlasmaBank extends Machine {\r\n    name = 'Bioplasm Bank'\r\n    description = 'hold on'\r\n    operation = store([ ResourceBlock.Bioplasma ])\r\n    prereqs = [AlgaeVat]\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    description = 'you made that'\r\n    operation = recipe(\r\n        [ResourceBlock.Mineral, ResourceBlock.Mineral],\r\n         ResourceBlock.Alloy\r\n    )\r\n    size = DeviceSize.Small\r\n    color = Red\r\n    prereqs = [Workstation]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n    image = images.fabricator\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    description = 'where there is a will'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class LifeSciencesConsole extends Machine {\r\n    name = 'Life Sciences Console'\r\n    description = 'mind and body together'\r\n    operation = store([ResourceBlock.Biomass, ResourceBlock.Data], 5)\r\n    prereqs = [Houseplant, Botany]\r\n    color = Green\r\n    image = images.consoleGreen\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.2 },\r\n    }\r\n}\r\n\r\n// medium\r\n\r\nexport class MetalStorage extends Machine {\r\n    name = 'Metal Storage'\r\n    description = 'contain minerals and alloys?'\r\n    operation = store([ResourceBlock.Mineral, ResourceBlock.Alloy], 8)\r\n    prereqs = [Bookshelf]\r\n    color = Red\r\n    size = DeviceSize.Medium\r\n}\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    operation = store([ResourceBlock.Data, ResourceBlock.Algorithm], 10)\r\n    image = images.server\r\n    prereqs = [Bookshelf, Workstation]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   operation = generate(ResourceBlock.Biomass)\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Oxygen: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   description = 'home on the plains'\r\n   operation = recipe(\r\n       [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n       ResourceBlock.Meal\r\n   )\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    description = 'arbor around the clock'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    description = 'plant lab'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n\r\nexport class MineralProcessor extends Machine {\r\n    name = 'Mineral Processor'\r\n    description = 'wheat from the chaff'\r\n    operation = recipe(\r\n        [ResourceBlock.Ore, ResourceBlock.Ore, ResourceBlock.Ore],\r\n         ResourceBlock.Mineral\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation, Fabricator]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class ThinkingFountain extends Machine {\r\n    name = 'Thinking Fountain'\r\n    description = 'slowly growing'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Mainframe, Megafabricator, MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = generate(ResourceBlock.Aurum, 8)\r\n    cost = [ResourceBlock.Aurum]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class SilverForest extends Machine {\r\n    name = 'Silver Forest'\r\n    description = 'immense serenity'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Megafabricator, Mainframe ]\r\n    color = Color.fromHex('c0c0c0')\r\n    operation = store([ResourceBlock.Argent], 12)\r\n    cost = [ResourceBlock.Alloy, ResourceBlock.Algorithm]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Beauty: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n    forDome = true\r\n}\r\n\r\nexport class TimeCrystal extends Machine {\r\n    name = 'Time Crystal'\r\n    description = 'xlr8'\r\n    size = DeviceSize.Medium\r\n    color = Color.fromHex('e5e4e2')\r\n    operation = accelerateTime()\r\n    cost = [ResourceBlock.Omnium]\r\n    prereqs = [ Megafabricator, SilverForest ]\r\n}\r\n\r\nexport class HoloProjector extends Machine {\r\n    name = 'Holo Projector'\r\n    description = 'whatever your heart desires'\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    operation = generate(ResourceBlock.Data, 3)\r\n    cost = [ResourceBlock.Algorithm, ResourceBlock.Mineral]\r\n    prereqs = [ Mainframe ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 3, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class SacredGrove extends Machine {\r\n    name = 'Sacred Grove'\r\n    description = 'where the furies play'\r\n    size = DeviceSize.Medium\r\n    forDome = true\r\n    cost = [ ResourceBlock.Omnium ]\r\n    prereqs = [ AtomicCompiler ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 4, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class AtomicCompiler extends Machine {\r\n    name = 'Atomic Compiler'\r\n    description = 'super position'\r\n    operation = recipe(\r\n        [ ResourceBlock.Aurum, ResourceBlock.Argent ],\r\n        ResourceBlock.Omnium\r\n    )\r\n    cost = [ ResourceBlock.Argent, ResourceBlock.Algorithm ]\r\n    prereqs = [ ThinkingFountain, SilverForest ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n}\r\n\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    description = 'ore away'\r\n    operation = generate(ResourceBlock.Ore)\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    operation = recipe(\r\n        [ResourceBlock.Alloy, ResourceBlock.Algorithm],\r\n        ResourceBlock.Argent\r\n    )\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class MolecularEngine extends Machine {\r\n    name = 'Molecular Engine'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Megafabricator ]\r\n    color = Violet\r\n    operation = recipe(\r\n        [ResourceBlock.Bioplasma, ResourceBlock.Algorithm],\r\n        ResourceBlock.Aurum\r\n    )\r\n    image = images.megaconsole\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n        Water: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Mainframe extends Machine {\r\n    name = 'Mainframe'\r\n    size = DeviceSize.Large\r\n    color = Blue\r\n    prereqs = [ResearchServer]\r\n    cost = [ ResourceBlock.Mineral, ResourceBlock.Mineral ]\r\n    operation = recipe(\r\n        [ ResourceBlock.Data, ResourceBlock.Data ],\r\n        ResourceBlock.Algorithm\r\n    )\r\n    image = images.server\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 6 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Nature Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    operation = generate(ResourceBlock.Biomass, 12)\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n        Oxygen: { supply: 12, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicPool extends Machine {\r\n    name = 'Logic Pool'\r\n    size = DeviceSize.Large\r\n    prereqs = [ MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = store([ResourceBlock.Aurum], 12)\r\n    cost = [ResourceBlock.Algorithm, ResourceBlock.Bioplasma]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class Cathedral extends Machine {\r\n    name = 'Cathedral'\r\n    description = 'first ultrahumanist'\r\n    size = DeviceSize.Large\r\n    prereqs = [ SacredGrove ]\r\n}\r\n\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n\r\n    MineralProcessor,\r\n    PlasmaBank,\r\n    DissolutionVat,\r\n    MetalStorage,\r\n    Mainframe,\r\n\r\n    PersonnelRegistry,\r\n    MolecularEngine,\r\n    ThinkingFountain,\r\n    SilverForest,\r\n\r\n    OrientationConsole,\r\n    LifeSciencesConsole,\r\n\r\n    TimeCrystal,\r\n    LogicPool,\r\n    HoloProjector,\r\n    Cathedral,\r\n    SacredGrove,\r\n    AtomicCompiler,\r\n\r\n    Couch,\r\n]","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { BackgroundPattern, getBackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\ntype PaintingPath = { x: number, y: number }[]\r\n\r\nexport function pathFromRect(rect: Rectangle): PaintingPath {\r\n  let pos = { x: rect.x, y: rect.y }\r\n  let path = [\r\n            // bottom-left\r\n            { x: pos.x, y: pos.y + rect.height }, // this.getHeight() },\r\n\r\n            // upper-left\r\n            { x: pos.x, y: pos.y },\r\n\r\n            // upper-right\r\n            { x: pos.x + rect.width, y: pos.y },\r\n\r\n            // bottom-right\r\n            { x: pos.x + rect.width, y: pos.y + rect.height },\r\n        ];\r\n\r\n  return path\r\n}\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, clr: Color = Color.White, lineWidth: number = 1) {\r\n  let c = clr.clone()\r\n  // c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawPatternedRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  if (gridPattern) {\r\n    drawPatternedPoly(ctx, pathFromRect(rect), pattern)\r\n    // let { x, y, width, height } = rect;\r\n    // ctx.fillStyle = gridPattern\r\n    // ctx.fillRect(x,y,width,height)\r\n\r\n    //ctx.lineWidth = 0\r\n    //ctx.setLineDash([])\r\n    //ctx.strokeStyle = Color.White.toRGBA()\r\n    //ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawPatternedPoly(\r\n  ctx: CanvasRenderingContext2D,\r\n  path: {x:number, y:number}[],\r\n  // rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  if (gridPattern) {\r\n    ctx.save()\r\n    ctx.translate(path[0].x, path[0].y)\r\n    // ctx.moveTo(0, 0)\r\n    ctx.beginPath()\r\n    ctx.moveTo(0,0) //path[0].x, path[0].y)\r\n    path.forEach(pt => ctx.lineTo(pt.x - path[0].x, pt.y-path[0].y))\r\n    ctx.lineTo(0,0) // path[0].x, path[0].y)\r\n    ctx.closePath()\r\n    // let { x, y, width, height } = rect;\r\n    ctx.fillStyle = gridPattern\r\n    ctx.fill()\r\n    ctx.restore()\r\n    // ctx.fillRect(x,y,width,height)\r\n\r\n    // ctx.lineWidth = 2\r\n    // ctx.setLineDash([])\r\n    // ctx.strokeStyle = Color.White.toRGBA()\r\n    // ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true,\r\n  dashed: boolean = false\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  if (filled) {\r\n    let main = color.clone();\r\n    // main.a = 1\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White.clone();\r\n    ctx.strokeStyle = edge.toRGBA();\r\n    ctx.lineWidth=edgeWidth\r\n    if (dashed) { ctx.setLineDash([5, 10]) }\r\n    else { ctx.setLineDash([]) }\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}\r\n\r\nexport function drawPoly(\r\n  ctx: CanvasRenderingContext2D,\r\n  path: {x:number, y:number}[],\r\n  color: Color\r\n  // rect: Rectangle,\r\n  // pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  // const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  // if (gridPattern) {\r\n    ctx.beginPath()\r\n    ctx.moveTo(path[0].x, path[0].y)\r\n    path.forEach(pt => ctx.lineTo(pt.x, pt.y))\r\n    ctx.lineTo(path[0].x, path[0].y)\r\n    ctx.closePath()\r\n    // let { x, y, width, height } = rect;\r\n    ctx.fillStyle = color.fillStyle()\r\n    ctx.fill()\r\n    // ctx.fillRect(x,y,width,height)\r\n\r\n    // ctx.lineWidth = 2\r\n    // ctx.setLineDash([])\r\n    // ctx.strokeStyle = Color.White.toRGBA()\r\n    // ctx.strokeRect(x,y,width,height)\r\n  // }\r\n}\r\n\r\nexport function drawStar(ctx, cx, cy, outerRadius=3.6, innerRadius=1.4, spikes=5, ) {\r\n    var rot = Math.PI / 2 * 3;\r\n    var x = cx;\r\n    var y = cy;\r\n    var step = Math.PI / spikes;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(cx, cy - outerRadius)\r\n    for (let i = 0; i < spikes; i++) {\r\n        x = cx + Math.cos(rot) * outerRadius;\r\n        y = cy + Math.sin(rot) * outerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n\r\n        x = cx + Math.cos(rot) * innerRadius;\r\n        y = cy + Math.sin(rot) * innerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n    }\r\n    ctx.lineTo(cx, cy - outerRadius);\r\n    ctx.closePath();\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = 'yellow';\r\n    ctx.stroke();\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.fill();\r\n}","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    color: Color = Color.Gray\r\n    infra: boolean = false\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n\r\n    hide: boolean = false\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MediumSurfaceRoom ],\r\n        [Orientation.Right]: [  Dome, MediumSurfaceRoom ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.seventh\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n    infra = true\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 20 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n    infra = true\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    description: string = 'Biome sweet biome';\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.sixth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n\r\n    prereqs = [\r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    height = major.fifth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    height = major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 2 * major.eighth\r\n    machines = midBelow\r\n}\r\n\r\nexport class MediumRoomThree extends CommonArea {\r\n    name = 'Mid Room (3)'\r\n    prereqs = [ MediumRoom ]\r\n    view = 'MediumRoomThreeView'\r\n    width = 3 * major.eighth\r\n    height = major.eighth\r\n\r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 4 * major.eighth\r\n    height = 2*major.eighth\r\n    machines = largeBelow\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class MediumSurfaceRoom extends Dome {\r\n    name = 'Mid Surf Bldg'\r\n    description = 'home away from home';\r\n\r\n    view: string = 'MediumSurfaceRoomView';\r\n\r\n    width: number = 8 * major.eighth\r\n    height: number = 2 * major.third\r\n\r\n    zoom = 0.1\r\n\r\n    prereqs = [ SmallDome ]\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = midBelow\r\n\r\n    hide = true // need another one which cares about connecting to roads\r\n}\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = major.eighth\r\n    height = major.fourth\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 3 * major.fifth\r\n    height = 2*major.fifth\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 3 * major.seventh\r\n    height = 2 * major.seventh\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n\r\n}\r\n\r\n//////\r\n\r\n// export class MissionControl extends Structure {\r\n//     name: string = 'Mission Control';\r\n//     description: string = 'Keeping everything on track';\r\n//     view: string = 'MissionControlView';\r\n//     width: number = 6 * major.eighth\r\n//     height: number = 1 * major.sixth\r\n//     zoom = 0.1\r\n//     connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n//         [Orientation.Left]: [ SurfaceRoad ],\r\n//         [Orientation.Right]: [ SurfaceRoad ],\r\n//         [Orientation.Up]: [ MainTunnel ],\r\n//         [Orientation.Down]: [ MainTunnel ],\r\n//     }\r\n\r\n//     machines = [ CommandCenter ]\r\n// }\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n        MediumSurfaceRoom,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        MediumRoomThree,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine, Mainframe, CommandCenter, MissionLog, Botany, OrientationConsole, PersonnelRegistry, MineralProcessor, MiningDrill, HoloProjector, TimeCrystal } from './Machine';\r\nimport { Color } from 'excalibur';\r\nimport { Structure, MediumSurfaceRoom } from './Structure';\r\nimport { BackgroundPattern } from '../actors/Building/BackgroundPatterns';\r\n\r\nexport class SpaceFunction {\r\n     name: string = '(generic)'\r\n     description: string = '(generic description)'\r\n     machines: (typeof Machine)[] = []\r\n     color: Color = Color.Gray\r\n\r\n     prereqs: (typeof SpaceFunction)[] =  [] \r\n\r\n     structure: typeof Structure = null\r\n     hide: boolean = false\r\n     background: BackgroundPattern = BackgroundPattern.Beige\r\n\r\n     bonuses: {\r\n          capacity: number, // every store/generator gets this??\r\n          workSpeed: number, // 2 should double work speed (dur *= 1/multiplier)\r\n     } = {\r\n          capacity: 0, // boost cap by one\r\n          workSpeed: 1.00 // 20% bonus to work speed\r\n     }\r\n}\r\n\r\nexport class MissionControl extends SpaceFunction {\r\n     hide = true\r\n     name = 'Mission Control'\r\n     description = 'keeping everything on track'\r\n     structure = MediumSurfaceRoom\r\n     prereqs = [] //ComputerCore, Factory, Farm ]\r\n     machines = [ CommandCenter, MissionLog ]\r\n     background = BackgroundPattern.Window\r\n}\r\n\r\n\r\nexport class LivingQuarters extends SpaceFunction {\r\n     name = 'Living Quarters'\r\n     description = 'good night'\r\n     machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n     name = 'Barracks'\r\n     description = 'sleep tight'\r\n     machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nexport class Kitchen extends SpaceFunction {\r\n     name = 'Kitchen'\r\n     description = 'stay together'\r\n     machines = [ Stove, Fridge ]\r\n     bonuses = {\r\n          capacity: 2,\r\n          workSpeed: 1.1\r\n     }\r\n     background = BackgroundPattern.Checker\r\n}\r\n\r\nexport class LifeSupportPod extends SpaceFunction {\r\n     name = 'Life Support'\r\n     description = 'keep it going'\r\n     machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n     name = 'Retreat'\r\n     description = 'take it easy'\r\n     machines = [ Cabin, Cabin ]\r\n}\r\n\r\nexport class CloneMatrix extends SpaceFunction {\r\n     name = 'Clone Matrix'\r\n     description = 'clone home'\r\n     machines = [ CloningVat, CloningVat ]\r\n}\r\n\r\nexport class CloneReception extends SpaceFunction {\r\n     name = 'Clone Reception'\r\n     description = 'welcome clone'\r\n     machines = [ CloningVat, OrientationConsole, PersonnelRegistry ]\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n     name = 'Reading Room'\r\n     description = 'butterflies in the sky'\r\n     machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nexport class Library extends SpaceFunction {\r\n     name = 'Library'\r\n     description = 'take a look'\r\n     machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n     background = BackgroundPattern.Books\r\n}\r\n\r\nexport class Study extends SpaceFunction {\r\n     name = 'Study'\r\n     description = 'plan it out'\r\n     machines = [ StudyMachine, Bookshelf ]\r\n     background = BackgroundPattern.Wood\r\n}\r\n\r\nclass ComputerLab extends SpaceFunction {\r\n     name = 'Computer Lab'\r\n     description = 'make it happen'\r\n     machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nexport class Archive extends SpaceFunction {\r\n     name = 'Archive'\r\n     description = 'write it down'\r\n     machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n     name = 'Arboretum'\r\n     description = 'walk it out'\r\n     machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n     name = 'Algae Farm'\r\n     description = 'make do'\r\n     machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nexport class SolarArray extends SpaceFunction {\r\n     name = 'Solar Array'\r\n     description = 'warm up'\r\n     machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nexport class Workshop extends SpaceFunction {\r\n     name = 'Workshop'\r\n     description = 'take form'\r\n     machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\nclass Nursery extends SpaceFunction {\r\n     name = 'Nursery'\r\n     description = 'quiet please'\r\n     machines = [ Houseplant, Houseplant, Houseplant ]\r\n     background = BackgroundPattern.Leafy\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n     name = 'Farm'\r\n     description = 'food for the masses'\r\n     machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n     name = 'Factory'\r\n     description = 'production lines'\r\n     machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\n\r\nexport class ComputerCore extends SpaceFunction {\r\n     name = 'Computer Core'\r\n     description = 'let us calculate'\r\n     machines = [ Mainframe, Mainframe ]\r\n     background = BackgroundPattern.Tech\r\n}\r\n\r\nexport class LifeSciencesLab extends SpaceFunction {\r\n     name = 'Life Sciences Lab'\r\n     description = 'where do i come from'\r\n     machines = [ Botany, Botany ]\r\n}\r\n\r\nexport class Refinery extends SpaceFunction {\r\n     name = 'Refinery'\r\n     description = 'separation'\r\n     machines = [ MineralProcessor ]\r\n}\r\n\r\nexport class Mine extends SpaceFunction {\r\n     name = 'Mine'\r\n     description = 'ore from the stone'\r\n     machines = [ MiningDrill ]\r\n}\r\n\r\nexport class HoloMatrix extends SpaceFunction {\r\n     name = 'Hologram Matrix'\r\n     description = 'dream it'\r\n     machines = [ HoloProjector, HoloProjector ]\r\n}\r\n\r\nexport class TimeChamber extends SpaceFunction {\r\n     name = 'Time Chamber'\r\n     description = 'believe it'\r\n     machines = [ TimeCrystal, TimeCrystal ]\r\n}\r\n\r\n// export class DreamMatrix extends \r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    ComputerLab,\r\n\r\n    ComputerCore,\r\n\r\n    MissionControl,\r\n    LifeSciencesLab,\r\n\r\n    CloneReception,\r\n    \r\n    Refinery,\r\n    Mine,\r\n    HoloMatrix,\r\n    TimeChamber,\r\n]","import { Engine, DisplayMode, Loader, Timer, Color } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n  static citizenSpeed: number = 150\r\n  static debugPath: boolean = false\r\n  static startHour: number = 8;\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: Color.Black //world.skyColor\r\n    });\r\n  }\r\n\r\n  public start() {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n\r\n    return super.start(loader).then(() => {\r\n      console.log(\"Osiris running.\")\r\n    });\r\n  }\r\n}","import { Citizen } from \"../actors/Citizen\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { sleep } from \"../Util\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Recipe, MechanicalOperation } from \"../models/MechanicalOperation\";\r\n\r\nexport abstract class Strategy {\r\n    private sleepInterval: number = 250\r\n    protected isActive: boolean = false;\r\n    constructor(protected pawn: Citizen) { }\r\n\r\n    protected abstract async apply();\r\n    abstract canApply(): boolean;\r\n\r\n    protected get planet(): Planet { return this.pawn.currentPlanet; }\r\n    protected get devices(): Device[] { return this.planet.colony.findPoweredDevices(); }\r\n    protected get operations(): MechanicalOperation[] { return this.devices.map(d => d.operation); }\r\n    protected get recipes(): Recipe[] {\r\n        let recipes: Recipe[] = [];\r\n        this.operations.forEach(op => {\r\n            if (op.type === 'recipe') {\r\n                recipes.push(op);\r\n            }\r\n        });\r\n        return recipes;\r\n    }\r\n\r\n\r\n    async attempt(): Promise<void> {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n        if (!this.isActive) {\r\n            this.isActive = true\r\n            // note apply will need to set this.isActive around its critical section\r\n            await this.apply();\r\n            this.isActive = false\r\n        }\r\n\r\n        await this.pause()\r\n        // setInterval(() => { this.attempt() }, this.sleepInterval)\r\n    }\r\n\r\n    protected async pause() {\r\n        await sleep(this.sleepInterval)\r\n    }\r\n\r\n    protected async gatherBlock(res: ResourceBlock): Promise<boolean> {\r\n        console.debug(\"GATHER BLOCK\", { res })\r\n        let gathered = false\r\n        let generatesDesiredBlock = (d: Device) => (d.operation.type === 'generator') &&\r\n            d.product.some(stored => res === stored) //&& !d.inUse\r\n        let gen: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], generatesDesiredBlock)\r\n\r\n        let storesDesiredBlock = (d: Device) => (d.operation.type === 'store') &&\r\n              d.product.some(stored => res === stored) //&& !d.inUse\r\n        let store: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n\r\n        let device: Device = gen || store\r\n\r\n        if (device) {\r\n            // device.inUse = true\r\n            console.debug(\"Found device to gather, visting...\")\r\n            await this.visitDevice(device)\r\n\r\n            if (device.inUse) {\r\n                // at least wait a bit and try again?\r\n                let waitTimes = 0\r\n                while (device.inUse) {\r\n                    console.warn(\"waiting for device to be ready!\")\r\n                    await sleep(5000) //this.pause()\r\n                    if (waitTimes++ > 10) {\r\n                        return false \r\n                    }\r\n                }\r\n            }\r\n\r\n            console.debug(\"Attempt to interact with device...\")\r\n            if (await device.interact(this.pawn, retrieveResource(res))) {\r\n                console.debug(\"Interacted successfully!\")\r\n                gathered = true\r\n            }\r\n        } else {\r\n            console.warn(\"Didn't gather...\")\r\n            // don't work sub-recipes??\r\n            // let recipe = this.recipes.find(recipe => recipe.produces === res);\r\n            // if (recipe) {\r\n                // gathered = await this.workRecipe(recipe);\r\n                // gathered = true\r\n            // }\r\n        }\r\n\r\n        return gathered\r\n    }\r\n\r\n    protected async visitDevice(device: Device) {\r\n        await this.pawn.visit(device)\r\n    }\r\n\r\n\r\n    protected async workRecipe(recipe: Recipe): Promise<boolean> {\r\n        console.debug(\"Working recipe\", { product: recipe.produces })\r\n        let knowsRecipe = (d: Device) => d.operation === recipe && !d.reserved\r\n        let maker = this.planet.colony.closestDeviceByType(this.pawn.pos, [], knowsRecipe)\r\n        let made = false\r\n        if (maker) {\r\n            maker.reserved = true\r\n            // maker.inUse = true\r\n            if (await this.gatherIngredients(recipe.consumes)) {\r\n                await this.visitDevice(maker)\r\n                if (await this.performRecipeTask(maker, recipe)) {\r\n                    made = true\r\n                }\r\n            }\r\n            maker.reserved = false\r\n            // maker.inUse = false\r\n        }\r\n        // await this.pause()\r\n        // await this.workRecipe(recipe);\r\n        return made\r\n    }\r\n\r\n    protected async gatherIngredients(blocks: ResourceBlock[]): Promise<boolean> {\r\n        if (!this.pawn.isCarryingUnique(blocks)) {\r\n            console.debug(\"Gathering blocks...\")\r\n            for (let ingredient of blocks) {\r\n                console.debug(\"attempting to gather\", { ingredient })\r\n                let tries = 0\r\n                let gathered = false\r\n                while (!gathered && tries < 20) {\r\n                    tries += 1\r\n                    if (await this.gatherBlock(ingredient)) {\r\n                        gathered = true\r\n                    } else {\r\n                        await this.pause()\r\n                    }\r\n                }\r\n\r\n                if (!gathered) {\r\n                    console.warn(\"couldn't gather one of the ingredients!!\")\r\n                    return false\r\n                }\r\n                //else {\r\n                //    console.warn(\"didn't gather it!\")\r\n                //    return false\r\n                //}\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    protected async performRecipeTask(maker: Device, recipe: Recipe, timesToAttempt: number = 5) {\r\n        console.debug(\"Try to perform recipe task...\", { produces: recipe.produces })\r\n        let worked = await maker.interact(this.pawn, { type: 'work', recipe })\r\n        if (!worked) {\r\n            // await this.pause()\r\n            console.warn(\"waiting for machine to become available...\")\r\n            for (let i = 0; i < timesToAttempt; i ++) {\r\n                await this.pause()\r\n                if (await this.performRecipeTask(maker, recipe)) {\r\n                    worked = true\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return worked\r\n    }\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor, emptyMarket } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\nimport { Recipe, ResourceStorage, MechanicalOperation, ResourceGenerator } from \"../models/MechanicalOperation\";\r\nimport { range, deleteByValueOnce } from \"../Util\";\r\nimport { drawRect } from \"../Painting\";\r\nimport { InteractionRequest } from \"../values/InteractionRequest\";\r\n\r\nexport class Device extends Actor {\r\n    // constructionMaterials: ResourceBlock[] = []\r\n\r\n    // could also use for storage?\r\n    product: ResourceBlock[] = []\r\n    nameLabel: Label\r\n    image: any\r\n    building: Building\r\n    inUse: boolean = false\r\n    hover: boolean = false\r\n\r\n    imageLoaded: boolean = false\r\n\r\n    built: boolean = false\r\n    reserved: boolean = false\r\n\r\n    constructor(\r\n        public machine: Machine,\r\n        initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = () => { this.imageLoaded = true }\r\n        this.image.src = machine.image\r\n\r\n        this.on('pointerenter', () => {\r\n            // console.log(\"HOVER ON\", { device: this })\r\n            this.hover = true\r\n            if (this.building) {\r\n                // setInterval(() => {\r\n                this.building.planet.currentlyViewing = this\r\n                // }, 75)\r\n            }\r\n        })\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED DEVICE\", { device: this })\r\n            // this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n            if (this.building) {\r\n                this.building.planet.currentlyViewing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    get imageX() { return this.pos.x - this.getWidth() / 2 }\r\n    get imageY() { return this.pos.y - this.getHeight() / 2 - 10 }\r\n\r\n    get economy() { return this.built ? this.machine.economy : emptyMarket() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (this.imageLoaded) {\r\n            if (!this.built) { ctx.globalAlpha = 0.5 }\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.imageX,\r\n                this.imageY,\r\n\r\n                this.getWidth(),\r\n                this.getHeight()\r\n            )\r\n            if (!this.built) { ctx.globalAlpha = 1.0 }\r\n\r\n            if (this.hover) {\r\n                let c = Color.White.clone()\r\n                c.a = 0.6\r\n                drawRect(\r\n                    ctx,\r\n                    { x: this.imageX, y: this.imageY, width: this.getWidth(), height: this.getHeight() },\r\n                    0,\r\n                    c\r\n                )\r\n            }\r\n        }\r\n\r\n        let iv = new Vector(this.imageX, this.imageY)\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = iv\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let { x: bx, y: by } = iv\r\n        let blockSize = 5\r\n        let yOff = this.nameLabel.fontSize\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).toRGBA()\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize + yOff, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get name() { return this.machine.name }\r\n    get description() { return this.machine.description }\r\n    get size() { return this.machine.size }\r\n    get operation() { return this.machine.operation }\r\n\r\n    async assemble(citizen: Citizen) {\r\n        if (citizen.isCarryingUnique(this.machine.cost)) {\r\n            for (let res of this.machine.cost) {\r\n                await citizen.progressBar(1000)\r\n                citizen.drop(res)\r\n            }\r\n            this.built = true\r\n        }\r\n    }\r\n\r\n    async interact(citizen: Citizen, request: InteractionRequest): Promise<boolean> {\r\n        if (this.inUse || !this.built) {\r\n            return false\r\n        }\r\n\r\n        let worked = false\r\n        let op = this.operation\r\n        if (op.type === 'recipe' && request.type === 'work') {\r\n            let recipe: Recipe = op\r\n            // do we have all the things?\r\n            if (citizen.carrying.some(it => recipe.consumes.includes(it))) {\r\n                this.inUse = true\r\n                if (citizen.isCarryingUnique(recipe.consumes)) {\r\n                    recipe.consumes.forEach(consumed => citizen.drop(consumed))\r\n                    let workTime = this.getEffectiveWorkTime(recipe)\r\n                    await citizen.progressBar(workTime) // recipe.workTime)\r\n                    citizen.carry(recipe.produces)\r\n\r\n                    worked = true\r\n                } else {\r\n                    console.warn(\"not carrying all requirements?\", { requires: recipe.consumes, has: citizen.carrying })\r\n                }\r\n                this.inUse = false\r\n            }\r\n        } else if (op.type === 'store') {\r\n            // accept it! (whatever you have that matches...?)\r\n            let store: ResourceStorage = op\r\n            if (request && request.type === 'retrieve') { // assume dispense request for now?\r\n                this.inUse = true\r\n                worked = this.dispense(citizen, request)\r\n                if (worked) {\r\n                    await citizen.progressBar(500)\r\n                }\r\n                this.inUse = false\r\n            } else if (request && request.type === 'store' &&\r\n                citizen.carrying.some(it => store.stores.includes(it))) { // maybe trying to store?\r\n                if (this.product.length < this.getEffectiveOperationalCapacity(store)) { // store.capacity) {\r\n                    let res = null\r\n                    if (store.stores.some(stored => { res = citizen.drop(stored); return res })) {\r\n                        if (res) {\r\n                            this.produceResource(res)\r\n                            // this.product.push(res)\r\n                            // this.building.redeem(res)\r\n                            worked = true\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.warn(\"no capacity in this store!!\")\r\n                    worked = false\r\n                }\r\n            }\r\n        } else if (op.type === 'generator') {\r\n            this.inUse = true\r\n            worked = this.dispense(citizen, request)\r\n            if (worked) {\r\n                await citizen.progressBar(500)\r\n            }\r\n            this.inUse = false\r\n        }\r\n\r\n        return worked\r\n    }\r\n\r\n    getEffectiveOperationalCapacity(op: ResourceGenerator | ResourceStorage) {\r\n        let bonus = this.building.spaceFunction\r\n        ? this.building.spaceFunction.bonuses.capacity \r\n        : 0\r\n        return op.capacity + bonus\r\n    }\r\n\r\n    getEffectiveWorkTime(op: Recipe) {\r\n        let bonus = this.building.spaceFunction \r\n         ? this.building.spaceFunction.bonuses.workSpeed\r\n         : 1\r\n\r\n        return Math.round(op.workTime * (1/bonus))\r\n    } \r\n\r\n\r\n    private dispense(citizen: Citizen, request: InteractionRequest) {\r\n        if (request && request.type === 'retrieve') {\r\n            let canFulfill = this.product.find(p => p === request.resource)\r\n            if (canFulfill) {\r\n                deleteByValueOnce(this.product, request.resource)\r\n                citizen.carry(request.resource)\r\n                this.building.debit(request.resource)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    public tryProduce(step: number) {\r\n        if (this.building.isActive && this.built) {\r\n            if (this.machine.operation.type === 'generator') {\r\n                if (step % this.machine.operation.generationTime === 0) {\r\n                    if (this.product.length < this.machine.operation.capacity) {\r\n                        this.produceResource(this.machine.operation.generates)\r\n                    }\r\n                }\r\n\r\n            } else if (this.machine.operation.type === 'spawn') {\r\n                if (step % 1000 == 0) {\r\n                    // console.log(\"WOULD SPAWN\")\r\n                    setTimeout(() => this.building.populate(this.pos.add(this.building.pos)), 100)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public produceResource(res: ResourceBlock) {\r\n        this.product.push(res)\r\n        this.building.redeem(res)\r\n    }\r\n\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            allStructures,\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        let snapped = false\r\n        if (bldg) {\r\n            let spot = bldg.nextDevicePlace().position\r\n            let d = spot.distance(pos)\r\n            snapped = d < 150\r\n        }\r\n\r\n        if (snapped) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n        } else {\r\n            this.pos = pos\r\n        }\r\n\r\n        return snapped\r\n    }\r\n}","const raisedSquare = require('../../images/raised-square-bg.png')\r\nconst leafy = require('../../images/leafy-bg.png')\r\nconst bookish = require('../../images/books-bg.png')\r\nconst posters = require('../../images/poster-wall-bg.png')\r\nconst tech = require('../../images/tech-bg.png')\r\nconst checker = require('../../images/checker-bg.png')\r\nconst beige = require('../../images/beige-bg.png')\r\nconst window = require('../../images/window-bg.png')\r\nconst ussf = require('../../images/ussf.png')\r\nconst wood = require('../../images/wood-panel-bg.png')\r\n\r\ninterface Background {\r\n    image: HTMLImageElement\r\n    pattern: CanvasPattern\r\n    loading: boolean\r\n}\r\n\r\nconst loadBg = (path, scale = 1) => {\r\n    let background: Background = { image: null, pattern: null, loading: true }\r\n    background.image = new Image();\r\n    background.image.src = path\r\n    background.image.onload = function () {\r\n      background.loading = false\r\n    }\r\n    return { background, scale }\r\n}\r\n\r\nexport enum BackgroundPattern {\r\n    Leafy = 'Leafy',\r\n    Grid = 'Grid',\r\n    Books = 'Books',\r\n    Poster = 'Poster',\r\n    Tech = 'Tech',\r\n    Checker = 'Checker',\r\n    Beige = 'Beige',\r\n    Window = 'Window',\r\n    USSF = 'USSF',\r\n    Wood = 'Wood',\r\n}\r\n\r\nconst backgroundPatterns: { [ key in BackgroundPattern ]: { background: Background, scale: number } } = {\r\n    Leafy: loadBg(leafy),\r\n    Grid: loadBg(raisedSquare),\r\n    Books: loadBg(bookish),\r\n    Poster: loadBg(posters),\r\n    Tech: loadBg(tech),\r\n    Checker: loadBg(checker),\r\n    Beige: loadBg(beige),\r\n    Window: loadBg(window),\r\n    USSF: loadBg(ussf, 0.5),\r\n    Wood: loadBg(wood),\r\n}\r\n\r\nexport const getBackgroundPattern = (ctx: CanvasRenderingContext2D, p: BackgroundPattern) => {\r\n    let pattern = backgroundPatterns[p]\r\n    let bg = pattern.background\r\n    if (!bg.loading) {\r\n        if (!bg.pattern) {\r\n            let matrix = new DOMMatrix() //bg.pattern.cre //ctx. // new SVGMatrix()\r\n\r\n            // bg.image.scal\r\n            // bg.image.scale\r\n            bg.pattern = ctx.createPattern(bg.image, 'repeat');\r\n            bg.pattern.setTransform(matrix.scale(pattern.scale)) //0.5))\r\n\r\n        }\r\n        return bg.pattern\r\n    }\r\n}","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        let tries = 0\r\n        while (visited.length < this.nodes.length && tries++ < this.nodes.length * 20) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Texture, Sound } from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\nconst craterRock = require('./sounds/crater-rock.mp3')\r\nconst assembler = require('./sounds/assembler.mp3')\r\nconst indivision = require('./sounds/indivision.mp3')\r\nconst understanding = require('./sounds/understanding.mp3')\r\nconst futureTense = require('./sounds/future tense.mp3')\r\n// const isomer = require('./sounds/isomer.mp3')\r\n// const outbound = require('./sounds/outbound.mp3')\r\n\r\nlet Resources = {\r\n    Sword: new Texture(sword),\r\n\r\n    CraterRock: new Sound(craterRock),\r\n    Assembler: new Sound(assembler),\r\n    Indivision: new Sound(indivision),\r\n    Understanding: new Sound(understanding),\r\n    FutureTense: new Sound(futureTense),\r\n    // Isomer: new Sound(isomer),\r\n    // Outbound: new Sound(outbound),\r\n\r\n\r\n}\r\n\r\nexport { Resources }\r\n","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class EatingStrategy extends Strategy {}","import { EatingStrategy } from \"./EatingStrategy\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { Fridge, Desk } from \"../models/Machine\";\r\n\r\nexport class WhenHungryEatingStrategy extends EatingStrategy {\r\n    canApply(): boolean {\r\n        return this.pawn.isHungry &&\r\n            this.planet.storedResources.includes(ResourceBlock.Meal)\r\n        // hunger > 0.6\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    protected async apply() {\r\n        // find the store with the food! reserve it maybe?\r\n        let fridge = this.devices.find(d => d.machine.operation.type === 'store' &&\r\n          d.machine.operation.stores.includes(ResourceBlock.Meal) &&\r\n          d.product.includes(ResourceBlock.Meal) &&\r\n          !d.reserved\r\n        )\r\n\r\n        if (fridge) {\r\n            fridge.reserved = true\r\n            // take the meal to a desk? (maybe need table here... or eatingSurface aspect?)\r\n            await this.visitDevice(fridge)\r\n            await fridge.interact(this.pawn, { type: 'retrieve', resource: ResourceBlock.Meal })\r\n            fridge.reserved = false\r\n\r\n            let desk = this.devices.find(d => d.machine instanceof Desk)\r\n            if (desk) {\r\n                await this.visitDevice(desk)\r\n            }\r\n            await this.pawn.eat()\r\n            // fridge.interac\r\n            // this.pawn.interact()\r\n        }\r\n    }\r\n    \r\n    \r\n}","import { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class SleepingStrategy extends Strategy {\r\n\r\n}","import { SleepingStrategy } from \"./SleepingStrategy\";\r\nimport { Bed } from \"../models/Machine\";\r\nimport { shuffle } from \"../Util\";\r\n\r\nexport class AnyBedSleepingStrategy extends SleepingStrategy {\r\n    canApply(): boolean {\r\n        if (!this.pawn.isTired) {\r\n            return false\r\n        }\r\n\r\n        let bedtime = this.planet.hour > 20 || this.planet.hour < 4\r\n        return bedtime\r\n    }\r\n\r\n    protected async apply() {\r\n        // find a bed\r\n        let bed = shuffle(this.devices).find(d => d.machine instanceof Bed && !d.inUse)\r\n        if (bed) {\r\n            bed.inUse = true\r\n            await this.visitDevice(bed)\r\n        }\r\n        await this.pawn.takeRest(1000 * 24)\r\n        if (bed) { \r\n            bed.inUse = false\r\n        }\r\n        return true\r\n    }\r\n\r\n}","import { Strategy } from \"./Strategy\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { containsUniq } from \"../Util\";\r\n\r\nexport abstract class ConstructionStrategy extends Strategy {\r\n    canApply(): boolean {\r\n        return !!this.unbuiltDevice\r\n    }\r\n\r\n    get unbuiltDevice() {\r\n        const isUnbuilt = (d: Device) => !d.built && !d.inUse && d.building.isActive &&\r\n          // the player can TRY to build it, we don't have to hang forever on it though\r\n          containsUniq(this.planet.storedResources, d.machine.cost)\r\n        return this.planet.colony.findAllDevices().find(isUnbuilt)\r\n    }\r\n}","import { ConstructionStrategy } from \"./ConstructionStrategy\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nexport class ProxmityBasedConstruction extends ConstructionStrategy {\r\n    async apply() {\r\n        if (this.unbuiltDevice && this.unbuiltDevice.building) {\r\n            await this.constructDevice(this.unbuiltDevice)\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n    private async constructDevice(device: Device) {\r\n        device.inUse = true\r\n        let resources = device.machine.cost\r\n        if (await this.gatherIngredients(resources)) {\r\n            await this.visitDevice(device)\r\n            await device.assemble(this.pawn)\r\n        } \r\n\r\n        device.inUse = false\r\n    }\r\n}","import { ResourceBlock } from \"../models/Economy\";\r\n\r\nimport { Recipe } from \"../models/MechanicalOperation\";\r\n\r\nexport interface RetrieveResource {\r\n    type: 'retrieve'\r\n    resource: ResourceBlock\r\n    // count: number\r\n}\r\n\r\nexport interface WorkRecipe {\r\n    type: 'work'\r\n    recipe: Recipe\r\n}\r\n\r\nexport interface StoreResource {\r\n    type: 'store'\r\n    resource: ResourceBlock\r\n}\r\n\r\nexport function retrieveResource(res: ResourceBlock): RetrieveResource {\r\n    return {\r\n        type: 'retrieve',\r\n        resource: res,\r\n        // count: 1\r\n    }\r\n}\r\n\r\n\r\nexport type InteractionRequest = StoreResource | RetrieveResource | WorkRecipe; // | ...\r\n\r\n","import { Device } from \"../actors/Device\";\r\nimport { MechanicalOperation, Recipe } from \"../models/MechanicalOperation\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class ProductionStrategy extends Strategy {\r\n\r\n\r\n    protected async storeBlock(res: ResourceBlock) {\r\n        let storesDesiredBlock = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) && //operation.capacity &&\r\n            d.operation.stores.includes(res)\r\n        let openStore = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n        let stored = false\r\n        if (openStore) {\r\n            await this.visitDevice(openStore)\r\n            if (await openStore.interact(this.pawn, { type: 'store', resource: res })) {\r\n                stored = true\r\n            }\r\n        }\r\n\r\n        if (!stored) {\r\n            await this.pause()\r\n            await this.storeBlock(res)\r\n        }\r\n    }\r\n\r\n}\r\n","import { shuffle, containsUniq } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Recipe, ResourceStorage } from \"../models/MechanicalOperation\";\r\nimport { ProductionStrategy } from \"./ProductionStrategy\";\r\n\r\nexport class CapacityBasedProduction extends ProductionStrategy {\r\n    private findStore() {\r\n        const storeWithCapacity = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) //&&\r\n            // !d.inUse\r\n            // containsUniq(this.planet.storedResources, d.operation)\r\n        let store: Device = shuffle(this.devices).find(storeWithCapacity)\r\n        return store\r\n    }\r\n\r\n    canApply(): boolean {\r\n        // throw new Error(\"Method not implemented.\");\r\n        return !!this.findStore()\r\n    }\r\n\r\n    async apply() {\r\n        let store = this.findStore()\r\n\r\n        if (store && store.operation.type === 'store') {\r\n            // store.inUse = true\r\n            const storage: ResourceStorage = store.operation\r\n            const recipeForStoredResource = (r: Recipe) => storage.stores.some(stored => r.produces === stored)\r\n            let recipe: Recipe = shuffle(this.recipes).find(recipeForStoredResource)\r\n            if (recipe && containsUniq(this.planet.storedResources, recipe.consumes)) {\r\n                if (await this.workRecipe(recipe)) {\r\n                    await this.storeBlock(recipe.produces)\r\n                }\r\n            }\r\n            // store.inUse = false\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons, deleteByValueOnce, sleep, containsUniq, deleteByValue } from \"../Util\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { ProductionStrategy } from \"../strategies/ProductionStrategy\";\r\nimport { CapacityBasedProduction } from \"../strategies/CapacityBasedProduction\";\r\nimport { drawStar, drawRect } from \"../Painting\";\r\nimport { ConstructionStrategy } from \"../strategies/ConstructionStrategy\";\r\nimport { ProxmityBasedConstruction } from \"../strategies/ProximityBasedConstruction\";\r\nimport { SleepingStrategy } from \"../strategies/SleepingStrategy\";\r\nimport { AnyBedSleepingStrategy } from \"../strategies/AnyBedSleepingStrategy\";\r\nimport { EatingStrategy } from \"../strategies/EatingStrategy\";\r\nimport { WhenHungryEatingStrategy } from \"../strategies/WhenHungryEatingStrategy\";\r\n\r\nexport class Citizen extends Actor {\r\n    isPlanning: boolean = false // \r\n\r\n    // walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock[] = [] // null\r\n    path: Vector[] = []\r\n\r\n    private workInProgress: boolean = false\r\n    private workStarted: number\r\n    private workDuration: number\r\n    private progress: number\r\n\r\n    private sleeping: boolean = false\r\n\r\n\r\n    private productionStrategy: ProductionStrategy\r\n    private constructionStrategy: ConstructionStrategy\r\n    private sleepingStrategy: SleepingStrategy\r\n    private eatingStrategy: EatingStrategy\r\n\r\n    private hunger: number = 0.0;\r\n    private energy: number = 100\r\n\r\n    constructor(private home: Vector, protected planet: Planet, private elite: boolean = false) {\r\n        super(home.x, home.y, Scale.minor.first, Scale.minor.fourth, Color.White.clone())\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.productionStrategy = new CapacityBasedProduction(this)\r\n        this.constructionStrategy = new ProxmityBasedConstruction(this)\r\n        this.sleepingStrategy = new AnyBedSleepingStrategy(this)\r\n        this.eatingStrategy = new WhenHungryEatingStrategy(this)\r\n    }\r\n\r\n    get isHungry() { return this.hunger > 0.6 }\r\n    get isTired()  { return this.energy < 85 }\r\n\r\n    // get isWorking() { return this.isWorking }\r\n    get currentPlanet() { return this.planet }\r\n\r\n    get walkSpeed() {\r\n        let speedMultiplier = this.planet.timeFactor * (this.elite ? 1.6 : 1)\r\n        return Game.citizenSpeed * speedMultiplier\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // make sure we are busy!\r\n        this.work()\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = \r\n              Math.min(\r\n                  (now - this.workStarted) / this.workDuration,\r\n                  1\r\n              )\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        ctx.save()\r\n        // ctx.globalAlpha = 1.0\r\n        ctx.translate(this.x, this.y - this.getHeight()/2 - 5)\r\n        if (this.sleeping) {\r\n            ctx.rotate(-Math.PI / 2);\r\n            ctx.translate(-10, -10)\r\n        }\r\n        // ctx.globalAlpha = 1.0 //?\r\n        drawRect(\r\n            ctx,\r\n            { x: 0, y: 0, width: this.getWidth(), height: this.getHeight() },\r\n            0,\r\n            Color.White\r\n        )\r\n\r\n        if (this.elite) {\r\n            // draw a little star?\r\n            drawStar(ctx, 8, -5)\r\n        }\r\n\r\n        // super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            let dx = 5\r\n            // if (this.vel.x < 0) { dx = -5 }\r\n            this.carrying.forEach((carried, idx) => {\r\n                ctx.fillStyle = blockColor(carried).clone().saturate(0.2).toRGBA()\r\n                ctx.fillRect(dx, 2 - 4 * idx, 5, 5)\r\n            })\r\n        }\r\n        ctx.restore()\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            ctx.strokeRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n        }\r\n\r\n        // let debugPath = true\r\n        if (this.path && Game.debugPath) {\r\n            let c = Color.White.clone().lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 4\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        this.workInProgress = false\r\n    }\r\n\r\n\r\n    carry(c: ResourceBlock) {\r\n        this.carrying.push(c);\r\n    }\r\n\r\n    isCarryingUnique(resources: ResourceBlock[]): boolean {\r\n        let isCarrying = containsUniq(this.carrying, resources)\r\n        return isCarrying\r\n    }\r\n\r\n    drop(res: ResourceBlock): ResourceBlock {\r\n        if (this.carrying.length > 0) {\r\n            if (this.carrying.find(r => r === res)) {\r\n                deleteByValueOnce(this.carrying, res)\r\n                return res\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    currentBuilding: Building = null\r\n    async visit(device: Device) {\r\n        if (this.currentBuilding != device.building) {\r\n            const path = this.planet.pathBetweenPoints(this.pos.clone(), device.pos.add(device.building.pos))\r\n            await this.followPath(path)\r\n        }\r\n        let target = device.pos.add(device.building.pos)\r\n        await this.glideTo(target)\r\n        this.currentBuilding = device.building\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        if (pos) {\r\n            return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n        }\r\n    }\r\n\r\n    async followPath(path: Vector[]) {\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = []\r\n        }\r\n    }\r\n    \r\n    protected get strategies() {\r\n        return [\r\n            this.sleepingStrategy,\r\n            this.eatingStrategy,\r\n            this.constructionStrategy,\r\n            this.productionStrategy\r\n        ]\r\n    }\r\n\r\n    async work() {\r\n        if (this.isPlanning || this.sleeping) { return }\r\n\r\n        this.isPlanning = true\r\n        // just get rid of it??\r\n        if (this.carrying.length > 0) { this.carrying = [] }\r\n        let choice = this.strategies.find(strat => strat.canApply())\r\n        if (choice) {\r\n            await choice.attempt()\r\n            this.energy -= 5\r\n            this.hunger += 0.04\r\n        }\r\n        this.isPlanning = false\r\n    }\r\n\r\n    async takeRest(duration: number) {\r\n        console.log(\"Citizen taking a well-deserved rest!!\")\r\n        this.sleeping = true\r\n        await this.progressBar(duration)\r\n        this.energy = 100\r\n        this.sleeping = false\r\n    }\r\n\r\n    async eat() {\r\n        console.log(\"Citizen eating a meal!\")\r\n        // this.eating = true\r\n        await this.progressBar(4000)\r\n        deleteByValueOnce(this.carrying, ResourceBlock.Meal)\r\n        this.hunger = 0\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(pos, elite: boolean = false) {\r\n        let citizen = new Citizen(pos, this.planet, elite);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { Game } from '../../Game';\r\n\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = Game.debugPath\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.placed = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0] //.length > 1 ? destination.nodes()[1] : destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination; //.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        // console.log(\"PATH FOUND BTWN POINTS\", { srcNode, destNode, path })\r\n        return path;\r\n    }\r\n\r\n\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findPoweredDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d.pos.add(d.building.pos))\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings[0] //.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices(): Device[] {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n\r\n    findPoweredDevices(): Device[] {\r\n        return flatSingle(this.activeBuildings.map(b => b.getDevices()))\r\n            .filter(d => d.built) /// ....\r\n    }\r\n\r\n    protected get activeBuildings() {\r\n        return this.buildings.filter(b => b.isActive)\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range, mixColors } from '../../Util';\r\nimport { drawRect } from '../../Painting';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 1500, color)\r\n    }\r\n}\r\n\r\nexport class MountainLayers extends PlanetBackground {\r\n    layers: {\r\n        baseY: number,\r\n        // color: Color,\r\n        deltas: number[]\r\n    }[] = []\r\n\r\n    skyColor: Color = Color.Blue.clone()\r\n    layerHeight: number = 30\r\n    layerCount = 2\r\n    peakCount = 1000\r\n\r\n    get peakWidth() {\r\n        return Math.floor(this.getWidth() / this.peakCount)\r\n    }\r\n\r\n    onInitialize() {\r\n        let min = -this.layerHeight\r\n        for (let layerIndex of range(this.layerCount)) {\r\n            this.layers.unshift({\r\n                baseY: -this.layerHeight - (16 * layerIndex),\r\n                deltas: this.genPeaks(layerIndex)\r\n            })\r\n        }\r\n    }\r\n\r\n    draw(ctx, delta) {\r\n        let wc = this.color.clone().lighten(0.1)\r\n        let sc = this.skyColor.clone().lighten(0.1)\r\n\r\n        let ndx = 1\r\n        let ls = this.layers.slice()\r\n        for (let layer of ls) {\r\n            let c = mixColors(wc, sc, (ndx / (this.layers.length+1)))\r\n            this.drawLayer(ctx, layer, c.lighten(0.1))\r\n            ndx += 1\r\n        }\r\n    }\r\n\r\n    private drawLayer(ctx, layer, color) {\r\n        let ox = -this.getWidth()/2, oy = this.pos.y + layer.baseY \r\n        let c = color.clone()\r\n\r\n        ctx.beginPath()\r\n        ctx.moveTo(ox, oy)\r\n        let ndx = 0\r\n        for (let delta of layer.deltas) {\r\n            ctx.lineTo(ox + (ndx * this.peakWidth), oy + delta)\r\n            ndx += 1\r\n        }\r\n        ctx.lineTo(ox + (this.peakCount * this.peakWidth), oy)\r\n        ctx.lineTo(ox + (this.peakCount * this.peakWidth), oy + this.layerHeight)\r\n        ctx.lineTo(ox, oy+this.layerHeight)\r\n        ctx.closePath()\r\n        ctx.fillStyle = c.toRGBA()\r\n        ctx.fill()\r\n    }\r\n\r\n    private genPeaks(n) {\r\n        let dMax = 2*(this.layerHeight/3)\r\n        let deltas = []\r\n        let randomDelta = () => (Math.random() * (dMax)) - (dMax/2)\r\n        let last = 0\r\n        let maxDiff = 5 + (n*2)\r\n        for (let times in range(this.peakCount)) {\r\n            let curr = randomDelta()\r\n            let pick = Math.max(\r\n                   last - maxDiff,\r\n                   Math.min(curr, last + maxDiff),\r\n               )\r\n            deltas.push(\r\n               pick\r\n            )\r\n            last = pick\r\n        }\r\n        return deltas\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 18;\r\n        let peakHeight = 3600;\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(2)) {\r\n            let heightRange = 100;\r\n            let drift = 3 * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, (Math.random() * peakHeight) + ((Math.random() * heightRange) - (heightRange / 2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.35); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = baseColor.lighten(0.1) // this.color.saturate(0.2).lighten(0.1)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range, flatSingle, mixColors } from '../../Util';\r\nimport { Mountains, MountainLayers } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { AccelerateTime, MechanicalOperation } from '../../models/MechanicalOperation';\r\nimport { World } from '../../models/World';\r\nimport { drawRect } from '../../Painting';\r\n\r\n// class Sky extends Actor {\r\n//     constructor(\r\n//         x: number,\r\n//         y: number,\r\n//         width: number,\r\n//         height: number,\r\n//         color: Color\r\n//     ) {\r\n//         super(x,y,width,height,color)\r\n//     }\r\n\r\n//     draw(ctx, delta) {\r\n//         drawRect(\r\n//             ctx,\r\n//             {x: this.x, y: this.y, width: this.getWidth(), height: this.getHeight() },\r\n//             0,\r\n//             this.color,\r\n//         )\r\n//     }\r\n// }\r\n\r\nexport class Planet extends Actor {\r\n    mountains: Mountains\r\n    mountainLayers: MountainLayers\r\n    backMountainLayers: MountainLayers\r\n\r\n    colony: Colony\r\n    population: Population\r\n    // baseColor: Color\r\n    sky: Actor\r\n\r\n    constructor(\r\n        public world: World,\r\n        public hud: Hud,\r\n        // public color: Color,\r\n        private onBuildingHover: (b: Building) => any,\r\n        private onDeviceHover: (d: Device) => any,\r\n        private w: number = 500000,\r\n        private depth: number = 50000,\r\n        ) {\r\n        super(0, depth/2, w, depth, world.color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        // this.baseColor = world.color.clone()\r\n\r\n        this.sky = new Actor(0,-depth,w,depth, world.skyColor) //Color.Blue)\r\n        this.add(this.sky)\r\n\r\n        let yBase = -depth/2\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.45))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n        let c = this.color.clone()\r\n\r\n        this.backMountainLayers = new MountainLayers(\r\n                -depth / 2 - 30,\r\n                this.getWidth(),\r\n                world.skyColor\r\n            )\r\n        this.add(this.backMountainLayers)\r\n        this.mountains=new Mountains(-depth/2, this.getWidth(), world.skyColor) //.lighten(0.15)))\r\n        this.add(this.mountains)\r\n\r\n        this.mountainLayers = new MountainLayers(\r\n                -depth / 2,\r\n                this.getWidth(),\r\n                this.color\r\n            )\r\n            this.mountainLayers.skyColor = world.skyColor\r\n        this.add(this.mountainLayers)\r\n\r\n        this.colony = new Colony(0,-depth/2)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n\r\n    }\r\n\r\n\r\n    private currentHour: number\r\n    get hour() { return this.currentHour }\r\n\r\n    setTime(time: number) {\r\n        this.hour = (Math.floor(time / 60)) % 24\r\n\r\n        let nextHour = this.hour + 1\r\n\r\n        let minute = Math.floor(time % 60)\r\n        let inc = (minute / 60)\r\n        // console.log({ hour: this.hour, nextHour: nextHour, minute, inc })\r\n\r\n        let oldC = this.skyColorForHour(this.hour),\r\n            newC = this.skyColorForHour(nextHour)\r\n\r\n        let mixC = mixColors(newC, oldC, inc)\r\n\r\n        this.sky.color = mixC\r\n\r\n        this.mountainLayers.skyColor = this.sky.color.darken(0.12) //.lighten(0.04) //.lighten(0.02)\r\n        this.mountains.color = this.sky.color.lighten(0.04)\r\n\r\n        this.backMountainLayers.color = this.sky.color.darken(0.12) //.darken(0.08) //.lighten(0.04) //.lighten(0.02)\r\n        this.backMountainLayers.skyColor = this.sky.color //.lighten(0.02)\r\n    }\r\n\r\n    skyColorForHour(hour: number) {\r\n        let c = this.world.skyColor.clone().darken(0.2).desaturate(0.1)\r\n\r\n        let colorMap = {\r\n            night: c.darken(0.7),\r\n            dawn: c.darken(0.2),\r\n            morning: c.lighten(0.1),\r\n            afternoon: c.lighten(0.3),\r\n            evening: c,\r\n        }\r\n\r\n        let result: Color = null\r\n        if (hour >= 5 && hour < 8) { // dawn\r\n            let inc = (hour - 6) / 5\r\n            result = colorMap.dawn.lighten(inc)\r\n        } else if (hour >= 8 && hour < 12) { // morning\r\n            let inc = (hour - 8) / 24\r\n            result = colorMap.morning.lighten(inc)\r\n        } else if (hour >= 12 && hour < 14) { // early afternoon\r\n            result = colorMap.afternoon //.darken(inc)\r\n        } else if (hour >= 14 && hour < 18) {  // late afternoon\r\n            let inc = (hour - 14) / 16\r\n            result = colorMap.afternoon.darken(inc)\r\n        } else if (hour >= 18 && hour < 23) { // evening\r\n            let inc = (hour - 18) / 10\r\n            result = colorMap.evening.darken(inc)\r\n        } else if (hour >= 23) { // late night\r\n            result = colorMap.night\r\n        } else if (hour < 5) { // early morning\r\n            result = colorMap.night\r\n        }\r\n        return result\r\n    }\r\n\r\n    set hour(hour: number) {\r\n        this.currentHour = hour\r\n    }\r\n\r\n    set currentlyViewing(buildingOrDevice: Building | Device) {\r\n        if (buildingOrDevice instanceof Building) {\r\n            let b: Building = buildingOrDevice\r\n            this.onBuildingHover(b)\r\n        } else if (buildingOrDevice instanceof Device) {\r\n            let d: Device = buildingOrDevice\r\n            this.onDeviceHover(d)\r\n        }\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        // let devices = this.colony.findPoweredDevices()\r\n        // let economies = devices.map((d: Device) => d.machine.economy)\r\n\r\n        let buildings = this.colony.buildings\r\n        let economies = buildings.map(b => b.economy())\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    spend(resource: ResourceBlock): any {\r\n        this.hud.resourceExpended(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector, elite: boolean = false) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            // console.log(\"POPULATIN'!\")\r\n            // let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(pos, elite) //home)\r\n        } else {\r\n            console.warn(\"too many citizens already to populate more!\")\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [ PureValue.Shelter, PureValue.Water, PureValue.Oxygen ]\r\n        return Math.max(0, Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        ))\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n       return this.colony.pathBetweenPoints(origin, destination)\r\n    }\r\n\r\n    get timeFactor() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let ops: MechanicalOperation[] = devices.map(d => d.operation) //.filter(op => op.type === 'accelerate')\r\n        return ops\r\n            .map(op => op.type === 'accelerate' ? op.factor : 1)\r\n            .reduce((acc, val) => val * acc, 1.0)\r\n    }\r\n\r\n    get storedResources(): ResourceBlock[] {\r\n        let devices = this.colony.findAllDevices()\r\n        return flatSingle(devices.map(d => d.product))\r\n    }\r\n}","import { Color } from \"excalibur\";\r\nimport { EntityKind } from \"../../values/Entity\";\r\n\r\nclass PaletteGroup {\r\n\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(private name: string, private all: EntityKind[], private comprehend = true) {\r\n    }\r\n}\r\n\r\nexport class Palette {\r\n    private _element: HTMLDivElement;\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(\r\n        private name: string,\r\n        private x: number,\r\n        private y: number,\r\n        private all: EntityKind[],\r\n        private onButtonClick: (EntityKind) => any = null,\r\n        private onButtonEnter: (EntityKind) => any = null,\r\n        private comprehend = true \r\n    ) {\r\n        this.makePalette();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    updateBuilt(built: (EntityKind)[]) {\r\n        this.built = built;\r\n        if (this.comprehend) {\r\n            this.comprehended = this.all.filter((e: EntityKind) => {\r\n                let s = new e();\r\n                let prereqs: (EntityKind)[] = s.prereqs;\r\n                return prereqs.every((prereq: EntityKind) => {\r\n                    let built = this.built.some((s: EntityKind) => s === prereq);\r\n                    return built;\r\n                });\r\n            });\r\n        } else {\r\n            this.comprehended = this.built\r\n        }\r\n        this.makePalette();\r\n    }\r\n\r\n    dragging: boolean = false\r\n    private makePalette() {\r\n        if (this._element) {\r\n            this._element.parentElement.removeChild(this._element);\r\n        }\r\n        if (!(this.comprehended.length > 0)) { return }\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.display = 'flex';\r\n        this._element.style.flexWrap = 'wrap';\r\n        this._element.style.width = '200px';\r\n        this._element.style.border = 'none'; //1px solid black'; //0.5px solid white';\r\n\r\n        this._element.addEventListener('mousedown', (e) => { //.onmousedown = (e) => {\r\n            // alert('click palette')\r\n            this.dragging = true\r\n            console.log(\"START DRAG\")\r\n        })\r\n        document.addEventListener('onmousemove', (e: MouseEvent) => {\r\n            if (this.dragging) {\r\n                this.x = e.clientX\r\n                this.y = e.clientY\r\n            }\r\n        })\r\n\r\n        document.addEventListener('onmouseup', (e) => {\r\n            if (this.dragging) { this.dragging = false }\r\n        })\r\n        // title.onmousemove = (e) => {\r\n        //     if (this.dragging) {\r\n        //         this.x = e.clientX\r\n        //         this.y = e.clientY\r\n        //     }\r\n        // }\r\n        // this._element.onmouseup = (e) => {\r\n        //     this.dragging = false\r\n        //     console.log(\"DRAG END\") \r\n        // }\r\n\r\n        document.body.appendChild(this._element);\r\n\r\n        if (this.name) {\r\n            let title = document.createElement('div')\r\n            title.textContent = this.name\r\n            title.style.fontFamily = 'Verdana'\r\n            title.style.fontSize = '7pt'\r\n            title.style.fontWeight = '400'\r\n            title.style.width = '200px'\r\n            title.style.color = Color.White.toRGBA()\r\n            title.style.backgroundColor = Color.Violet.darken(0.92).toRGBA()\r\n            title.style.padding = '4px'\r\n            title.style.margin = '0px'\r\n            \r\n            this._element.appendChild(\r\n                title\r\n            )\r\n        }\r\n\r\n        this.comprehended\r\n            .map((elem: EntityKind) => new elem())\r\n            .sort((a, b) => a.color > b.color ? -1 : 1)\r\n            .forEach(elem => {\r\n                if (elem.hide) { return }\r\n                let label = elem.name;\r\n                if (!this.built.map(m => new m().name).includes(elem.name)) {\r\n                    label += ' *';\r\n                }\r\n                let clr = elem.color;\r\n                let btn = this.buttonFactory(label, clr);\r\n                this._element.appendChild(btn);\r\n                if (this.onButtonEnter) {\r\n                    btn.onmouseenter = () => { this.onButtonEnter(elem); };\r\n                }\r\n                if (this.onButtonClick) {\r\n                    btn.onclick = () => { this.onButtonClick(elem); };\r\n                }\r\n            });\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.5).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = label;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '6pt';\r\n        paletteButton.style.fontFamily = 'Verdana';\r\n        paletteButton.style.fontWeight = '500';\r\n        paletteButton.style.padding = '2px';\r\n        paletteButton.style.width = '100px';\r\n        paletteButton.style.textTransform = 'uppercase';\r\n        paletteButton.style.border = 'none' //1px solid rgba(255,255,255,0.08)';\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA();\r\n            paletteButton.style.color = fg.toRGBA();\r\n        };\r\n        return paletteButton;\r\n    }\r\n}\r\n","import { Label, Actor, FontStyle, Color } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { PureValue, Economy, ResourceBlock } from \"../../models/Economy\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nimport { countOccurrences, flatSingle } from \"../../Util\";\r\n\r\nexport class CardBody extends Actor {\r\n    description: Label\r\n    values: Label\r\n    notes: Label\r\n    footer: Label\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 0, 0)\r\n        // resources / recipes\r\n\r\n        this.values = new Label('')\r\n        this.values.fontSize = 10\r\n        this.add(this.values)\r\n\r\n        this.notes = new Label('behavioral notes', 0, 30)\r\n        this.notes.fontSize = 11\r\n        this.add(this.notes)\r\n\r\n        this.description = new Label('description', 0, 60)\r\n        this.description.fontSize = 12\r\n        this.description.fontStyle = FontStyle.Italic\r\n        this.description.color = Color.DarkGray\r\n        this.add(this.description)\r\n\r\n        this.footer = new Label('footer', 20, 80)\r\n        this.footer.fontSize = 10\r\n        this.footer.fontStyle = FontStyle.Italic\r\n        this.add(this.footer)\r\n\r\n        this.show(entity)\r\n    }\r\n\r\n    describeResources = (arr: ResourceBlock[]) => {\r\n        let freqs = countOccurrences(arr)\r\n        return Object.keys(freqs)\r\n            .map(elem => `${elem} x${freqs[elem]}`)\r\n            .join(' + ')\r\n    }\r\n\r\n    show(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        if (entity) {\r\n            this.description.text = entity.description;\r\n\r\n            if (entity instanceof Machine || entity instanceof Device) {\r\n                this.values.text =  this.describeEconomy(entity.economy)\r\n                // let footerNotes = []\r\n                let resourceDescription = entity instanceof Machine\r\n                    ? `Cost: ${this.describeResources(entity.cost)}`\r\n                    : (entity.built ? this.describeResources(entity.product) : 'under construction')\r\n                let forDome = entity instanceof Machine ? entity.forDome : entity.machine.forDome\r\n                let domeStatus = `For Dome: ${forDome ? 'Yes' : 'No'}`\r\n                this.footer.text = resourceDescription === ''\r\n                    ? domeStatus\r\n                    : [resourceDescription, domeStatus].join(' | ') \r\n                this.notes.text = '' //\r\n                let op = entity.operation\r\n                if (op) {\r\n                    if (op.type === 'recipe') {\r\n                        this.notes.text = `Turns ${op.consumes.join(' + ')} -> ${op.produces}.`\r\n                    } else if (op.type === 'generator') {\r\n                        this.notes.text = `Generates ${op.generates}.`\r\n                    } else if (op.type === 'store') {\r\n                        this.notes.text = `Stores ${op.stores.join(' + ')}`\r\n                    } else if (op.type === 'spawn') {\r\n                        this.notes.text = 'Decants clones.'\r\n                    }\r\n                }\r\n            } else if (entity instanceof SpaceFunction) {\r\n                let { capacity, workSpeed } = entity.bonuses\r\n                let bonusMessages = [];\r\n                if (capacity > 0) {\r\n                    bonusMessages.push(`+${capacity} cap`)\r\n                }\r\n                if (workSpeed > 1.0) {\r\n                    bonusMessages.push(`+${Math.floor((workSpeed*100)-100)}% efficiency` )\r\n                }\r\n                this.values.text = bonusMessages.join('; ') \r\n                this.notes.text = entity.machines.map(m => (new m()).name).join(' + ')\r\n                this.footer.text = ''\r\n            } else if (entity instanceof Building) {\r\n                this.values.text =  this.describeEconomy(entity.economy(false))\r\n                this.notes.text = entity.getDevices().map(d => d.machine.name).join(' + ')\r\n\r\n                let product = entity.getDevices()\r\n                    .map(d => d.product)\r\n                    .reduce((a, b) => a.concat(b), [])\r\n                this.footer.text = product.length > 0\r\n                    ? \"Currently contains: \" + this.describeResources(product)\r\n                    : ''\r\n            } else {\r\n                this.values.text = ''\r\n                this.notes.text = ''\r\n                this.footer.text = ''\r\n            }\r\n\r\n        }\r\n        // other bonuses? behaviors?\r\n    }\r\n\r\n    private describeEconomy(e: Economy): string {\r\n        let values = []\r\n        let econ = e // entity.economy\r\n        for (let value in PureValue) {\r\n            let { supply, demand } = econ[value]\r\n            let delta = supply - demand\r\n            if (delta > 0) {\r\n                values.push(`+${delta} ${value}`)\r\n            } else if (delta < 0) {\r\n                values.push(`${delta} ${value}`)\r\n            }\r\n        }\r\n        return values.join(' | ')\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nexport class CardTitle extends Actor {\r\n    \r\n    name: Label;\r\n    type: Label;\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 14, 32, entity && entity.color || Color.Gray);\r\n        this.name = new Label(entity && entity.name || '..', 20, 16)\r\n        this.name.fontSize = 28\r\n        this.name.color = Color.Black\r\n        this.add(this.name)\r\n\r\n        this.type = new Label('..', 232, 16)\r\n        this.type.fontSize = 10\r\n        this.type.color = Color.Gray\r\n        this.type.fontStyle = FontStyle.Italic\r\n        this.add(this.type)\r\n\r\n        if (entity) {\r\n            this.announce(entity)\r\n        }\r\n    }\r\n\r\n    announce(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.name.text = entity.name\r\n        this.color = entity.color.desaturate(0.5).darken(0.2)\r\n        if (entity instanceof Machine) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n        if (entity instanceof Structure) { this.type.text = 'Structure' }\r\n        if (entity instanceof SpaceFunction) { this.type.text = 'Function' }\r\n        if (entity instanceof Building) { this.type.text = 'Building' }\r\n        if (entity instanceof Device) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { CardTitle } from \"./CardTitle\";\r\nimport { CardBody } from \"./CardBody\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\n\r\nexport class Card extends Actor {\r\n    title: CardTitle\r\n    cardBody: CardBody\r\n    image: any\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x + 160, y + 90, 320, 180, Color.White);\r\n        let x0 = -150, y0 = -50;\r\n        this.title = new CardTitle(entity, x0 - 3, y0); //x, y)\r\n        this.add(this.title);\r\n        this.cardBody = new CardBody(entity, x0 + 14, y0 + 40)\r\n        this.add(this.cardBody)\r\n\r\n        this.image = new Image();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        if (this.entity) {\r\n            if (this.entity instanceof Machine) {\r\n                let ix = this.pos.x + 48, iy = this.pos.y - 16\r\n                let isz = 92\r\n                ctx.drawImage(this.image, ix, iy, isz, isz)\r\n            }\r\n        }\r\n    }\r\n\r\n    present(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.title.announce(entity)\r\n        this.cardBody.show(entity)\r\n\r\n        this.entity = entity\r\n        if (this.entity instanceof Machine) {\r\n            this.image.src = this.entity.image\r\n        }\r\n    }\r\n\r\n}\r\n","import { Sound, Color } from \"excalibur\";\r\nimport { sample } from \"../../Util\";\r\n\r\ninterface MusicPlayerPlay { type: 'play'}\r\ninterface MusicPlayerPause { type: 'pause'}\r\ninterface MusicPlayerStop { type: 'stop'}\r\ninterface MusicPlayerNext { type: 'next'}\r\ntype MusicPlayerAction = MusicPlayerPlay | MusicPlayerPause | MusicPlayerStop | MusicPlayerNext\r\n\r\nexport class MusicPlayer {\r\n    private _wrapper: HTMLDivElement;\r\n    private _element: HTMLDivElement;\r\n    private _titleElem: HTMLSpanElement;\r\n\r\n    currentTrack: string\r\n    paused: boolean = false\r\n\r\n    constructor(private x: number, private y: number, private playlist: {\r\n        [track: string]: Sound;\r\n    }) {\r\n        this.makePlayer();\r\n        setTimeout(() => { this.startMusic() }, 3000)\r\n        this._titleElem.textContent = `Getting ready...`;\r\n        this.currentTrack = sample(Object.keys(this.playlist)); //[0];\r\n    }\r\n\r\n    startMusic() {\r\n        this._titleElem.textContent = `Playing: ${this.currentTrack}`;\r\n        this.playlist[this.currentTrack].play()\r\n        .then(() => {\r\n                this.advancePlaylist()\r\n        })\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._wrapper.style.left = `${left + this.x}px`;\r\n            this._wrapper.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    private makePlayer() {\r\n        this._wrapper = document.createElement('div')\r\n        this._wrapper.style.position = 'absolute'\r\n        this._wrapper.style.width = '20%'\r\n        this._wrapper.style.textAlign = 'left'\r\n        this._wrapper.style.border = 'none';\r\n        document.body.appendChild(this._wrapper);\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.display = 'inline-block';\r\n        this._element.style.border = 'none';\r\n        this._wrapper.appendChild(this._element)\r\n\r\n        this._titleElem = document.createElement('span');\r\n        this._titleElem.style.fontFamily = 'Verdana';\r\n        this._titleElem.style.fontSize = '7pt';\r\n        this._titleElem.style.padding = '24px'\r\n        this._titleElem.style.color = 'white';\r\n        this._wrapper.appendChild(this.inlineBlock(this._titleElem));\r\n\r\n        let play = this.iconFactory({ type: 'play' }, '&#9655;')\r\n        this._wrapper.appendChild(this.inlineBlock(play));\r\n\r\n        let pause = this.iconFactory({ type: 'pause' }, '&#10072; &#10072;')\r\n        this._wrapper.appendChild(this.inlineBlock(pause))\r\n\r\n        let next = this.iconFactory({ type: 'next' }, '&rarr;')\r\n        this._wrapper.appendChild(this.inlineBlock(next))\r\n\r\n    }\r\n\r\n    handleAction(action: MusicPlayerAction) {\r\n        if (action.type === 'pause') {\r\n            this.song.pause()\r\n            this.paused = true\r\n            this._titleElem.textContent = `Paused: ${this.currentTrack}`;\r\n        } else if (action.type === 'play') {\r\n            this.song.play()\r\n            this.paused = false\r\n            this._titleElem.textContent = `Playing: ${this.currentTrack}`;\r\n        } else if (action.type === 'next') {\r\n            if (this.paused) {\r\n                this.song.play()\r\n                this.paused = false\r\n            }\r\n            this.song.stop()\r\n        }\r\n    }\r\n\r\n    advancePlaylist() {\r\n        let ndx = this.trackNames.indexOf(this.currentTrack)\r\n        ndx = (ndx + 1) % this.trackNames.length\r\n        this.currentTrack = this.trackNames[ndx]\r\n        this.startMusic()\r\n    }\r\n\r\n    get trackNames() { return Object.keys(this.playlist) }\r\n    get song() { return this.playlist[this.currentTrack] }\r\n\r\n    private inlineBlock(elem) {\r\n        let block = document.createElement('div');\r\n        block.style.display = 'inline-block';\r\n        block.style.border = 'none';\r\n        block.append(elem)\r\n        return block\r\n    }\r\n\r\n    private iconFactory(\r\n        action: MusicPlayerAction,\r\n        iconContent: string,\r\n    ) {\r\n        let bg = Color.Transparent\r\n        let fg = Color.White\r\n        let icon = document.createElement('button')\r\n        icon.innerHTML = iconContent\r\n        icon.style.display = 'block';\r\n        icon.style.fontSize = '7pt';\r\n        icon.style.fontFamily = 'Verdana';\r\n        icon.style.border = 'none'\r\n        icon.style.padding = '4px'\r\n        icon.style.background = bg.toRGBA();\r\n        icon.style.color = fg.toRGBA();\r\n        icon.onclick = () => { this.handleAction(action) }\r\n        return icon\r\n    }\r\n\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor, Color } from \"excalibur\";\r\nimport { Economy, PureValue, availableCapacity, allValues } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\nimport { eachChunk } from \"../../Util\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0) //Color.DarkGray.clone().darken(0.5));\r\n\r\n        let index = 0\r\n        for (let [val1, val2] of eachChunk(allValues, 2)) {\r\n            this.addValue(index * 32, 0, val1)\r\n            this.addValue(index * 32, 7, val2)\r\n            index += 1\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    private addValue(x: number, y: number, value: PureValue) {\r\n        let valueLabel: EconomicValue = new EconomicValue(value, x, y)\r\n        this.valueLabels[value] = valueLabel\r\n        this.add(valueLabel)\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value of allValues) {\r\n            this.valueLabels[value].setCount(\r\n                availableCapacity(market, value)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor, UIActor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nclass Tooltip extends Actor {\r\n    messageLabel: Label\r\n    constructor(x: number, y: number, message: string) {\r\n        super(x, y, 60, 16, Color.Black)\r\n        this.messageLabel = new Label(message, -16, 6, 'Verdana')\r\n        this.messageLabel.color = Color.White\r\n        this.add(this.messageLabel)\r\n    }\r\n}\r\n\r\nexport class ResourceListEntry extends UIActor {\r\n    icon: Actor;\r\n    count: Label;\r\n    hovering: boolean = false\r\n    tooltip: Tooltip\r\n\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x-5, y-5, 20, 10)\r\n        let icon = new Actor(5, 5, 10, 10, blockColor(resourceBlock));\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, 15, 10, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n\r\n        this.tooltip = new Tooltip(0, 5, ResourceBlock[resourceBlock])\r\n        this.tooltip.visible = false\r\n        this.add(this.tooltip)\r\n\r\n\r\n        this.on('pointerenter', () => {\r\n            this.tooltip.visible = true\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.tooltip.visible = false\r\n        })\r\n    }\r\n\r\n\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n\r\n    debit(amt: number) {\r\n        this.value -= amt\r\n        this.count.text = `x${this.value}`\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nimport { eachCons, eachChunk } from \"../../Util\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            [ResourceBlock.Biomass]: null,\r\n            [ResourceBlock.Idea]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n            [ResourceBlock.Alloy]: null,\r\n            [ResourceBlock.Bioplasma]: null,\r\n            [ResourceBlock.Algorithm]: null,\r\n            [ResourceBlock.Argent]: null,\r\n            [ResourceBlock.Aurum]: null,\r\n            [ResourceBlock.Omnium]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x,y,0,0); // 200, 60, Color.Green.clone().darken(0.8));\r\n        let rx0 = 0, ry0 = -5;\r\n        let resources = [\r\n            ResourceBlock.Meal,\r\n            ResourceBlock.Bioplasma,\r\n\r\n            ResourceBlock.Data,\r\n            ResourceBlock.Algorithm,\r\n\r\n            ResourceBlock.Mineral,\r\n            ResourceBlock.Alloy,\r\n\r\n            ResourceBlock.Argent,\r\n            ResourceBlock.Aurum,\r\n        ];\r\n\r\n        eachChunk(resources, 2).forEach(([res1, res2], index) => {\r\n            let rx = rx0 + index * 36, ry = ry0 + index * 0;\r\n            this.addEntry(rx, ry, res1)\r\n            this.addEntry(rx, ry + 14, res2)\r\n        });\r\n    }\r\n\r\n    private addEntry(x: number, y: number, res: ResourceBlock) {\r\n        let entry = new ResourceListEntry(x, y, res, 0);\r\n        this.add(entry);\r\n        this.entries[res] = entry;\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n\r\n    decrement(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.debit(1)\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\nimport { MusicPlayer } from \"./MusicPlayer\";\r\nimport { Resources } from \"../../Resources\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n    private musicPlayer: MusicPlayer\r\n    private clock: Label\r\n\r\n    constructor(market: Economy, w: number, h: number) {\r\n        super(0,0, w*2,h, Color.DarkGray.clone().darken(0.92));\r\n\r\n        let ty = 14\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+18)\r\n        brand.fontSize = 28\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.1\", 100, ty + 14)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(130, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 280, ty)\r\n        this.add(this.economy)\r\n\r\n        this.clock = new Label('current time', 600, ty, 'Verdana')\r\n        this.clock.color = Color.White // 'white'\r\n        this.add(this.clock)\r\n\r\n        this.popLabel = new Label(\"\", 600, ty + 14, 'Verdana')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 750, ty, 'Verdana')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.messageLabel.fontStyle = FontStyle.Italic\r\n        this.add(this.messageLabel)\r\n\r\n        this.musicPlayer = new MusicPlayer(726, 12, {\r\n            'Crater Rock': Resources.CraterRock,\r\n            'Indivision': Resources.Indivision,\r\n            'Future Tense': Resources.FutureTense,\r\n            // 'Isomer': Resources.Isomer,\r\n            'Understanding': Resources.Understanding,\r\n            // 'Outbound': Resources.Outbound,\r\n            'Assembler': Resources.Assembler,\r\n        })\r\n// // enable propagating pointer events\r\n// this.enableCapturePointer = true;\r\n// // // enable move events, warning: performance intensive!\r\n// this.capturePointer.captureMoveEvents = true;\r\n//         this.on('pointerenter', () => { alert('hover!')})\r\n    }\r\n\r\n    draw(ctx, delta) {\r\n        super.draw(ctx, delta)\r\n        this.musicPlayer.draw(ctx)\r\n        // drawRect(\r\n        //     ctx,\r\n        //     {x: this.x, y: this.y, width: this.getWidth(), height: this.getHeight() },\r\n        //     0,\r\n        //     Color.Magenta\r\n        // )\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    decrementResource(res: ResourceBlock) {\r\n        this.resources.decrement(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n\r\n    setClock(time: number = 0) {\r\n        let days = (Math.floor(time / (60 * 24))+1).toString()\r\n        let hh = Math.floor(time / 60) % 24\r\n        let hours = Math.floor((hh + 11) % 12 + 1).toString()\r\n        let minutes = Math.floor(time % 60).toString()\r\n        let ampm = hh < 12 ? 'AM' : 'PM'\r\n        this.clock.text = `Day ${days}. ${hours}:${minutes.padStart(2, '0')} ${ampm}`\r\n    }\r\n    \r\n}\r\n","import { UIActor, Label, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, PureValue } from \"../../models/Economy\";\r\nimport { Machine, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Card } from \"./Card\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Palette } from \"./Palette\";\r\nimport { Building } from \"../Building\";\r\n\r\nexport class Hud extends UIActor {\r\n    // private hint: Label\r\n\r\n    private hidePalettes: boolean = true\r\n\r\n    private structurePalette: Palette\r\n    private machinePalette: Palette\r\n    private functionPalette: Palette\r\n    private card: Card\r\n\r\n    private status: StatusAnalysisView\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n    static machinesForPalette = allMachines\r\n    static functionsForPalette = allSpaceFunctions\r\n\r\n    constructor(\r\n        game: Game,\r\n        protected onBuildingSelect = null,\r\n        protected onMachineSelect = null,\r\n        protected onFunctionSelect = null\r\n    ) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.status = new StatusAnalysisView(emptyMarket(), game.canvasWidth, 64);\r\n        this.add(this.status)\r\n\r\n        let displayInfo = (e) => this.showCard(e)\r\n        this.machinePalette = new Palette('Machine', 20, 55, allMachines, onMachineSelect, displayInfo) // (e) => this.showCard(e))\r\n        this.structurePalette = new Palette('Structure', 20, 300, Hud.structuresForPalette, onBuildingSelect, displayInfo)\r\n        this.functionPalette = new Palette('Function', 20, 435, Hud.functionsForPalette, onFunctionSelect, displayInfo, false)\r\n\r\n        this.card = new Card(null, 20, game.canvasHeight - 200)\r\n        this.add(this.card)\r\n\r\n\r\n    }\r\n\r\n    showPalettes() {\r\n        this.hidePalettes = false\r\n    }\r\n\r\n    setMessage(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (!this.hidePalettes) {\r\n            this.structurePalette.draw(ctx)\r\n            this.machinePalette.draw(ctx)\r\n            this.functionPalette.draw(ctx)\r\n        }\r\n    }\r\n\r\n    update(game: Game, delta: number) {\r\n        super.update(game, delta)\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    resourceExpended(resource: ResourceBlock) {\r\n        this.status.decrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true, time: number = 0) {\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n\r\n        this.status.setClock(time)\r\n    }\r\n\r\n    showCard(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        this.card.present(entity)\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n        this.updateFunctionPalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        let builtStructures =\r\n            Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n\r\n        this.structurePalette.updateBuilt(builtStructures)\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let devices = colony.findAllDevices()\r\n        let builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine))\r\n        this.machinePalette.updateBuilt(builtMachines)\r\n    }\r\n\r\n    private updateFunctionPalette(colony: Colony) {\r\n        let builtReifiedFunctions = flatSingle(colony.buildings.map(b => b.spaceFunction))\r\n        let builtFunctions = Hud.functionsForPalette.filter((fn) => builtReifiedFunctions.some(rf => rf instanceof fn))\r\n        this.functionPalette.updateBuilt(builtFunctions)\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawPatternedRect, drawRect, drawPatternedPoly, drawPoly } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\n// import { drawPatternedRect, drawRect } from \"../../Util\";\r\n\r\nexport class MediumSurfaceRoomView extends Building {\r\n    hideBox = true\r\n\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() //- this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        // draw from left slot to each device place to right slot?\r\n        let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length-1])\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        // g.edge(devices[1], find(slots[1]))\r\n\r\n        return g\r\n    }\r\n  \r\n    // afterConstruct() {\r\n    //     let { machines } = this.structure;\r\n    //     if (machines && machines.length > 0) {\r\n    //         let machine = new machines[0]();\r\n    //         this.devicePlaces().forEach(place => {\r\n    //             let theDevice = new Device(machine, place.position)\r\n    //             this.addDevice(theDevice)\r\n    //         })\r\n    //     }\r\n\r\n    // }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor()\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n\r\n        // ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n        // let rect = \r\n            // { x: this.pos.x, y: this.pos.y, width: this.getWidth(), height: this.getHeight() };\r\n        drawPatternedPoly(\r\n            ctx,\r\n            this.angledRoofPoly(),\r\n            this.backgroundPattern\r\n        )\r\n\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black.clone()\r\n            c.a = 0.6\r\n            drawPoly(ctx, this.angledRoofPoly(), c)\r\n        }\r\n\r\n        // a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n\r\n        ctx.fillStyle = Color.Black.fillStyle()\r\n        ctx.fillRect(flagX, flagY-1, 1, flagpoleHeight+1)\r\n        drawPatternedRect(\r\n            ctx,\r\n            { x: flagX, y: flagY, width: 10, height: 6 },\r\n            BackgroundPattern.USSF\r\n        )\r\n        // ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.clone(); }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MediumRoomThreeView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    poly() { return this.angledRoofPoly() }\r\n\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Huge\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Large\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 2\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaceCount = 3\r\n    poly() { return this.angledRoofPoly() }\r\n    //devicePlaces() {\r\n    //    let w = this.getWidth()/2\r\n    //    let x = this.pos.x + w;\r\n    //    let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n    //    let ds = [\r\n    //        new Vector(x - w / 2, y),\r\n    //        new Vector(x, y),\r\n    //        new Vector(x + w / 2, y),\r\n    //    ]\r\n\r\n    //    return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    //}\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { range, eachCons, measureDistance } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.planet.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        // super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length-1])\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n\r\n        return g\r\n\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.clone().darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector, Color } from \"excalibur\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n// import { drawRect, drawPatternedRect } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { drawPatternedRect, drawRect, drawPatternedPoly, drawPoly } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    get floorHeight() { return this.getHeight() / 6 }\r\n    // floorHeight: number = 10\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    poly() { return this.aabbPoly() } //angledRoofPoly() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        let floorColor = this.planet.color.darken(0.6)\r\n\r\n        drawPatternedPoly(\r\n            ctx,\r\n            this.poly(),\r\n            this.backgroundPattern\r\n        )\r\n\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black.clone()\r\n            c.a = 0.6\r\n            drawPoly(ctx, this.poly(), c)\r\n        }\r\n\r\n        let floorEdgeHeight = 12 // 6\r\n        let floorOff = -5\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorEdgeHeight,\r\n              width: this.getWidth(), height: floorEdgeHeight - floorOff },\r\n              0,\r\n              floorColor.lighten(0.4)\r\n        )\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorOff,\r\n              width: this.getWidth(), height: this.floorHeight + floorOff },\r\n              0,\r\n              floorColor\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let slots: Slot[] = this.slots()\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        // draw from left slot to each device place to right slot?\r\n        let leftSlot = find(slots[0].pos), rightSlot = find(slots[1].pos)\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        return g\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    devicePlaceSize: DeviceSize = DeviceSize.Small\r\n    devicePlaceCount: number = 2\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"0a266eded2bf27831b18735ffc081448.png\";","module.exports = __webpack_public_path__ + \"2475589a97ba4901bfa7ab53b5487778.png\";","module.exports = __webpack_public_path__ + \"98240dde9344ac8d071d076ac951e15d.png\";","module.exports = __webpack_public_path__ + \"da31cf43235263c1c3e0ad45a46360a1.png\";","module.exports = __webpack_public_path__ + \"a6a38278ac501400c6199e0df9e1bf84.png\";","module.exports = __webpack_public_path__ + \"ece1d5d5858bc048d2d949ecc3f5e9bc.png\";","module.exports = __webpack_public_path__ + \"3654f0489813e0668743efde017c9653.png\";","module.exports = __webpack_public_path__ + \"3abbdabf07943966f102ac7345a59986.png\";","module.exports = __webpack_public_path__ + \"d1b4690b9f5fa4957f98602afc8cfdb6.png\";","module.exports = __webpack_public_path__ + \"0eb7a15ea04678b14a2b88b5965aabeb.png\";","module.exports = __webpack_public_path__ + \"36a02c2483b688be86ce07bea4bd7295.svg\";","module.exports = __webpack_public_path__ + \"29c5f1be64c99bbc14d5063eea2f0953.svg\";","module.exports = __webpack_public_path__ + \"502f86b65239e20806bbae8bc77a6116.svg\";","module.exports = __webpack_public_path__ + \"5289b20985e3c3a98081267a2da1772e.svg\";","module.exports = __webpack_public_path__ + \"1d893905e4eea3bbc48b0e129e318ea6.svg\";","module.exports = __webpack_public_path__ + \"bd556d00e484db4e52d198d0bf39d0f2.svg\";","module.exports = __webpack_public_path__ + \"650cd431226df0755357c71d61bef1f2.svg\";","module.exports = __webpack_public_path__ + \"f12c591f538ab3026bf13e93f3fa9485.svg\";","module.exports = __webpack_public_path__ + \"3aeb9dd24809ba3fbd4eeb31a28c3b19.svg\";","module.exports = __webpack_public_path__ + \"6cc6f6773bb6eb26fcef87b9629f7b87.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"24611230ec712ba7ee38b99561aedd87.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { ResourceBlock } from \"./Economy\";\r\n\r\nexport type MechanicalOperation =\r\n    Recipe |\r\n    ResourceGenerator |\r\n    ResourceStorage |\r\n    SpawnClone |\r\n    AccelerateTime |\r\n    Noop\r\n\r\nexport interface Noop {\r\n    type: 'noop'\r\n}\r\n\r\nexport interface Recipe {\r\n    type: 'recipe'\r\n    consumes: ResourceBlock[]\r\n    produces: ResourceBlock\r\n    workTime: number\r\n}\r\n\r\nexport interface ResourceGenerator {\r\n    type: 'generator'\r\n    generates: ResourceBlock\r\n    generationTime: number\r\n    capacity: number\r\n}\r\n\r\nexport interface ResourceStorage {\r\n    type: 'store'\r\n    stores: ResourceBlock[]\r\n    capacity: number\r\n}\r\n\r\nexport interface SpawnClone {\r\n    type: 'spawn'\r\n}\r\n\r\nexport interface AccelerateTime {\r\n    type: 'accelerate'\r\n    factor: number\r\n}\r\n\r\nfunction store(res: ResourceBlock[], capacity: number = 10): ResourceStorage {\r\n    return {\r\n        type: 'store',\r\n        stores: res,\r\n        capacity\r\n    }\r\n}\r\n\r\nfunction generate(res: ResourceBlock, cap: number = 4): ResourceGenerator {\r\n    return {\r\n        type: 'generator',\r\n        generates: res,\r\n        generationTime: 1000,\r\n        capacity: cap\r\n    }\r\n}\r\n\r\nfunction recipe(input: ResourceBlock[], output: ResourceBlock): Recipe {\r\n    return {\r\n        type: 'recipe',\r\n        consumes: input,\r\n        produces: output,\r\n        workTime: 1000,\r\n    }\r\n}\r\n\r\nfunction spawn(): SpawnClone {\r\n    return {\r\n        type: 'spawn',\r\n    }\r\n}\r\n\r\nfunction accelerateTime(): AccelerateTime {\r\n    return {\r\n        type: 'accelerate',\r\n        factor: 2\r\n    }\r\n}\r\n\r\nexport const mechanicalOperations = {\r\n    store,\r\n    generate,\r\n    recipe,\r\n    spawn,\r\n    accelerateTime,\r\n}","import { Input, Scene, Timer, Vector } from \"excalibur\";\r\nimport { Building, structureViews } from \"../actors/Building\";\r\nimport { DevicePlace } from \"../actors/Building/Building\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Game } from \"../Game\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { LivingQuarters, MissionControl, SolarArray, SpaceFunction, CloneReception, Kitchen, Workshop, Archive, Refinery, Mine } from \"../models/SpaceFunction\";\r\nimport { Corridor, HugeRoom, LargeRoom, MainTunnel, MediumRoomThree, SmallDome, SmallRoomThree, Structure, SurfaceRoad } from \"../models/Structure\";\r\nimport { flatSingle, zip } from \"../Util\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { Orientation } from \"../values/Orientation\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    placingFunction: SpaceFunction = null\r\n\r\n    time: number = Game.startHour*60\r\n\r\n    static requiredStructuresAndFunctions: (typeof SpaceFunction | typeof Structure)[] = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        SolarArray,\r\n        // LifeSupportPod,\r\n        MainTunnel,\r\n        Corridor,\r\n        LivingQuarters,\r\n        // CloneMatrix,\r\n        // CloneReception,\r\n        // Kitchen,\r\n        // Workshop,\r\n        // // Study,\r\n        // // Library,\r\n        // Archive,\r\n        // Refinery,\r\n        // Mine,\r\n        // ComputerCore,\r\n        \r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, false, this.time)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        let buildIt = (e) => this.startConstructing(e)\r\n\r\n        this.hud = new Hud(game, buildIt, buildIt, buildIt)\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(\r\n            game.world,\r\n            this.hud,\r\n            (b) => this.hud.showCard(b),\r\n            (d) => this.hud.showCard(d)\r\n        )\r\n\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.pos.y = this.planet.getTop() - 1000\r\n        this.camera.zoom(0.01)\r\n        this.camera.zoom(0.125, 10000)\r\n\r\n        this.addTimer(\r\n            new Timer(() => { this.stepTime() }, 50, true)\r\n        )\r\n    }\r\n\r\n    private stepTime() { \r\n        this.time += 1 //.25\r\n        this.planet.setTime(this.time) \r\n    }\r\n\r\n    public onActivate() {\r\n        // this.game.controller.activate()\r\n\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n\r\n                // this.camera.pos.x = Math.max(\r\n                //     this.camera.pos.x,\r\n                //     -this.planet.getWidth() ///4\r\n                // )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n\r\n                            if (this.placingFunction) {\r\n                                let fn = this.placingFunction\r\n                                // console.log({ fn, bldg: buildingUnderConstruction })\r\n                                zip(fn.machines, buildingUnderConstruction.devicePlaces()).forEach(([machine, place]: [typeof Machine, DevicePlace]) => {\r\n                                    console.log(\"would add machine\", { machine, place })\r\n                                    let m = (new machine()).concretize()\r\n                                    let device = new Device(m, place.position)\r\n                                    buildingUnderConstruction.addDevice(device)\r\n                                })\r\n                                this.placingFunction = null\r\n                            }\r\n\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        let { Up, Down, Left, Right } = Orientation;\r\n        let moveCam = (direction: Orientation) => {\r\n            let camMoveSpeed = 10 * (1/this.camera.getZoom())\r\n            let dv = new Vector(0,0)\r\n            switch(direction) {\r\n            case Left: dv.x = -camMoveSpeed; break\r\n            case Right: dv.x = camMoveSpeed; break\r\n            case Up: dv.y = -camMoveSpeed; break\r\n            case Down: dv.y = camMoveSpeed; break\r\n            }\r\n            // console.log(\"MOVING CAM\", { direction, dv, camMoveSpeed })\r\n            this.camera.move(this.camera.pos.add(dv), 0) //pos.addEqual(dv)\r\n        }\r\n\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                this.planet.colony.currentlyConstructing = null\r\n                this.placingFunction = null\r\n                this.hud.setMessage(this.defaultMessage); //'Welcome to the Colony, Commander.')\r\n            } else if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                moveCam(Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                moveCam(Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                moveCam(Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                moveCam(Right)\r\n            }\r\n        })\r\n        this.game.input.keyboard.on('hold', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                moveCam(Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                moveCam(Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                moveCam(Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                moveCam(Right)\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingStructureOrFunction(): Structure | SpaceFunction {\r\n        let reqs = Construct.requiredStructuresAndFunctions.map(req => new req())\r\n\r\n        let actualStructureNames = this.buildings.map(building => building.structure.name)\r\n        let actualFunctionNames = flatSingle(\r\n            this.buildings.map(building => building.spaceFunction && building.spaceFunction.name)\r\n        )\r\n        let actualNames = [...actualStructureNames, ...actualFunctionNames]\r\n        return reqs.find(req => !actualNames.includes(req.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingStructureOrFunction() //this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.showPalettes()\r\n        }\r\n    }\r\n\r\n    firstBuilding: boolean = true\r\n    startConstructing(structureOrMachine: Structure | Machine | SpaceFunction, pos: Vector = new Vector(0, 0)) {\r\n        this.hud.showCard(structureOrMachine)\r\n        \r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            this.hud.setMessage(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            if (this.firstBuilding) {\r\n                this.camera.zoom(structure.zoom, 250)\r\n                this.camera.pos = theNextOne.pos\r\n                this.firstBuilding = false\r\n            } \r\n        } else if (structureOrMachine instanceof Machine) {\r\n            let machine = structureOrMachine\r\n            this.hud.setMessage(`Install ${machine.name} (${machine.description})`)\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            // this.camera.zoom(1.5, 250)\r\n        } else if (structureOrMachine instanceof SpaceFunction) {\r\n            let fn: SpaceFunction = structureOrMachine\r\n            this.hud.setMessage(`Place ${fn.name} (${fn.description})`)\r\n            theNextOne = this.spawnFunction(fn, pos)\r\n            this.placingFunction = fn\r\n\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        if (device.snap(this.planet)) {\r\n            this.camera.pos = device.pos\r\n \r\n        }\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n\r\n    protected spawnFunction(fn: SpaceFunction, pos: Vector): Building {\r\n        let theStructure: Structure = (fn.structure && new fn.structure()) // || new SmallRoomThree()\r\n        if (!theStructure) {\r\n            theStructure = new SmallRoomThree()\r\n            let machines = fn.machines.map(m => new m())\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Medium)) {\r\n                theStructure = new MediumRoomThree()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Large)) {\r\n                theStructure = new LargeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Huge)) {\r\n                theStructure = new HugeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.forDome)) {\r\n                theStructure = new SmallDome()\r\n            }\r\n        }\r\n\r\n        // console.log(\"SPAWN FUNCTION\", { fn, structure: theStructure })\r\n        let building = this.assembleBuildingFromStructure(theStructure, pos)\r\n        building.reshape(building.constrainCursor(building.pos))\r\n        return building\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Orange, Color.Red, Color.Blue, Color.Green] //, Color.Violet] //, Color.White]\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion, Color.Violet, Color.Chartreuse ] ).\r\n        lighten(0.15).\r\n        desaturate(0.65)\r\n\r\n}","module.exports = __webpack_public_path__ + \"37914c496c3c503f7a53d7c9a1457b53.mp3\";","module.exports = __webpack_public_path__ + \"1b8e735649248c4c552a84996e61f241.mp3\";","module.exports = __webpack_public_path__ + \"1a607294aebce07746d6f25ffa517d80.mp3\";","module.exports = __webpack_public_path__ + \"22bdefc1e8515661fdeb8e8076820641.mp3\";","module.exports = __webpack_public_path__ + \"cf150ab26eba01503f4f6dc3d9ab47f7.mp3\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\nimport { Resources } from './Resources';\r\nimport { Sound } from 'excalibur';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n  // setTimeout(() => {\r\n  //   console.log(\"let's jam!\");\r\n  //   let jam: Sound = Resources.CraterRock //play();\r\n  //   jam.play()\r\n  // }, 1500)\r\n  // jam.oncomplete = () => jam.play()\r\n});\r\n"],"sourceRoot":""}