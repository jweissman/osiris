{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Structure.ts","webpack:///./src/Util.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/actors/Hud.ts","webpack:///./src/actors/Building/LivingQuartersView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/MissionControlView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/AccessTunnelView.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/Game.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","ex","Orientation_1","Building","Actor","[object Object]","structure","planet","super","origin","x","y","width","height","color","this","built","hover","facing","Orientation","Right","console","log","setup","traits","filter","trait","Traits","OffscreenCulling","on","collisionType","CollisionType","PreventCollision","cursor","clone","pos","size","getWidth","getHeight","other","rect1","aabb","rect2","buildings","find","bldg","overlaps","processedColor","lighten","darken","clr","colorBase","overlapsAny","Color","Red","a","Structure","Vector","description","view","zoom","MissionControl","MainTunnel","Dome","AccessTunnel","CommonArea","LivingQuarters","t","e","extremumBy","arr","pluck","extremum","reduce","best","next","pair","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","getVector","predicate","matching","distanceToCursor","elem","distance","Left","Up","Down","Building_1","AccessTunnelView_1","AccessTunnelView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","MissionControlView_1","MissionControlView","TunnelView_1","TunnelView","LivingQuartersView_1","LivingQuartersView","Hud","UIActor","label","Label","fontSize","White","add","text","_1","Structure_1","Util_1","edgeWidth","closestCommon","closestBuildingByType","slots","closestSlot","ctx","save","translate","theta","PI","rotate","edge","edgeColor","fillStyle","toRGBA","fillRect","main","mainColor","restore","pickingOrigin","lastCtrl","getTop","setHeight","depth","flagX","flagY","beginPath","arc","closePath","theSlots","xRange","yRange","topSlot","parent","bottomSlot","leftSlot","rightSlot","newCursor","reshape","constrainCursor","tunnel","nearestTunnel","setWidth","abs","delta","Player","Mountains","peaks","xOff","peakDistance","times","heightRange","drift","baseColor","desaturate","brightColor","saturate","yBase","forEach","peak","y0","mtnWidth","moveTo","lineTo","PlanetBackground_1","Planet","createLayer","layerHeight","theLayer","building","structureType","vec","Planet_1","player_1","Hud_1","Construct","Scene","currentBuildingListIndex","dragging","game","world","player","hud","prepareNextBuilding","camera","input","pointers","primary","dragOrigin","sub","currentBuilding","currentlyBuilding","constrained","button","Input","PointerButton","placementValid","handleClick","placeBuilding","Middle","z","getZoom","deltaY","keyboard","key","Keys","H","move","off","requiredStructures","requiredStructureList","actualStructureNames","includes","structureList","nextMissing","nextMissingRequiredStructure","message","theNextOne","spawnBuilding","anotherBuilding","assembleBuildingFromStructure","structureViews","firstStructure","secondStructure","Colony","structures","World","colors","skyColor","Cyan","Vermillion","colony","Blue","Green","sword","Resources","Sword","Texture","Resources_1","Game","Engine","displayMode","DisplayMode","FullScreen","backgroundColor","loader","Loader","addResource","start","Game_1","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([21,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Actor, Vector, InitializeEvent, CollisionType, Color } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure } from \"../../models/Structure\";\r\n// import { OffscreenCulling } from \"excalibur\";\r\nimport * as ex from 'excalibur';\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\n\r\nexport class Building extends Actor {\r\n    // isOffScreen() { return false; }\r\n\r\n    // isOffScreen: boolean = false\r\n    \r\n    built: boolean = false\r\n    hover: boolean = false\r\n    // : boolean = false\r\n    // pickOriginFirst: boolean = false\r\n    // pickingOrigin: boolean = false\r\n    // constrain: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n\r\n    constructor(public structure: Structure, protected planet: Planet) {\r\n        super(structure.origin.x, structure.origin.y, structure.width, structure.height, planet.color)\r\n        console.log(`CREATE NEW ${structure.name}`, { origin: structure.origin, width: structure.width, height: structure.height })\r\n        this.setup(); //(structure, planet)\r\n        // this.collisionType = CollisionType.Fixed\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            //this.baseColor = DomeView.basicColor.clone()\r\n            //this.baseColor.a = 0.5\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n            //this.baseColor = DomeView.basicColor.clone()\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n    }\r\n\r\n    setup(): void {}\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n\r\n    reshape(cursor: Vector): void {\r\n        // by default just follow the mouse?\r\n        this.pos = cursor.clone()\r\n\r\n    }\r\n\r\n    // response is whether we're 'done'\r\n    // (in general this would be true, unless you need special handling\r\n    // -- multiple clicks for some reason...)\r\n    handleClick(cursor: Vector): boolean { return true; }\r\n\r\n    slots(size: number): Slot[] {\r\n        return []\r\n    }\r\n    protected aabb() {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        return (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.5); // : this.color.\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color { //} = this.color.darken(0.2)\r\n        let main = this.processedColor().darken(0.08); // : this.color.\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n}","import { Vector } from 'excalibur';\r\n\r\nexport class Structure {\r\n    name: string = '(default structure name)';\r\n    description: string = '(default structure description)';\r\n    view: string = '<add a default structure (room) view>';\r\n    width: number = 10;\r\n    height: number = 10;\r\n    zoom: number = 2 //.25\r\n    constructor(public origin: Vector = new Vector(0, 0)) { }\r\n}\r\n\r\nexport class MissionControl extends Structure {\r\n    name: string = 'Mission Control';\r\n    description: string = 'Keeping everything on track';\r\n    view: string = 'MissionControlView';\r\n    width: number = 60;\r\n    height: number = 14;\r\n    zoom = 1\r\n}\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = 30;\r\n    height: number = 100;\r\n    zoom = 0.25\r\n}\r\n\r\nexport class Dome extends Structure {\r\n    name: string = 'Biodome';\r\n    description: string = 'Biome sweet biome';\r\n    view: string = 'DomeView';\r\n    width: number = 80;\r\n    height: number = 60;\r\n}\r\n\r\nexport class AccessTunnel extends Structure {\r\n    name: string = 'Access Tunnel'\r\n    description: string = 'in the hallway'\r\n    view: string = 'AccessTunnelView'\r\n    width: number = 10\r\n    height: number = 7\r\n}\r\n\r\nexport class CommonArea extends Structure {\r\n    name: string = 'Common Area'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = 120\r\n    height: number = 70\r\n}\r\n\r\nexport class LivingQuarters extends Structure {\r\n    name: string = 'Living Quarters'\r\n    description: string = 'sleepy time'\r\n    view: string = 'LivingQuartersView'\r\n    width: number = 15\r\n    height: number = 20\r\n}","import { Vector } from \"excalibur\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem)) //vec) => cursor.distance(vec)\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }","import { Building } from './Building';\r\n\r\nimport { AccessTunnelView } from './AccessTunnelView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { MissionControlView } from './MissionControlView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { LivingQuartersView } from './LivingQuartersView';\r\n\r\nexport {\r\n    Building,\r\n\r\n    AccessTunnelView,\r\n    CommonAreaView,\r\n    DomeView,\r\n    MissionControlView,\r\n    TunnelView,\r\n    LivingQuartersView,\r\n}","import { Label, UIActor, Color } from \"excalibur\";\r\n\r\nexport class Hud extends UIActor {\r\n    label: Label\r\n    constructor() {\r\n        super(0,0);\r\n        this.label = new Label('land anywhere', 20, 50, 'Helvetica')\r\n        this.label.fontSize = 32\r\n        this.label.color = Color.White\r\n        this.add(this.label)\r\n    }\r\n\r\n    message(text: string) { this.label.text = text }\r\n}","import { Building } from \".\";\r\nimport { CommonArea } from \"../../models/Structure\";\r\nimport { Vector } from \"excalibur\";\r\nimport { closest } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class LivingQuartersView extends Building {\r\n    edgeWidth: number = 2\r\n\r\n    constrainCursor(cursor: Vector) {\r\n        // okay, we want the nearest slots of the nearest building\r\n        let closestCommon = this.planet.closestBuildingByType(cursor, CommonArea)\r\n        if (closestCommon) {\r\n            if (closestCommon.slots(this.getWidth()).length > 0) {\r\n                let slots: Slot[] = closestCommon.slots(this.getWidth())\r\n                let closestSlot: Slot = closest(cursor, slots, s => s.pos)\r\n                this.facing = -closestSlot.facing //.facing * 90\r\n                return closestSlot.pos\r\n            }\r\n        }\r\n        return cursor\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.save()\r\n        ctx.translate(this.pos.x, this.pos.y)\r\n\r\n        let theta = this.facing * (Math.PI/2)\r\n        ctx.rotate(theta) \r\n\r\n        let edge = this.edgeColor();\r\n        ctx.fillStyle = edge.toRGBA();\r\n        ctx.fillRect(-this.getWidth(), 0, this.getWidth(), this.getHeight())\r\n\r\n        let main = this.mainColor();\r\n        ctx.fillStyle = main.toRGBA();\r\n        ctx.fillRect(\r\n            this.edgeWidth - this.getWidth(),\r\n            this.edgeWidth,\r\n            this.getWidth() - this.edgeWidth*2,\r\n            this.getHeight() - this.edgeWidth*2\r\n        )\r\n\r\n        ctx.restore()\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { MissionControl } from \"../../models/Structure\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n\r\n    handleClick(cursor: Vector) {\r\n        // pick nearest mission ctrl as origin\r\n        if (this.pickingOrigin) {\r\n            let lastCtrl: Building = this.planet.closestBuildingByType(\r\n                this.pos, MissionControl // 'Mission Control'\r\n            )\r\n            this.pos.x = lastCtrl.x + lastCtrl.getWidth() / 2 - this.getWidth() / 2 //[0].x\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // picking a depth for a tunnel first?\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            // snap to nearest mission ctrl?\r\n            let lastCtrl: Building = this.planet.closestBuildingByType(\r\n                cursor,  MissionControl //'Mission Control'\r\n            )\r\n            this.pos.x = lastCtrl.x + lastCtrl.getWidth() / 2 - this.getWidth() / 2 //[0].x\r\n\r\n        } else {\r\n            // we're determining depth of tunnel\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        let depth = this.getHeight()\r\n        let width = this.getWidth()\r\n        let edgeWidth = 4\r\n\r\n        let edgeColor = this.edgeColor()\r\n        let mainColor = this.mainColor()\r\n\r\n        ctx.fillStyle = edgeColor.toRGBA()\r\n        ctx.fillRect(this.x, this.y, width, depth)\r\n\r\n        if (this.pickingOrigin) { mainColor.a = 0.5 }\r\n        ctx.fillStyle = mainColor.toRGBA()\r\n        ctx.fillRect(this.x + edgeWidth, this.y, width - edgeWidth*2, depth)\r\n    }\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n}","import { Actor, Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"../Planet/Planet\";\r\n\r\nexport class MissionControlView extends Building {\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        // cursor.x = this.x //.getTop()\r\n        cursor.y = this.planet.getTop(); //Math.max(planet.getTop() + 100, cursor.y)\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor // x = cursor.x\r\n        this.pos.y -= this.getHeight() - 2 // + 1\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        let color = this.mainColor(); //Color.White //.darken(0.3)\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n        // y is going to be surface height\r\n        ctx.fillRect(this.x, this.y, this.getWidth(), this.getHeight())\r\n\r\n        // could draw a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.x + 3*(this.getWidth()/4)\r\n        let flagY = this.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        // shadow?\r\n        //ctx.fillStyle = this.color.darken(0.2).toRGBA()\r\n        //ctx.fillRect(this.x, this.y, this.getHeight())\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\n\r\n// we're constrained to the surface, so...\r\nexport class DomeView extends Building {\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        // cursor.x = this.x //.getTop()\r\n        cursor.y = this.planet.getTop(); //Math.max(planet.getTop() + 100, cursor.y)\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor // x = cursor.x\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.x + this.getWidth()/2,\r\n            this.y,\r\n            this.getHeight(), // / 2,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } // this.baseColor; }\r\n}","import { Building } from \"./Building\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { AccessTunnelView } from \"./AccessTunnelView\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { AccessTunnel } from \"../../models/Structure\";\r\nimport { range } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    // maybe you can set height AND width of common area view??\r\n\r\n    slots(size: number) {\r\n        // we have slots along top (for now)\r\n        let theSlots = []\r\n        let xRange = Math.floor(this.getWidth() / size)\r\n        let yRange = Math.floor(this.getHeight() / size)\r\n        for (let x of range(xRange)) {\r\n            let topSlot: Slot = {\r\n                pos: new Vector(x*size + this.pos.x, this.pos.y),\r\n                facing: Orientation.Up,\r\n                size,\r\n                parent: this\r\n            }\r\n            theSlots.push(topSlot)\r\n\r\n            let bottomSlot: Slot = {\r\n                pos: new Vector(x*size + this.pos.x, this.pos.y+this.getHeight()),\r\n                facing: Orientation.Down,\r\n                size,\r\n                parent: this\r\n            }\r\n            theSlots.push(bottomSlot)\r\n        }\r\n        for (let y of range(yRange)) {\r\n            let leftSlot: Slot = {\r\n                pos: new Vector(this.pos.x, y*size+this.pos.y),\r\n                facing: Orientation.Left,\r\n                size,\r\n                parent: this\r\n            }\r\n            theSlots.push(leftSlot)\r\n\r\n            let rightSlot: Slot = {\r\n                pos: new Vector(this.pos.x+this.getWidth(), y*size+this.pos.y),\r\n                facing: Orientation.Right,\r\n                size,\r\n                parent: this\r\n            }\r\n            theSlots.push(rightSlot)\r\n        }\r\n        // console.log({ theSlots })\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor) {\r\n        let newCursor = cursor.clone()\r\n        let closest = this.planet.closestBuildingByType(\r\n            cursor, AccessTunnel //'Access Tunnel'\r\n        )\r\n\r\n        // try to pick the cap??\r\n        if (closest) {\r\n            if ((<AccessTunnelView>closest).facing === Orientation.Left) {\r\n                newCursor.x = closest.x - closest.getWidth() - this.getWidth()\r\n            } else {\r\n                newCursor.x = closest.x + closest.getWidth()\r\n            }\r\n            newCursor.y = closest.y - this.getHeight() + closest.getHeight() + 5 // closest.edgeSize // / 2\r\n        }\r\n\r\n        return newCursor\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        let edgeWidth = 4;\r\n\r\n        // console.log(\"draw common area\", { pos: this.pos, size: [ this.getWidth(), this.getHeight() ]})\r\n\r\n        let edge = this.edgeColor();\r\n        ctx.fillStyle = edge.toRGBA();\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        let main = this.mainColor();\r\n        ctx.fillStyle = main.toRGBA();\r\n        ctx.fillRect(\r\n            this.pos.x + edgeWidth,\r\n            this.pos.y + edgeWidth,\r\n            this.getWidth() - edgeWidth*2,\r\n            this.getHeight() - edgeWidth*2\r\n        )\r\n\r\n    }\r\n\r\n    // colorBase() { return this.color.darken(0.8)}\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { MainTunnel } from \"../../models/Structure\";\r\n\r\nexport class AccessTunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n    // multipleClicks: boolean = true\r\n\r\n    aabb() {\r\n        return this.facing === Orientation.Right ? super.aabb() : {\r\n            x: this.pos.x - this.getWidth(),\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            // this.pos = this.constrainCursor(cursor)\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // picking a depth for a tunnel first?\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        // always attached to closest tunnel\r\n        if (this.pickingOrigin) {\r\n            // let tunnel: Building = this.tunnelTo(cursor) \r\n            let tunnel = this.nearestTunnel(cursor)\r\n            if (cursor.x > tunnel.x + tunnel.getWidth() / 2) {\r\n                newCursor.x = tunnel.x + tunnel.getWidth() // + 1\r\n            } else {\r\n                newCursor.x = tunnel.x - this.getWidth() // - 1\r\n            }\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        // cursor.x = this.x //.getTop()\r\n        // cursor.x = Math.max(this.x + 10, cursor.x)\r\n        return newCursor;\r\n    }\r\n\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let tunnel = this.nearestTunnel(cursor)\r\n\r\n            if (cursor.x > tunnel.x + tunnel.getWidth() / 2) {\r\n                this.pos.x = tunnel.x + tunnel.getWidth() // + 1\r\n                this.facing = Orientation.Right\r\n            } else {\r\n                this.pos.x = tunnel.x // - this.getWidth() // - 1\r\n                this.facing = Orientation.Left\r\n            }\r\n\r\n            this.pos.y = // cursor.y\r\n                Math.min(\r\n                    Math.max(cursor.y, tunnel.y + 10),\r\n                    tunnel.y + tunnel.getHeight() - this.getHeight() - 10\r\n                )\r\n        } else {\r\n            this.setWidth(Math.abs(this.pos.x - cursor.x)) //planet.getTop())\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let edgeWidth = 1\r\n        let edgeColor = this.edgeColor().toRGBA(); //color.lighten(0.5)\r\n        let mainColor = this.mainColor().toRGBA(); //color.darken(0.2)\r\n\r\n        ctx.fillStyle = this.color.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        ctx.save()\r\n        ctx.translate(this.pos.x, this.pos.y)\r\n\r\n        let theta = this.facing * (Math.PI/2)\r\n        ctx.rotate(theta) \r\n\r\n        ctx.fillStyle = edgeColor;\r\n        ctx.fillRect(-this.getWidth(), 0, this.getWidth(), this.getHeight())\r\n        ctx.fillStyle = mainColor;\r\n        ctx.fillRect(-this.getWidth(), edgeWidth, this.getWidth(), this.getHeight() - edgeWidth * 2)\r\n\r\n        ctx.restore()\r\n    }\r\n\r\n    protected nearestTunnel(pos: Vector) {\r\n        return this.planet.closestBuildingByType(\r\n            pos, MainTunnel //'Main Tunnel'\r\n        )\r\n    }\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 30; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 1000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(10)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, peakHeight + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, range } from '../../Util';\r\nimport { Citizen } from '../Citizen';\r\nimport { Game } from '../../Game';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\n\r\nexport class Planet extends Actor {\r\n    buildings: Building[] = []\r\n    citizens: Citizen[]\r\n\r\n    constructor(\r\n        // public effectiveY: number,\r\n        public color: Color,\r\n        public width: number = 2000000,\r\n        public depth: number = 100000,\r\n        ) {\r\n        super(0, 0, width, depth, color) //effectiveY + size/2, size, size, color) //Color.Transparent)\r\n            //0,0,0,Color.Transparent) \r\n        // this.visible = false\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2 // effectiveY + size/2\r\n        // crust\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 20\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true\r\n        this.buildings.push(building);\r\n\r\n        // let citizen = new Citizen(building.x + 10, building.y + building.getHeight());\r\n        // // citizen.setZIndex(10)\r\n        // this.add(citizen)\r\n        // citizen.z = 10\r\n        // citizen.setZIndex(10)\r\n    }\r\n\r\n\r\n    closestBuildingByType(cursor: Vector, structureType: typeof Structure): Building {\r\n        let matching = this.buildings.filter(building => \r\n            building.structure instanceof structureType //.name === structureName\r\n        )\r\n\r\n        if (matching) {\r\n            let distanceToCursor = (vec) => cursor.distance(vec)\r\n            return minBy(matching, distanceToCursor)\r\n        }\r\n    }\r\n}","import { Scene, Input, UIActor, Label, Vector } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MissionControl, MainTunnel, Dome, AccessTunnel, CommonArea, LivingQuarters } from \"../models/Structure\";\r\nimport { Building, DomeView, AccessTunnelView, CommonAreaView, TunnelView, MissionControlView, LivingQuartersView } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud\";\r\n\r\nexport class Construct extends Scene {\r\n    private currentBuildingListIndex: number = 0\r\n\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n    buildings: Building[] = []\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    currentlyBuilding?: Building\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        this.planet = new Planet(game.world.color);\r\n        this.add(this.planet)\r\n\r\n        // let { structures } = this.game.world.colony\r\n        // console.log(\"building structures...\")\r\n        // structures.forEach((structure: Structure) => this.spawnBuilding(structure))\r\n\r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.hud = new Hud();\r\n        this.add(this.hud)\r\n\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.5)\r\n        this.camera.y = -this.planet.depth/2\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentBuilding = this.currentlyBuilding\r\n                if (currentBuilding) {\r\n                    // constrain...\r\n                    let constrained = currentBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentBuilding.reshape(this.player.pos)\r\n                } else {\r\n                    // show pluses where you could expand?\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', (e: Input.PointerUpEvent) => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentBuilding: Building = this.currentlyBuilding\r\n                let placementValid = !currentBuilding.overlapsAny()\r\n                if (currentBuilding && placementValid && currentBuilding.handleClick(e.pos)) {\r\n                    this.planet.placeBuilding(currentBuilding)\r\n                    this.prepareNextBuilding(e.pos)\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.planet.buildings && this.planet.buildings[0]) {\r\n                    this.camera.move(this.planet.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n    ////\r\n    static firstStructure = new MissionControl();\r\n    static secondStructure = new MainTunnel();\r\n\r\n    static requiredStructureList: Structure[] = [\r\n        new MissionControl(),\r\n        new MainTunnel(),\r\n        new Dome(),\r\n    ]\r\n\r\n    static structureList: Structure[] = [\r\n        //new Dome(),\r\n        //new Dome(),\r\n        //new Dome(),\r\n        new AccessTunnel(),\r\n        new CommonArea(),\r\n        new LivingQuarters(),\r\n        new LivingQuarters(),\r\n        new LivingQuarters(),\r\n    ]\r\n\r\n    private nextMissingRequiredStructure(): Structure {\r\n        let requiredStructures: Structure[] = Construct.requiredStructureList\r\n        let actualStructureNames: string[] = this.buildings.map(building => building.structure.name)\r\n\r\n        // console.log({ actualStructureNames, requiredNames: requiredStructures.map(s => s.name) })\r\n        return requiredStructures.find(structure => !actualStructureNames.includes(structure.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = Construct.structureList[this.currentBuildingListIndex % Construct.structureList.length]; \r\n        let nextMissing = this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        else { this.currentBuildingListIndex += 1 }\r\n        structure.origin = pos\r\n        this.hud.message(`Place ${structure.name}`)\r\n        let theNextOne = this.spawnBuilding(structure)\r\n        this.currentlyBuilding = theNextOne\r\n        // this.camera.pos = theNextOne.constrainCursor(this.player.pos) //camera.pos)\r\n        this.camera.pos = theNextOne.pos // move(theNextOne.pos, 250)\r\n        this.camera.zoom(structure.zoom, 250)\r\n    }\r\n\r\n    static structureViews: { [key: string]: typeof Building } = {\r\n        TunnelView,\r\n        MissionControlView, //: new MissionControlView()\r\n        DomeView,\r\n        AccessTunnelView,\r\n        CommonAreaView,\r\n        LivingQuartersView\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure): Building {\r\n        console.log(\"spawn\", { structure })\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(anotherBuilding.pos))\r\n        this.add(anotherBuilding)\r\n        this.buildings.push(anotherBuilding)\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure): Building {\r\n        let View = Construct.structureViews[structure.view]\r\n        let building = new View(structure, this.planet)\r\n        return building;\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\n\r\nexport class Colony {\r\n    // origin: Vector\r\n    structures: Structure[] = []\r\n    // build(structure) ...\r\n}\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Red, Color.Blue, Color.Green] // Color.Viridian, Color.Magenta, Color.Chartreuse];\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ). // Color.Rose //World.colors).\r\n        lighten(0.15).\r\n        desaturate(0.65) // sample([Color.Blue, Color.Rose,Color.Blue]).lighten(0.1).desaturate(0.8)\r\n  colony: Colony = new Colony()\r\n}","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword)\r\n}\r\n\r\nexport { Resources }\r\n","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() { //loader: ex.Loader) {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\n// scenes\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}