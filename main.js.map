{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Util.ts","webpack:///./src/values/DeviceSize.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Economy.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/models/Machine.ts","webpack:///./src/Painting.ts","webpack:///./src/models/Structure.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/actors/Device.ts","webpack:///./src/actors/Building/BackgroundPatterns.ts","webpack:///./src/values/Scale.ts","webpack:///./src/Game.ts","webpack:///./src/strategies/Strategy.ts","webpack:///./src/values/Graph.ts","webpack:///./src/actors/Hud/Palette.ts","webpack:///./src/actors/Hud/CardBody.ts","webpack:///./src/actors/Hud/CardTitle.ts","webpack:///./src/actors/Hud/Card.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/player.ts","webpack:///./src/strategies/ConstructionStrategy.ts","webpack:///./src/strategies/ProximityBasedConstruction.ts","webpack:///./src/values/InteractionRequest.ts","webpack:///./src/strategies/ProductionStrategy.ts","webpack:///./src/strategies/CapacityBasedProduction.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Building/MediumSurfaceRoomView.ts","webpack:///./src/actors/Building/MediumRoomThreeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/images/window-bg.png","webpack:///./src/images/beige-bg.png","webpack:///./src/images/checker-bg.png","webpack:///./src/images/tech-bg.png","webpack:///./src/images/poster-wall-bg.png","webpack:///./src/images/books-bg.png","webpack:///./src/images/leafy-bg.png","webpack:///./src/images/raised-square-bg.png","webpack:///./src/images/fabricator-plain.svg","webpack:///./src/images/mega-console-plain.svg","webpack:///./src/images/console-red-plain.svg","webpack:///./src/images/console-green-plain.svg","webpack:///./src/images/console-purple-plain.svg","webpack:///./src/images/console-plain.svg","webpack:///./src/images/workstation-plain.svg","webpack:///./src/images/houseplant-plain.svg","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/models/MechanicalOperation.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","deleteByValueOnce","index","indexOf","eachCons","measureDistance","b","sleep","ms","Promise","resolve","setTimeout","shuffle","sort","zip","countOccurrences","counts","forEach","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","fifth","eighth","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","SurfaceRoadView_1","SurfaceRoadView","SmallDomeThreeView_1","SmallDomeThreeView","MidDomeView_1","MidDomeView","BigDomeView_1","BigDomeView","SmallRoomThreeView_1","SmallRoomThreeView","MediumRoomView_1","MediumRoomView","LargeRoomView_1","LargeRoomView","HugeRoomView_1","HugeRoomView","MediumRoomThreeView_1","MediumRoomThreeView","MediumSurfaceRoomView_1","MediumSurfaceRoomView","structureViews","excalibur_1","Orientation_1","Game_1","Util_1","Graph_1","Economy_1","SpaceFunction_1","DeviceSize_1","BackgroundPatterns_1","Painting_1","DevicePlace","pos","this","_super","structure","planet","_this","x","y","width","height","infra","color","darken","Color","Transparent","edgeWidth","placed","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","devices","active","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","some","currentlyViewing","toggleActive","collisionType","CollisionType","PreventCollision","nameLabel","Label","White","__extends","draw","ctx","delta","drawRect","aabb","processedColor","getCenter","measureText","Game","debugPath","slots","slot","rect","Gray","lighten","nodes","node","Yellow","devicePlaces","place","position","visibleSize","update","engine","device","tryProduce","spaceFunction","description","economy","emptyUnlessActive","isActive","emptyMarket","machineEconomies","buildingEconomy","__assign","Oxygen","demand","supply","sumMarkets","inUse","equilibrium","agg","constrainCursor","clone","reshape","afterConstruct","handleClick","_pos","getWidth","getHeight","graph","supergraph","Graph","g","rootNode","findOrCreate","_i","_a","child","parentSlot","edge","childNode","redeem","res","gather","debit","spend","populate","elite","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","find","bldg","edgeColor","mainColor","colorBase","clr","Red","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","closestBuildingByType","building","matchingSlot","compass_1","compass","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","subEqual","add","updateFunction","machine","onPlacement","hasPlaceForDevice","nextDevicePlace","getDevices","allSpaceFunctions","spaceFn","matched","unseenDevices","machines","matchingDevice","sf","text","console","warn","background","BackgroundPattern","Grid","Actor","PureValue","availableCapacity","market","Power","Water","Shelter","Hope","Joy","Wisdom","Wealth","Beauty","Wonder","allValues","ea","eb","newMarket","sa","da","_b","every","ResourceBlock","Biomass","Ore","Idea","Meal","Data","Mineral","Bioplasma","Alloy","Algorithm","Argent","Aurum","Omnium","blockColors","Green","Blue","cStep","Viridian","DarkGray","Orange","blockColor","block","desaturate","t","Left","Up","Down","orientation","Error","MechanicalOperation_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","plant","workstation","consolePurple","consoleGreen","consoleRed","megaconsole","fabricator","Violet","store","mechanicalOperations","generate","recipe","spawn","accelerateTime","Machine","LightGray","cost","operation","type","image","prereqs","forDome","hide","concretize","CommandCenter","arguments","built","produceResource","MissionLog","OxygenExtractor","WaterCondensingMachine","SolarCell","StudyMachine","Workstation","Desk","Bookshelf","Fridge","Stove","Bed","Houseplant","PersonnelRegistry","CloningVat","OrientationConsole","productionTime","AlgaeVat","DissolutionVat","PlasmaBank","Fabricator","MetalStorage","ResearchServer","Orchard","Cabin","Arbor","Botany","OreRefinery","ThinkingFountain","MolecularEngine","fromHex","LogicPool","SilverForest","Megafabricator","TimeCrystal","MiningDrill","Mainframe","Preserve","Microcity","LogicCrystal","allMachines","drawLine","lineWidth","beginPath","moveTo","lineTo","strokeStyle","toRGBA","stroke","drawPatternedRect","pattern","gridPattern","getBackgroundPattern","fillStyle","fillRect","setLineDash","strokeRect","rectangle","filled","dashed","main","drawStar","cx","cy","outerRadius","innerRadius","spikes","rot","PI","cos","sin","closePath","Machine_1","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","Structure","view","zoom","Corridor","Ladder","MainTunnel","second","MediumSurfaceRoom","SurfaceRoad","first","Dome","CommonArea","SmallRoomThree","sixth","SmallRoomTwo","SmallDome","MediumRoom","MediumRoomThree","LargeRoom","HugeRoom","seventh","SmallDomeThree","MidDome","LargeDome","Arcology","allStructures","Structure_1","SpaceFunction","Beige","bonuses","capacity","workSpeed","MissionControl","Window","LivingQuarters","Barracks","Kitchen","Checker","LifeSupportPod","Retreat","CloneMatrix","CloneReception","ReadingRoom","Library","Books","Study","ComputerLab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Leafy","Farm","Factory","ComputerCore","Tech","LifeSciencesLab","Device","initialPos","product","imageLoaded","fontSize","Image","onload","src","globalAlpha","drawImage","imageX","imageY","iv","bx","by","yOff","produced","blockSize","assemble","citizen","isCarryingUnique","progressBar","sent","drop","label","interact","request","worked","op","recipe_1","carrying","it","consumes","includes","consumed","workTime","getEffectiveWorkTime","carry","produces","requires","has","store_1","dispense","stores","getEffectiveOperationalCapacity","res_1","stored","bonus","round","resource","generationTime","generates","snap","snapped","raisedSquare","leafy","bookish","posters","tech","checker","beige","loadBg","path","loading","Poster","backgroundPatterns","bg","createPattern","majorUnit","fourth","minorUnit","minorScale","Resources_1","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","start","loader","Loader","key","Resources","addResource","citizenSpeed","Engine","InteractionRequest_1","Strategy","pawn","sleepInterval","currentPlanet","findPoweredDevices","recipes","operations","attempt","pause","gatherBlock","gathered","generatesDesiredBlock","gen","closestDeviceByType","storesDesiredBlock","visitDevice","retrieveResource","workRecipe","visit","gatherIngredients","knowsRecipe","maker","performRecipeTask","blocks","blocks_1","ingredient","empty","edges","edgesInverse","isEmpty","newNode","contains","testNode","measure","tolerance","dfs","dst","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","steps","srcIndex","reverse","Palette","all","onButtonClick","onButtonEnter","comprehend","comprehended","makePalette","_element","left","canvas","offsetLeft","top_1","offsetTop","style","top","updateBuilt","prereq","parentElement","removeChild","document","createElement","border","body","appendChild","title","textContent","fontFamily","fontWeight","padding","margin","btn","buttonFactory","onmouseenter","onclick","fg","paletteButton","display","textTransform","onmouseover","saturate","onmouseleave","Device_1","CardBody","entity","describeResources","freqs","keys","join","values","notes","fontStyle","FontStyle","Italic","footer","show","describeEconomy","bonusMessages","econ","CardTitle","Black","announce","CardTitle_1","CardBody_1","Card","x0","cardBody","y0","ix","iy","present","EconomicValue","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","allValues_1","updateView","updatedEconomy","allValues_2","ResourceListEntry","resourceBlock","icon","credit","amt","ResourceListEntry_1","ResourcesList","entries","rx","ry","entry","increment","decrement","ResourcesList_1","EconomyView_1","StatusAnalysisView","w","h","brand","ty","version","resources","popLabel","messageLabel","incrementResource","decrementResource","setMessage","showEconomy","showPopCap","cap","StatusAnalysisView_1","Card_1","Palette_1","Hud","game","onBuildingSelect","onMachineSelect","onFunctionSelect","canvasWidth","canvasHeight","hidePalettes","status","displayInfo","showCard","structurePalette","structuresForPalette","machinePalette","functionPalette","functionsForPalette","card","showPalettes","resourceGathered","resourceExpended","updateDetails","rebuildPalettes","updatePalettes","updateEconomy","updateMaxPop","maxPop","updateBuildingPalette","updateMachinePalette","updateFunctionPalette","builtStructures","findAllDevices","builtMachines","machinesForPalette","builtReifiedFunctions","builtFunctions","rf","UIActor","ex","Player","setWidth","setHeight","ConstructionStrategy","canApply","unbuiltDevice","ProxmityBasedConstruction","constructDevice","ProductionStrategy","storeBlock","openStore","CapacityBasedProduction","storeWithCapacity","storage_1","recipeForStoredResource","tryWorkingForStore","CapacityBasedProduction_1","ProximityBasedConstruction_1","Citizen","home","workInProgress","productionStrategy","constructionStrategy","isWorking","timeFactor","work","now","Date","getTime","progress","workStarted","workDuration","carried","px","pw","py","c_1","duration","reject","isCarrying","carryingCopy","missingItem_1","resToFind","pathBetween","pop","followPath","target","glideTo","actions","walkSpeed","asPromise","pathTo","Citizen_1","Population","citizens","increase","NavigationTree","seekPath","origin","dest","closestNode","abs","NavigationTree_1","Colony","currentlyConstructing","navTree","placeBuilding","buildNavTree","structureTypes","st","destination","srcNode","destNode","pathBetweenPoints","log","machineTypes","ctrl","activeBuildings","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","yBase","peak","mtnWidth","PlanetBackground","devicePlaceSize","devicePlaceCount","sg","leftSlot","rightSlot","right","theSlots","slotY","getTop","backgroundPattern","flagX","flagY","_1","floorHeight","originSlot","pickingOrigin","maxHeight","drawShape","xoff","yoff","bezierCurveTo","halfWidth","slotHeights","heights","y1","btm","lst","slotCount","arc","floorColor","originX","newCursor","input","output","factor","setPrototypeOf","__proto__","constructor","create","PlanetBackground_1","Colony_1","Population_1","Planet","hud","onBuildingHover","onDeviceHover","depth","createLayer","layerHeight","population","set","buildingOrDevice","theLayer","theEconomy","popularDemand","theEconomyWithoutPeople","val","closestDevice","acc","Planet_1","player_1","Hud_1","Construct","dragging","defaultMessage","placingFunction","firstBuilding","buildIt","startConstructing","player","prepareNextBuilding","camera","onActivate","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction_1","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","Esc","onDeactivate","off","nextMissingStructureOrFunction","reqs","requiredStructuresAndFunctions","req","actualStructureNames","actualFunctionNames","actualNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","spawnFunction","anotherBuilding","assembleBuildingFromStructure","theStructure","Scene","World","colors","Cyan","Vermillion","bestowName","sword","Sword","Texture","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([85,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { getBackgroundPattern, BackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport const deleteByValueOnce = (arr, elem) => {\r\n  let index = arr.indexOf(elem);\r\n  if (index !== -1) arr.splice(index, 1);\r\n}\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function shuffle(arr) {\r\n   return arr.sort(() => Math.random() > 0.5 ? 1 : -1) \r\n}\r\n\r\nexport const zip = (a, b) => a.map((e,i) => [e, b[i]])\r\n\r\nexport const countOccurrences = (arr) => {\r\n  let counts = {}\r\n  arr.forEach((elem) => {\r\n    counts[elem] = counts[elem] || 0\r\n    counts[elem] += 1\r\n  })\r\n  return counts\r\n}\r\n\r\n","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.fifth; break;\r\n        case DeviceSize.Large: sz = major.eighth + major.third; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\nimport { SmallDomeThreeView } from './SmallDomeThreeView';\r\nimport { MidDomeView } from './MidDomeView';\r\nimport { BigDomeView } from './BigDomeView';\r\nimport { SmallRoomThreeView } from './SmallRoomThreeView';\r\nimport { MediumRoomView } from './MediumRoomView';\r\nimport { LargeRoomView } from './LargeRoomView';\r\nimport { HugeRoomView } from './HugeRoomView';\r\nimport { MediumRoomThreeView } from './MediumRoomThreeView';\r\nimport { MediumSurfaceRoomView } from './MediumSurfaceRoomView';\r\n\r\n\r\nconst structureViews: { [key: string]: typeof Building } = {\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n    MediumSurfaceRoomView,\r\n}\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n\r\n    MediumSurfaceRoomView,\r\n\r\n\r\n    structureViews\r\n\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, deleteByValue } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock, emptyMarket, Economy, sumMarkets, equilibrium } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { World } from \"../../models/World\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { EconomicValue } from \"../Hud/EconomicValue\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0\r\n\r\n    nameLabel: Label\r\n\r\n    placed: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    spaceFunction: SpaceFunction\r\n\r\n    private devices: Device[] = []\r\n    givenName: string\r\n\r\n    private active: boolean = true\r\n    // private built: boolean = false\r\n\r\n    constructor(pos: Vector, public structure: Structure, public planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          structure.infra ? planet.color.darken(0.3) : Color.Transparent\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            if (!this.devices.some(d => d.hover)) {\r\n                this.planet.currentlyViewing = this\r\n            }\r\n        })\r\n\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED BUILDING\", { building: this })\r\n            this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.color = Color.White\r\n\r\n        if (this.structure.infra) { this.active = true }\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        // this.devices.forEach(device => device.draw(ctx, delta))\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n        }\r\n\r\n        // let debug = true;\r\n        if (Game.debugPath) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = true\r\n        if (showDevicePlaces && this.devicePlaces().length > 0) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    0.1,\r\n                    Color.White,\r\n                    false,\r\n                    true\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n\r\n        let tryProduce = this.placed;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.tryProduce(this.step));\r\n        }\r\n\r\n        // this.devices.forEach(d => d.update(engine, delta))\r\n\r\n        this.step += 1\r\n    }\r\n\r\n    get name() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.name\r\n        } else {\r\n            return this.structure.name\r\n        }\r\n    }\r\n\r\n    get description() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.description\r\n        } else {\r\n            return this.structure.description\r\n        }\r\n    }\r\n\r\n    economy(emptyUnlessActive: boolean = true): Economy {\r\n        if (emptyUnlessActive && !this.isActive) {\r\n            return emptyMarket()\r\n        } else {\r\n            let machineEconomies = this.devices.map(d => d.economy)\r\n            //machine.economy)\r\n\r\n            let buildingEconomy = {\r\n                ...emptyMarket(),\r\n                Oxygen: { demand: 0.1, supply: 0 }, // structural demand\r\n                // Water: { demand: 0.1, supply: 0 },\r\n            }\r\n\r\n            let aggregate = [...machineEconomies, buildingEconomy]\r\n                .reduce(sumMarkets, emptyMarket())\r\n\r\n            return aggregate\r\n        }\r\n    }\r\n\r\n    private toggleActive() {\r\n        if (!this.structure.infra) {\r\n            if (this.active) {\r\n                if (this.devices.some(d => d.inUse)) { return }\r\n                this.active = false\r\n                if (!equilibrium(this.planet.economy)) {\r\n                    this.active = true\r\n                }\r\n            } else { // this.active is false now\r\n                let agg = [\r\n                    this.planet.economy,\r\n                    this.economy(false)\r\n                ].reduce(sumMarkets, emptyMarket())\r\n\r\n                if (equilibrium(agg)) {\r\n                    this.active = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get isActive() { return !!this.active }\r\n\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public debit(res: ResourceBlock) {\r\n        this.planet.spend(res)\r\n    }\r\n\r\n    public populate(pos: Vector, elite: boolean = false) {\r\n        this.planet.populate(pos, elite) //this.pos)\r\n    }\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.placed)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (!this.active) {\r\n            clr = clr.darken(0.8)\r\n        }\r\n\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        // device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        device.pos.subEqual(this.pos) // = this.devicePlaces()[0].position\r\n        // console.log(\"DEVICE IS AT\", { pos: device.pos })\r\n        this.add(device)\r\n        this.updateFunction()\r\n        device.machine.onPlacement(device)\r\n        this.toggleActive()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices //.filter(d => d.built)\r\n    }\r\n\r\n    private updateFunction() {\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let matched = true;\r\n            let unseenDevices = this.devices.slice()\r\n            let sf = new spaceFn()\r\n            sf.machines.forEach((machine: typeof Machine) => {\r\n                let matchingDevice = unseenDevices.find(d => d.machine instanceof machine)\r\n                if (!matchingDevice) { matched = false; }\r\n                unseenDevices = deleteByValue(unseenDevices, matchingDevice)\r\n            })\r\n            return matched;\r\n        })\r\n        if (fn) {\r\n            // console.log(\"Determined building function\", { fn })\r\n            let sf = new fn()\r\n            this.spaceFunction = sf\r\n            this.nameLabel.text = sf.name\r\n        } else {\r\n            console.warn(\"Could not identify function!\")\r\n        }\r\n    }\r\n\r\n    get backgroundPattern() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.background\r\n        } else {\r\n            return BackgroundPattern.Grid\r\n        }\r\n    }\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport const allValues: PureValue[] = [\r\n    PureValue.Power,\r\n    PureValue.Oxygen,\r\n    PureValue.Water,\r\n    PureValue.Shelter,\r\n    PureValue.Hope,\r\n    PureValue.Wisdom,\r\n    PureValue.Wealth,\r\n    PureValue.Beauty,\r\n    PureValue.Wonder\r\n]\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return Math.floor(market[value].supply - market[value].demand)\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply,\r\n            demand,\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport const equilibrium: (e: Economy) => boolean = (e) => {\r\n    return allValues.every(value => availableCapacity(e, value) >= 0)\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Biomass = 'Biomass',\r\n    Ore = 'Ore',\r\n    Idea = 'Idea',\r\n\r\n    // derived\r\n    Meal = 'Meal',\r\n    Data = 'Data',\r\n    Mineral = 'Mineral',\r\n    Bioplasma = 'Bioplasma',\r\n\r\n    // higher-order\r\n    Alloy = \"Alloy\",\r\n    Algorithm = \"Algorithm\",\r\n\r\n    // superb\r\n    Argent = \"Argent\",\r\n    Aurum = \"Aurum\",\r\n\r\n    // hyperbolic\r\n    Omnium = \"Omnium\",\r\n}\r\n\r\nlet cStep = 0.3\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Biomass: Color.Green,\r\n    Data: Color.Blue.lighten(cStep),\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(cStep),\r\n    Idea: Color.Blue.lighten(cStep*2), //.desaturate(cStep),\r\n    Ore: Color.Red.darken(cStep),\r\n\r\n    Bioplasma: Color.Viridian,\r\n\r\n    Alloy: Color.DarkGray.darken(cStep), //(cStep),\r\n    Algorithm: Color.Blue.darken(cStep), //.desaturate(cStep),\r\n\r\n    Argent: Color.Gray.lighten(cStep),\r\n    Aurum: Color.Orange.lighten(cStep),\r\n\r\n    Omnium: Color.White,\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    return baseColor.desaturate(0.1) //.lighten(0.1) //.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Color, FontStyle, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { MechanicalOperation, mechanicalOperations } from \"./MechanicalOperation\";\r\nimport { shuffle, range } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\nconst plant = require('../images/houseplant-plain.svg')\r\nconst workstation = require('../images/workstation-plain.svg')\r\n\r\nconst console = require('../images/console-plain.svg')\r\nconst consolePurple = require('../images/console-purple-plain.svg')\r\nconst consoleGreen = require('../images/console-green-plain.svg')\r\nconst consoleRed = require('../images/console-red-plain.svg')\r\nconst megaconsole = require('../images/mega-console-plain.svg')\r\n\r\nconst fabricator = require('../images/fabricator-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n    plant,\r\n    workstation,\r\n\r\n    console,\r\n    consolePurple,\r\n    consoleGreen,\r\n    consoleRed,\r\n    megaconsole,\r\n\r\n    fabricator,\r\n}\r\n\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nlet { store, generate, recipe, spawn, accelerateTime } = mechanicalOperations\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n\r\n    cost: ResourceBlock[] = [ResourceBlock.Mineral]\r\n\r\n    size: DeviceSize = DeviceSize.Small\r\n    operation: MechanicalOperation = { type: 'noop' }\r\n    image = images.vat\r\n    prereqs: (typeof Machine)[] = []\r\n    economy: Economy = emptyMarket()\r\n    forDome: boolean = false\r\n    hide: boolean = false\r\n\r\n    capacity: boolean\r\n\r\n\r\n    concretize(): Machine { return this; } \r\n\r\n    onPlacement(device: Device) {\r\n        // ...whatever we need to script here?\r\n    }\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command Console'\r\n    description = 'commander, we need your help'\r\n    operation = store(\r\n        [ResourceBlock.Mineral], //,ResourceBlock.Biomass],\r\n        16\r\n    )\r\n    image = images.consoleGreen\r\n    size = DeviceSize.Medium\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 5, demand: 0 },\r\n        Oxygen: { supply: 2, demand: 0 },\r\n        Water: { supply: 2, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 },\r\n        Shelter: { supply: 1, demand: 0}\r\n    }\r\n\r\n    onPlacement(device: Device) {\r\n        device.built = true\r\n        for (let i in range(16)) {\r\n            device.produceResource(ResourceBlock.Mineral)\r\n        }\r\n        let { building } = device\r\n        building.populate(device.pos.add(building.pos), true)\r\n    }\r\n}\r\n\r\nexport class MissionLog extends Machine {\r\n    name = 'Mission Log'\r\n    description = 'gather data'\r\n    operation = store(\r\n        [ResourceBlock.Data],\r\n        8\r\n    )\r\n    image = images.consolePurple\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n//export class Energon extends Machine {\r\n//    name = 'Energon'\r\n//    description = 'food paste'\r\n//}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 3, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 5, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H20 Condenser'\r\n    description = 'have a drink'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 4, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n/// small subsurface\r\n\r\nexport class StudyMachine extends Machine {\r\n    operation = recipe(\r\n        [ ResourceBlock.Idea, ResourceBlock.Idea, ResourceBlock.Idea ],\r\n        ResourceBlock.Data\r\n    )\r\n    color = Blue\r\n    concretize(): Machine { return new (shuffle([Workstation, Desk])[0])() }\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    description = 'get to work'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    description = 'hackety hack'\r\n    prereqs = [ Bookshelf ]\r\n    image = images.workstation\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n    concretize() { return this }\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    operation = generate(ResourceBlock.Idea)\r\n    image = images.bookshelf\r\n    prereqs = [ OxygenExtractor, Desk ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    operation = store([ResourceBlock.Meal], 6)\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    operation = recipe(\r\n        [ResourceBlock.Biomass, ResourceBlock.Biomass],\r\n        ResourceBlock.Meal\r\n    )\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    description = 'sweet dreams'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    description = 'so nice'\r\n    prereqs = [ Bed ]\r\n    // produces = ResourceBlock.Food\r\n    cost = [ ResourceBlock.Biomass ]\r\n    operation = generate(ResourceBlock.Biomass, 1)\r\n    color = Green\r\n    image = images.plant\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Water: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\nexport class PersonnelRegistry extends Machine {\r\n    name = 'Personnel Registry'\r\n    description = 'track everybody'\r\n    prereqs = [ CloningVat ]\r\n    operation = store([ResourceBlock.Data], 4)\r\n    color = Yellow\r\n    image = images.console\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Wisdom: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class OrientationConsole extends Machine {\r\n    name = 'Orientation Console'\r\n    description = 'welcome to the colony'\r\n    prereqs = [CloningVat]\r\n    operation = generate(ResourceBlock.Data, 1)\r\n    image = images.consoleRed\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'we all grow'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = spawn()\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class DissolutionVat extends Machine {\r\n    name = 'Dissolution Vat'\r\n    description = 'back to basics'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = recipe(\r\n        [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n        ResourceBlock.Bioplasma\r\n    )\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [PlasmaBank]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class PlasmaBank extends Machine {\r\n    name = 'Bioplasm Bank'\r\n    description = 'hold on'\r\n    operation = store([ ResourceBlock.Bioplasma ])\r\n    prereqs = [AlgaeVat]\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    description = 'you made that'\r\n    operation = recipe(\r\n        [ResourceBlock.Mineral, ResourceBlock.Mineral],\r\n         ResourceBlock.Alloy\r\n    )\r\n    size = DeviceSize.Small\r\n    color = Red\r\n    prereqs = [Workstation]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n    image = images.fabricator\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    description = 'where there is a will'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n// medium\r\n\r\nexport class MetalStorage extends Machine {\r\n    name = 'Metal Storage'\r\n    description = 'contain minerals and alloys?'\r\n    operation = store([ResourceBlock.Mineral, ResourceBlock.Alloy], 8)\r\n    prereqs = [Bookshelf]\r\n    color = Red\r\n    size = DeviceSize.Medium\r\n}\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    operation = store([ResourceBlock.Data, ResourceBlock.Algorithm], 10)\r\n    image = images.server\r\n    prereqs = [Bookshelf]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   operation = generate(ResourceBlock.Biomass)\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Oxygen: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   description = 'home on the plains'\r\n   operation = recipe(\r\n       [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n       ResourceBlock.Meal\r\n   )\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    description = 'arbor around the clock'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    description = 'plant lab'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n\r\nexport class OreRefinery extends Machine {\r\n    name = 'Refinery'\r\n    description = 'wheat from the chaff'\r\n    operation = recipe(\r\n        [ResourceBlock.Ore, ResourceBlock.Ore, ResourceBlock.Ore],\r\n         ResourceBlock.Mineral\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation, Fabricator]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class ThinkingFountain extends Machine {\r\n    name = 'Thinking Fountain'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = generate(ResourceBlock.Aurum, 8)\r\n    cost = [ResourceBlock.Aurum]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class LogicPool extends Machine {\r\n    name = 'Logic Pool'\r\n    size = DeviceSize.Large\r\n    prereqs = [ MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = store([ResourceBlock.Algorithm, ResourceBlock.Aurum], 18)\r\n    cost = [ResourceBlock.Aurum]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class SilverForest extends Machine {\r\n    name = 'Silver Forest'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Megafabricator ]\r\n    color = Color.fromHex('c0c0c0')\r\n    operation = store([ResourceBlock.Argent], 12)\r\n    cost = [ResourceBlock.Argent]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Beauty: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n    forDome = true\r\n}\r\n\r\nexport class TimeCrystal extends Machine {\r\n    name = 'Time Crystal'\r\n    size = DeviceSize.Medium\r\n    color = Color.fromHex('e5e4e2')\r\n    operation = accelerateTime()\r\n    cost = [ResourceBlock.Omnium]\r\n    prereqs = []\r\n    // onPlacement(device: Device) {\r\n        // device.building.planet.updateSpeeds()\r\n    // }\r\n}\r\n\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    description = 'ore away'\r\n    operation = generate(ResourceBlock.Ore)\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    operation = recipe(\r\n        [ResourceBlock.Alloy, ResourceBlock.Algorithm],\r\n        ResourceBlock.Argent\r\n    )\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class MolecularEngine extends Machine {\r\n    name = 'Molecular Engine'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Megafabricator ]\r\n    color = Violet\r\n    operation = recipe(\r\n        [ResourceBlock.Bioplasma, ResourceBlock.Algorithm],\r\n        ResourceBlock.Aurum\r\n    )\r\n    image = images.megaconsole\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n        Water: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Mainframe extends Machine {\r\n    name = 'Mainframe'\r\n    size = DeviceSize.Large\r\n    color = Blue\r\n    prereqs = [ResearchServer]\r\n    cost = [ ResourceBlock.Mineral, ResourceBlock.Mineral ]\r\n    operation = recipe(\r\n        [ ResourceBlock.Data, ResourceBlock.Data ],\r\n        ResourceBlock.Algorithm\r\n    )\r\n    image = images.server\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 6 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    // operation = generate()\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n        Oxygen: { supply: 12, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n\r\n    OreRefinery,\r\n    PlasmaBank,\r\n    DissolutionVat,\r\n    MetalStorage,\r\n    Mainframe,\r\n\r\n    PersonnelRegistry,\r\n    MolecularEngine,\r\n    ThinkingFountain,\r\n    SilverForest,\r\n\r\n    OrientationConsole,\r\n    // TimeCrystal,\r\n\r\n]","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { BackgroundPattern, getBackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\n// let gridPattern;\r\n// let loadingPattern  = false\r\nexport function drawPatternedRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern) // BackgroundPattern.Grid)\r\n  if (gridPattern) {\r\n    let { x, y, width, height } = rect;\r\n    ctx.fillStyle = gridPattern\r\n    ctx.fillRect(x,y,width,height)\r\n\r\n    ctx.lineWidth = 2\r\n    ctx.setLineDash([])\r\n    ctx.strokeStyle = Color.White.toRGBA()\r\n    ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true,\r\n  dashed: boolean = false\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  // if (edgeWidth > 0) {\r\n  //   let edge = Color.White;\r\n  //   ctx.fillStyle = edge.toRGBA();\r\n  //   ctx.fillRect(x, y, width, height)\r\n  // }\r\n\r\n  if (filled) {\r\n    let main = color;\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x, //+ edgeWidth,\r\n      y, //+ edgeWidth,\r\n      width, // - edgeWidth * 2,\r\n      height // - edgeWidth * 2\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White;\r\n    ctx.strokeStyle = edge.toRGBA();\r\n    ctx.lineWidth=edgeWidth\r\n    if (dashed) { ctx.setLineDash([5, 10]) } //ctx.lineDashOffset = 5 }\r\n    else { ctx.setLineDash([]) }\r\n    // ctx.strokeStyle = Stroke.So\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}\r\n\r\nexport function drawStar(ctx, cx, cy, outerRadius=3.6, innerRadius=1.4, spikes=5, ) {\r\n  // console.warn(\"DRAW STAR\")\r\n    var rot = Math.PI / 2 * 3;\r\n    var x = cx;\r\n    var y = cy;\r\n    var step = Math.PI / spikes;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(cx, cy - outerRadius)\r\n    for (let i = 0; i < spikes; i++) {\r\n        x = cx + Math.cos(rot) * outerRadius;\r\n        y = cy + Math.sin(rot) * outerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n\r\n        x = cx + Math.cos(rot) * innerRadius;\r\n        y = cy + Math.sin(rot) * innerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n    }\r\n    ctx.lineTo(cx, cy - outerRadius);\r\n    ctx.closePath();\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = 'yellow';\r\n    ctx.stroke();\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.fill();\r\n}","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    color: Color = Color.Gray\r\n    infra: boolean = false\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n\r\n    hide: boolean = false\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MediumSurfaceRoom ],\r\n        [Orientation.Right]: [  Dome, MediumSurfaceRoom ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n    infra = true\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n    infra = true\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    description: string = 'Biome sweet biome';\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.sixth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n\r\n    prereqs = [\r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n    // two small slots\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 2 * major.eighth\r\n    height = 2 * major.third\r\n    // two medium slots...\r\n    \r\n    machines = midBelow\r\n}\r\n\r\nexport class MediumRoomThree extends CommonArea {\r\n    name = 'Mid Room (3)'\r\n    prereqs = [ MediumRoom ]\r\n    view = 'MediumRoomThreeView'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.third\r\n\r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 4 * major.eighth\r\n    height = 3 * major.fifth\r\n\r\n    // two big slots?\r\n    machines = largeBelow\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class MediumSurfaceRoom extends Dome {\r\n    name = 'Mid Surf Bldg'\r\n    description = 'home away from home';\r\n\r\n    view: string = 'MediumSurfaceRoomView';\r\n\r\n    width: number = 6 * major.eighth\r\n    height: number = 1 * major.sixth\r\n\r\n    zoom = 0.1\r\n\r\n    prereqs = [ SmallDome ]\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = midBelow\r\n\r\n    hide = true // need another one which cares about connecting to roads\r\n}\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = 2 * major.seventh\r\n    height = major.seventh\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 3 * major.fifth\r\n    height = 2 * major.fifth\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 3 * major.seventh\r\n    height = 2 * major.seventh\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n\r\n}\r\n\r\n//////\r\n\r\n// export class MissionControl extends Structure {\r\n//     name: string = 'Mission Control';\r\n//     description: string = 'Keeping everything on track';\r\n//     view: string = 'MissionControlView';\r\n//     width: number = 6 * major.eighth\r\n//     height: number = 1 * major.sixth\r\n//     zoom = 0.1\r\n//     connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n//         [Orientation.Left]: [ SurfaceRoad ],\r\n//         [Orientation.Right]: [ SurfaceRoad ],\r\n//         [Orientation.Up]: [ MainTunnel ],\r\n//         [Orientation.Down]: [ MainTunnel ],\r\n//     }\r\n\r\n//     machines = [ CommandCenter ]\r\n// }\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n        MediumSurfaceRoom,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        MediumRoomThree,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine, Mainframe, CommandCenter, MissionLog, Botany, OrientationConsole, PersonnelRegistry } from './Machine';\r\nimport { Color } from 'excalibur';\r\nimport { Structure, MediumSurfaceRoom } from './Structure';\r\nimport { BackgroundPattern } from '../actors/Building/BackgroundPatterns';\r\n\r\nexport class SpaceFunction {\r\n     name: string = '(generic)'\r\n     description: string = '(generic description)'\r\n     machines: (typeof Machine)[] = []\r\n     color: Color = Color.Gray\r\n\r\n     prereqs: (typeof SpaceFunction)[] =  [] \r\n\r\n     structure: typeof Structure = null\r\n     hide: boolean = false\r\n     background: BackgroundPattern = BackgroundPattern.Beige\r\n\r\n     bonuses: {\r\n          capacity: number, // every store/generator gets this??\r\n          workSpeed: number, // 2 should double work speed (dur *= 1/multiplier)\r\n     } = {\r\n          capacity: 0, // boost cap by one\r\n          workSpeed: 1.00 // 20% bonus to work speed\r\n     }\r\n}\r\n\r\nexport class MissionControl extends SpaceFunction {\r\n     hide = true\r\n     name = 'Mission Control'\r\n     description = 'keeping everything on track'\r\n     structure = MediumSurfaceRoom\r\n     prereqs = [] //ComputerCore, Factory, Farm ]\r\n     machines = [ CommandCenter, MissionLog ]\r\n     background = BackgroundPattern.Window\r\n}\r\n\r\n\r\nexport class LivingQuarters extends SpaceFunction {\r\n     name = 'Living Quarters'\r\n     description = 'good night'\r\n     machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n     name = 'Barracks'\r\n     description = 'sleep tight'\r\n     machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nexport class Kitchen extends SpaceFunction {\r\n     name = 'Kitchen'\r\n     description = 'stay together'\r\n     machines = [ Stove, Fridge ]\r\n     bonuses = {\r\n          capacity: 2,\r\n          workSpeed: 1.1\r\n     }\r\n     background = BackgroundPattern.Checker\r\n}\r\n\r\nexport class LifeSupportPod extends SpaceFunction {\r\n     name = 'Life Support'\r\n     description = 'keep it going'\r\n     machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n     name = 'Retreat'\r\n     description = 'take it easy'\r\n     machines = [ Cabin, Cabin ]\r\n}\r\n\r\nexport class CloneMatrix extends SpaceFunction {\r\n     name = 'Clone Matrix'\r\n     description = 'clone home'\r\n     machines = [ CloningVat, CloningVat ]\r\n}\r\n\r\nexport class CloneReception extends SpaceFunction {\r\n     name = 'Clone Reception'\r\n     description = 'welcome clone'\r\n     machines = [ CloningVat, OrientationConsole, PersonnelRegistry ]\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n     name = 'Reading Room'\r\n     description = 'butterflies in the sky'\r\n     machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nexport class Library extends SpaceFunction {\r\n     name = 'Library'\r\n     description = 'take a look'\r\n     machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n     background = BackgroundPattern.Books\r\n}\r\n\r\nclass Study extends SpaceFunction {\r\n     name = 'Study'\r\n     description = 'plan it out'\r\n     machines = [ StudyMachine, Bookshelf ]\r\n}\r\n\r\nclass ComputerLab extends SpaceFunction {\r\n     name = 'Computer Lab'\r\n     description = 'make it happen'\r\n     machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nexport class Archive extends SpaceFunction {\r\n     name = 'Archive'\r\n     description = 'write it down'\r\n     machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n     name = 'Arboretum'\r\n     description = 'walk it out'\r\n     machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n     name = 'Algae Farm'\r\n     description = 'make do'\r\n     machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nexport class SolarArray extends SpaceFunction {\r\n     name = 'Solar Array'\r\n     description = 'warm up'\r\n     machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nclass Workshop extends SpaceFunction {\r\n     name = 'Workshop'\r\n     description = 'take form'\r\n     machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\nclass Nursery extends SpaceFunction {\r\n     name = 'Nursery'\r\n     description = 'quiet please'\r\n     machines = [ Houseplant, Houseplant, Houseplant ]\r\n     background = BackgroundPattern.Leafy\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n     name = 'Farm'\r\n     description = 'food for the masses'\r\n     machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n     name = 'Factory'\r\n     description = 'production lines'\r\n     machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\n\r\nexport class ComputerCore extends SpaceFunction {\r\n     name = 'Computer Core'\r\n     description = 'let us calculate'\r\n     machines = [ Mainframe, Mainframe ]\r\n     background = BackgroundPattern.Tech\r\n}\r\n\r\nexport class LifeSciencesLab extends SpaceFunction {\r\n     name = 'Life Sciences Lab'\r\n     description = 'where do i come from'\r\n     machines = [ Botany, Botany ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    ComputerLab,\r\n\r\n    ComputerCore,\r\n\r\n    MissionControl,\r\n    LifeSciencesLab,\r\n\r\n    CloneReception,\r\n]","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor, emptyMarket } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\nimport { Recipe, ResourceStorage, MechanicalOperation, ResourceGenerator } from \"../models/MechanicalOperation\";\r\nimport { range, deleteByValueOnce } from \"../Util\";\r\nimport { drawRect } from \"../Painting\";\r\nimport { InteractionRequest } from \"../values/InteractionRequest\";\r\n\r\nexport class Device extends Actor {\r\n    // constructionMaterials: ResourceBlock[] = []\r\n\r\n    // could also use for storage?\r\n    product: ResourceBlock[] = []\r\n    nameLabel: Label\r\n    image: any\r\n    building: Building\r\n    inUse: boolean = false\r\n    hover: boolean = false\r\n\r\n    imageLoaded: boolean = false\r\n\r\n    built: boolean = false\r\n\r\n    constructor(\r\n        public machine: Machine,\r\n        initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = () => { this.imageLoaded = true }\r\n        this.image.src = machine.image\r\n\r\n        this.on('pointerenter', () => {\r\n            // console.log(\"HOVER ON\", { device: this })\r\n            this.hover = true\r\n            if (this.building) {\r\n                // setInterval(() => {\r\n                this.building.planet.currentlyViewing = this\r\n                // }, 75)\r\n            }\r\n        })\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED DEVICE\", { device: this })\r\n            // this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n            if (this.building) {\r\n                this.building.planet.currentlyViewing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    get imageX() { return this.pos.x - this.getWidth() / 2 }\r\n    get imageY() { return this.pos.y - this.getHeight() / 2 - 10 }\r\n\r\n    get economy() { return this.built ? this.machine.economy : emptyMarket() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (this.imageLoaded) {\r\n            if (!this.built) { ctx.globalAlpha = 0.5 }\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.imageX,\r\n                this.imageY,\r\n\r\n                this.getWidth(),\r\n                this.getHeight()\r\n            )\r\n            if (!this.built) { ctx.globalAlpha = 1.0 }\r\n\r\n            if (this.hover) {\r\n                let c = Color.White\r\n                c.a = 0.6\r\n                drawRect(\r\n                    ctx,\r\n                    { x: this.imageX, y: this.imageY, width: this.getWidth(), height: this.getHeight() },\r\n                    0,\r\n                    c\r\n                )\r\n            }\r\n        }\r\n\r\n        let iv = new Vector(this.imageX, this.imageY)\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = iv\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let { x: bx, y: by } = iv\r\n        let blockSize = 5\r\n        let yOff = this.nameLabel.fontSize\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).toRGBA()\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize + yOff, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get name() { return this.machine.name }\r\n    get description() { return this.machine.description }\r\n    get size() { return this.machine.size }\r\n    get operation() { return this.machine.operation }\r\n\r\n    async assemble(citizen: Citizen) {\r\n        if (citizen.isCarryingUnique(this.machine.cost)) {\r\n            for (let res of this.machine.cost) {\r\n                await citizen.progressBar(1000)\r\n                citizen.drop(res)\r\n            }\r\n            this.built = true\r\n        }\r\n    }\r\n\r\n    async interact(citizen: Citizen, request: InteractionRequest): Promise<boolean> {\r\n        if (this.inUse || !this.built) {\r\n            return false\r\n        }\r\n\r\n        let worked = false\r\n        let op = this.operation\r\n        if (op.type === 'recipe' && request.type === 'work') {\r\n            let recipe: Recipe = op\r\n            // do we have all the things?\r\n            if (citizen.carrying.some(it => recipe.consumes.includes(it))) {\r\n                this.inUse = true\r\n                if (citizen.isCarryingUnique(recipe.consumes)) {\r\n                    recipe.consumes.forEach(consumed => citizen.drop(consumed))\r\n                    let workTime = this.getEffectiveWorkTime(recipe)\r\n                    await citizen.progressBar(workTime) // recipe.workTime)\r\n                    citizen.carry(recipe.produces)\r\n\r\n                    worked = true\r\n                } else {\r\n                    console.warn(\"not carrying all requirements?\", { requires: recipe.consumes, has: citizen.carrying })\r\n                }\r\n                this.inUse = false\r\n            }\r\n        } else if (op.type === 'store') {\r\n            // accept it! (whatever you have that matches...?)\r\n            let store: ResourceStorage = op\r\n            if (request && request.type === 'retrieve') { // assume dispense request for now?\r\n                this.inUse = true\r\n                worked = this.dispense(citizen, request)\r\n                if (worked) {\r\n                    await citizen.progressBar(500)\r\n                }\r\n                this.inUse = false\r\n            } else if (request && request.type === 'store' &&\r\n                citizen.carrying.some(it => store.stores.includes(it))) { // maybe trying to store?\r\n                if (this.product.length < this.getEffectiveOperationalCapacity(store)) { // store.capacity) {\r\n                    let res = null\r\n                    if (store.stores.some(stored => { res = citizen.drop(stored); return res })) {\r\n                        if (res) {\r\n                            this.produceResource(res)\r\n                            // this.product.push(res)\r\n                            // this.building.redeem(res)\r\n                            worked = true\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.warn(\"no capacity in this store!!\")\r\n                    worked = false\r\n                }\r\n            }\r\n        } else if (op.type === 'generator') {\r\n            this.inUse = true\r\n            worked = this.dispense(citizen, request)\r\n            if (worked) {\r\n                await citizen.progressBar(500)\r\n            }\r\n            this.inUse = false\r\n        }\r\n\r\n        return worked\r\n    }\r\n\r\n    getEffectiveOperationalCapacity(op: ResourceGenerator | ResourceStorage) {\r\n        let bonus = this.building.spaceFunction\r\n        ? this.building.spaceFunction.bonuses.capacity \r\n        : 0\r\n        return op.capacity + bonus\r\n    }\r\n\r\n    getEffectiveWorkTime(op: Recipe) {\r\n        let bonus = this.building.spaceFunction \r\n         ? this.building.spaceFunction.bonuses.workSpeed\r\n         : 1\r\n\r\n        return Math.round(op.workTime * (1/bonus))\r\n    } \r\n\r\n\r\n    private dispense(citizen: Citizen, request: InteractionRequest) {\r\n        if (request && request.type === 'retrieve') {\r\n            let canFulfill = this.product.find(p => p === request.resource)\r\n            if (canFulfill) {\r\n                deleteByValueOnce(this.product, request.resource)\r\n                citizen.carry(request.resource)\r\n                this.building.debit(request.resource)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    public tryProduce(step: number) {\r\n        if (this.building.isActive && this.built) {\r\n            if (this.machine.operation.type === 'generator') {\r\n                if (step % this.machine.operation.generationTime === 0) {\r\n                    if (this.product.length < this.machine.operation.capacity) {\r\n                        this.produceResource(this.machine.operation.generates)\r\n                    }\r\n                }\r\n\r\n            } else if (this.machine.operation.type === 'spawn') {\r\n                if (step % 1000 == 0) {\r\n                    // console.log(\"WOULD SPAWN\")\r\n                    setTimeout(() => this.building.populate(this.pos.add(this.building.pos)), 100)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public produceResource(res: ResourceBlock) {\r\n        this.product.push(res)\r\n        this.building.redeem(res)\r\n    }\r\n\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            allStructures,\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        let snapped = false\r\n        if (bldg) {\r\n            let spot = bldg.nextDevicePlace().position\r\n            let d = spot.distance(pos)\r\n            snapped = d < 150\r\n        }\r\n\r\n        if (snapped) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n        } else {\r\n            this.pos = pos\r\n        }\r\n\r\n        return snapped\r\n    }\r\n}","const raisedSquare = require('../../images/raised-square-bg.png')\r\nconst leafy = require('../../images/leafy-bg.png')\r\nconst bookish = require('../../images/books-bg.png')\r\nconst posters = require('../../images/poster-wall-bg.png')\r\nconst tech = require('../../images/tech-bg.png')\r\nconst checker = require('../../images/checker-bg.png')\r\nconst beige = require('../../images/beige-bg.png')\r\nconst window = require('../../images/window-bg.png')\r\n\r\ninterface Background {\r\n    image: HTMLImageElement\r\n    pattern: CanvasPattern\r\n    loading: boolean\r\n}\r\n\r\nconst loadBg = (path) => {\r\n    let background: Background = { image: null, pattern: null, loading: true }\r\n    background.image = new Image();\r\n    background.image.src = path\r\n    background.image.onload = function () {\r\n      background.loading = false\r\n    }\r\n    return background\r\n}\r\n\r\nexport enum BackgroundPattern {\r\n    Leafy = 'Leafy',\r\n    Grid = 'Grid',\r\n    Books = 'Books',\r\n    Poster = 'Poster',\r\n    Tech = 'Tech',\r\n    Checker = 'Checker',\r\n    Beige = 'Beige',\r\n    Window = 'Window',\r\n}\r\n\r\nconst backgroundPatterns: { [ key in BackgroundPattern ]: Background } = {\r\n    Leafy: loadBg(leafy),\r\n    Grid: loadBg(raisedSquare),\r\n    Books: loadBg(bookish),\r\n    Poster: loadBg(posters),\r\n    Tech: loadBg(tech),\r\n    Checker: loadBg(checker),\r\n    Beige: loadBg(beige),\r\n    Window: loadBg(window)\r\n}\r\n\r\nexport const getBackgroundPattern = (ctx, pattern: BackgroundPattern) => {\r\n    let bg = backgroundPatterns[pattern]\r\n    if (!bg.loading) {\r\n        if (!bg.pattern) {\r\n            // bg.image.\r\n            bg.pattern = ctx.createPattern(bg.image, 'repeat');\r\n        }\r\n        return bg.pattern\r\n    }\r\n}","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 130\r\n    static debugPath: boolean = false\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { Citizen } from \"../actors/Citizen\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { sleep } from \"../Util\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Recipe, MechanicalOperation } from \"../models/MechanicalOperation\";\r\n\r\nexport abstract class Strategy {\r\n    private sleepInterval: number = 250\r\n    protected isActive: boolean = false;\r\n    constructor(protected pawn: Citizen) { }\r\n    protected abstract async apply();\r\n    protected get planet(): Planet { return this.pawn.currentPlanet; }\r\n    protected get devices(): Device[] { return this.planet.colony.findPoweredDevices(); }\r\n    protected get operations(): MechanicalOperation[] { return this.devices.map(d => d.operation); }\r\n    protected get recipes(): Recipe[] {\r\n        let recipes: Recipe[] = [];\r\n        this.operations.forEach(op => {\r\n            if (op.type === 'recipe') {\r\n                recipes.push(op);\r\n            }\r\n        });\r\n        return recipes;\r\n    }\r\n\r\n\r\n    async attempt(): Promise<void> {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n        if (!this.isActive) {\r\n            this.isActive = true\r\n            // note apply will need to set this.isActive around its critical section\r\n            await this.apply();\r\n            this.isActive = false\r\n        }\r\n\r\n        await this.pause()\r\n        // setInterval(() => { this.attempt() }, this.sleepInterval)\r\n    }\r\n\r\n    protected async pause() {\r\n        await sleep(this.sleepInterval)\r\n    }\r\n\r\n    protected async gatherBlock(res: ResourceBlock) {\r\n        let gathered = false\r\n        let generatesDesiredBlock = (d: Device) => (d.operation.type === 'generator') &&\r\n            d.product.some(stored => res === stored)\r\n        let gen: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], generatesDesiredBlock)\r\n\r\n        let storesDesiredBlock = (d: Device) => (d.operation.type === 'store') &&\r\n              d.product.some(stored => res === stored)\r\n        let store: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n\r\n        let device: Device = gen || store\r\n\r\n        if (device) {\r\n            await this.visitDevice(device)\r\n            if (await device.interact(this.pawn, retrieveResource(res))) {\r\n                gathered = true\r\n            }\r\n        } else {\r\n            let recipe = this.recipes.find(recipe => recipe.produces === res);\r\n            if (recipe) {\r\n                await this.workRecipe(recipe);\r\n                gathered = true\r\n            }\r\n        }\r\n\r\n        if (!gathered) {\r\n            await this.pause()\r\n            await this.gatherBlock(res)\r\n        }\r\n    }\r\n\r\n    protected async visitDevice(device: Device) {\r\n        await this.pawn.visit(device)\r\n    }\r\n\r\n\r\n    protected async workRecipe(recipe: Recipe) {\r\n        await this.gatherIngredients(recipe.consumes)\r\n\r\n        let knowsRecipe = (d: Device) => d.operation === recipe\r\n        let maker = this.planet.colony.closestDeviceByType(this.pawn.pos, [], knowsRecipe)\r\n        if (maker) {\r\n            await this.visitDevice(maker)\r\n            await this.performRecipeTask(maker, recipe)\r\n        } else {\r\n            await this.pause()\r\n            await this.workRecipe(recipe);\r\n        }\r\n    }\r\n\r\n    protected async gatherIngredients(blocks: ResourceBlock[]) { //recipe: Recipe) {\r\n        if (!this.pawn.isCarryingUnique(blocks)) { //recipe.consumes)) {\r\n            for (let ingredient of blocks) { //recipe.consumes) {\r\n                await this.gatherBlock(ingredient);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async performRecipeTask(maker: Device, recipe: Recipe) {\r\n        let worked = await maker.interact(this.pawn, { type: 'work', recipe })\r\n        if (!worked) {\r\n            await this.pause()\r\n            console.warn(\"waiting for machine to become available...\")\r\n            await this.performRecipeTask(maker, recipe)\r\n        }\r\n    }\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Color } from \"excalibur\";\r\nimport { EntityKind } from \"../../values/Entity\";\r\n\r\nexport class Palette {\r\n    private _element: HTMLDivElement;\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(\r\n        private name: string,\r\n        private x: number,\r\n        private y: number,\r\n        private all: EntityKind[],\r\n        private onButtonClick: (EntityKind) => any = null,\r\n        private onButtonEnter: (EntityKind) => any = null,\r\n        private comprehend = true \r\n    ) {\r\n        this.makePalette();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    updateBuilt(built: (EntityKind)[]) {\r\n        this.built = built;\r\n        if (this.comprehend) {\r\n            this.comprehended = this.all.filter((e: EntityKind) => {\r\n                let s = new e();\r\n                let prereqs: (EntityKind)[] = s.prereqs;\r\n                return prereqs.every((prereq: EntityKind) => {\r\n                    let built = this.built.some((s: EntityKind) => s === prereq);\r\n                    return built;\r\n                });\r\n            });\r\n        } else {\r\n            this.comprehended = this.built\r\n        }\r\n        this.makePalette();\r\n    }\r\n\r\n    private makePalette() {\r\n        if (this._element) {\r\n            this._element.parentElement.removeChild(this._element);\r\n        }\r\n        if (!(this.comprehended.length > 0)) { return }\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.border = 'none'; //1px solid black'; //0.5px solid white';\r\n        document.body.appendChild(this._element);\r\n\r\n        if (this.name) {\r\n            let title = document.createElement('h2')\r\n            title.textContent = this.name\r\n            title.style.fontFamily = 'Verdana'\r\n            title.style.fontSize = '7pt'\r\n            title.style.fontWeight = '400'\r\n            title.style.color = Color.White.toRGBA()\r\n            title.style.backgroundColor = Color.Violet.darken(0.92).toRGBA()\r\n            title.style.padding = '4px'\r\n            title.style.margin = '0px'\r\n            this._element.appendChild(\r\n                title\r\n            )\r\n        }\r\n\r\n        this.comprehended\r\n            .map((elem: EntityKind) => new elem())\r\n            .sort((a, b) => a.color > b.color ? -1 : 1)\r\n            .forEach(elem => {\r\n                if (elem.hide) { return }\r\n                let label = elem.name;\r\n                if (!this.built.map(m => new m().name).includes(elem.name)) {\r\n                    label += ' *';\r\n                }\r\n                let clr = elem.color;\r\n                let btn = this.buttonFactory(label, clr);\r\n                this._element.appendChild(btn);\r\n                if (this.onButtonEnter) {\r\n                    btn.onmouseenter = () => { this.onButtonEnter(elem); };\r\n                }\r\n                if (this.onButtonClick) {\r\n                    btn.onclick = () => { this.onButtonClick(elem); };\r\n                }\r\n            });\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.5).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = label;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '7pt';\r\n        paletteButton.style.fontFamily = 'Verdana';\r\n        paletteButton.style.fontWeight = '500';\r\n        paletteButton.style.padding = '3px';\r\n        paletteButton.style.width = '124px';\r\n        paletteButton.style.textTransform = 'uppercase';\r\n        paletteButton.style.border = 'none' //1px solid rgba(255,255,255,0.08)';\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA();\r\n            paletteButton.style.color = fg.toRGBA();\r\n        };\r\n        return paletteButton;\r\n    }\r\n}\r\n","import { Label, Actor, FontStyle, Color } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { PureValue, Economy, ResourceBlock } from \"../../models/Economy\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nimport { countOccurrences } from \"../../Util\";\r\n\r\nexport class CardBody extends Actor {\r\n    description: Label\r\n    values: Label\r\n    notes: Label\r\n    footer: Label\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 0, 0)\r\n        // resources / recipes\r\n\r\n        this.values = new Label('')\r\n        this.values.fontSize = 10\r\n        this.add(this.values)\r\n\r\n        this.notes = new Label('behavioral notes', 0, 30)\r\n        this.notes.fontSize = 11\r\n        this.add(this.notes)\r\n\r\n        this.description = new Label('description', 0, 60)\r\n        this.description.fontSize = 12\r\n        this.description.fontStyle = FontStyle.Italic\r\n        this.description.color = Color.DarkGray\r\n        this.add(this.description)\r\n\r\n        this.footer = new Label('footer', 20, 80)\r\n        this.footer.fontSize = 10\r\n        this.footer.fontStyle = FontStyle.Italic\r\n        this.add(this.footer)\r\n\r\n        this.show(entity)\r\n    }\r\n\r\n    describeResources = (arr: ResourceBlock[]) => {\r\n        let freqs = countOccurrences(arr)\r\n        return Object.keys(freqs)\r\n            .map(elem => `${elem} x${freqs[elem]}`)\r\n            .join(' + ')\r\n    }\r\n\r\n    show(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        if (entity) {\r\n            this.description.text = entity.description;\r\n\r\n            if (entity instanceof Machine || entity instanceof Device) {\r\n                this.values.text =  this.describeEconomy(entity.economy)\r\n                this.footer.text = entity instanceof Machine\r\n                    ? `Cost: ${this.describeResources(entity.cost)}`\r\n                    : (entity.built ? this.describeResources(entity.product) : 'under construction')\r\n\r\n                this.notes.text = ''\r\n                let op = entity.operation\r\n                if (op) {\r\n                    if (op.type === 'recipe') {\r\n                        this.notes.text = `Turns ${op.consumes.join(' + ')} -> ${op.produces}.`\r\n                    } else if (op.type === 'generator') {\r\n                        this.notes.text = `Generates ${op.generates}.`\r\n                    } else if (op.type === 'store') {\r\n                        this.notes.text = `Stores ${op.stores.join(' + ')}`\r\n                    } else if (op.type === 'spawn') {\r\n                        this.notes.text = 'Decants clones.'\r\n                    }\r\n                }\r\n            } else if (entity instanceof SpaceFunction) {\r\n                let { capacity, workSpeed } = entity.bonuses\r\n                let bonusMessages = [];\r\n                if (capacity > 0) {\r\n                    bonusMessages.push(`+${capacity} cap`)\r\n                }\r\n                if (workSpeed > 1.0) {\r\n                    bonusMessages.push(`+${Math.floor((workSpeed*100)-100)}% efficiency` )\r\n                }\r\n                this.values.text = bonusMessages.join('; ') \r\n                this.notes.text = entity.machines.map(m => (new m()).name).join(' + ')\r\n                this.footer.text = ''\r\n            } else if (entity instanceof Building) {\r\n                this.values.text =  this.describeEconomy(entity.economy(false))\r\n                this.notes.text = entity.getDevices().map(d => d.machine.name).join(' + ')\r\n\r\n                let product = entity.getDevices()\r\n                    .map(d => d.product)\r\n                    .reduce((a, b) => a.concat(b), [])\r\n                this.footer.text = product.length > 0\r\n                    ? \"Currently contains: \" + this.describeResources(product)\r\n                    : ''\r\n            } else {\r\n                this.values.text = ''\r\n                this.notes.text = ''\r\n                this.footer.text = ''\r\n            }\r\n\r\n        }\r\n        // other bonuses? behaviors?\r\n    }\r\n\r\n    private describeEconomy(e: Economy): string {\r\n        let values = []\r\n        let econ = e // entity.economy\r\n        for (let value in PureValue) {\r\n            let { supply, demand } = econ[value]\r\n            let delta = supply - demand\r\n            if (delta > 0) {\r\n                values.push(`+${delta} ${value}`)\r\n            } else if (delta < 0) {\r\n                values.push(`${delta} ${value}`)\r\n            }\r\n        }\r\n        return values.join(' | ')\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nexport class CardTitle extends Actor {\r\n    \r\n    name: Label;\r\n    type: Label;\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 14, 32, entity && entity.color || Color.Gray);\r\n        this.name = new Label(entity && entity.name || '..', 20, 16)\r\n        this.name.fontSize = 28\r\n        this.name.color = Color.Black\r\n        this.add(this.name)\r\n\r\n        this.type = new Label('..', 232, 16)\r\n        this.type.fontSize = 10\r\n        this.type.color = Color.Gray\r\n        this.type.fontStyle = FontStyle.Italic\r\n        this.add(this.type)\r\n\r\n        if (entity) {\r\n            this.announce(entity)\r\n        }\r\n    }\r\n\r\n    announce(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.name.text = entity.name\r\n        this.color = entity.color.desaturate(0.5).darken(0.2)\r\n        if (entity instanceof Machine) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n        if (entity instanceof Structure) { this.type.text = 'Structure' }\r\n        if (entity instanceof SpaceFunction) { this.type.text = 'Function' }\r\n        if (entity instanceof Building) { this.type.text = 'Building' }\r\n        if (entity instanceof Device) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { CardTitle } from \"./CardTitle\";\r\nimport { CardBody } from \"./CardBody\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\n\r\nexport class Card extends Actor {\r\n    title: CardTitle\r\n    cardBody: CardBody\r\n    image: any\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x + 160, y + 90, 320, 180, Color.White);\r\n        let x0 = -150, y0 = -50;\r\n        this.title = new CardTitle(entity, x0 - 3, y0); //x, y)\r\n        this.add(this.title);\r\n        this.cardBody = new CardBody(entity, x0 + 14, y0 + 40)\r\n        this.add(this.cardBody)\r\n\r\n        this.image = new Image();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        if (this.entity) {\r\n            if (this.entity instanceof Machine) {\r\n                let ix = this.pos.x + 48, iy = this.pos.y - 16\r\n                let isz = 92\r\n                ctx.drawImage(this.image, ix, iy, isz, isz)\r\n            }\r\n        }\r\n    }\r\n\r\n    present(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.title.announce(entity)\r\n        this.cardBody.show(entity)\r\n\r\n        this.entity = entity\r\n        if (this.entity instanceof Machine) {\r\n            this.image.src = this.entity.image\r\n        }\r\n    }\r\n\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor } from \"excalibur\";\r\nimport { Economy, PureValue, availableCapacity, allValues } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n\r\n        let index = 0\r\n        for (let value of allValues) {\r\n            let valueLabel: EconomicValue =  new EconomicValue(value, (index++ * 34), 0)\r\n            this.valueLabels[value] = valueLabel\r\n            this.add(valueLabel)\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value of allValues) {\r\n            this.valueLabels[value].setCount(\r\n                availableCapacity(market, value)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 6, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n\r\n    debit(amt: number) {\r\n        this.value -= amt\r\n        this.count.text = `x${this.value}`\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            [ResourceBlock.Biomass]: null,\r\n            [ResourceBlock.Idea]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n            [ResourceBlock.Alloy]: null,\r\n            [ResourceBlock.Bioplasma]: null,\r\n            [ResourceBlock.Algorithm]: null,\r\n            [ResourceBlock.Argent]: null,\r\n            [ResourceBlock.Aurum]: null,\r\n            [ResourceBlock.Omnium]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0, Color.DarkGray.darken(0.8));\r\n        let rx0 = 0, ry0 = -2.5;\r\n        let resources = [\r\n            ResourceBlock.Meal,\r\n            ResourceBlock.Data,\r\n            ResourceBlock.Mineral,\r\n\r\n            ResourceBlock.Bioplasma,\r\n            ResourceBlock.Alloy,\r\n            ResourceBlock.Algorithm,\r\n\r\n            ResourceBlock.Argent,\r\n            ResourceBlock.Aurum,\r\n        ];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0 + index * 18, ry = ry0 + index * 0;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n\r\n    decrement(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.debit(1)\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n\r\n    constructor(market: Economy, w: number = 10000, h: number = 36) {\r\n        super(0,0, w, h, Color.DarkGray.darken(0.8));\r\n\r\n        let ty = 14\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+2)\r\n        brand.fontSize = 12\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.0.1\", 48, ty + 2)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(80, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 400, ty)\r\n        this.add(this.economy)\r\n\r\n        this.popLabel = new Label(\"\", 1000, ty, 'Helvetica')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 1080, ty, 'Helvetica')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.messageLabel.fontStyle = FontStyle.Italic\r\n        this.add(this.messageLabel)\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    decrementResource(res: ResourceBlock) {\r\n        this.resources.decrement(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n    \r\n}\r\n","import { UIActor, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, SmallRoomThree, SmallRoomTwo, MediumRoom, MidDome, SmallDome, LargeRoom, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, sumMarkets, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { Desk, Bookshelf, Machine, CloningVat, WaterCondensingMachine, OxygenExtractor, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Cabin, Orchard, SolarCell, Megafabricator, Arbor, Fabricator, MiningDrill, Preserve, Workstation, Houseplant, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Card } from \"./Card\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Palette } from \"./Palette\";\r\nimport { Building } from \"../Building\";\r\n\r\nexport class Hud extends UIActor {\r\n    private hidePalettes: boolean = true\r\n    private structurePalette: Palette //<Structure> \r\n    private machinePalette: Palette //<Machine>\r\n    private functionPalette: Palette\r\n    private card: Card\r\n\r\n    private status: StatusAnalysisView\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n    static machinesForPalette = allMachines\r\n    static functionsForPalette = allSpaceFunctions\r\n\r\n\r\n\r\n    constructor(\r\n        private game: Game,\r\n        protected onBuildingSelect = null,\r\n        protected onMachineSelect = null,\r\n        protected onFunctionSelect = null\r\n    ) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.status = new StatusAnalysisView(emptyMarket());\r\n        this.add(this.status)\r\n\r\n        let displayInfo = (e) => this.showCard(e)\r\n        this.structurePalette = new Palette('Structure', 20, 35, Hud.structuresForPalette, onBuildingSelect, displayInfo)\r\n        this.machinePalette = new Palette('Machine', 20, 300, allMachines, onMachineSelect, displayInfo) // (e) => this.showCard(e))\r\n        this.functionPalette = new Palette('Function', 220, 35, Hud.functionsForPalette, onFunctionSelect, displayInfo, false)\r\n\r\n        this.card = new Card(null, 20, 800) // game.canvasHeight - 200)\r\n        this.add(this.card)\r\n    }\r\n\r\n    showPalettes() {\r\n        this.hidePalettes = false\r\n    }\r\n\r\n    setMessage(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (!this.hidePalettes) {\r\n            this.structurePalette.draw(ctx)\r\n            this.machinePalette.draw(ctx)\r\n            this.functionPalette.draw(ctx)\r\n        }\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    resourceExpended(resource: ResourceBlock) {\r\n        this.status.decrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true) {\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n    }\r\n\r\n    showCard(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        this.card.present(entity)\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n        this.updateFunctionPalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        let builtStructures =\r\n            Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n\r\n        this.structurePalette.updateBuilt(builtStructures)\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let devices = colony.findAllDevices()\r\n        let builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine))\r\n        this.machinePalette.updateBuilt(builtMachines)\r\n    }\r\n\r\n    private updateFunctionPalette(colony: Colony) {\r\n        let builtReifiedFunctions = flatSingle(colony.buildings.map(b => b.spaceFunction))\r\n        let builtFunctions = Hud.functionsForPalette.filter((fn) => builtReifiedFunctions.some(rf => rf instanceof fn))\r\n        this.functionPalette.updateBuilt(builtFunctions)\r\n    }\r\n\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Strategy } from \"./Strategy\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nexport abstract class ConstructionStrategy extends Strategy {\r\n    canApply(): boolean {\r\n        return !!this.unbuiltDevice\r\n    }\r\n\r\n    get unbuiltDevice() {\r\n        const isUnbuilt = (d: Device) => !d.built && !d.inUse && d.building.isActive\r\n        return this.planet.colony.findAllDevices().find(isUnbuilt)\r\n    }\r\n}","import { ConstructionStrategy } from \"./ConstructionStrategy\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nexport class ProxmityBasedConstruction extends ConstructionStrategy {\r\n\r\n\r\n    async apply() {\r\n        // find cost items\r\n        if (this.unbuiltDevice && this.unbuiltDevice.building) {\r\n            await this.constructDevice(this.unbuiltDevice)\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n    private async constructDevice(device: Device) {\r\n        device.inUse = true\r\n        let resources = device.machine.cost\r\n        await this.gatherIngredients(resources)\r\n        await this.visitDevice(device)\r\n        await device.assemble(this.pawn)\r\n        device.inUse = false\r\n    }\r\n}","import { ResourceBlock } from \"../models/Economy\";\r\n\r\nimport { Recipe } from \"../models/MechanicalOperation\";\r\n\r\nexport interface RetrieveResource {\r\n    type: 'retrieve'\r\n    resource: ResourceBlock\r\n    // count: number\r\n}\r\n\r\nexport interface WorkRecipe {\r\n    type: 'work'\r\n    recipe: Recipe\r\n}\r\n\r\nexport interface StoreResource {\r\n    type: 'store'\r\n    resource: ResourceBlock\r\n}\r\n\r\nexport function retrieveResource(res: ResourceBlock): RetrieveResource {\r\n    return {\r\n        type: 'retrieve',\r\n        resource: res,\r\n        // count: 1\r\n    }\r\n}\r\n\r\n\r\nexport type InteractionRequest = StoreResource | RetrieveResource | WorkRecipe; // | ...\r\n\r\n","import { Device } from \"../actors/Device\";\r\nimport { MechanicalOperation, Recipe } from \"../models/MechanicalOperation\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class ProductionStrategy extends Strategy {\r\n\r\n\r\n    protected async storeBlock(res: ResourceBlock) {\r\n        let storesDesiredBlock = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) && //operation.capacity &&\r\n            d.operation.stores.includes(res)\r\n        let openStore = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n        let stored = false\r\n        if (openStore) {\r\n            await this.visitDevice(openStore)\r\n            if (await openStore.interact(this.pawn, { type: 'store', resource: res })) {\r\n                stored = true\r\n            }\r\n        }\r\n\r\n        if (!stored) {\r\n            await this.pause()\r\n            await this.storeBlock(res)\r\n        }\r\n    }\r\n\r\n}\r\n","import { shuffle } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Recipe, ResourceStorage } from \"../models/MechanicalOperation\";\r\nimport { ProductionStrategy } from \"./ProductionStrategy\";\r\n\r\nexport class CapacityBasedProduction extends ProductionStrategy {\r\n    async apply() {\r\n        const storeWithCapacity = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) //operation.capacity\r\n        const store: Device = shuffle(this.devices).find(storeWithCapacity)\r\n        if (store && store.operation.type === 'store') {\r\n            const storage: ResourceStorage = store.operation\r\n            const recipeForStoredResource = (r: Recipe) => storage.stores.some(stored => r.produces === stored)\r\n            let recipe = shuffle(this.recipes).find(recipeForStoredResource)\r\n            if (recipe) {\r\n                await this.workRecipe(recipe)\r\n                await this.storeBlock(recipe.produces)\r\n            }\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n    private tryWorkingForStore(store: Storage) {\r\n\r\n    }\r\n\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons, deleteByValueOnce, sleep } from \"../Util\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { ProductionStrategy } from \"../strategies/ProductionStrategy\";\r\nimport { CapacityBasedProduction } from \"../strategies/CapacityBasedProduction\";\r\nimport { drawStar } from \"../Painting\";\r\nimport { ConstructionStrategy } from \"../strategies/ConstructionStrategy\";\r\nimport { ProxmityBasedConstruction } from \"../strategies/ProximityBasedConstruction\";\r\n\r\nexport class Citizen extends Actor {\r\n\r\n    // walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock[] = [] // null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    private productionStrategy: ProductionStrategy\r\n    private constructionStrategy: ConstructionStrategy\r\n\r\n    constructor(private home: Vector, protected planet: Planet, private elite: boolean = false) {\r\n        super(home.x, home.y, Scale.minor.first, Scale.minor.fourth, Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.productionStrategy = new CapacityBasedProduction(this)\r\n        this.constructionStrategy = new ProxmityBasedConstruction(this)\r\n    }\r\n\r\n    get isWorking() { return this.isWorking }\r\n    get currentPlanet() { return this.planet }\r\n\r\n    get walkSpeed() {\r\n        return this.planet.timeFactor * Game.citizenSpeed\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // make sure we are busy!\r\n        this.work()\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = \r\n              Math.min(\r\n                  (now - this.workStarted) / this.workDuration,\r\n                  1\r\n              )\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.elite) {\r\n            // draw a little star?\r\n            drawStar(ctx, this.pos.x + 6, this.pos.y - 9)\r\n        }\r\n\r\n        if (this.carrying) {\r\n            this.carrying.forEach((carried, idx) => {\r\n                ctx.fillStyle = blockColor(carried).toRGBA()\r\n                ctx.fillRect(this.x + 4, this.y - 3 * idx, 5, 5)\r\n            })\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            ctx.strokeRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n        }\r\n\r\n        // let debugPath = true\r\n        if (this.path && Game.debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 4\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        this.workInProgress = false\r\n    }\r\n\r\n\r\n    carry(c: ResourceBlock) {\r\n        this.carrying.push(c);\r\n    }\r\n\r\n    isCarryingUnique(resources: ResourceBlock[]): boolean {\r\n        let isCarrying = false\r\n        let carryingCopy = this.carrying.slice()\r\n        if (this.carrying.length > 0) {\r\n            let missingItem = false\r\n            resources.forEach(resToFind => {\r\n                if (carryingCopy.find(res => res === resToFind)) {\r\n                    deleteByValueOnce(carryingCopy, resToFind)\r\n                } else {\r\n                    missingItem = true;\r\n                }\r\n            })\r\n            isCarrying = !missingItem\r\n        }\r\n        // console.log(\"IS CARRYING\", { resources, carrying: this.carrying, result: isCarrying })\r\n        return isCarrying\r\n    }\r\n\r\n    drop(res: ResourceBlock): ResourceBlock {\r\n        if (this.carrying.length > 0) {\r\n            if (this.carrying.find(r => r === res)) {\r\n                deleteByValueOnce(this.carrying, res)\r\n                return res\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    async visit(device: Device) {\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), device.building)\r\n        path.pop()\r\n        path.shift()\r\n        if (path.length > 1) {\r\n            await this.followPath(path)\r\n        }\r\n        // await this.glideTo(device.pos)\r\n        // await this.pathTo(device.building)\r\n        let target = device.pos.add(device.building.pos)\r\n        await this.glideTo(target)\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        if (pos) {\r\n            return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n        }\r\n    }\r\n\r\n    async followPath(path: Vector[]) {\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            // path.pop()\r\n            // path.shift()\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = []\r\n        }\r\n    }\r\n\r\n    // currentBuilding: Building\r\n    async pathTo(building: Building) {\r\n        if (this.path.length > 0) { throw new Error(\"Already pathing!!\") }\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n        await this.followPath(path)\r\n        return true;\r\n    }\r\n\r\n    async work() {\r\n        if (this.constructionStrategy.canApply()) {\r\n            await this.constructionStrategy.attempt()\r\n        } else {\r\n            await this.productionStrategy.attempt()\r\n        }\r\n    }\r\n\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(pos, elite: boolean = false) {\r\n        let citizen = new Citizen(pos, this.planet, elite);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\n\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = false\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.placed = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination; //.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        console.log(\"PATH FOUND BTWN POINTS\", { srcNode, destNode, path })\r\n        return path;\r\n    }\r\n\r\n\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findPoweredDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d.pos.add(d.building.pos))\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings[0] //.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices(): Device[] {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n\r\n    findPoweredDevices(): Device[] {\r\n        return flatSingle(this.activeBuildings.map(b => b.getDevices()))\r\n            .filter(d => d.built) /// ....\r\n    }\r\n\r\n    protected get activeBuildings() {\r\n        return this.buildings.filter(b => b.isActive)\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawPatternedRect, drawRect } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n// import { drawPatternedRect, drawRect } from \"../../Util\";\r\n\r\nexport class MediumSurfaceRoomView extends Building {\r\n    hideBox = true\r\n\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() //- this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        // draw from left slot to each device place to right slot?\r\n        let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length-1])\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        g.edge(devices[1], find(slots[1]))\r\n\r\n        return g\r\n    }\r\n  \r\n    // afterConstruct() {\r\n    //     let { machines } = this.structure;\r\n    //     if (machines && machines.length > 0) {\r\n    //         let machine = new machines[0]();\r\n    //         this.devicePlaces().forEach(place => {\r\n    //             let theDevice = new Device(machine, place.position)\r\n    //             this.addDevice(theDevice)\r\n    //         })\r\n    //     }\r\n\r\n    // }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor()\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n\r\n        // ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n        // let rect = \r\n            // { x: this.pos.x, y: this.pos.y, width: this.getWidth(), height: this.getHeight() };\r\n        drawPatternedRect(\r\n            ctx,\r\n            this.aabb(),\r\n            this.backgroundPattern\r\n        )\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black\r\n            c.a = 0.6\r\n            drawRect(ctx, this.aabb(), 0, c)\r\n        }\r\n\r\n        // a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomThreeView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Huge\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Large\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 2\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaceCount = 3\r\n    //devicePlaces() {\r\n    //    let w = this.getWidth()/2\r\n    //    let x = this.pos.x + w;\r\n    //    let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n    //    let ds = [\r\n    //        new Vector(x - w / 2, y),\r\n    //        new Vector(x, y),\r\n    //        new Vector(x + w / 2, y),\r\n    //    ]\r\n\r\n    //    return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    //}\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { range, eachCons, measureDistance } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.planet.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector, Color } from \"excalibur\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n// import { drawRect, drawPatternedRect } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { drawPatternedRect, drawRect } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 12\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        // let wallColor = this.processedColor() //.darken(0.4)\r\n        let floorColor = this.planet.color.darken(0.6) //Color.Violet.darken(0.92)\r\n\r\n        // drawRect(ctx, this.aabb(), 0.5, wallColor)\r\n        drawPatternedRect(ctx, this.aabb(), this.backgroundPattern)\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black\r\n            c.a = 0.6\r\n            drawRect(ctx, this.aabb(), 0, c)\r\n        }\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight,\r\n              width: this.getWidth(), height: this.floorHeight },\r\n              0.2,\r\n              floorColor\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let slots: Slot[] = this.slots()\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        // draw from left slot to each device place to right slot?\r\n        let leftSlot = find(slots[0].pos), rightSlot = find(slots[slots.length-1].pos)\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n        return g\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    devicePlaceSize: DeviceSize = DeviceSize.Small\r\n    devicePlaceCount: number = 2\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"98240dde9344ac8d071d076ac951e15d.png\";","module.exports = __webpack_public_path__ + \"da31cf43235263c1c3e0ad45a46360a1.png\";","module.exports = __webpack_public_path__ + \"a6a38278ac501400c6199e0df9e1bf84.png\";","module.exports = __webpack_public_path__ + \"ece1d5d5858bc048d2d949ecc3f5e9bc.png\";","module.exports = __webpack_public_path__ + \"3654f0489813e0668743efde017c9653.png\";","module.exports = __webpack_public_path__ + \"3abbdabf07943966f102ac7345a59986.png\";","module.exports = __webpack_public_path__ + \"d1b4690b9f5fa4957f98602afc8cfdb6.png\";","module.exports = __webpack_public_path__ + \"0eb7a15ea04678b14a2b88b5965aabeb.png\";","module.exports = __webpack_public_path__ + \"29c5f1be64c99bbc14d5063eea2f0953.svg\";","module.exports = __webpack_public_path__ + \"502f86b65239e20806bbae8bc77a6116.svg\";","module.exports = __webpack_public_path__ + \"5289b20985e3c3a98081267a2da1772e.svg\";","module.exports = __webpack_public_path__ + \"1d893905e4eea3bbc48b0e129e318ea6.svg\";","module.exports = __webpack_public_path__ + \"bd556d00e484db4e52d198d0bf39d0f2.svg\";","module.exports = __webpack_public_path__ + \"650cd431226df0755357c71d61bef1f2.svg\";","module.exports = __webpack_public_path__ + \"f12c591f538ab3026bf13e93f3fa9485.svg\";","module.exports = __webpack_public_path__ + \"3aeb9dd24809ba3fbd4eeb31a28c3b19.svg\";","module.exports = __webpack_public_path__ + \"6cc6f6773bb6eb26fcef87b9629f7b87.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"24611230ec712ba7ee38b99561aedd87.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { ResourceBlock } from \"./Economy\";\r\n\r\nexport type MechanicalOperation =\r\n    Recipe |\r\n    ResourceGenerator |\r\n    ResourceStorage |\r\n    SpawnClone |\r\n    AccelerateTime |\r\n    Noop\r\n\r\nexport interface Noop {\r\n    type: 'noop'\r\n}\r\n\r\nexport interface Recipe {\r\n    type: 'recipe'\r\n    consumes: ResourceBlock[]\r\n    produces: ResourceBlock\r\n    workTime: number\r\n}\r\n\r\nexport interface ResourceGenerator {\r\n    type: 'generator'\r\n    generates: ResourceBlock\r\n    generationTime: number\r\n    capacity: number\r\n}\r\n\r\nexport interface ResourceStorage {\r\n    type: 'store'\r\n    stores: ResourceBlock[]\r\n    capacity: number\r\n}\r\n\r\nexport interface SpawnClone {\r\n    type: 'spawn'\r\n}\r\n\r\nexport interface AccelerateTime {\r\n    type: 'accelerate'\r\n    factor: number\r\n}\r\n\r\nfunction store(res: ResourceBlock[], capacity: number = 10): ResourceStorage {\r\n    return {\r\n        type: 'store',\r\n        stores: res,\r\n        capacity\r\n    }\r\n}\r\n\r\nfunction generate(res: ResourceBlock, cap: number = 4): ResourceGenerator {\r\n    return {\r\n        type: 'generator',\r\n        generates: res,\r\n        generationTime: 1000,\r\n        capacity: cap\r\n    }\r\n}\r\n\r\nfunction recipe(input: ResourceBlock[], output: ResourceBlock): Recipe {\r\n    return {\r\n        type: 'recipe',\r\n        consumes: input,\r\n        produces: output,\r\n        workTime: 1000,\r\n    }\r\n}\r\n\r\nfunction spawn(): SpawnClone {\r\n    return {\r\n        type: 'spawn',\r\n    }\r\n}\r\n\r\nfunction accelerateTime(): AccelerateTime {\r\n    return {\r\n        type: 'accelerate',\r\n        factor: 2\r\n    }\r\n}\r\n\r\nexport const mechanicalOperations = {\r\n    store,\r\n    generate,\r\n    recipe,\r\n    spawn,\r\n    accelerateTime,\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { AccelerateTime, MechanicalOperation } from '../../models/MechanicalOperation';\r\n\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n\r\n    constructor(\r\n        public hud: Hud,\r\n        public color: Color,\r\n        private onBuildingHover: (b: Building) => any,\r\n        private onDeviceHover: (d: Device) => any,\r\n        private w: number = 2000000,\r\n        private depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, w, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n    }\r\n\r\n    set currentlyViewing(buildingOrDevice: Building | Device) {\r\n        if (buildingOrDevice instanceof Building) {\r\n            let b: Building = buildingOrDevice\r\n            this.onBuildingHover(b)\r\n        } else if (buildingOrDevice instanceof Device) {\r\n            let d: Device = buildingOrDevice\r\n            this.onDeviceHover(d)\r\n        }\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        // let devices = this.colony.findPoweredDevices()\r\n        // let economies = devices.map((d: Device) => d.machine.economy)\r\n\r\n        let buildings = this.colony.buildings\r\n        let economies = buildings.map(b => b.economy())\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    spend(resource: ResourceBlock): any {\r\n        this.hud.resourceExpended(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector, elite: boolean = false) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            // console.log(\"POPULATIN'!\")\r\n            // let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(pos, elite) //home)\r\n        } else {\r\n            console.warn(\"too many citizens already to populate more!\")\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [ PureValue.Shelter, PureValue.Water, PureValue.Oxygen ]\r\n        return Math.max(0, Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        ))\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n        return this.colony.pathBetweenPoints(origin, destination)\r\n\r\n    }\r\n\r\n    get timeFactor() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let ops: MechanicalOperation[] = devices.map(d => d.operation) //.filter(op => op.type === 'accelerate')\r\n        return ops\r\n            .map(op => op.type === 'accelerate' ? op.factor : 1)\r\n            .reduce((acc, val) => val * acc, 1.0)\r\n    }\r\n}","import { Scene, Input, Vector } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MainTunnel, Corridor, SurfaceRoad, SmallDome, SmallRoomThree, MediumRoomThree, LargeRoom, HugeRoom } from \"../models/Structure\";\r\nimport { Building, structureViews, } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { SpaceFunction, CloneMatrix, Kitchen, LivingQuarters, LifeSupportPod, Library, Archive, ComputerCore, MissionControl, SolarArray, CloneReception } from \"../models/SpaceFunction\";\r\nimport { flatSingle, zip } from \"../Util\";\r\nimport { DevicePlace } from \"../actors/Building/Building\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    placingFunction: SpaceFunction = null\r\n\r\n\r\n    static requiredStructuresAndFunctions: (typeof SpaceFunction | typeof Structure)[] = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        SolarArray,\r\n        // LifeSupportPod,\r\n        MainTunnel,\r\n        Corridor,\r\n        LivingQuarters,\r\n        // CloneMatrix,\r\n        // CloneReception,\r\n        // Kitchen,\r\n        // Library,\r\n        // Archive,\r\n        // ComputerCore,\r\n        \r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, false)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        let buildIt = (e) => this.startConstructing(e)\r\n\r\n        this.hud = new Hud(game, buildIt, buildIt, buildIt)\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(\r\n            this.hud,\r\n            game.world.color,\r\n            (b) => this.hud.showCard(b),\r\n            (d) => this.hud.showCard(d)\r\n        )\r\n\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(1.5, 10000)\r\n        // this.camera.pos.y = this.planet.getTop()\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n\r\n                            if (this.placingFunction) {\r\n                                let fn = this.placingFunction\r\n                                // console.log({ fn, bldg: buildingUnderConstruction })\r\n                                zip(fn.machines, buildingUnderConstruction.devicePlaces()).forEach(([machine, place]: [typeof Machine, DevicePlace]) => {\r\n                                    console.log(\"would add machine\", { machine, place })\r\n                                    let m = (new machine()).concretize()\r\n                                    let device = new Device(m, place.position)\r\n                                    buildingUnderConstruction.addDevice(device)\r\n                                })\r\n                                this.placingFunction = null\r\n                            }\r\n\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                this.planet.colony.currentlyConstructing = null\r\n                this.placingFunction = null\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingStructureOrFunction(): Structure | SpaceFunction {\r\n        let reqs = Construct.requiredStructuresAndFunctions.map(req => new req())\r\n\r\n        let actualStructureNames = this.buildings.map(building => building.structure.name)\r\n        let actualFunctionNames = flatSingle(\r\n            this.buildings.map(building => building.spaceFunction && building.spaceFunction.name)\r\n        )\r\n        let actualNames = [...actualStructureNames, ...actualFunctionNames]\r\n        return reqs.find(req => !actualNames.includes(req.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingStructureOrFunction() //this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.showPalettes()\r\n        }\r\n    }\r\n\r\n    firstBuilding: boolean = true\r\n    startConstructing(structureOrMachine: Structure | Machine | SpaceFunction, pos: Vector = new Vector(0, 0)) {\r\n        this.hud.showCard(structureOrMachine)\r\n        \r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            this.hud.setMessage(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            if (this.firstBuilding) {\r\n                this.camera.zoom(structure.zoom, 250)\r\n                this.camera.pos = theNextOne.pos\r\n                this.firstBuilding = false\r\n            } \r\n        } else if (structureOrMachine instanceof Machine) {\r\n            let machine = structureOrMachine\r\n            this.hud.setMessage(`Install ${machine.name} (${machine.description})`)\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            // this.camera.zoom(1.5, 250)\r\n        } else if (structureOrMachine instanceof SpaceFunction) {\r\n            let fn: SpaceFunction = structureOrMachine\r\n            this.hud.setMessage(`Place ${fn.name} (${fn.description})`)\r\n            theNextOne = this.spawnFunction(fn, pos)\r\n            this.placingFunction = fn\r\n\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        if (device.snap(this.planet)) {\r\n            this.camera.pos = device.pos\r\n \r\n        }\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n\r\n    protected spawnFunction(fn: SpaceFunction, pos: Vector): Building {\r\n        let theStructure: Structure = (fn.structure && new fn.structure()) // || new SmallRoomThree()\r\n        if (!theStructure) {\r\n            theStructure = new SmallRoomThree()\r\n            let machines = fn.machines.map(m => new m())\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Medium)) {\r\n                theStructure = new MediumRoomThree()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Large)) {\r\n                theStructure = new LargeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Huge)) {\r\n                theStructure = new HugeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.forDome)) {\r\n                theStructure = new SmallDome()\r\n            }\r\n        }\r\n\r\n        console.log(\"SPAWN FUNCTION\", { fn, structure: theStructure })\r\n        let building = this.assembleBuildingFromStructure(theStructure, pos)\r\n        building.reshape(building.constrainCursor(building.pos))\r\n        return building\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Orange] //Red, Color.Blue, Color.Green]\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ).\r\n        lighten(0.15).\r\n        desaturate(0.65)\r\n\r\n  \r\n    static bestowName(): any {\r\n        let nameList = [\r\n            'Aragorn',\r\n            'Anodyne',\r\n            'Carolyn',\r\n            'Exeter',\r\n            'Colwreath',\r\n            'India',\r\n            'Comma',\r\n            'Terabithia'\r\n        ]\r\n        return sample(nameList)\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword),\r\n\r\n}\r\n\r\nexport { Resources }\r\n","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}