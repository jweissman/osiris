{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/values/DeviceSize.ts","webpack:///./src/Util.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Machine.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/models/Structure.ts","webpack:///./src/values/Scale.ts","webpack:///./src/actors/Building/BackgroundPatterns.ts","webpack:///./src/values/Graph.ts","webpack:///./src/actors/Device.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Hud/Palette.ts","webpack:///./src/actors/Hud/CardBody.ts","webpack:///./src/actors/Hud/CardTitle.ts","webpack:///./src/actors/Hud/Card.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MediumSurfaceRoomView.ts","webpack:///./src/actors/Building/MediumRoomThreeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/actors/player.ts","webpack:///./src/images/console-green-plain.svg","webpack:///./src/images/console-purple-plain.svg","webpack:///./src/images/console-plain.svg","webpack:///./src/images/workstation-plain.svg","webpack:///./src/images/houseplant-plain.svg","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/models/MechanicalOperation.ts","webpack:///./src/strategies/ProductionStrategy.ts","webpack:///./src/strategies/CapacityBasedProduction.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/images/window-bg.png","webpack:///./src/images/beige-bg.png","webpack:///./src/images/checker-bg.png","webpack:///./src/images/tech-bg.png","webpack:///./src/images/poster-wall-bg.png","webpack:///./src/images/books-bg.png","webpack:///./src/images/leafy-bg.png","webpack:///./src/images/raised-square-bg.png","webpack:///./src/models/World.ts","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","fifth","eighth","excalibur_1","BackgroundPatterns_1","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","deleteByValueOnce","index","indexOf","eachCons","measureDistance","b","drawLine","ctx","lineWidth","Color","White","beginPath","moveTo","x","y","lineTo","strokeStyle","toRGBA","stroke","drawPatternedRect","rect","pattern","BackgroundPattern","Grid","gridPattern","getBackgroundPattern","width","height","fillStyle","fillRect","setLineDash","strokeRect","drawRect","rectangle","edgeWidth","color","filled","dashed","main","edge","sleep","ms","Promise","resolve","setTimeout","shuffle","sort","zip","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","SurfaceRoadView_1","SurfaceRoadView","SmallDomeThreeView_1","SmallDomeThreeView","MidDomeView_1","MidDomeView","BigDomeView_1","BigDomeView","SmallRoomThreeView_1","SmallRoomThreeView","MediumRoomView_1","MediumRoomView","LargeRoomView_1","LargeRoomView","HugeRoomView_1","HugeRoomView","MediumRoomThreeView_1","MediumRoomThreeView","MediumSurfaceRoomView_1","MediumSurfaceRoomView","structureViews","Orientation_1","Util_1","Graph_1","SpaceFunction_1","DeviceSize_1","DevicePlace","pos","this","_super","structure","planet","_this","built","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","devices","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","currentlyViewing","collisionType","CollisionType","PreventCollision","nameLabel","Label","__extends","spaceFunction","description","draw","delta","aabb","processedColor","forEach","device","getCenter","measureText","devicePlaces","place","position","visibleSize","update","engine","produce","constrainCursor","clone","reshape","afterConstruct","handleClick","_pos","slots","nodes","getWidth","getHeight","graph","supergraph","Graph","g","rootNode","findOrCreate","_i","_a","child","slot","parentSlot","childNode","redeem","res","gather","populate","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","find","bldg","edgeColor","lighten","mainColor","darken","colorBase","clr","Red","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","closestBuildingByType","building","matchingSlot","compass_1","compass","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","updateFunction","hasPlaceForDevice","nextDevicePlace","getDevices","allSpaceFunctions","spaceFn","matched","unseenDevices","machines","machine","matchingDevice","console","log","sf","text","warn","background","Actor","PureValue","Power","Oxygen","Water","Shelter","Hope","Joy","Wisdom","Wealth","Beauty","Wonder","allValues","emptyMarket","supply","demand","availableCapacity","market","sumMarkets","ea","eb","newMarket","sa","da","_b","ResourceBlock","Biomass","Ore","Idea","Meal","Data","Mineral","Bioplasma","Alloy","Algorithm","Argent","Aurum","Omnium","blockColors","Green","Blue","Yellow","cStep","Viridian","DarkGray","Gray","Orange","blockColor","block","desaturate","t","setPrototypeOf","__proto__","constructor","create","__assign","assign","arguments","Economy_1","MechanicalOperation_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","plant","workstation","consolePurple","consoleGreen","Violet","store","mechanicalOperations","generate","recipe","spawn","Machine","LightGray","operation","type","image","prereqs","economy","forDome","hide","concretize","CommandCenter","MissionLog","OxygenExtractor","WaterCondensingMachine","SolarCell","StudyMachine","Workstation","Desk","Bookshelf","Fridge","Stove","Bed","Houseplant","PersonnelRegistry","CloningVat","MetalStorage","ResearchServer","Orchard","AlgaeVat","Cabin","Arbor","Botany","productionTime","DissolutionVat","PlasmaBank","Fabricator","OreRefinery","ThinkingPool","MolecularEngine","fromHex","SilverForest","Megafabricator","MiningDrill","Mainframe","Preserve","Microcity","LogicCrystal","allMachines","Left","Up","Down","orientation","Error","Machine_1","Structure_1","SpaceFunction","Beige","bonuses","capacity","workSpeed","MissionControl","MediumSurfaceRoom","Window","LivingQuarters","Barracks","Kitchen","Checker","LifeSupportPod","Retreat","CloneMatrix","ReadingRoom","Library","Books","Study","ComputerLab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Leafy","Farm","Factory","ComputerCore","Tech","LifeSciencesLab","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","Structure","view","zoom","Corridor","Ladder","MainTunnel","second","SurfaceRoad","first","Dome","CommonArea","SmallRoomThree","sixth","SmallRoomTwo","SmallDome","MediumRoom","MediumRoomThree","LargeRoom","HugeRoom","seventh","SmallDomeThree","MidDome","LargeDome","Arcology","allStructures","majorUnit","fourth","minorUnit","minorScale","raisedSquare","leafy","bookish","posters","tech","checker","beige","loadBg","path","loading","Image","src","onload","Poster","backgroundPatterns","bg","createPattern","empty","edges","edgesInverse","isEmpty","node","newNode","contains","testNode","includes","measure","tolerance","dfs","dst","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","steps","srcIndex","reverse","retrieveResource","resource","Device","initialPos","product","inUse","imageLoaded","fontSize","drawImage","imageX","imageY","iv","bx","by","yOff","produced","blockSize","interact","citizen","request","worked","op","recipe_1","carrying","some","it","consumes","isCarryingUnique","consumed","drop","workTime","getEffectiveWorkTime","progressBar","sent","carry","produces","requires","has","label","store_1","dispense","stores","getEffectiveOperationalCapacity","res_1","stored","bonus","round","generationTime","generates","snap","snapped","Resources_1","Game","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","start","loader","Loader","key","Resources","addResource","citizenSpeed","Engine","Palette","all","onButtonClick","onButtonEnter","comprehend","comprehended","makePalette","_element","left","canvas","offsetLeft","top_1","offsetTop","style","top","updateBuilt","every","prereq","parentElement","removeChild","document","createElement","border","body","appendChild","title","textContent","fontFamily","fontWeight","padding","margin","btn","buttonFactory","onmouseenter","onclick","fg","paletteButton","display","textTransform","onmouseover","saturate","onmouseleave","CardBody","entity","values","add","notes","fontStyle","FontStyle","Italic","show","econ","join","bonusMessages","CardTitle","Black","announce","CardTitle_1","CardBody_1","Card","x0","cardBody","y0","ix","iy","present","EconomicValue","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","allValues_1","updateView","updatedEconomy","allValues_2","ResourceListEntry","resourceBlock","icon","credit","amt","ResourceListEntry_1","ResourcesList","entries","rx","ry","entry","increment","ResourcesList_1","EconomyView_1","StatusAnalysisView","w","h","brand","ty","version","resources","popLabel","messageLabel","incrementResource","setMessage","showEconomy","showPopCap","cap","StatusAnalysisView_1","Card_1","Palette_1","Hud","game","onBuildingSelect","onMachineSelect","onFunctionSelect","canvasWidth","canvasHeight","status","displayInfo","showCard","structurePalette","structuresForPalette","machinePalette","functionPalette","functionsForPalette","card","resourceGathered","updateDetails","rebuildPalettes","updatePalettes","updateEconomy","updateMaxPop","maxPop","updateBuildingPalette","updateMachinePalette","updateFunctionPalette","builtStructures","findAllDevices","builtMachines","machinesForPalette","builtReifiedFunctions","builtFunctions","rf","UIActor","devicePlaceSize","devicePlaceCount","theSlots","slotY","getTop","backgroundPattern","flagX","flagY","_1","floorHeight","originSlot","pickingOrigin","maxHeight","setHeight","drawShape","xoff","yoff","bezierCurveTo","halfWidth","slotHeights","heights","y1","btm","lst","right","slotCount","arc","PI","closePath","floorColor","leftSlot","rightSlot","originX","newCursor","setWidth","abs","ex","Player","input","output","__awaiter","throw","done","then","__generator","trys","ops","return","Symbol","iterator","TypeError","pop","Device_1","ProductionStrategy","pawn","sleepInterval","isActive","currentPlanet","recipes","operations","attempt","pause","setInterval","workRecipe","ingredient","gatherBlock","knowsRecipe","maker","closestDeviceByType","visitDevice","performRecipeTask","storeBlock","storesDesiredBlock","openStore","gathered","generatesDesiredBlock","gen","pathTo","glideTo","CapacityBasedProduction","storeWithCapacity","storage_1","recipeForStoredResource","Game_1","CapacityBasedProduction_1","Citizen","walkSpeed","workInProgress","productionStrategy","isWorking","work","now","Date","getTime","progress","workStarted","workDuration","carried","px","pw","py","isCarrying","carryingCopy","resToFind","actions","asPromise","duration","reject","pathBetween","Citizen_1","Population","citizens","increase","home","NavigationTree","seekPath","origin","dest","closestNode","NavigationTree_1","Colony","currentlyConstructing","navTree","placeBuilding","buildNavTree","structureTypes","st","destination","srcNode","destNode","machineTypes","ctrl","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","yBase","peak","mtnWidth","PlanetBackground","PlanetBackground_1","Colony_1","Population_1","Planet","hud","onBuildingHover","depth","createLayer","layerHeight","population","set","theLayer","theEconomy","popularDemand","closestDevice","theEconomyWithoutPeople","val","Planet_1","player_1","Hud_1","Construct","dragging","defaultMessage","placingFunction","buildIt","startConstructing","player","prepareNextBuilding","camera","onActivate","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction_1","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","Esc","onDeactivate","off","nextMissingStructureOrFunction","reqs","requiredStructuresAndFunctions","req","actualStructureNames","actualFunctionNames","actualNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","spawnFunction","anotherBuilding","assembleBuildingFromStructure","theStructure","Scene","World","colors","Cyan","Vermillion","bestowName","sword","Sword","Texture","World_1","Construct_1","theWorld","construct","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([77,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.fifth; break;\r\n        case DeviceSize.Large: sz = major.eighth + major.third; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { getBackgroundPattern, BackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport const deleteByValueOnce = (arr, elem) => {\r\n  let index = arr.indexOf(elem);\r\n  if (index !== -1) arr.splice(index, 1);\r\n}\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\n// let gridPattern;\r\n// let loadingPattern  = false\r\nexport function drawPatternedRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern) // BackgroundPattern.Grid)\r\n  if (gridPattern) {\r\n    let { x, y, width, height } = rect;\r\n    ctx.fillStyle = gridPattern\r\n    ctx.fillRect(x,y,width,height)\r\n\r\n    ctx.lineWidth = 2\r\n    ctx.setLineDash([])\r\n    ctx.strokeStyle = Color.White.toRGBA()\r\n    ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true,\r\n  dashed: boolean = false\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  // if (edgeWidth > 0) {\r\n  //   let edge = Color.White;\r\n  //   ctx.fillStyle = edge.toRGBA();\r\n  //   ctx.fillRect(x, y, width, height)\r\n  // }\r\n\r\n  if (filled) {\r\n    let main = color;\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x, //+ edgeWidth,\r\n      y, //+ edgeWidth,\r\n      width, // - edgeWidth * 2,\r\n      height // - edgeWidth * 2\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White;\r\n    ctx.strokeStyle = edge.toRGBA();\r\n    ctx.lineWidth=edgeWidth\r\n    if (dashed) { ctx.setLineDash([5, 10]) } //ctx.lineDashOffset = 5 }\r\n    else { ctx.setLineDash([]) }\r\n    // ctx.strokeStyle = Stroke.So\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}\r\n\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function shuffle(arr) {\r\n   return arr.sort(() => Math.random() > 0.5 ? 1 : -1) \r\n}\r\n\r\nexport const zip = (a, b) => a.map((e,i) => [e, b[i]])","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\nimport { SmallDomeThreeView } from './SmallDomeThreeView';\r\nimport { MidDomeView } from './MidDomeView';\r\nimport { BigDomeView } from './BigDomeView';\r\nimport { SmallRoomThreeView } from './SmallRoomThreeView';\r\nimport { MediumRoomView } from './MediumRoomView';\r\nimport { LargeRoomView } from './LargeRoomView';\r\nimport { HugeRoomView } from './HugeRoomView';\r\nimport { MediumRoomThreeView } from './MediumRoomThreeView';\r\nimport { MediumSurfaceRoomView } from './MediumSurfaceRoomView';\r\n\r\n\r\nconst structureViews: { [key: string]: typeof Building } = {\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n    MediumSurfaceRoomView,\r\n}\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n\r\n    MediumSurfaceRoomView,\r\n\r\n\r\n    structureViews\r\n\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, drawRect, deleteByValue } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { World } from \"../../models/World\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0\r\n\r\n    nameLabel: Label\r\n\r\n    built: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    spaceFunction: SpaceFunction\r\n\r\n    private devices: Device[] = []\r\n    givenName: string\r\n\r\n    constructor(pos: Vector, public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            this.planet.currentlyViewing = this\r\n            // console.log(\"HOVER ON\", { building: this })\r\n        })\r\n\r\n        // this.on('pointerdown', () => {\r\n        //     console.log(\"CLICKED BUILDING\", { building: this })\r\n        //     this.levelUp();\r\n        // })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        // this.nameLabel.fontSize = 11\r\n        this.nameLabel.color = Color.White\r\n\r\n    }\r\n\r\n    get name() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.name // `${this.givenName} ${this.spaceFunction.name}`;\r\n        } else {\r\n            return this.structure.name //`${this.givenName} ${this.structure.name}`;\r\n        }\r\n    }\r\n\r\n    get description() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.description\r\n        } else {\r\n            return this.structure.description\r\n        }\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        this.devices.forEach(device => device.draw(ctx, delta))\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n        }\r\n\r\n        let debug = false;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = true\r\n        if (showDevicePlaces && this.devicePlaces().length > 0) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    0.1,\r\n                    Color.White,\r\n                    false,\r\n                    true\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n        let tryProduce = this.built;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.produce(this.step));\r\n        }\r\n        this.step += 1\r\n    }\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public populate(pos: Vector) {\r\n        this.planet.populate(pos) //this.pos)\r\n    }\r\n\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        // device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        this.updateFunction()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices\r\n    }\r\n\r\n    private updateFunction() {\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let matched = true;\r\n            let unseenDevices = this.devices.slice()\r\n            let sf = new spaceFn()\r\n            sf.machines.forEach((machine: typeof Machine) => {\r\n                let matchingDevice = unseenDevices.find(d => d.machine instanceof machine)\r\n                if (!matchingDevice) { matched = false; }\r\n                unseenDevices = deleteByValue(unseenDevices, matchingDevice)\r\n            })\r\n            return matched;\r\n        })\r\n        if (fn) {\r\n            console.log(\"Determined building function\", { fn })\r\n            let sf = new fn()\r\n            this.spaceFunction = sf\r\n            this.nameLabel.text = sf.name\r\n        } else {\r\n            console.warn(\"Could not identify function!\")\r\n        }\r\n    }\r\n\r\n    get backgroundPattern() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.background\r\n        } else {\r\n            return BackgroundPattern.Grid\r\n        }\r\n    }\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport const allValues = [\r\n    PureValue.Power,\r\n    PureValue.Oxygen,\r\n    PureValue.Water,\r\n    PureValue.Shelter,\r\n    PureValue.Hope,\r\n    PureValue.Wisdom,\r\n    PureValue.Wealth,\r\n    PureValue.Beauty,\r\n    PureValue.Wonder\r\n]\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return Math.floor(market[value].supply - market[value].demand)\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply,\r\n            demand,\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Biomass = 'Biomass',\r\n    Ore = 'Ore',\r\n    Idea = 'Idea',\r\n\r\n    // derived\r\n    Meal = 'Meal',\r\n    Data = 'Data',\r\n    Mineral = 'Mineral',\r\n    Bioplasma = 'Bioplasma',\r\n\r\n    // higher-order\r\n    Alloy = \"Alloy\",\r\n    Algorithm = \"Algorithm\",\r\n\r\n    // superb\r\n    Argent = \"Argent\",\r\n    Aurum = \"Aurum\",\r\n\r\n    // hyperbolic\r\n    Omnium = \"Omnium\",\r\n}\r\n\r\nlet cStep = 0.3\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Biomass: Color.Green,\r\n    Data: Color.Blue.lighten(cStep),\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(cStep),\r\n    Idea: Color.Blue.lighten(cStep*2), //.desaturate(cStep),\r\n    Ore: Color.Red.darken(cStep),\r\n\r\n    Bioplasma: Color.Viridian,\r\n\r\n    Alloy: Color.DarkGray.darken(cStep), //(cStep),\r\n    Algorithm: Color.Blue.darken(cStep), //.desaturate(cStep),\r\n\r\n    Argent: Color.Gray.lighten(cStep),\r\n    Aurum: Color.Orange.lighten(cStep),\r\n\r\n    Omnium: Color.White,\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    return baseColor.desaturate(0.1) //.lighten(0.1) //.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Color, FontStyle, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { MechanicalOperation, mechanicalOperations } from \"./MechanicalOperation\";\r\nimport { shuffle } from \"../Util\";\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\nconst plant = require('../images/houseplant-plain.svg')\r\nconst workstation = require('../images/workstation-plain.svg')\r\n\r\nconst console = require('../images/console-plain.svg')\r\nconst consolePurple = require('../images/console-purple-plain.svg')\r\nconst consoleGreen = require('../images/console-green-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n    plant,\r\n    workstation,\r\n\r\n    console,\r\n    consolePurple,\r\n    consoleGreen,\r\n}\r\n\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nlet { store, generate, recipe, spawn } = mechanicalOperations\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n    size: DeviceSize = DeviceSize.Small\r\n    operation: MechanicalOperation = { type: 'noop' }\r\n    image = images.vat\r\n    prereqs: (typeof Machine)[] = []\r\n    economy: Economy = emptyMarket()\r\n    forDome: boolean = false\r\n    hide: boolean = false\r\n\r\n    capacity: boolean\r\n\r\n\r\n    concretize(): Machine { return this; } //return shuffle(allMachines)[0] }\r\n    // concretions: Machine[] = []\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command Console'\r\n    description = 'gather resources...'\r\n    operation = store(\r\n        [ResourceBlock.Meal, ResourceBlock.Ore],\r\n        6\r\n    )\r\n    image = images.consoleGreen\r\n    size = DeviceSize.Medium\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 1, demand: 0 },\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class MissionLog extends Machine {\r\n    name = 'Mission Log'\r\n    description = 'gather data'\r\n    operation = store(\r\n        [ResourceBlock.Data],\r\n        8\r\n    )\r\n    image = images.consolePurple\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n//export class Energon extends Machine {\r\n//    name = 'Energon'\r\n//    description = 'food paste'\r\n//}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 3, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 5, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H20 Condenser'\r\n    description = 'have a drink'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 4, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n/// small subsurface\r\nexport class StudyMachine extends Machine {\r\n    operation = recipe(\r\n        [ ResourceBlock.Idea, ResourceBlock.Idea, ResourceBlock.Idea ],\r\n        ResourceBlock.Data\r\n    )\r\n    color = Blue\r\n    concretize(): Machine { return new (shuffle([Workstation, Desk])[0])() }\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    description = 'get to work'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    description = 'hackety hack'\r\n    prereqs = [ Bookshelf ]\r\n    image = images.workstation\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n    concretize() { return this }\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    operation = generate(ResourceBlock.Idea)\r\n    image = images.bookshelf\r\n    prereqs = [ OxygenExtractor, Desk ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    operation = store([ResourceBlock.Meal], 6)\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    operation = recipe(\r\n        [ResourceBlock.Biomass, ResourceBlock.Biomass],\r\n        ResourceBlock.Meal\r\n    )\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    description = 'sweet dreams'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    description = 'so nice'\r\n    prereqs = [ Bed ]\r\n    // produces = ResourceBlock.Food\r\n    operation = generate(ResourceBlock.Biomass, 1)\r\n    color = Green\r\n    image = images.plant\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Water: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\nexport class PersonnelRegistry extends Machine {\r\n    name = 'Personnel Registry'\r\n    description = 'track everybody'\r\n    prereqs = [ CloningVat ]\r\n    operation = store([ResourceBlock.Data], 4)\r\n    color = Yellow\r\n    image = images.console\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Wisdom: { supply: 0.1, demand: 0 },\r\n    }\r\n}\r\n\r\n// medium\r\n\r\nexport class MetalStorage extends Machine {\r\n    name = 'Metal Storage'\r\n    description = 'contain minerals and alloys?'\r\n    operation = store([ResourceBlock.Mineral, ResourceBlock.Alloy], 8)\r\n    prereqs = [Bookshelf]\r\n    color = Red\r\n    size = DeviceSize.Medium\r\n}\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    operation = store([ResourceBlock.Data, ResourceBlock.Algorithm], 10)\r\n    image = images.server\r\n    prereqs = [Bookshelf]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   operation = generate(ResourceBlock.Biomass)\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Oxygen: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   description = 'home on the plains'\r\n   operation = recipe(\r\n       [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n       ResourceBlock.Meal\r\n   )\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    description = 'arbor around the clock'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    description = 'where there is a will'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    description = 'plant lab'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'we all grow'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = spawn()\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class DissolutionVat extends Machine {\r\n    name = 'Dissolution Vat'\r\n    description = 'back to basics'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = recipe(\r\n        [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n        ResourceBlock.Bioplasma\r\n    )\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [PlasmaBank]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class PlasmaBank extends Machine {\r\n    name = 'Bioplasm Bank'\r\n    description = 'hold on'\r\n    operation = store([ ResourceBlock.Bioplasma ])\r\n    prereqs = [AlgaeVat]\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    description = 'you made that'\r\n    operation = recipe(\r\n        [ResourceBlock.Mineral, ResourceBlock.Mineral],\r\n         ResourceBlock.Alloy\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n}\r\n\r\nexport class OreRefinery extends Machine {\r\n    name = 'Refinery'\r\n    description = 'wheat from the chaff'\r\n    operation = recipe(\r\n        [ResourceBlock.Ore, ResourceBlock.Ore, ResourceBlock.Ore],\r\n         ResourceBlock.Mineral\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation, Fabricator]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class ThinkingPool extends Machine {\r\n    name = 'Thinking Pool'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = store([ResourceBlock.Aurum], 8)\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class SilverForest extends Machine {\r\n    name = 'Silver Forest'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Megafabricator ]\r\n    color = Color.fromHex('c0c0c0')\r\n    operation = store([ResourceBlock.Argent], 12)\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Beauty: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n    forDome = true\r\n}\r\n\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    description = 'ore away'\r\n    operation = generate(ResourceBlock.Ore)\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    operation = recipe(\r\n        [ResourceBlock.Alloy, ResourceBlock.Algorithm],\r\n        ResourceBlock.Argent\r\n    )\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class MolecularEngine extends Machine {\r\n    name = 'Molecular Engine'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Megafabricator ]\r\n    color = Violet\r\n    operation = recipe(\r\n        [ResourceBlock.Bioplasma, ResourceBlock.Algorithm],\r\n        ResourceBlock.Aurum\r\n    )\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n        Water: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Mainframe extends Machine {\r\n    name = 'Mainframe'\r\n    size = DeviceSize.Large\r\n    color = Blue\r\n    prereqs = [ResearchServer]\r\n    operation = recipe(\r\n        [ ResourceBlock.Data, ResourceBlock.Data ],\r\n        ResourceBlock.Algorithm\r\n    )\r\n    image = images.server\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 6 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    // operation = generate()\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n        Oxygen: { supply: 12, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n\r\n    OreRefinery,\r\n    PlasmaBank,\r\n    DissolutionVat,\r\n    MetalStorage,\r\n    Mainframe,\r\n\r\n    PersonnelRegistry,\r\n    MolecularEngine,\r\n    ThinkingPool,\r\n    SilverForest,\r\n\r\n]","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine, Mainframe, CommandCenter, MissionLog, Botany } from './Machine';\r\nimport { Color } from 'excalibur';\r\nimport { Structure, MediumSurfaceRoom } from './Structure';\r\nimport { BackgroundPattern } from '../actors/Building/BackgroundPatterns';\r\n\r\nexport class SpaceFunction {\r\n     name: string = '(generic)'\r\n     description: string = '(generic description)'\r\n     machines: (typeof Machine)[] = []\r\n     color: Color = Color.Gray\r\n\r\n     prereqs: (typeof SpaceFunction)[] =  [] \r\n\r\n     structure: typeof Structure = null\r\n     hide: boolean = false\r\n     background: BackgroundPattern = BackgroundPattern.Beige\r\n\r\n     bonuses: {\r\n          capacity: number, // every store/generator gets this??\r\n          workSpeed: number, // 2 should double work speed (dur *= 1/multiplier)\r\n     } = {\r\n          capacity: 0, // boost cap by one\r\n          workSpeed: 1.00 // 20% bonus to work speed\r\n     }\r\n}\r\n\r\nexport class MissionControl extends SpaceFunction {\r\n     hide = true\r\n     name = 'Mission Control'\r\n     description = 'keeping everything on track'\r\n     structure = MediumSurfaceRoom\r\n     prereqs = [] //ComputerCore, Factory, Farm ]\r\n     machines = [ CommandCenter, MissionLog ]\r\n     background = BackgroundPattern.Window\r\n}\r\n\r\n\r\nexport class LivingQuarters extends SpaceFunction {\r\n     name = 'Living Quarters'\r\n     description = 'good night'\r\n     machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n     name = 'Barracks'\r\n     description = 'sleep tight'\r\n     machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nexport class Kitchen extends SpaceFunction {\r\n     name = 'Kitchen'\r\n     description = 'stay together'\r\n     machines = [ Stove, Fridge ]\r\n     bonuses = {\r\n          capacity: 2,\r\n          workSpeed: 1.1\r\n     }\r\n     background = BackgroundPattern.Checker\r\n}\r\n\r\nexport class LifeSupportPod extends SpaceFunction {\r\n     name = 'Life Support'\r\n     description = 'keep it going'\r\n     machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n     name = 'Retreat'\r\n     description = 'take it easy'\r\n     machines = [ Cabin, Cabin ]\r\n}\r\n\r\nexport class CloneMatrix extends SpaceFunction {\r\n     name = 'Clone Matrix'\r\n     description = 'clone home'\r\n     machines = [ CloningVat, CloningVat ]\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n     name = 'Reading Room'\r\n     description = 'butterflies in the sky'\r\n     machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nexport class Library extends SpaceFunction {\r\n     name = 'Library'\r\n     description = 'take a look'\r\n     machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n     background = BackgroundPattern.Books\r\n}\r\n\r\nclass Study extends SpaceFunction {\r\n     name = 'Study'\r\n     description = 'plan it out'\r\n     machines = [ StudyMachine, Bookshelf ]\r\n}\r\n\r\nclass ComputerLab extends SpaceFunction {\r\n     name = 'Computer Lab'\r\n     description = 'make it happen'\r\n     machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nexport class Archive extends SpaceFunction {\r\n     name = 'Archive'\r\n     description = 'write it down'\r\n     machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n     name = 'Arboretum'\r\n     description = 'walk it out'\r\n     machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n     name = 'Algae Farm'\r\n     description = 'make do'\r\n     machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nclass SolarArray extends SpaceFunction {\r\n     name = 'Solar Array'\r\n     description = 'warm up'\r\n     machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nclass Workshop extends SpaceFunction {\r\n     name = 'Workshop'\r\n     description = 'take form'\r\n     machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\nclass Nursery extends SpaceFunction {\r\n     name = 'Nursery'\r\n     description = 'quiet please'\r\n     machines = [ Houseplant, Houseplant, Houseplant ]\r\n     background = BackgroundPattern.Leafy\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n     name = 'Farm'\r\n     description = 'food for the masses'\r\n     machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n     name = 'Factory'\r\n     description = 'production lines'\r\n     machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\n\r\nexport class ComputerCore extends SpaceFunction {\r\n     name = 'Computer Core'\r\n     description = 'let us calculate'\r\n     machines = [ Mainframe, Mainframe ]\r\n     background = BackgroundPattern.Tech\r\n}\r\n\r\nexport class LifeSciencesLab extends SpaceFunction {\r\n     name = 'Life Sciences Lab'\r\n     description = 'where do i come from'\r\n     machines = [ Botany, Botany ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    ComputerLab,\r\n\r\n    ComputerCore,\r\n\r\n    MissionControl,\r\n    LifeSciencesLab,\r\n]","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    color: Color = Color.Gray\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n\r\n    hide: boolean = false\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MediumSurfaceRoom ],\r\n        [Orientation.Right]: [  Dome, MediumSurfaceRoom ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    description: string = 'Biome sweet biome';\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.sixth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n\r\n    prereqs = [\r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n    // two small slots\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 2 * major.eighth\r\n    height = 2 * major.third\r\n    // two medium slots...\r\n    \r\n    machines = midBelow\r\n}\r\n\r\nexport class MediumRoomThree extends CommonArea {\r\n    name = 'Mid Room (3)'\r\n    prereqs = [ MediumRoom ]\r\n    view = 'MediumRoomThreeView'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.third\r\n\r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 4 * major.eighth\r\n    height = 3 * major.fifth\r\n\r\n    // two big slots?\r\n    machines = largeBelow\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class MediumSurfaceRoom extends Dome {\r\n    name = 'Mid Surf Bldg'\r\n    description = 'home away from home';\r\n\r\n    view: string = 'MediumSurfaceRoomView';\r\n\r\n    width: number = 6 * major.eighth\r\n    height: number = 1 * major.sixth\r\n\r\n    zoom = 0.1\r\n\r\n    prereqs = [ SmallDome ]\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = midBelow\r\n\r\n    hide = true // need another one which cares about connecting to roads\r\n}\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = 2 * major.seventh\r\n    height = major.seventh\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 3 * major.fifth\r\n    height = 2 * major.fifth\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 3 * major.seventh\r\n    height = 2 * major.seventh\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n\r\n}\r\n\r\n//////\r\n\r\n// export class MissionControl extends Structure {\r\n//     name: string = 'Mission Control';\r\n//     description: string = 'Keeping everything on track';\r\n//     view: string = 'MissionControlView';\r\n//     width: number = 6 * major.eighth\r\n//     height: number = 1 * major.sixth\r\n//     zoom = 0.1\r\n//     connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n//         [Orientation.Left]: [ SurfaceRoad ],\r\n//         [Orientation.Right]: [ SurfaceRoad ],\r\n//         [Orientation.Up]: [ MainTunnel ],\r\n//         [Orientation.Down]: [ MainTunnel ],\r\n//     }\r\n\r\n//     machines = [ CommandCenter ]\r\n// }\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n        MediumSurfaceRoom,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        MediumRoomThree,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","const raisedSquare = require('../../images/raised-square-bg.png')\r\nconst leafy = require('../../images/leafy-bg.png')\r\nconst bookish = require('../../images/books-bg.png')\r\nconst posters = require('../../images/poster-wall-bg.png')\r\nconst tech = require('../../images/tech-bg.png')\r\nconst checker = require('../../images/checker-bg.png')\r\nconst beige = require('../../images/beige-bg.png')\r\nconst window = require('../../images/window-bg.png')\r\n\r\ninterface Background {\r\n    image: HTMLImageElement\r\n    pattern: CanvasPattern\r\n    loading: boolean\r\n}\r\n\r\nconst loadBg = (path) => {\r\n    let background: Background = { image: null, pattern: null, loading: true }\r\n    background.image = new Image();\r\n    background.image.src = path\r\n    background.image.onload = function () {\r\n      background.loading = false\r\n    }\r\n    return background\r\n}\r\n\r\nexport enum BackgroundPattern {\r\n    Leafy = 'Leafy',\r\n    Grid = 'Grid',\r\n    Books = 'Books',\r\n    Poster = 'Poster',\r\n    Tech = 'Tech',\r\n    Checker = 'Checker',\r\n    Beige = 'Beige',\r\n    Window = 'Window',\r\n}\r\n\r\nconst backgroundPatterns: { [ key in BackgroundPattern ]: Background } = {\r\n    Leafy: loadBg(leafy),\r\n    Grid: loadBg(raisedSquare),\r\n    Books: loadBg(bookish),\r\n    Poster: loadBg(posters),\r\n    Tech: loadBg(tech),\r\n    Checker: loadBg(checker),\r\n    Beige: loadBg(beige),\r\n    Window: loadBg(window)\r\n}\r\n\r\nexport const getBackgroundPattern = (ctx, pattern: BackgroundPattern) => {\r\n    let bg = backgroundPatterns[pattern]\r\n    if (!bg.loading) {\r\n        if (!bg.pattern) {\r\n            bg.pattern = ctx.createPattern(bg.image, 'repeat');\r\n        }\r\n        return bg.pattern\r\n    }\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\nimport { Recipe, ResourceStorage, MechanicalOperation, ResourceGenerator } from \"../models/MechanicalOperation\";\r\nimport { range, deleteByValueOnce, drawRect } from \"../Util\";\r\n\r\ninterface RetrieveResource {\r\n    type: 'retrieve'\r\n    resource: ResourceBlock\r\n    // count: number\r\n}\r\n\r\ninterface WorkRecipe {\r\n    type: 'work'\r\n    recipe: Recipe\r\n}\r\n\r\ninterface StoreResource {\r\n    type: 'store'\r\n    resource: ResourceBlock\r\n}\r\n\r\nexport function retrieveResource(res: ResourceBlock): RetrieveResource {\r\n    return {\r\n        type: 'retrieve',\r\n        resource: res,\r\n        // count: 1\r\n    }\r\n}\r\n\r\nexport type InteractionRequest = StoreResource | RetrieveResource | WorkRecipe // | ...\r\n\r\nexport class Device extends Actor {\r\n    // could also use for storage?\r\n    product: ResourceBlock[] = []\r\n    nameLabel: Label\r\n    image: any\r\n    building: Building\r\n    inUse: boolean = false\r\n\r\n    imageLoaded: boolean = false\r\n\r\n    constructor(\r\n        public machine: Machine,\r\n        initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = () => { this.imageLoaded = true }\r\n        this.image.src = machine.image\r\n    }\r\n\r\n    get imageX() { return this.pos.x - this.getWidth() / 2 }\r\n    get imageY() { return this.pos.y - this.getHeight() / 2 - 10 }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (this.imageLoaded) {\r\n            // drawRect(\r\n            //     ctx,\r\n            //     { x: this.imageX, y: this.imageY, width: this.getWidth(), height: this.getHeight ()},\r\n            //     2,\r\n            //     Color.Green\r\n            // )\r\n\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.imageX,\r\n                this.imageY,\r\n\r\n                // this.pos.y - this.getHeight() / 2 - 10,\r\n                this.getWidth(),\r\n                this.getHeight()\r\n            )\r\n        }\r\n\r\n        let iv = new Vector(this.imageX, this.imageY) //this.pos //getCenter()\r\n        // iv.y += this.getHeight() / 2\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = iv // this.getCenter()\r\n            // this.nameLabel.pos.x -= 10\r\n            // this.nameLabel.pos.y += 8 + this.getHeight()/2\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let { x: bx, y: by } = iv //bx = this.x - this.getWidth()/2 + 5, by = this.y - 23\r\n        let blockSize = 5\r\n        let yOff = this.nameLabel.fontSize\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).toRGBA()\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize + yOff, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get operation() { return this.machine.operation }\r\n\r\n    async interact(citizen: Citizen, request: InteractionRequest): Promise<boolean> {\r\n        if (this.inUse) {\r\n            return false\r\n        }\r\n\r\n        let worked = false\r\n        let op = this.operation\r\n        if (op.type === 'recipe' && request.type === 'work') {\r\n            let recipe: Recipe = op\r\n            // do we have all the things?\r\n            if (citizen.carrying.some(it => recipe.consumes.includes(it))) {\r\n                this.inUse = true\r\n                if (citizen.isCarryingUnique(recipe.consumes)) {\r\n                    recipe.consumes.forEach(consumed => citizen.drop(consumed))\r\n                    let workTime = this.getEffectiveWorkTime(recipe)\r\n                    await citizen.progressBar(workTime) // recipe.workTime)\r\n                    citizen.carry(recipe.produces)\r\n\r\n                    worked = true\r\n                } else {\r\n                    console.warn(\"not carrying all requirements?\", { requires: recipe.consumes, has: citizen.carrying })\r\n                }\r\n                this.inUse = false\r\n            }\r\n        } else if (op.type === 'store') {\r\n            // accept it! (whatever you have that matches...?)\r\n            let store: ResourceStorage = op\r\n            if (request && request.type === 'retrieve') { // assume dispense request for now?\r\n                this.inUse = true\r\n                worked = this.dispense(citizen, request)\r\n                if (worked) {\r\n                    await citizen.progressBar(500)\r\n                }\r\n                this.inUse = false\r\n            } else if (request && request.type === 'store' &&\r\n                citizen.carrying.some(it => store.stores.includes(it))) { // maybe trying to store?\r\n                if (this.product.length < this.getEffectiveOperationalCapacity(store)) { // store.capacity) {\r\n                    let res = null\r\n                    if (store.stores.some(stored => { res = citizen.drop(stored); return res })) {\r\n                        if (res) {\r\n                            this.product.push(res)\r\n                            this.building.redeem(res)\r\n                            worked = true\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.warn(\"no capacity in this store!!\")\r\n                    worked = false\r\n                }\r\n            }\r\n        } else if (op.type === 'generator') {\r\n            this.inUse = true\r\n            worked = this.dispense(citizen, request)\r\n            if (worked) {\r\n                await citizen.progressBar(500)\r\n            }\r\n            this.inUse = false\r\n        }\r\n\r\n        return worked\r\n    }\r\n\r\n    getEffectiveOperationalCapacity(op: ResourceGenerator | ResourceStorage) {\r\n        let bonus = this.building.spaceFunction\r\n        ? this.building.spaceFunction.bonuses.capacity \r\n        : 0\r\n        return op.capacity + bonus\r\n    }\r\n\r\n    getEffectiveWorkTime(op: Recipe) {\r\n        let bonus = this.building.spaceFunction \r\n         ? this.building.spaceFunction.bonuses.workSpeed\r\n         : 1\r\n\r\n        return Math.round(op.workTime * (1/bonus))\r\n    } \r\n\r\n\r\n    private dispense(citizen: Citizen, request: InteractionRequest) {\r\n        if (request && request.type === 'retrieve') {\r\n            let canFulfill = this.product.find(p => p === request.resource)\r\n            if (canFulfill) {\r\n                deleteByValueOnce(this.product, request.resource)\r\n                citizen.carry(request.resource)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    public produce(step: number) {\r\n        if (this.machine.operation.type === 'generator') {\r\n            if (step % this.machine.operation.generationTime === 0) {\r\n                if (this.product.length < this.machine.operation.capacity) {\r\n                    this.product.push(this.machine.operation.generates)\r\n                }\r\n            }\r\n\r\n        } else if (this.machine.operation.type === 'spawn') {\r\n            setTimeout(() => this.building.populate(this.pos), 100)\r\n        }\r\n    }\r\n\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            allStructures,\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        let snapped = false\r\n        if (bldg) {\r\n            let spot = bldg.nextDevicePlace().position\r\n            let d = spot.distance(pos)\r\n            snapped = d < 150\r\n        }\r\n\r\n        if (snapped) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n        } else {\r\n            this.pos = pos\r\n        }\r\n\r\n        return snapped\r\n    }\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 100\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { Color } from \"excalibur\";\r\nimport { EntityKind } from \"../../values/Entity\";\r\n\r\nexport class Palette {\r\n    private _element: HTMLDivElement;\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(\r\n        private name: string,\r\n        private x: number,\r\n        private y: number,\r\n        private all: EntityKind[],\r\n        private onButtonClick: (EntityKind) => any = null,\r\n        private onButtonEnter: (EntityKind) => any = null,\r\n        private comprehend = true \r\n    ) {\r\n        this.makePalette();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    updateBuilt(built: (EntityKind)[]) {\r\n        this.built = built;\r\n        if (this.comprehend) {\r\n            this.comprehended = this.all.filter((e: EntityKind) => {\r\n                let s = new e();\r\n                let prereqs: (EntityKind)[] = s.prereqs;\r\n                return prereqs.every((prereq: EntityKind) => {\r\n                    let built = this.built.some((s: EntityKind) => s === prereq);\r\n                    return built;\r\n                });\r\n            });\r\n        } else {\r\n            this.comprehended = this.built\r\n        }\r\n        this.makePalette();\r\n    }\r\n\r\n    private makePalette() {\r\n        if (this._element) {\r\n            this._element.parentElement.removeChild(this._element);\r\n        }\r\n        if (!(this.comprehended.length > 0)) { return }\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.border = 'none'; //1px solid black'; //0.5px solid white';\r\n        document.body.appendChild(this._element);\r\n\r\n        if (this.name) {\r\n            let title = document.createElement('h2')\r\n            title.textContent = this.name\r\n            title.style.fontFamily = 'Verdana'\r\n            title.style.fontSize = '7pt'\r\n            title.style.fontWeight = '400'\r\n            title.style.color = Color.White.toRGBA()\r\n            title.style.backgroundColor = Color.Violet.darken(0.92).toRGBA()\r\n            title.style.padding = '4px'\r\n            title.style.margin = '0px'\r\n            this._element.appendChild(\r\n                title\r\n            )\r\n        }\r\n\r\n        this.comprehended\r\n            .map((elem: EntityKind) => new elem())\r\n            .sort((a, b) => a.color > b.color ? -1 : 1)\r\n            .forEach(elem => {\r\n                if (elem.hide) { return }\r\n                let label = elem.name;\r\n                if (!this.built.map(m => new m().name).includes(elem.name)) {\r\n                    label += ' *';\r\n                }\r\n                let clr = elem.color;\r\n                let btn = this.buttonFactory(label, clr);\r\n                this._element.appendChild(btn);\r\n                if (this.onButtonEnter) {\r\n                    btn.onmouseenter = () => { this.onButtonEnter(elem); };\r\n                }\r\n                if (this.onButtonClick) {\r\n                    btn.onclick = () => { this.onButtonClick(elem); };\r\n                }\r\n            });\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.5).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = label;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '7pt';\r\n        paletteButton.style.fontFamily = 'Verdana';\r\n        paletteButton.style.fontWeight = '500';\r\n        paletteButton.style.padding = '3px';\r\n        paletteButton.style.width = '124px';\r\n        paletteButton.style.textTransform = 'uppercase';\r\n        paletteButton.style.border = 'none' //1px solid rgba(255,255,255,0.08)';\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA();\r\n            paletteButton.style.color = fg.toRGBA();\r\n        };\r\n        return paletteButton;\r\n    }\r\n}\r\n","import { Label, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { PureValue } from \"../../models/Economy\";\r\nimport { SmallDomeThreeView } from \"../Building/SmallDomeThreeView\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\n\r\nexport class CardBody extends Actor {\r\n    description: Label\r\n    values: Label\r\n    notes: Label\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building, x: number, y: number) {\r\n        super(x, y, 0, 0)\r\n        // resources / recipes\r\n\r\n        this.values = new Label('')\r\n        this.values.fontSize = 10\r\n        this.add(this.values)\r\n\r\n        this.notes = new Label('behavioral notes', 0, 30)\r\n        this.notes.fontSize = 11\r\n        this.add(this.notes)\r\n\r\n        this.description = new Label('description', 0, 60)\r\n        this.description.fontSize = 12\r\n        this.description.fontStyle = FontStyle.Italic\r\n        this.add(this.description)\r\n\r\n        this.show(entity)\r\n    }\r\n\r\n    show(entity: Machine | Structure | SpaceFunction | Building) {\r\n        if (entity) {\r\n            this.description.text = entity.description;\r\n\r\n            if (entity instanceof Machine) {\r\n                let values = []\r\n                let econ = entity.economy\r\n                for (let value in PureValue) {\r\n                    let { supply, demand } = econ[value]\r\n                    let delta = supply - demand\r\n                    if (delta > 0) {\r\n                        values.push(`+${delta} ${value}`)\r\n                    } else if (delta < 0) {\r\n                        values.push(`${delta} ${value}`)\r\n                    }\r\n                }\r\n                this.values.text = values.join(' | ')\r\n\r\n                // let theNotes = []\r\n                this.notes.text = ''\r\n                let op = entity.operation\r\n                if (op) {\r\n                    if (op.type === 'recipe') {\r\n                        this.notes.text = `Turns ${op.consumes.join(' + ')} -> ${op.produces}.`\r\n                    } else if (op.type === 'generator') {\r\n                        this.notes.text = `Generates ${op.generates}.`\r\n                    } else if (op.type === 'store') {\r\n                        this.notes.text = `Stores ${op.stores.join(' + ')}`\r\n                    } else if (op.type === 'spawn') {\r\n                        this.notes.text = 'Decants clones.'\r\n                    }\r\n                }\r\n                \r\n                // if (entity.consumes && entity.produces) {\r\n                //     this.notes.text = `Turns ${entity.consumes} into ${entity.produces}.`\r\n                // } else if (entity.produces) {\r\n                //     this.notes.text = `Generates ${entity.produces}.`\r\n                // } // if entity.stores...?\r\n            } else if (entity instanceof SpaceFunction) { //} if (entity instanceof Structure) {\r\n                let { capacity, workSpeed } = entity.bonuses\r\n                let bonusMessages = [];\r\n                if (capacity > 0) {\r\n                    bonusMessages.push(`+${capacity} cap`)\r\n                }\r\n                if (workSpeed > 1.0) {\r\n                    bonusMessages.push(`+${Math.floor((workSpeed*100)-100)}% efficiency` )\r\n                }\r\n                this.values.text = bonusMessages.join('; ') //; \r\n                this.notes.text = ''\r\n            } else {\r\n                this.values.text = ''\r\n                this.notes.text = ''\r\n            }\r\n\r\n        }\r\n        // other bonuses? behaviors?\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nexport class CardTitle extends Actor {\r\n    \r\n    name: Label;\r\n    type: Label;\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building, x: number, y: number) {\r\n        super(x, y, 14, 32, entity && entity.color || Color.Gray);\r\n        this.name = new Label(entity && entity.name || '..', 20, 16)\r\n        this.name.fontSize = 28\r\n        this.name.color = Color.Black\r\n        this.add(this.name)\r\n\r\n        this.type = new Label('..', 232, 16)\r\n        this.type.fontSize = 10\r\n        this.type.color = Color.Gray\r\n        this.type.fontStyle = FontStyle.Italic\r\n        this.add(this.type)\r\n\r\n        if (entity) {\r\n            this.announce(entity)\r\n        }\r\n    }\r\n\r\n    announce(entity: Machine | Structure | SpaceFunction | Building): any {\r\n        this.name.text = entity.name\r\n        this.color = entity.color.desaturate(0.5).darken(0.2)\r\n        if (entity instanceof Machine) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n        if (entity instanceof Structure) { this.type.text = 'Structure' }\r\n        if (entity instanceof SpaceFunction) { this.type.text = 'Function' }\r\n        if (entity instanceof Building) { this.type.text = 'Building' }\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { CardTitle } from \"./CardTitle\";\r\nimport { CardBody } from \"./CardBody\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\n\r\nexport class Card extends Actor {\r\n    title: CardTitle\r\n    cardBody: CardBody\r\n    image: any\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building, x: number, y: number) {\r\n        super(x + 160, y + 90, 320, 180, Color.White);\r\n        let x0 = -150, y0 = -50;\r\n        this.title = new CardTitle(entity, x0 - 3, y0); //x, y)\r\n        this.add(this.title);\r\n        this.cardBody = new CardBody(entity, x0 + 14, y0 + 40)\r\n        this.add(this.cardBody)\r\n\r\n        this.image = new Image();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        if (this.entity) {\r\n            if (this.entity instanceof Machine) {\r\n                let ix = this.pos.x + 48, iy = this.pos.y - 16\r\n                let isz = 92\r\n                ctx.drawImage(this.image, ix, iy, isz, isz)\r\n            }\r\n        }\r\n    }\r\n\r\n    present(entity: Machine | Structure | SpaceFunction | Building): any {\r\n        this.title.announce(entity)\r\n        this.cardBody.show(entity)\r\n\r\n        this.entity = entity\r\n        if (this.entity instanceof Machine) {\r\n            this.image.src = this.entity.image\r\n        }\r\n    }\r\n\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor } from \"excalibur\";\r\nimport { Economy, PureValue, availableCapacity, allValues } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n\r\n        let index = 0\r\n        for (let value of allValues) {\r\n            let valueLabel: EconomicValue =  new EconomicValue(value, (index++ * 34), 0)\r\n            this.valueLabels[value] = valueLabel\r\n            this.add(valueLabel)\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value of allValues) {\r\n            this.valueLabels[value].setCount(\r\n                availableCapacity(market, value)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 6, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            [ResourceBlock.Biomass]: null,\r\n            [ResourceBlock.Idea]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n            [ResourceBlock.Alloy]: null,\r\n            [ResourceBlock.Bioplasma]: null,\r\n            [ResourceBlock.Algorithm]: null,\r\n            [ResourceBlock.Argent]: null,\r\n            [ResourceBlock.Aurum]: null,\r\n            [ResourceBlock.Omnium]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0, Color.DarkGray.darken(0.8));\r\n        let rx0 = 0, ry0 = -2.5;\r\n        let resources = [\r\n            ResourceBlock.Meal,\r\n            ResourceBlock.Data,\r\n            ResourceBlock.Mineral,\r\n\r\n            ResourceBlock.Bioplasma,\r\n            ResourceBlock.Alloy,\r\n            ResourceBlock.Algorithm,\r\n\r\n            ResourceBlock.Argent,\r\n            ResourceBlock.Aurum,\r\n        ];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0 + index * 18, ry = ry0 + index * 0;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n\r\n    constructor(market: Economy, w: number = 10000, h: number = 36) {\r\n        super(0,0, w, h, Color.DarkGray.darken(0.8));\r\n\r\n        let ty = 14\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+2)\r\n        brand.fontSize = 12\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.0.1\", 48, ty + 2)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(80, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 400, ty)\r\n        this.add(this.economy)\r\n\r\n        this.popLabel = new Label(\"\", 1000, ty, 'Helvetica')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 1080, ty, 'Helvetica')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.messageLabel.fontStyle = FontStyle.Italic\r\n        this.add(this.messageLabel)\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n    \r\n}\r\n","import { UIActor, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, SmallRoomThree, SmallRoomTwo, MediumRoom, MidDome, SmallDome, LargeRoom, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, sumMarkets, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { Desk, Bookshelf, Machine, CloningVat, WaterCondensingMachine, OxygenExtractor, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Cabin, Orchard, SolarCell, Megafabricator, Arbor, Fabricator, MiningDrill, Preserve, Workstation, Houseplant, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Card } from \"./Card\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Palette } from \"./Palette\";\r\nimport { Building } from \"../Building\";\r\n\r\nexport class Hud extends UIActor {\r\n    private structurePalette: Palette //<Structure> \r\n    private machinePalette: Palette //<Machine>\r\n    private functionPalette: Palette\r\n    private card: Card\r\n\r\n    private status: StatusAnalysisView\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n    static machinesForPalette = allMachines\r\n    static functionsForPalette = allSpaceFunctions\r\n\r\n    constructor(\r\n        private game: Game,\r\n        protected onBuildingSelect = null,\r\n        protected onMachineSelect = null,\r\n        protected onFunctionSelect = null\r\n    ) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.status = new StatusAnalysisView(emptyMarket());\r\n        this.add(this.status)\r\n\r\n        let displayInfo = (e) => this.showCard(e)\r\n        this.structurePalette = new Palette('Structure', 20, 35, Hud.structuresForPalette, onBuildingSelect, displayInfo)\r\n        this.machinePalette = new Palette('Machine', 20, 300, allMachines, onMachineSelect, displayInfo) // (e) => this.showCard(e))\r\n        this.functionPalette = new Palette('Function', 220, 35, Hud.functionsForPalette, onFunctionSelect, displayInfo, false)\r\n\r\n        this.card = new Card(null, 20, 800) // game.canvasHeight - 200)\r\n        this.add(this.card)\r\n    }\r\n\r\n    setMessage(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        this.structurePalette.draw(ctx)\r\n        this.machinePalette.draw(ctx)\r\n        this.functionPalette.draw(ctx)\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true) {\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n    }\r\n\r\n    showCard(entity: Machine | Structure | SpaceFunction | Building) {\r\n        this.card.present(entity)\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n        this.updateFunctionPalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        let builtStructures =\r\n            Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n\r\n        this.structurePalette.updateBuilt(builtStructures)\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let devices = colony.findAllDevices()\r\n        let builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine))\r\n        this.machinePalette.updateBuilt(builtMachines)\r\n    }\r\n\r\n    private updateFunctionPalette(colony: Colony) {\r\n        let builtReifiedFunctions = flatSingle(colony.buildings.map(b => b.spaceFunction))\r\n        let builtFunctions = Hud.functionsForPalette.filter((fn) => builtReifiedFunctions.some(rf => rf instanceof fn))\r\n        this.functionPalette.updateBuilt(builtFunctions)\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawPatternedRect } from \"../../Util\";\r\n\r\nexport class MediumSurfaceRoomView extends Building {\r\n    hideBox = true\r\n\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() //- this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    // afterConstruct() {\r\n    //     let { machines } = this.structure;\r\n    //     if (machines && machines.length > 0) {\r\n    //         let machine = new machines[0]();\r\n    //         this.devicePlaces().forEach(place => {\r\n    //             let theDevice = new Device(machine, place.position)\r\n    //             this.addDevice(theDevice)\r\n    //         })\r\n    //     }\r\n\r\n    // }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor()\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n\r\n        // ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n        // let rect = \r\n            // { x: this.pos.x, y: this.pos.y, width: this.getWidth(), height: this.getHeight() };\r\n        drawPatternedRect(\r\n            ctx,\r\n            this.aabb(),\r\n            this.backgroundPattern\r\n        )\r\n\r\n        // a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomThreeView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Huge\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Large\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 2\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaceCount = 3\r\n    //devicePlaces() {\r\n    //    let w = this.getWidth()/2\r\n    //    let x = this.pos.x + w;\r\n    //    let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n    //    let ds = [\r\n    //        new Vector(x - w / 2, y),\r\n    //        new Vector(x, y),\r\n    //        new Vector(x + w / 2, y),\r\n    //    ]\r\n\r\n    //    return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    //}\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { range, eachCons, measureDistance, drawRect } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawRect, drawPatternedRect } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 12\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        let wallColor = this.processedColor() //.darken(0.4)\r\n        let floorColor = this.processedColor().darken(0.4)\r\n\r\n        // drawRect(ctx, this.aabb(), 0.5, wallColor)\r\n        drawPatternedRect(ctx, this.aabb(), this.backgroundPattern)\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight,\r\n              width: this.getWidth(), height: this.floorHeight },\r\n              0.2,\r\n              floorColor\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    devicePlaceSize: DeviceSize = DeviceSize.Small\r\n    devicePlaceCount: number = 2\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","module.exports = __webpack_public_path__ + \"1d893905e4eea3bbc48b0e129e318ea6.svg\";","module.exports = __webpack_public_path__ + \"bd556d00e484db4e52d198d0bf39d0f2.svg\";","module.exports = __webpack_public_path__ + \"650cd431226df0755357c71d61bef1f2.svg\";","module.exports = __webpack_public_path__ + \"f12c591f538ab3026bf13e93f3fa9485.svg\";","module.exports = __webpack_public_path__ + \"3aeb9dd24809ba3fbd4eeb31a28c3b19.svg\";","module.exports = __webpack_public_path__ + \"6cc6f6773bb6eb26fcef87b9629f7b87.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"24611230ec712ba7ee38b99561aedd87.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { ResourceBlock } from \"./Economy\";\r\n\r\nexport type MechanicalOperation = Recipe | ResourceGenerator | ResourceStorage | SpawnClone | Noop;\r\n\r\nexport interface Noop {\r\n    type: 'noop'\r\n}\r\n\r\nexport interface Recipe {\r\n    type: 'recipe'\r\n    consumes: ResourceBlock[]\r\n    produces: ResourceBlock\r\n    workTime: number\r\n}\r\n\r\nexport interface ResourceGenerator {\r\n    type: 'generator'\r\n    generates: ResourceBlock\r\n    generationTime: number\r\n    capacity: number\r\n}\r\n\r\nexport interface ResourceStorage {\r\n    type: 'store'\r\n    stores: ResourceBlock[]\r\n    capacity: number\r\n}\r\n\r\nexport interface SpawnClone {\r\n    type: 'spawn'\r\n}\r\n\r\nfunction store(res: ResourceBlock[], capacity: number = 10): ResourceStorage {\r\n    return {\r\n        type: 'store',\r\n        stores: res,\r\n        capacity\r\n    }\r\n}\r\n\r\nfunction generate(res: ResourceBlock, cap: number = 4): ResourceGenerator {\r\n    return {\r\n        type: 'generator',\r\n        generates: res,\r\n        generationTime: 1000,\r\n        capacity: cap\r\n    }\r\n}\r\n\r\nfunction recipe(input: ResourceBlock[], output: ResourceBlock): Recipe {\r\n    return {\r\n        type: 'recipe',\r\n        consumes: input,\r\n        produces: output,\r\n        workTime: 1000,\r\n    }\r\n}\r\n\r\nfunction spawn(): SpawnClone {\r\n    return {\r\n        type: 'spawn',\r\n    }\r\n}\r\n\r\nexport const mechanicalOperations = {\r\n    store,\r\n    generate,\r\n    recipe,\r\n    spawn\r\n}","import { Planet } from \"../actors/Planet/Planet\";\r\nimport { Device, retrieveResource } from \"../actors/Device\";\r\nimport { MechanicalOperation, Recipe } from \"../models/MechanicalOperation\";\r\nimport { Citizen } from \"../actors/Citizen\";\r\nimport { sleep } from \"../Util\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nexport abstract class ProductionStrategy {\r\n    private sleepInterval: number = 250\r\n    protected isActive: boolean = false;\r\n    constructor(protected pawn: Citizen) { }\r\n    protected abstract async apply();\r\n    protected get planet(): Planet { return this.pawn.currentPlanet; }\r\n    protected get devices(): Device[] { return this.planet.colony.findAllDevices(); }\r\n    protected get operations(): MechanicalOperation[] { return this.devices.map(d => d.operation); }\r\n    protected get recipes(): Recipe[] {\r\n        let recipes: Recipe[] = [];\r\n        this.operations.forEach(op => {\r\n            if (op.type === 'recipe') {\r\n                recipes.push(op);\r\n            }\r\n        });\r\n        return recipes;\r\n    }\r\n\r\n    async attempt(): Promise<void> {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n        if (!this.isActive) {\r\n            // note apply will need to set this.isActive around its critical section\r\n            await this.apply();\r\n        }\r\n\r\n        await this.pause()\r\n        setInterval(() => { this.attempt() }, this.sleepInterval)\r\n    }\r\n\r\n    protected async pause() {\r\n        await sleep(this.sleepInterval)\r\n    }\r\n\r\n    protected async workRecipe(recipe: Recipe) {\r\n        for (let ingredient of recipe.consumes) {\r\n            await this.gatherBlock(ingredient);\r\n        }\r\n        let knowsRecipe = (d: Device) => d.operation === recipe\r\n        let maker = this.planet.colony.closestDeviceByType(this.pawn.pos, [], knowsRecipe)\r\n        if (maker) {\r\n            await this.visitDevice(maker)\r\n            await this.performRecipeTask(maker, recipe)\r\n        } else {\r\n            await this.pause()\r\n            await this.workRecipe(recipe);\r\n        }\r\n    }\r\n\r\n    protected async performRecipeTask(maker: Device, recipe: Recipe) {\r\n      let worked = await maker.interact(this.pawn, { type: 'work', recipe })\r\n      if (!worked) {\r\n          await this.pause()\r\n          console.warn(\"waiting for machine to become available...\")\r\n          await this.performRecipeTask(maker, recipe)\r\n      }\r\n    }\r\n\r\n\r\n    protected async storeBlock(res: ResourceBlock) {\r\n\r\n        let storesDesiredBlock = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) && //operation.capacity &&\r\n            d.operation.stores.includes(res)\r\n        let openStore = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n        let stored = false\r\n        if (openStore) {\r\n            await this.visitDevice(openStore)\r\n            if (await openStore.interact(this.pawn, { type: 'store', resource: res })) {\r\n                stored = true\r\n            }\r\n        }\r\n\r\n        if (!stored) {\r\n            await this.pause()\r\n            await this.storeBlock(res)\r\n        }\r\n    }\r\n\r\n    protected async gatherBlock(res: ResourceBlock) {\r\n        let gathered = false\r\n        let generatesDesiredBlock = (d: Device) => (d.operation.type === 'generator') &&\r\n            d.product.some(stored => res === stored)\r\n\r\n        let gen: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], generatesDesiredBlock)\r\n        let storesDesiredBlock = (d: Device) => (d.operation.type === 'store') &&\r\n              d.product.some(stored => res === stored)\r\n\r\n        let store: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n\r\n        let device = gen || store\r\n\r\n        if (device) {\r\n            await this.visitDevice(device)\r\n            if (await device.interact(this.pawn, retrieveResource(res))) {\r\n                gathered = true\r\n            }\r\n        } else {\r\n            let recipe = this.recipes.find(recipe => recipe.produces === res);\r\n            if (recipe) {\r\n                await this.workRecipe(recipe);\r\n                gathered = true\r\n            }\r\n        }\r\n\r\n        if (!gathered) {\r\n            await this.pause() // sleep(1000)\r\n            await this.gatherBlock(res)\r\n        }\r\n    }\r\n\r\n    private async visitDevice(device: Device) {\r\n        await this.pawn.pathTo(device.building)\r\n        await this.pawn.glideTo(device.pos)\r\n    }\r\n}\r\n","import { shuffle } from \"../Util\";\r\nimport { Device, retrieveResource as retrieveResource } from \"../actors/Device\";\r\nimport { Recipe, ResourceStorage } from \"../models/MechanicalOperation\";\r\nimport { ProductionStrategy } from \"./ProductionStrategy\";\r\n\r\nexport class CapacityBasedProduction extends ProductionStrategy {\r\n    async apply() {\r\n        if (this.isActive) { return; }\r\n        this.isActive = true\r\n        const storeWithCapacity = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) //operation.capacity\r\n        const store: Device = shuffle(this.devices).find(storeWithCapacity)\r\n        if (store && store.operation.type === 'store') {\r\n            const storage: ResourceStorage = store.operation\r\n            const recipeForStoredResource = (r: Recipe) => storage.stores.some(stored => r.produces === stored)\r\n            let recipe = shuffle(this.recipes).find(recipeForStoredResource)\r\n            if (recipe) {\r\n                await this.workRecipe(recipe)\r\n                await this.storeBlock(recipe.produces)\r\n            }\r\n        }\r\n        await this.pause()\r\n        this.isActive = false\r\n    }\r\n\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons, deleteByValueOnce, sleep } from \"../Util\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { ProductionStrategy } from \"../strategies/ProductionStrategy\";\r\nimport { CapacityBasedProduction } from \"../strategies/CapacityBasedProduction\";\r\n\r\nexport class Citizen extends Actor {\r\n\r\n    walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock[] = [] // null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    private productionStrategy: ProductionStrategy\r\n\r\n    constructor(private device: Device, protected planet: Planet) {\r\n        super(device.x, device.y, Scale.minor.first, Scale.minor.third, Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.productionStrategy = new CapacityBasedProduction(this)\r\n    }\r\n\r\n    get isWorking() { return this.isWorking }\r\n    get currentPlanet() { return this.planet }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // make sure we are busy!\r\n        this.work()\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = \r\n              Math.min(\r\n                  (now - this.workStarted) / this.workDuration,\r\n                  1\r\n              )\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            this.carrying.forEach((carried, idx) => {\r\n                ctx.fillStyle = blockColor(carried).toRGBA()\r\n                ctx.fillRect(this.x + 4, this.y - 3 * idx, 5, 5)\r\n            })\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            ctx.strokeRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n        }\r\n\r\n        let debugPath = false\r\n        if (this.path && debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 10\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    carry(c: ResourceBlock) {\r\n        this.carrying.push(c);\r\n    }\r\n\r\n    isCarryingUnique(resources: ResourceBlock[]): boolean {\r\n        let isCarrying = true\r\n        let carryingCopy = this.carrying.slice()\r\n        if (this.carrying.length > 0) {\r\n            resources.forEach(resToFind => {\r\n                if (carryingCopy.find(res => res === resToFind)) {\r\n                    deleteByValueOnce(carryingCopy, resToFind)\r\n                } else {\r\n                    isCarrying = false;\r\n                }\r\n            })\r\n        }\r\n        return isCarrying\r\n    }\r\n\r\n    drop(res: ResourceBlock): ResourceBlock {\r\n        if (this.carrying.length > 0) {\r\n            if (this.carrying.find(r => r === res)) {\r\n                deleteByValueOnce(this.carrying, res)\r\n                return res\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        this.workInProgress = false\r\n    }\r\n\r\n    async pathTo(building: Building) {\r\n        if (this.path.length > 0) {\r\n            throw new Error(\"Already pathing!!\")\r\n        }\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            path.pop()\r\n            path.shift()\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = []\r\n        }\r\n        return true;\r\n    }\r\n\r\n    work() {\r\n        this.productionStrategy.attempt()\r\n    }\r\n\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(home: Device) {\r\n        let citizen = new Citizen(home, this.planet);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\n\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = false\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findAllDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d)\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings[0] //.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices(): Device[] {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\n\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n\r\n    constructor(\r\n        public hud: Hud,\r\n        public color: Color,\r\n        private onBuildingHover: (b: Building) => any,\r\n        private w: number = 2000000,\r\n        private depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, w, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n    }\r\n\r\n    set currentlyViewing(building: Building) {\r\n        this.onBuildingHover(building)\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        let devices = this.colony.findAllDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(home)\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        let devices = this.colony.findAllDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [ PureValue.Shelter, PureValue.Water, PureValue.Oxygen ]\r\n        return Math.max(0, Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        ))\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n}","import { Scene, Input, Vector } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MainTunnel, Corridor, SurfaceRoad, SmallDome, SmallRoomThree, MediumRoomThree, LargeRoom, HugeRoom } from \"../models/Structure\";\r\nimport { Building, structureViews, } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { SpaceFunction, CloneMatrix, Kitchen, LivingQuarters, LifeSupportPod, Library, Archive, ComputerCore, MissionControl } from \"../models/SpaceFunction\";\r\nimport { flatSingle, zip } from \"../Util\";\r\nimport { DevicePlace } from \"../actors/Building/Building\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    placingFunction: SpaceFunction = null\r\n\r\n\r\n    static requiredStructuresAndFunctions: (typeof SpaceFunction | typeof Structure)[] = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        LifeSupportPod,\r\n        MainTunnel,\r\n        Corridor,\r\n        LivingQuarters,\r\n        // CloneMatrix,\r\n        // Kitchen,\r\n        // Library,\r\n        // Archive,\r\n        // ComputerCore,\r\n        \r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, false)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        let buildIt = (e) => this.startConstructing(e)\r\n\r\n        this.hud = new Hud(game, buildIt, buildIt, buildIt)\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(this.hud, game.world.color, (b) => this.hud.showCard(b))\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(2, 10000)\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n\r\n                            if (this.placingFunction) {\r\n                                let fn = this.placingFunction\r\n                                console.log({ fn, bldg: buildingUnderConstruction })\r\n                                zip(fn.machines, buildingUnderConstruction.devicePlaces()).forEach(([machine, place]: [typeof Machine, DevicePlace]) => {\r\n                                    console.log(\"would add machine\", { machine, place })\r\n                                    let m = (new machine()).concretize()\r\n                                    let device = new Device(m, place.position)\r\n                                    buildingUnderConstruction.addDevice(device)\r\n                                })\r\n                                this.placingFunction = null\r\n                            }\r\n\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                this.planet.colony.currentlyConstructing = null\r\n                this.placingFunction = null\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingStructureOrFunction(): Structure | SpaceFunction {\r\n        let reqs = Construct.requiredStructuresAndFunctions.map(req => new req())\r\n\r\n        let actualStructureNames = this.buildings.map(building => building.structure.name)\r\n        let actualFunctionNames = flatSingle(\r\n            this.buildings.map(building => building.spaceFunction && building.spaceFunction.name)\r\n        )\r\n        let actualNames = [...actualStructureNames, ...actualFunctionNames]\r\n        return reqs.find(req => !actualNames.includes(req.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingStructureOrFunction() //this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        }\r\n    }\r\n\r\n    startConstructing(structureOrMachine: Structure | Machine | SpaceFunction, pos: Vector = new Vector(0, 0)) {\r\n        this.hud.showCard(structureOrMachine)\r\n        \r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            this.hud.setMessage(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            this.camera.zoom(structure.zoom, 250)\r\n            this.camera.pos = theNextOne.pos\r\n        } else if (structureOrMachine instanceof Machine) {\r\n            let machine = structureOrMachine\r\n            this.hud.setMessage(`Install ${machine.name} (${machine.description})`)\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            // this.camera.zoom(1.5, 250)\r\n        } else if (structureOrMachine instanceof SpaceFunction) {\r\n            let fn: SpaceFunction = structureOrMachine\r\n            this.hud.setMessage(`Place ${fn.name} (${fn.description})`)\r\n            theNextOne = this.spawnFunction(fn, pos)\r\n            this.placingFunction = fn\r\n\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        if (device.snap(this.planet)) {\r\n            this.camera.pos = device.pos\r\n \r\n        }\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n\r\n    protected spawnFunction(fn: SpaceFunction, pos: Vector): Building {\r\n        let theStructure: Structure = (fn.structure && new fn.structure()) // || new SmallRoomThree()\r\n        if (!theStructure) {\r\n            theStructure = new SmallRoomThree()\r\n            let machines = fn.machines.map(m => new m())\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Medium)) {\r\n                theStructure = new MediumRoomThree()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Large)) {\r\n                theStructure = new LargeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Huge)) {\r\n                theStructure = new HugeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.forDome)) {\r\n                theStructure = new SmallDome()\r\n            }\r\n        }\r\n\r\n        console.log(\"SPAWN FUNCTION\", { fn, structure: theStructure })\r\n        let building = this.assembleBuildingFromStructure(theStructure, pos)\r\n        building.reshape(building.constrainCursor(building.pos))\r\n        return building\r\n    }\r\n} \r\n","module.exports = __webpack_public_path__ + \"98240dde9344ac8d071d076ac951e15d.png\";","module.exports = __webpack_public_path__ + \"da31cf43235263c1c3e0ad45a46360a1.png\";","module.exports = __webpack_public_path__ + \"a6a38278ac501400c6199e0df9e1bf84.png\";","module.exports = __webpack_public_path__ + \"ece1d5d5858bc048d2d949ecc3f5e9bc.png\";","module.exports = __webpack_public_path__ + \"3654f0489813e0668743efde017c9653.png\";","module.exports = __webpack_public_path__ + \"3abbdabf07943966f102ac7345a59986.png\";","module.exports = __webpack_public_path__ + \"d1b4690b9f5fa4957f98602afc8cfdb6.png\";","module.exports = __webpack_public_path__ + \"0eb7a15ea04678b14a2b88b5965aabeb.png\";","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Orange] //Red, Color.Blue, Color.Green]\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ).\r\n        lighten(0.15).\r\n        desaturate(0.65)\r\n\r\n  \r\n    static bestowName(): any {\r\n        let nameList = [\r\n            'Aragorn',\r\n            'Anodyne',\r\n            'Carolyn',\r\n            'Exeter',\r\n            'Colwreath',\r\n            'India',\r\n            'Comma',\r\n            'Terabithia'\r\n        ]\r\n        return sample(nameList)\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword),\r\n\r\n}\r\n\r\nexport { Resources }\r\n","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}