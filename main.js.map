{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/values/DeviceSize.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/Util.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Machine.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/models/Structure.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/actors/Device.ts","webpack:///./src/values/Scale.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Hud/Palette.ts","webpack:///./src/actors/Hud/CardBody.ts","webpack:///./src/actors/Hud/CardTitle.ts","webpack:///./src/actors/Hud/Card.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MineView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/MissionControlView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/images/workstation-plain.svg","webpack:///./src/images/houseplant-plain.svg","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/models/MechanicalOperation.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","sixth","eighth","excalibur_1","Orientation_1","Util_1","Graph_1","SpaceFunction_1","DeviceSize_1","DevicePlace","pos","this","Building","_super","structure","planet","_this","x","y","width","height","color","edgeWidth","built","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","level","devices","step","anchor","Vector","setup","traits","filter","trait","Traits","OffscreenCulling","on","collisionType","CollisionType","PreventCollision","nameLabel","Label","Color","White","levelLabel","fontSize","darken","__extends","levelUp","text","draw","ctx","delta","drawRect","aabb","processedColor","forEach","device","getCenter","measureText","update","engine","produce","constrainCursor","cursor","clone","reshape","afterConstruct","handleClick","_pos","slots","nodes","getWidth","getHeight","Math","floor","devicePlaces","graph","supergraph","Graph","g","rootNode","findOrCreate","measureDistance","_i","_a","child","slot","parentSlot","edge","childNode","redeem","res","gather","populate","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","find","bldg","edgeColor","lighten","mainColor","colorBase","clr","Red","a","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","map","closestBuildingByType","building","matchingSlot","compass_1","compass","closest","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","updateName","hasPlaceForDevice","nextDevicePlace","getDevices","fn","allSpaceFunctions","spaceFn","matched","unseenDevices","machines","machine","matchingDevice","deleteByValue","sf","spaceFunction","Actor","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","minBy","min","maxBy","max","sample","random","range","Array","fill","_val","idx","getVector","predicate","matching","elem","distance","flatSingle","concat","e","deleteByValueOnce","index","indexOf","eachCons","b","drawLine","lineWidth","beginPath","moveTo","lineTo","strokeStyle","toRGBA","stroke","rectangle","filled","main","fillStyle","fillRect","strokeRect","sleep","ms","Promise","resolve","setTimeout","shuffle","sort","zip","Building_1","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","MissionControlView_1","MissionControlView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","MineView_1","MineView","SurfaceRoadView_1","SurfaceRoadView","PureValue","Power","Oxygen","Water","Shelter","Hope","Joy","Wisdom","Wealth","Beauty","Wonder","allValues","emptyMarket","supply","demand","availableCapacity","market","sumMarkets","ea","eb","newMarket","sa","da","_b","ResourceBlock","Food","Ore","Data","Meal","Hypothesis","Mineral","Alloy","blockColors","Green","Blue","Yellow","LightGray","blockColor","block","desaturate","t","setPrototypeOf","__proto__","constructor","create","__assign","assign","arguments","Economy_1","MechanicalOperation_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","plant","workstation","Orange","Violet","store","mechanicalOperations","generate","recipe","spawn","Machine","description","operation","type","image","prereqs","economy","forDome","concretize","CommandCenter","OxygenExtractor","WaterCondensingMachine","SolarCell","StudyMachine","Workstation","Desk","Bookshelf","Fridge","Stove","Bed","Houseplant","capacity","ResearchServer","Orchard","AlgaeVat","Cabin","Arbor","Botany","CloningVat","productionTime","Fabricator","MiningDrill","Megafabricator","Preserve","Microcity","LogicCrystal","allMachines","Left","Up","Down","orientation","Error","Machine_1","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","Structure","view","zoom","Gray","Corridor","Ladder","MainTunnel","second","MissionControl","SurfaceRoad","fifth","first","Dome","CommonArea","SmallRoomThree","SmallRoomTwo","SmallDome","MediumRoom","LargeRoom","HugeRoom","SmallDomeThree","seventh","MidDome","LargeDome","Arcology","allStructures","SpaceFunction","LivingQuarters","Barracks","Kitchen","LifeSupportPod","Retreat","CloneMatrix","ReadingRoom","Library","Study","Lab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Farm","Factory","Structure_1","retrieveResource","resource","Device","initialPos","product","inUse","imageLoaded","Image","onload","src","drawImage","bx","by","produced","blockSize","interact","citizen","request","waitToUse","worked","op","recipe_1","carrying","some","it","consumes","includes","isCarryingUnique","consumed","drop","progressBar","workTime","sent","carry","produces","console","log","requires","has","label","store_1","dispense","stores","res_1","stored","warn","generationTime","generates","snap","snapped","position","majorUnit","fourth","minorUnit","minorScale","empty","edges","edgesInverse","isEmpty","node","newNode","contains","testNode","measure","tolerance","dfs","dst","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","path","steps","srcIndex","reverse","Resources_1","Game","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","start","loader","Loader","key","Resources","addResource","citizenSpeed","Engine","_1","SmallDomeThreeView","w","BigDomeView","HugeRoomView","floorHeight","LargeRoomView","MediumRoomView","MidDomeView","SmallRoomThreeView","Palette","all","onButtonClick","onButtonEnter","comprehend","comprehended","makePalette","_element","left","canvas","offsetLeft","top_1","offsetTop","style","top","updateBuilt","every","prereq","parentElement","removeChild","document","createElement","border","body","appendChild","btn","buttonFactory","onmouseenter","onclick","bg","fg","paletteButton","textContent","display","fontFamily","fontWeight","padding","textTransform","background","onmouseover","saturate","onmouseleave","CardBody","entity","values","add","notes","fontStyle","FontStyle","Italic","show","econ","join","CardTitle","Black","announce","CardTitle_1","CardBody_1","Card","title","x0","cardBody","y0","ix","iy","present","EconomicValue","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","allValues_1","updateView","updatedEconomy","allValues_2","ResourceListEntry","resourceBlock","icon","credit","amt","ResourceListEntry_1","ResourcesList","DarkGray","entries","rx","ry","entry","increment","ResourcesList_1","EconomyView_1","StatusAnalysisView","h","brand","ty","version","resources","popLabel","messageLabel","incrementResource","setMessage","showEconomy","showPopCap","cap","StatusAnalysisView_1","Card_1","Palette_1","Hud","game","onBuildingSelect","onMachineSelect","onFunctionSelect","canvasWidth","canvasHeight","status","displayInfo","showCard","structurePalette","structuresForPalette","machinePalette","functionPalette","functionsForPalette","card","resourceGathered","updateDetails","rebuildPalettes","updatePalettes","updateEconomy","updateMaxPop","maxPop","updateBuildingPalette","updateMachinePalette","updateFunctionPalette","builtStructures","findAllDevices","builtMachines","machinesForPalette","builtReifiedFunctions","builtFunctions","rf","UIActor","originSlot","pickingOrigin","maxHeight","getTop","setHeight","drawShape","xoff","yoff","bezierCurveTo","rect","halfWidth","slotHeights","heights","y1","btm","lst","right","slotCount","theSlots","Device_1","machine_1","place","theDevice","slotY","flagX","flagY","arc","PI","closePath","wallColor","floorColor","leftSlot","rightSlot","originX","newCursor","setWidth","abs","ex","Player","Game_1","Citizen","walkSpeed","workInProgress","working","work","now","Date","getTime","progress","workStarted","workDuration","carried","px","pw","py","isCarrying","carryingCopy","resToFind","glideTo","actions","asPromise","duration","reject","pathTo","pathBetween","pop","workRecipe","ingredient","maker","gen","workOne","makers","recipes","Citizen_1","Population","citizens","increase","home","NavigationTree","seekPath","origin","dest","closestNode","input","output","NavigationTree_1","Colony","currentlyConstructing","navTree","placeBuilding","buildNavTree","structureTypes","st","destination","srcNode","destNode","closestDeviceByType","machineTypes","ctrl","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","yBase","peak","mtnWidth","PlanetBackground","PlanetBackground_1","Colony_1","Population_1","Planet","hud","depth","createLayer","layerHeight","population","theLayer","theEconomy","popularDemand","closestDevice","theEconomyWithoutPeople","val","Planet_1","player_1","Hud_1","SmallRoomThreeView_1","MidDomeView_1","MediumRoomView_1","LargeRoomView_1","HugeRoomView_1","BigDomeView_1","SmallDomeThreeView_1","Construct","dragging","defaultMessage","placingFunction","buildIt","startConstructing","player","prepareNextBuilding","camera","onActivate","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction_1","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","Esc","onDeactivate","off","nextMissingRequiredStructure","requiredStructures","requiredStructureList","actualStructureNames","nextMissingStructureOrFunction","reqs","requiredStructuresAndFunctions","req","actualFunctionNames","actualNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","spawnFunction","anotherBuilding","assembleBuildingFromStructure","structureViews","theStructure","Scene","World","colors","Cyan","Vermillion","sword","Sword","Texture","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([63,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.sixth; break;\r\n        case DeviceSize.Large: sz = 2 * major.eighth; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, drawRect, deleteByValue } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0 //.1\r\n\r\n    nameLabel: Label\r\n    levelLabel: Label\r\n\r\n    built: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    level: number = 1\r\n\r\n    spaceFunction: SpaceFunction\r\n\r\n    private devices: Device[] = []\r\n\r\n    constructor(pos: Vector, public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            // console.log(\"HOVER ON\", { building: this })\r\n        })\r\n\r\n        // this.on('pointerdown', () => {\r\n        //     console.log(\"CLICKED BUILDING\", { building: this })\r\n        //     this.levelUp();\r\n        // })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        // this.nameLabel.fontSize = 11\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.levelLabel = new Label(`Lvl. ${this.level}`, 0, 0, 'Helvetica')\r\n        this.levelLabel.fontSize = 6\r\n        this.levelLabel.color = Color.White.darken(0.2)\r\n    }\r\n\r\n    levelUp() {\r\n        this.level += 1\r\n        this.levelLabel.text = `Lvl. ${this.level}`\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        this.devices.forEach(device => device.draw(ctx, delta))\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n            // this.levelLabel.text = `Lvl. ${this.level}`\r\n            // this.levelLabel.pos = this.getCenter()\r\n            // this.levelLabel.pos.y += 10\r\n            // this.levelLabel.pos.x -= ctx.measureText(this.structure.name).width / 4\r\n            // this.levelLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let debug = false;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = false\r\n        if (showDevicePlaces && this.devicePlaces().length > 0) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    1,\r\n                    Color.White,\r\n                    false\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n        let tryProduce = this.built;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.produce(this.step));\r\n        }\r\n        this.step += 1\r\n    }\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public populate(pos: Vector) {\r\n        this.planet.populate(pos) //this.pos)\r\n    }\r\n\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        // device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        this.updateName()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices\r\n    }\r\n\r\n    private updateName() {\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let matched = true;\r\n            let unseenDevices = this.devices.slice()\r\n\r\n            let sf = new spaceFn()\r\n            sf.machines.forEach(machine => {\r\n                let matchingDevice = unseenDevices.find(d => d.machine instanceof machine)\r\n                if (!matchingDevice) { matched = false; }\r\n                unseenDevices = deleteByValue(unseenDevices, matchingDevice)\r\n                // return true\r\n            })\r\n            return matched;\r\n        })\r\n        if (fn) {\r\n            let sf = new fn()\r\n            this.spaceFunction = sf\r\n            this.nameLabel.text = sf.name //label\r\n        }\r\n    }\r\n\r\n    // get function() { }\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport const deleteByValueOnce = (arr, elem) => {\r\n  let index = arr.indexOf(elem);\r\n  if (index !== -1) arr.splice(index, 1);\r\n}\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  // if (edgeWidth > 0) {\r\n  //   let edge = Color.White;\r\n  //   ctx.fillStyle = edge.toRGBA();\r\n  //   ctx.fillRect(x, y, width, height)\r\n  // }\r\n\r\n  if (filled) {\r\n    let main = color;\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x, //+ edgeWidth,\r\n      y, //+ edgeWidth,\r\n      width, // - edgeWidth * 2,\r\n      height // - edgeWidth * 2\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White;\r\n    ctx.strokeStyle = edge.toRGBA();\r\n    ctx.lineWidth=edgeWidth\r\n    // ctx.strokeStyle = Stroke.So\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}\r\n\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function shuffle(arr) {\r\n   return arr.sort(() => Math.random() > 0.5 ? 1 : -1) \r\n}\r\n\r\nexport const zip = (a, b) => a.map((e,i) => [e, b[i]])","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { MissionControlView } from './MissionControlView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { MineView } from './MineView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\n\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView,\r\n    CommonAreaView,\r\n    DomeView,\r\n    MissionControlView,\r\n    TunnelView,\r\n    ArcologyView,\r\n    LadderView,\r\n    MineView,\r\n    SurfaceRoadView,\r\n\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport const allValues = [\r\n    PureValue.Power,\r\n    PureValue.Oxygen,\r\n    PureValue.Water,\r\n    PureValue.Shelter,\r\n    PureValue.Hope,\r\n    PureValue.Wisdom,\r\n    PureValue.Wealth,\r\n    PureValue.Beauty,\r\n    PureValue.Wonder\r\n]\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return Math.floor(market[value].supply - market[value].demand)\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply,\r\n            demand,\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Food = 'Food',\r\n    Ore = 'Ore',\r\n    Data = 'Data',\r\n    // derived\r\n    Meal = 'Meal',\r\n    Hypothesis = 'Hypothesis',\r\n    Mineral = 'Mineral',\r\n    Alloy = \"Alloy\"\r\n}\r\n\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Food: Color.Green,\r\n    Data: Color.Blue,\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(0.2),\r\n    Hypothesis: Color.Blue.lighten(0.4),\r\n    Ore: Color.Red.darken(0.5),\r\n\r\n    Alloy: Color.LightGray.darken(0.2),\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    return baseColor.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Color, FontStyle, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { MechanicalOperation, mechanicalOperations } from \"./MechanicalOperation\";\r\nimport { shuffle } from \"../Util\";\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\nconst plant = require('../images/houseplant-plain.svg')\r\nconst workstation = require('../images/workstation-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n    plant,\r\n    workstation,\r\n}\r\n\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nlet { store, generate, recipe, spawn } = mechanicalOperations\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n    size: DeviceSize = DeviceSize.Small\r\n    operation: MechanicalOperation = { type: 'noop' }\r\n    image = images.vat\r\n    prereqs: (typeof Machine)[] = []\r\n    economy: Economy = emptyMarket()\r\n    forDome: boolean = false\r\n\r\n    concretize(): Machine { return this; } //return shuffle(allMachines)[0] }\r\n    // concretions: Machine[] = []\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command Console'\r\n    description = 'gather resources...'\r\n    operation = store(\r\n        [ResourceBlock.Data],\r\n        // ResourceBlock.Meal,\r\n        // ResourceBlock.Mineral\r\n    )\r\n    image = images.bench\r\n    size = DeviceSize.Medium\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 1, demand: 0 },\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 3, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 5, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H20 Condenser'\r\n    description = 'have a drink'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 4, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n/// small subsurface\r\nexport class StudyMachine extends Machine {\r\n    operation = recipe(\r\n        [ ResourceBlock.Hypothesis, ResourceBlock.Hypothesis, ResourceBlock.Hypothesis ],\r\n        ResourceBlock.Data\r\n    )\r\n    // concretions: Machine[] = [Workstation, Desk]\r\n\r\n    concretize(): Machine { return new (shuffle([Workstation, Desk])[0])() }\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    description = 'get to work'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n\r\n    // color = Blue\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    description = 'hackety hack'\r\n    prereqs = [ Bookshelf ]\r\n    color = Blue\r\n    image = images.workstation\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    operation = generate(ResourceBlock.Hypothesis)\r\n    image = images.bookshelf\r\n    prereqs = [ OxygenExtractor, Desk ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    operation = store([ResourceBlock.Meal], 6)\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    operation = recipe(\r\n        [ResourceBlock.Food, ResourceBlock.Food],\r\n        ResourceBlock.Meal\r\n    )\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    description = 'sweet dreams'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    description = 'so nice'\r\n    prereqs = [ Bed ]\r\n    // produces = ResourceBlock.Food\r\n    operation = generate(ResourceBlock.Food)\r\n    capacity = 1\r\n    color = Green\r\n    image = images.plant\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Water: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\n// medium\r\n\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    operation = store([ResourceBlock.Data], 10)\r\n    image = images.server\r\n    prereqs = [Bookshelf]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   operation = generate(ResourceBlock.Food)\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   description = 'home on the plains'\r\n   operation = recipe(\r\n       [ ResourceBlock.Food, ResourceBlock.Food ],\r\n       ResourceBlock.Meal\r\n   )\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    description = 'arbor around the clock'\r\n    operation = generate(ResourceBlock.Food)\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    description = 'where there is a will'\r\n    operation = generate(ResourceBlock.Food)\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    description = 'plant lab'\r\n    operation = generate(ResourceBlock.Food)\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'we all grow'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = spawn()\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    description = 'you made that'\r\n    operation = recipe(\r\n        [ResourceBlock.Ore, ResourceBlock.Ore, ResourceBlock.Ore],\r\n         ResourceBlock.Mineral\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n}\r\n\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    description = 'ore away'\r\n    operation = generate(ResourceBlock.Ore)\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n]","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    color: Color = Color.Gray\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MissionControl ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MissionControl ],\r\n        [Orientation.Right]: [  Dome, MissionControl ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    description: string = 'Biome sweet biome';\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.eighth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n\r\n    prereqs = [\r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n    // two small slots\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.third\r\n    // two medium slots...\r\n    \r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 6 * major.eighth\r\n    height = 4 * major.fifth\r\n\r\n    // two big slots?\r\n    machines = largeBelow\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.eighth\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 4 * major.seventh\r\n    height = 3 * major.seventh\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 6 * major.eighth\r\n    height = 5 * major.eighth\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 8 * major.eighth\r\n    height = 6 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n\r\n}\r\n\r\n//////\r\n\r\nexport class MissionControl extends Structure {\r\n    name: string = 'Mission Control';\r\n    description: string = 'Keeping everything on track';\r\n    view: string = 'MissionControlView';\r\n    width: number = 6 * major.eighth\r\n    height: number = 1 * major.sixth\r\n    zoom = 0.1\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = [ CommandCenter ]\r\n}\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine } from './Machine';\r\nimport { Color } from 'excalibur';\r\n\r\nexport class SpaceFunction {\r\n     name: string = '(generic)'\r\n     description: string = '(generic description)'\r\n     machines: (typeof Machine)[] = []\r\n     color: Color = Color.Gray\r\n\r\n     prereqs: (typeof SpaceFunction)[] =  [] \r\n}\r\n\r\nexport class LivingQuarters extends SpaceFunction {\r\n     name = 'Living Quarters'\r\n     machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n     name = 'Barracks'\r\n     machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nexport class Kitchen extends SpaceFunction {\r\n     name = 'Kitchen'\r\n     machines = [ Stove, Fridge ]\r\n}\r\n\r\nexport class LifeSupportPod extends SpaceFunction {\r\n     name = 'Life Support Module'\r\n     machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n     name = 'Retreat'\r\n     machines = [ Cabin, Cabin ]\r\n}\r\n\r\nexport class CloneMatrix extends SpaceFunction {\r\n     name = 'Clone Matrix'\r\n     machines = [ CloningVat, CloningVat ]\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n     name = 'Reading Room'\r\n     machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nclass Library extends SpaceFunction {\r\n     name = 'Library'\r\n     machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n}\r\n\r\nclass Study extends SpaceFunction {\r\n     name = 'Study'\r\n     machines = [ StudyMachine, Bookshelf ]\r\n}\r\n\r\nclass Lab extends SpaceFunction {\r\n     name = 'Lab'\r\n     machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nclass Archive extends SpaceFunction {\r\n     name = 'Archive'\r\n     machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n     name = 'Arboretum'\r\n     machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n     name = 'Algae Farm'\r\n     machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nclass SolarArray extends SpaceFunction {\r\n     name = 'Solar Array'\r\n     machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nclass Workshop extends SpaceFunction {\r\n     name = 'Workshop'\r\n     machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\nclass Nursery extends SpaceFunction {\r\n     name = 'Nursery'\r\n     machines = [ Houseplant, Houseplant, Houseplant ]\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n     name = 'Farm'\r\n     machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n     name = 'Factory'\r\n     machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    Lab,\r\n]","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\nimport { Recipe, Storage } from \"../models/MechanicalOperation\";\r\nimport { range, deleteByValueOnce } from \"../Util\";\r\n\r\ninterface RetrieveResource {\r\n    type: 'retrieve'\r\n    resource: ResourceBlock\r\n    // count: number\r\n}\r\n\r\nexport function retrieveResource(res: ResourceBlock): RetrieveResource {\r\n    return {\r\n        type: 'retrieve',\r\n        resource: res,\r\n        // count: 1\r\n    }\r\n}\r\n\r\nexport type InteractionRequest = RetrieveResource // | ...\r\n\r\nexport class Device extends Actor {\r\n    // could also use for storage?\r\n    product: ResourceBlock[] = []\r\n    nameLabel: Label\r\n    image: any\r\n    building: Building\r\n    inUse: boolean = false\r\n\r\n    imageLoaded: boolean = false\r\n\r\n    constructor(\r\n        public machine: Machine,\r\n        initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = () => { this.imageLoaded = true }\r\n        this.image.src = machine.image\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (this.imageLoaded) {\r\n        ctx.drawImage(\r\n            this.image,\r\n            this.pos.x - this.getWidth() / 2,\r\n            this.pos.y - this.getHeight() / 2 - 10,\r\n            this.getWidth(), this.getHeight()\r\n        )\r\n        }\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= 10\r\n            this.nameLabel.pos.y += 8 + this.getHeight()/2\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let bx = this.x - this.getWidth()/2 + 5, by = this.y - 23\r\n        let blockSize = 5\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).desaturate(0.3).lighten(0.2).toRGBA();\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n    get operation() { return this.machine.operation }\r\n\r\n    //isSinkFor(it: ResourceBlock) {\r\n    //    if (this.operation.type === 'recipe') {\r\n    //        return this.operation.consumes.includes(it) // === it\r\n    //    }\r\n\r\n    //    if (this.operation.type === 'store') {\r\n    //        return this.operation.stores.includes(it) &&\r\n    //          this.product.length < this.operation.capacity\r\n    //    }\r\n\r\n    //    return false;\r\n    //}\r\n\r\n    async interact(citizen: Citizen, request: InteractionRequest): Promise<boolean> {\r\n        if (this.inUse) {\r\n            citizen.waitToUse(this)\r\n            return false\r\n        }\r\n\r\n        let worked = false\r\n        let op = this.operation\r\n        if (op.type === 'recipe') {\r\n            let recipe: Recipe = op\r\n            // do we have all the things?\r\n            if (citizen.carrying.some(it => recipe.consumes.includes(it))) {\r\n                this.inUse = true\r\n                if (citizen.isCarryingUnique(recipe.consumes)) {\r\n                    recipe.consumes.forEach(consumed => citizen.drop(consumed))\r\n                    await citizen.progressBar(recipe.workTime)\r\n                    citizen.carry(recipe.produces)\r\n\r\n                    worked = true\r\n                } else {\r\n                    console.log(\"not carrying all requirements?\", { requires: recipe.consumes, has: citizen.carrying })\r\n                }\r\n                this.inUse = false\r\n            }\r\n        } else if (op.type === 'store') {\r\n            // accept it! (whatever you have that matches...?)\r\n            let store: Storage = op\r\n            if (request) { // assume dispense request for now?\r\n                this.inUse = true\r\n                worked = this.dispense(citizen, request)\r\n                if (worked) {\r\n                    await citizen.progressBar(500)\r\n                }\r\n                this.inUse = false\r\n            } else if (citizen.carrying.some(it => store.stores.includes(it))) { // maybe trying to store?\r\n                if (this.product.length < store.capacity) {\r\n                    let res = null\r\n                    if (store.stores.some(stored => { res = citizen.drop(stored); return res })) {\r\n                        if (res) {\r\n                            this.product.push(res)\r\n                            this.building.redeem(res)\r\n                            worked = true\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.warn(\"no capacity in this store!!\")\r\n                }\r\n            }\r\n        } else if (op.type === 'generator') {\r\n            this.inUse = true\r\n            worked = this.dispense(citizen, request)\r\n            if (worked) {\r\n                await citizen.progressBar(500)\r\n            }\r\n            this.inUse = false\r\n        }\r\n\r\n        return worked\r\n    }\r\n\r\n    private dispense(citizen: Citizen, request: InteractionRequest) {\r\n        if (request && request.type === 'retrieve') {\r\n            let canFulfill = this.product.find(p => p === request.resource)\r\n            if (canFulfill) {\r\n                deleteByValueOnce(this.product, request.resource)\r\n                citizen.carry(request.resource)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    public produce(step: number) {\r\n        if (this.machine.operation.type === 'generator') {\r\n            if (step % this.machine.operation.generationTime === 0) {\r\n                if (this.product.length < this.machine.operation.capacity) {\r\n                    this.product.push(this.machine.operation.generates)\r\n                }\r\n            }\r\n\r\n        } else if (this.machine.operation.type === 'spawn') {\r\n            setTimeout(() => this.building.populate(this.pos), 100)\r\n        }\r\n    }\r\n\r\n    // todo only snap when close enough? try to prevent some mis-clicks?\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            // hmmm\r\n            allStructures,\r\n            // machines count < device slots count\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        let snapped = false\r\n        if (bldg) {\r\n            let spot = bldg.nextDevicePlace().position\r\n            let d = spot.distance(pos)\r\n            snapped = d < 150\r\n        }\r\n\r\n        if (snapped) {  //bldg && d < 300) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n            //devicePlaces()[\r\n            //    this.building.devices.length\r\n            //]\r\n        } else {\r\n            this.pos = pos\r\n        }\r\n\r\n        return snapped //!!bldg;\r\n    }\r\n\r\n    // finalize() {\r\n    // this.building.devices.push(this)\r\n    // }\r\n}","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 100\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 20 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n        let ds = [\r\n            new Vector(x - w / 2, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w / 2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Color } from \"excalibur\";\r\nimport { EntityKind } from \"../../values/Entity\";\r\n\r\nexport class Palette {\r\n    private _element: HTMLDivElement;\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(\r\n        private x: number,\r\n        private y: number,\r\n        private all: EntityKind[],\r\n        private onButtonClick: (EntityKind) => any = null,\r\n        private onButtonEnter: (EntityKind) => any = null,\r\n        private comprehend = true \r\n    ) {\r\n        this.makePalette();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    updateBuilt(built: (EntityKind)[]) {\r\n        this.built = built;\r\n        if (this.comprehend) {\r\n            this.comprehended = this.all.filter((e: EntityKind) => {\r\n                let s = new e();\r\n                let prereqs: (EntityKind)[] = s.prereqs;\r\n                return prereqs.every((prereq: EntityKind) => {\r\n                    let built = this.built.some((s: EntityKind) => s === prereq);\r\n                    return built;\r\n                });\r\n            });\r\n        } else {\r\n            this.comprehended = this.built\r\n        }\r\n        this.makePalette();\r\n    }\r\n\r\n    private makePalette() {\r\n        if (this._element) {\r\n            this._element.parentElement.removeChild(this._element);\r\n        }\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.border = '1px solid white';\r\n        document.body.appendChild(this._element);\r\n        this.comprehended\r\n            .map((elem: EntityKind) => new elem())\r\n            .sort((a, b) => a.color > b.color ? -1 : 1)\r\n            .forEach(elem => {\r\n                let label = elem.name;\r\n                if (!this.built.map(m => new m().name).includes(elem.name)) {\r\n                    label += ' *';\r\n                }\r\n                let clr = elem.color;\r\n                let btn = this.buttonFactory(label, clr);\r\n                this._element.appendChild(btn);\r\n                if (this.onButtonEnter) {\r\n                    btn.onmouseenter = () => { this.onButtonEnter(elem); };\r\n                }\r\n                if (this.onButtonClick) {\r\n                    btn.onclick = () => { this.onButtonClick(elem); };\r\n                }\r\n            });\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.6).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = label;\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '9pt';\r\n        paletteButton.style.fontFamily = 'Helvetica';\r\n        paletteButton.style.fontWeight = '600';\r\n        paletteButton.style.padding = '2px';\r\n        paletteButton.style.width = '160px';\r\n        paletteButton.style.textTransform = 'uppercase';\r\n        paletteButton.style.border = '1px solid rgba(255,255,255,0.08)';\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA();\r\n            paletteButton.style.color = fg.toRGBA();\r\n        };\r\n        return paletteButton;\r\n    }\r\n}\r\n","import { Label, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { PureValue } from \"../../models/Economy\";\r\nimport { SmallDomeThreeView } from \"../Building/SmallDomeThreeView\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\n\r\nexport class CardBody extends Actor {\r\n    description: Label\r\n    values: Label\r\n    notes: Label\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction, x: number, y: number) {\r\n        super(x, y, 0, 0)\r\n        // resources / recipes\r\n\r\n        this.values = new Label('')\r\n        this.values.fontSize = 10\r\n        this.add(this.values)\r\n\r\n        this.notes = new Label('behavioral notes', 0, 30)\r\n        this.notes.fontSize = 11\r\n        this.add(this.notes)\r\n\r\n        this.description = new Label('description', 0, 60)\r\n        this.description.fontSize = 12\r\n        this.description.fontStyle = FontStyle.Italic\r\n        this.add(this.description)\r\n\r\n        this.show(entity)\r\n    }\r\n\r\n    show(entity: Machine | Structure | SpaceFunction) {\r\n        if (entity) {\r\n            this.description.text = entity.description;\r\n\r\n            if (entity instanceof Machine) {\r\n                let values = []\r\n                let econ = entity.economy\r\n                for (let value in PureValue) {\r\n                    let { supply, demand } = econ[value]\r\n                    let delta = supply - demand\r\n                    if (delta > 0) {\r\n                        values.push(`+${delta} ${value}`)\r\n                    } else if (delta < 0) {\r\n                        values.push(`${delta} ${value}`)\r\n                    }\r\n                }\r\n                this.values.text = values.join(' | ')\r\n\r\n                // let theNotes = []\r\n                this.notes.text = ''\r\n                // if (entity.consumes && entity.produces) {\r\n                //     this.notes.text = `Turns ${entity.consumes} into ${entity.produces}.`\r\n                // } else if (entity.produces) {\r\n                //     this.notes.text = `Generates ${entity.produces}.`\r\n                // } // if entity.stores...?\r\n            } else if (entity instanceof Structure) {\r\n                this.values.text = ''\r\n                this.notes.text = ''\r\n            }\r\n\r\n        }\r\n        // other bonuses? behaviors?\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nexport class CardTitle extends Actor {\r\n    \r\n    name: Label;\r\n    type: Label;\r\n    constructor(private entity: Machine | Structure | SpaceFunction, x: number, y: number) {\r\n        super(x, y, 14, 32, entity && entity.color || Color.Gray);\r\n        this.name = new Label(entity && entity.name || '..', 20, 16)\r\n        this.name.fontSize = 28\r\n        this.name.color = Color.Black\r\n        this.add(this.name)\r\n\r\n        this.type = new Label('..', 232, 16)\r\n        this.type.fontSize = 10\r\n        this.type.color = Color.Gray\r\n        this.type.fontStyle = FontStyle.Italic\r\n        this.add(this.type)\r\n    }\r\n\r\n    announce(entity: Machine | Structure | SpaceFunction): any {\r\n        this.name.text = entity.name\r\n        this.color = entity.color.desaturate(0.5).darken(0.2)\r\n        if (entity instanceof Machine) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n        if (entity instanceof Structure) { this.type.text = 'Structure' }\r\n        if (entity instanceof SpaceFunction) { this.type.text = 'Function' }\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { CardTitle } from \"./CardTitle\";\r\nimport { CardBody } from \"./CardBody\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\n\r\nexport class Card extends Actor {\r\n    title: CardTitle\r\n    cardBody: CardBody\r\n    image: any\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction, x: number, y: number) {\r\n        super(x + 160, y + 90, 320, 180, Color.White);\r\n        let x0 = -150, y0 = -50;\r\n        this.title = new CardTitle(entity, x0 - 3, y0); //x, y)\r\n        this.add(this.title);\r\n        this.cardBody = new CardBody(entity, x0 + 14, y0 + 40)\r\n        this.add(this.cardBody)\r\n\r\n        this.image = new Image();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        if (this.entity) {\r\n            if (this.entity instanceof Machine) {\r\n                let ix = this.pos.x + 48, iy = this.pos.y - 16\r\n                let isz = 92\r\n                ctx.drawImage(this.image, ix, iy, isz, isz)\r\n            }\r\n        }\r\n    }\r\n\r\n    present(entity: Machine | Structure | SpaceFunction): any {\r\n        this.title.announce(entity)\r\n        this.cardBody.show(entity)\r\n\r\n        this.entity = entity\r\n        if (this.entity instanceof Machine) {\r\n            this.image.src = this.entity.image\r\n        }\r\n    }\r\n\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor } from \"excalibur\";\r\nimport { Economy, PureValue, availableCapacity, allValues } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n\r\n        let index = 0\r\n        for (let value of allValues) {\r\n            let valueLabel: EconomicValue =  new EconomicValue(value, (index++ * 34), 0)\r\n            this.valueLabels[value] = valueLabel\r\n            this.add(valueLabel)\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value of allValues) {\r\n            this.valueLabels[value].setCount(\r\n                availableCapacity(market, value)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 6, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            [ResourceBlock.Food]: null,\r\n            [ResourceBlock.Hypothesis]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n            [ResourceBlock.Alloy]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0, Color.DarkGray.darken(0.8));\r\n        let rx0 = 0, ry0 = -2.5;\r\n        let resources = [ResourceBlock.Meal, ResourceBlock.Data, ResourceBlock.Mineral];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0 + index * 16, ry = ry0 + index * 0;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n\r\n    constructor(market: Economy, w: number = 10000, h: number = 36) {\r\n        super(0,0, w, h, Color.DarkGray.darken(0.8));\r\n\r\n        let ty = 14\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+2)\r\n        brand.fontSize = 12\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.0.1\", 48, ty + 2)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(80, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 200, ty)\r\n        this.add(this.economy)\r\n\r\n        this.popLabel = new Label(\"\", 900, ty, 'Helvetica')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 1000, ty, 'Helvetica')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.messageLabel.fontStyle = FontStyle.Italic\r\n        this.add(this.messageLabel)\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n    \r\n}\r\n","import { UIActor, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, SmallRoomThree, SmallRoomTwo, MediumRoom, MidDome, SmallDome, LargeRoom, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, sumMarkets, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { Desk, Bookshelf, Machine, CloningVat, WaterCondensingMachine, OxygenExtractor, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Cabin, Orchard, SolarCell, Megafabricator, Arbor, Fabricator, MiningDrill, Preserve, Workstation, Houseplant, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Card } from \"./Card\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Palette } from \"./Palette\";\r\n\r\nexport class Hud extends UIActor {\r\n    private structurePalette: Palette //<Structure> \r\n    private machinePalette: Palette //<Machine>\r\n    private functionPalette: Palette\r\n    private card: Card\r\n\r\n    private status: StatusAnalysisView\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n    static machinesForPalette = allMachines\r\n    static functionsForPalette = allSpaceFunctions\r\n\r\n    constructor(\r\n        private game: Game,\r\n        protected onBuildingSelect = null,\r\n        protected onMachineSelect = null,\r\n        protected onFunctionSelect = null\r\n    ) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.status = new StatusAnalysisView(emptyMarket());\r\n        this.add(this.status)\r\n\r\n        let displayInfo = (e) => this.showCard(e)\r\n        this.structurePalette = new Palette(20, 35, Hud.structuresForPalette, onBuildingSelect, displayInfo)\r\n        this.machinePalette = new Palette(20, 300, allMachines, onMachineSelect, displayInfo) // (e) => this.showCard(e))\r\n        this.functionPalette = new Palette(220, 35, Hud.functionsForPalette, onFunctionSelect, displayInfo, false)\r\n\r\n        this.card = new Card(null, 20, 800) // game.canvasHeight - 200)\r\n        this.add(this.card)\r\n    }\r\n\r\n    setMessage(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        this.structurePalette.draw(ctx)\r\n        this.machinePalette.draw(ctx)\r\n        this.functionPalette.draw(ctx)\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true) {\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n    }\r\n\r\n    showCard(entity: Machine | Structure | SpaceFunction) {\r\n        this.card.present(entity)\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n        this.updateFunctionPalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        let builtStructures =\r\n            Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n\r\n        this.structurePalette.updateBuilt(builtStructures)\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let devices = colony.findAllDevices()\r\n        let builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine))\r\n        this.machinePalette.updateBuilt(builtMachines)\r\n    }\r\n\r\n    private updateFunctionPalette(colony: Colony) {\r\n        let builtReifiedFunctions = flatSingle(colony.buildings.map(b => b.spaceFunction))\r\n        let builtFunctions = Hud.functionsForPalette.filter((fn) => builtReifiedFunctions.some(rf => rf instanceof fn))\r\n        this.functionPalette.updateBuilt(builtFunctions)\r\n    }\r\n\r\n}","import { CommonAreaView } from '.'\r\nimport { Vector } from 'excalibur';\r\n\r\nexport class MineView extends CommonAreaView {\r\n    floorHeight = 150\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { MissionControl } from \"../../models/Structure\";\r\nimport { range, eachCons, measureDistance, drawRect } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MissionControlView extends Building {\r\n    hideBox = true\r\n\r\n    devicePlaces() {\r\n        return this.nodes().map(n => {\r\n            n.y -= 20\r\n            return new DevicePlace(n, DeviceSize.Medium)\r\n        }) \r\n    }\r\n\r\n    afterConstruct() {\r\n        let { machines } = this.structure;\r\n        if (machines && machines.length > 0) {\r\n            let machine = new machines[0]();\r\n            this.devicePlaces().forEach(place => {\r\n                let theDevice = new Device(machine, place.position)\r\n                this.addDevice(theDevice)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor()\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        // a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawRect } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 12\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        let wallColor = this.processedColor() //.darken(0.4)\r\n        let floorColor = this.processedColor().darken(0.4)\r\n\r\n        drawRect(ctx, this.aabb(), 0.5, wallColor)\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight,\r\n              width: this.getWidth(), height: this.floorHeight },\r\n              0.2,\r\n              floorColor\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 10 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons, deleteByValue, deleteByValueOnce, sleep, shuffle } from \"../Util\";\r\nimport { Device, retrieveResource as retrieveResource } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { MechanicalOperation, Recipe } from \"../models/MechanicalOperation\";\r\nimport { worker } from \"cluster\";\r\nimport { SSL_OP_EPHEMERAL_RSA } from \"constants\";\r\n\r\nexport class Citizen extends Actor {\r\n\r\n    walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock[] = [] // null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    constructor(private device: Device, protected planet: Planet) {\r\n        super(device.x, device.y, Scale.minor.first, Scale.minor.third, Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // make sure we are busy!\r\n        this.work()\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = (now - this.workStarted) / this.workDuration\r\n            // this.vel.x += ((Math.random())-0.5) * 0.1\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            this.carrying.forEach((carried, idx) => {\r\n                ctx.fillStyle = blockColor(carried).toRGBA()\r\n                ctx.fillRect(this.x + 4, this.y - 3 * idx, 5, 5)\r\n            })\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            ctx.strokeRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n        }\r\n\r\n        let debugPath = false\r\n        if (this.path && debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 10\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    carry(c: ResourceBlock) {\r\n        this.carrying.push(c); // = c;\r\n    }\r\n\r\n    isCarryingUnique(resources: ResourceBlock[]): boolean {\r\n        let isCarrying = true\r\n        let carryingCopy = this.carrying.slice()\r\n        if (this.carrying.length > 0) {\r\n            resources.forEach(resToFind => {\r\n                if (carryingCopy.find(res => res === resToFind)) {\r\n                    deleteByValueOnce(carryingCopy, resToFind)\r\n                } else {\r\n                    isCarrying = false;\r\n                }\r\n            })\r\n        }\r\n        return isCarrying\r\n    }\r\n\r\n    drop(res: ResourceBlock): ResourceBlock {\r\n        console.log(\"ASKED TO DROP\", {res})\r\n        if (this.carrying.length > 0) {\r\n            if (this.carrying.find(r => r === res)) {\r\n                // this.carrying = deleteByValue(this.carrying, res)\r\n                deleteByValueOnce(this.carrying, res)\r\n                return res\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        this.workInProgress = false\r\n    }\r\n\r\n    async pathTo(building: Building) {\r\n        if (this.path.length > 0) {\r\n            console.log(\"The path already exists\", { path: this.path })\r\n            throw new Error(\"Already pathing!!\")\r\n        }\r\n\r\n        console.log(\"Pathing to\", { building })\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            path.pop()\r\n            path.shift()\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = []\r\n        }\r\n        return true;\r\n    }\r\n\r\n    async waitToUse(device) {\r\n        await sleep(250)\r\n        device.interact(this)\r\n    }\r\n\r\n    // instead of sink-(source/source/source) it's just:\r\n    // pick a recipe, gather and produce\r\n\r\n    private async workRecipe(recipe: Recipe) {\r\n        console.log(\"WORK RECIPE\", { recipe })\r\n\r\n        for (let ingredient of recipe.consumes) {\r\n            console.log(\"TRY TO GATHER\", {ingredient})\r\n            await this.gather(ingredient)\r\n            console.log(\"OKAY, I should have gathered\", { ingredient, recipe })\r\n        }\r\n        let devices = this.planet.colony.findAllDevices()\r\n        let maker = devices.find(d => d.operation === recipe)\r\n        if (maker) {\r\n            console.log(\"found recipe maker, let's do this!\")\r\n            await this.pathTo(maker.building)\r\n            console.log(\"walking to recipe maker!\")\r\n            await this.glideTo(maker)\r\n            if (await maker.interact(this)) {\r\n                console.log(\"i worked the recipe!\")\r\n            } else {\r\n                console.log(\"i failed to work the recipe...\")\r\n                await sleep(1000)\r\n                await this.workRecipe(recipe)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private async gather(res: ResourceBlock) {\r\n        console.log(\"GATHER\", { res })\r\n        let devices = this.planet.colony.findAllDevices()\r\n        let gen: Device = devices.find((d: Device) =>\r\n            (d.operation.type === 'generator') &&\r\n              d.product.some(stored => res === stored)\r\n        )\r\n\r\n        if (gen) {\r\n            console.log(\"found generator with resource\", { res, gen })\r\n            await this.pathTo(gen.building)\r\n            console.log(\"gliding to get generated resource!\", { gen, machine: gen.machine, pos: gen.pos })\r\n            await this.glideTo(gen.pos)\r\n            console.log(\"attempt to interact with generator to gather\", { gen, res })\r\n            if (await gen.interact(this, retrieveResource(res))) {\r\n                console.log(\"gathered okay!\")\r\n            } else {\r\n                console.warn(\"trying to gather again in a bit?\")\r\n                await sleep(1000)\r\n                await this.gather(res)\r\n            }\r\n        } else {\r\n            // ... is there a machine that makes this as a recipe? :)\r\n            let maker = devices.find(d => d.operation.type === 'recipe' &&\r\n                d.operation.produces === res)\r\n\r\n            if (maker) {\r\n                await this.workRecipe(maker.operation)\r\n            } else {\r\n                console.warn(\"Can't find producer of\", { res })\r\n                await sleep(1000)\r\n                await this.gather(res)\r\n            }\r\n        }\r\n    }\r\n\r\n    private working: boolean = false\r\n    work() {\r\n        if (!this.working) {\r\n            sleep(Math.random() * 3000)\r\n            this.workOne()\r\n        }\r\n    }\r\n\r\n    private async workOne() {\r\n        if (this.working) { return }\r\n        this.working = true\r\n\r\n        let devices = this.planet.colony.findAllDevices()\r\n        let store = shuffle(devices).find((d: Device) =>\r\n            d.operation.type === 'store' && d.product.length < d.operation.capacity\r\n        )\r\n        if (store) {\r\n            console.log(\"WORKING FOR STORE\", { store })\r\n            let makers = devices.filter(d => d.operation.type === 'recipe')\r\n            let recipes: Recipe[] = makers.map(m => m.operation)\r\n\r\n            // find the recipe and work it\r\n            let recipe = shuffle(recipes).find((r: Recipe) =>\r\n                store.operation.stores.some(stored => r.produces === stored)\r\n            )\r\n\r\n            if (recipe) {\r\n                console.log(\"TRY TO WORK RECIPE!!!\", recipe)\r\n                await this.workRecipe(recipe)\r\n                // we should now be carrying the thing for the store! just deliver it?\r\n                console.log(\"DELIVER TO STORE...\")\r\n                await this.pathTo(store.building)\r\n                console.log(\"INTERACT WITH STORE...!\")\r\n                await this.glideTo(store.pos)\r\n                if (await store.interact(this)) {\r\n                    console.log(\"i think it worked!!\")\r\n                } else {\r\n                    console.warn(\"maybe it didn't work!\")\r\n                }\r\n            }\r\n\r\n        }\r\n        await sleep(1000)\r\n        this.working = false\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(home: Device) {\r\n        let citizen = new Citizen(home, this.planet);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","module.exports = __webpack_public_path__ + \"9ed5e1137b47b9fc3d2bbf4534777307.svg\";","module.exports = __webpack_public_path__ + \"3aeb9dd24809ba3fbd4eeb31a28c3b19.svg\";","module.exports = __webpack_public_path__ + \"cffe40698a3b47b52ca0ff90a2c86ddf.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"86e09b7a9e4997af44c45206eb8694ad.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { ResourceBlock } from \"./Economy\";\r\n\r\nexport type MechanicalOperation = Recipe | Generator | Storage | SpawnClone | Noop;\r\n\r\nexport interface Noop {\r\n    type: 'noop'\r\n}\r\n\r\nexport interface Recipe {\r\n    type: 'recipe'\r\n    consumes: ResourceBlock[]\r\n    produces: ResourceBlock\r\n    workTime: number\r\n}\r\n\r\nexport interface Generator {\r\n    type: 'generator'\r\n    generates: ResourceBlock\r\n    generationTime: number\r\n    capacity: number\r\n}\r\n\r\nexport interface Storage {\r\n    type: 'store'\r\n    stores: ResourceBlock[]\r\n    capacity: number\r\n}\r\n\r\nexport interface SpawnClone {\r\n    type: 'spawn'\r\n    // consumes: ResourceBlock\r\n    // cycleTime: number\r\n}\r\n\r\nfunction store(res: ResourceBlock[], capacity: number = 10): Storage {\r\n    return {\r\n        type: 'store',\r\n        stores: res,\r\n        capacity\r\n    }\r\n}\r\n\r\nfunction generate(res: ResourceBlock): Generator {\r\n    return {\r\n        type: 'generator',\r\n        generates: res,\r\n        generationTime: 1000,\r\n        capacity: 4\r\n    }\r\n}\r\n\r\nfunction recipe(input: ResourceBlock[], output: ResourceBlock): Recipe {\r\n    return {\r\n        type: 'recipe',\r\n        consumes: input,\r\n        produces: output,\r\n        workTime: 1000,\r\n    }\r\n}\r\n\r\nfunction spawn(): SpawnClone {\r\n    return {\r\n        type: 'spawn',\r\n        // consumes: ResourceBlock.Food\r\n    }\r\n}\r\n\r\nexport const mechanicalOperations = {\r\n    store,\r\n    generate,\r\n    recipe,\r\n    spawn\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure, MissionControl } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = false\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findAllDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d)\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices() {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\n\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n\r\n    constructor(\r\n        public hud: Hud,\r\n        public color: Color,\r\n        public width: number = 2000000,\r\n        public depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, width, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        let devices = this.colony.findAllDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(home)\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        let devices = this.colony.findAllDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [ PureValue.Shelter, PureValue.Water, PureValue.Oxygen ]\r\n        return Math.max(0, Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        ))\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n}","import { Scene, Input, Vector } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MissionControl, MainTunnel, Corridor, SurfaceRoad, SmallDome, SmallRoomTwo, SmallDomeThree, SmallRoomThree, MediumRoom } from \"../models/Structure\";\r\nimport { Building, DomeView, CorridorView, CommonAreaView, TunnelView, MissionControlView, LadderView, ArcologyView, } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { SurfaceRoadView } from \"../actors/Building/SurfaceRoadView\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { SmallRoomThreeView } from \"../actors/Building/SmallRoomThreeView\";\r\nimport { MidDomeView } from \"../actors/Building/MidDomeView\";\r\nimport { MediumRoomView } from \"../actors/Building/MediumRoomView\";\r\nimport { LargeRoomView } from \"../actors/Building/LargeRoomView\";\r\nimport { HugeRoomView } from \"../actors/Building/HugeRoomView\";\r\nimport { BigDomeView } from \"../actors/Building/BigDomeView\";\r\nimport { SmallDomeThreeView } from \"../actors/Building/SmallDomeThreeView\";\r\nimport { SpaceFunction, CloneMatrix, Kitchen, LivingQuarters, LifeSupportPod } from \"../models/SpaceFunction\";\r\nimport { flatSingle, zip } from \"../Util\";\r\nimport { DevicePlace } from \"../actors/Building/Building\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    placingFunction: SpaceFunction = null\r\n\r\n    static structureViews: { [key: string]: typeof Building } = {\r\n        CorridorView,\r\n        LadderView,\r\n        TunnelView,\r\n        SurfaceRoadView,\r\n\r\n        DomeView, // small dome 2\r\n        SmallDomeThreeView,\r\n        MidDomeView,\r\n        BigDomeView,\r\n\r\n        MissionControlView,\r\n        SmallRoomThreeView,\r\n\r\n        CommonAreaView,\r\n        MediumRoomView,\r\n        LargeRoomView,\r\n        HugeRoomView,\r\n\r\n        ArcologyView,\r\n    }\r\n    static requiredStructureList: Array<typeof Structure> = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        SmallDomeThree,\r\n        MainTunnel,\r\n        Corridor,\r\n        SmallRoomTwo,\r\n    ]\r\n\r\n    //static requiredFunctionList: Array<typeof SpaceFunction> = [\r\n    //    LifeSupportPod,\r\n    //    LivingQuarters,\r\n    //    Kitchen,\r\n    //    CloneMatrix,\r\n    //]\r\n\r\n    static requiredStructuresAndFunctions: (typeof SpaceFunction | typeof Structure)[] = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        LifeSupportPod,\r\n        MainTunnel,\r\n        Corridor,\r\n        Kitchen,\r\n        LivingQuarters,\r\n        CloneMatrix,\r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, false)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        let buildIt = (e) => this.startConstructing(e)\r\n\r\n        this.hud = new Hud(game, buildIt, buildIt, buildIt)\r\n        //(structure) => {\r\n        //    this.startConstructing(structure)\r\n        //}, (device) => {\r\n        //    this.startConstructing(device)\r\n        //});\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(this.hud, game.world.color);\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(2, 10000)\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n\r\n                            if (this.placingFunction) {\r\n                                let fn = this.placingFunction\r\n                                zip(fn.machines, buildingUnderConstruction.devicePlaces()).forEach(([machine, place]: [typeof Machine, DevicePlace]) => {\r\n                                    console.log(\"would add machine\", { machine, place })\r\n                                    let m = (new machine()).concretize()\r\n                                    let device = new Device(m, place.position)\r\n                                    buildingUnderConstruction.addDevice(device)\r\n                                })\r\n                                this.placingFunction = null\r\n                            }\r\n\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                this.planet.colony.currentlyConstructing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingRequiredStructure(): Structure {\r\n        let requiredStructures: Structure[] = Construct.requiredStructureList.map(s => new s())\r\n        let actualStructureNames: string[] = this.buildings.map(building => building.structure.name)\r\n\r\n        return requiredStructures.find(structure => !actualStructureNames.includes(structure.name))\r\n    }\r\n\r\n    private nextMissingStructureOrFunction(): Structure | SpaceFunction {\r\n        let reqs = Construct.requiredStructuresAndFunctions.map(req => new req())\r\n\r\n        let actualStructureNames = this.buildings.map(building => building.structure.name)\r\n        let actualFunctionNames = flatSingle(\r\n            this.buildings.map(building => building.spaceFunction && building.spaceFunction.name)\r\n        )\r\n        let actualNames = [...actualStructureNames, ...actualFunctionNames]\r\n        return reqs.find(req => !actualNames.includes(req.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingStructureOrFunction() //this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        }\r\n    }\r\n\r\n    startConstructing(structureOrMachine: Structure | Machine | SpaceFunction, pos: Vector = new Vector(0, 0)) {\r\n        this.hud.showCard(structureOrMachine)\r\n        \r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            this.hud.setMessage(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            this.camera.zoom(structure.zoom, 250)\r\n            this.camera.pos = theNextOne.pos\r\n        } else if (structureOrMachine instanceof Machine) {\r\n            let machine = structureOrMachine\r\n            this.hud.setMessage(`Install ${machine.name} (${machine.description})`)\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            // this.camera.zoom(1.5, 250)\r\n        } else if (structureOrMachine instanceof SpaceFunction) {\r\n            let fn: SpaceFunction = structureOrMachine\r\n            this.hud.setMessage(`Place ${fn.name} (${fn.description})`)\r\n            theNextOne = this.spawnFunction(fn, pos)\r\n            this.placingFunction = fn\r\n\r\n            // need to gen a building with the required machines?\r\n            // alert(\"start building function!\")\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        if (device.snap(this.planet)) {\r\n            this.camera.pos = device.pos\r\n \r\n        }\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(anotherBuilding.pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = Construct.structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n\r\n    protected spawnFunction(fn: SpaceFunction, pos: Vector): Building {\r\n        let theStructure: Structure = new SmallRoomThree()\r\n        if (fn.machines.some(m => (new m()).size === DeviceSize.Medium)) {\r\n            theStructure = new MediumRoom()\r\n        }\r\n        if (fn.machines.some(m => (new m()).forDome)) {\r\n            theStructure = new SmallDome()\r\n        }\r\n\r\n        let building = this.assembleBuildingFromStructure(theStructure, pos)\r\n        building.reshape(building.constrainCursor(building.pos))\r\n        return building\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Red, Color.Blue, Color.Green]\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ).\r\n        lighten(0.15).\r\n        desaturate(0.65)\r\n\r\n  \r\n}","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword),\r\n\r\n}\r\n\r\nexport { Resources }\r\n","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}