{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Util.ts","webpack:///./src/values/DeviceSize.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Machine.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/Painting.ts","webpack:///./src/actors/Device.ts","webpack:///./src/models/Structure.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/Game.ts","webpack:///./src/strategies/Strategy.ts","webpack:///./src/actors/Building/BackgroundPatterns.ts","webpack:///./src/values/Scale.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Resources.ts","webpack:///./src/actors/player.ts","webpack:///./src/strategies/EatingStrategy.ts","webpack:///./src/strategies/WhenHungryEatingStrategy.ts","webpack:///./src/strategies/SleepingStrategy.ts","webpack:///./src/strategies/AnyBedSleepingStrategy.ts","webpack:///./src/strategies/ConstructionStrategy.ts","webpack:///./src/strategies/ProximityBasedConstruction.ts","webpack:///./src/values/InteractionRequest.ts","webpack:///./src/strategies/ProductionStrategy.ts","webpack:///./src/strategies/CapacityBasedProduction.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/actors/Hud/Palette.ts","webpack:///./src/actors/Hud/CardBody.ts","webpack:///./src/actors/Hud/CardTitle.ts","webpack:///./src/actors/Hud/Card.ts","webpack:///./src/actors/Hud/MusicPlayer.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MediumSurfaceRoomView.ts","webpack:///./src/actors/Building/MediumRoomThreeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/images/wood-panel-bg.png","webpack:///./src/images/ussf.png","webpack:///./src/images/window-bg.png","webpack:///./src/images/beige-bg.png","webpack:///./src/images/checker-bg.png","webpack:///./src/images/tech-bg.png","webpack:///./src/images/poster-wall-bg.png","webpack:///./src/images/books-bg.png","webpack:///./src/images/leafy-bg.png","webpack:///./src/images/raised-square-bg.png","webpack:///./src/images/codex-plain.svg","webpack:///./src/images/statue-plain.svg","webpack:///./src/images/miner-plain.svg","webpack:///./src/images/solar-collector-plain.svg","webpack:///./src/images/couch-plain.svg","webpack:///./src/images/fabricator-plain.svg","webpack:///./src/images/mega-console-plain.svg","webpack:///./src/images/console-red-plain.svg","webpack:///./src/images/console-green-plain.svg","webpack:///./src/images/console-purple-plain.svg","webpack:///./src/images/console-plain.svg","webpack:///./src/images/workstation-plain.svg","webpack:///./src/images/houseplant-plain.svg","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/models/MechanicalOperation.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/sounds/future tense.mp3","webpack:///./src/sounds/understanding.mp3","webpack:///./src/sounds/indivision.mp3","webpack:///./src/sounds/assembler.mp3","webpack:///./src/sounds/crater-rock.mp3","webpack:///./src/images/sword.png","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","deleteByValueOnce","index","indexOf","eachCons","eachChunk","array","measureDistance","b","sleep","ms","Promise","resolve","setTimeout","shuffle","sort","zip","countOccurrences","counts","forEach","containsUniq","testElems","doesContain","arrCopy","missingItem_1","testElem","find","mixColors","factor","aFactor","bFactor","Color","g","t","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","fourth","eighth","second","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","SurfaceRoadView_1","SurfaceRoadView","SmallDomeThreeView_1","SmallDomeThreeView","MidDomeView_1","MidDomeView","BigDomeView_1","BigDomeView","SmallRoomThreeView_1","SmallRoomThreeView","MediumRoomView_1","MediumRoomView","LargeRoomView_1","LargeRoomView","HugeRoomView_1","HugeRoomView","MediumRoomThreeView_1","MediumRoomThreeView","MediumSurfaceRoomView_1","MediumSurfaceRoomView","structureViews","Orientation_1","Game_1","Util_1","Graph_1","Economy_1","SpaceFunction_1","DeviceSize_1","Machine_1","BackgroundPatterns_1","Painting_1","DevicePlace","pos","this","_super","structure","planet","_this","x","y","width","height","infra","color","darken","Transparent","edgeWidth","placed","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","devices","active","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","some","currentlyViewing","toggleActive","collisionType","CollisionType","PreventCollision","nameLabel","Label","White","__extends","poly","aabbPoly","draw","ctx","delta","drawRect","aabb","processedColor","spaceFunction","getCenter","measureText","Game","debugPath","slots","slot","rect","Gray","lighten","nodes","node","Yellow","devicePlaces","place","position","visibleSize","update","engine","device","tryProduce","description","economy","emptyUnlessActive","isActive","emptyMarket","machineEconomies","buildingEconomy","__assign","Oxygen","demand","supply","sumMarkets","inUse","wasEquil","equilibrium","_i","allValues_1","allValues","localCap","availableCapacity","globalCap","agg","constrainCursor","clone","reshape","afterConstruct","handleClick","_pos","getWidth","getHeight","graph","supergraph","Graph","rootNode","findOrCreate","_a","child","parentSlot","edge","childNode","redeem","res","gather","debit","spend","populate","elite","pathFromRect","angledRoofPoly","angleStartY","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","bldg","edgeColor","mainColor","colorBase","clr","Red","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","closestBuildingByType","building","matchingSlot","compass_1","compass","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","subEqual","add","updateFunction","machine","onPlacement","hasPlaceForDevice","nextDevicePlace","getDevices","allTheMachines","StudyMachine","allMachines","CommandCenter","MissionLog","machines","console","log","allSpaceFunctions","spaceFn","sf","text","background","BackgroundPattern","Grid","Actor","PureValue","market","Power","Water","Shelter","Hope","Joy","Wisdom","Wealth","Beauty","Wonder","ea","eb","newMarket","sa","da","_b","every","ResourceBlock","Biomass","Ore","Idea","Meal","Data","Mineral","Bioplasma","Alloy","Algorithm","Argent","Aurum","Omnium","blockColors","Green","Blue","cStep","Viridian","DarkGray","Orange","blockColor","block","desaturate","setPrototypeOf","__proto__","constructor","create","assign","arguments","MechanicalOperation_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","plant","workstation","consolePurple","consoleGreen","consoleRed","megaconsole","fabricator","couch","solar","miner","statue","codex","Violet","store","mechanicalOperations","generate","recipe","spawn","accelerateTime","Machine","LightGray","cost","operation","type","image","prereqs","forDome","hide","concretize","built","produceResource","OxygenExtractor","WaterCondensingMachine","SolarCell","Statue","Workstation","Desk","Codex","Bookshelf","Couch","Fridge","Stove","Bed","Houseplant","PersonnelRegistry","CloningVat","OrientationConsole","productionTime","AlgaeVat","DissolutionVat","PlasmaBank","Fabricator","LifeSciencesConsole","Botany","MetalStorage","ResearchServer","Orchard","Cabin","Arbor","MineralProcessor","ThinkingFountain","Mainframe","Megafabricator","MolecularEngine","fromHex","SilverForest","TimeCrystal","HoloProjector","SacredGrove","AtomicCompiler","MiningDrill","Preserve","LogicPool","Cathedral","Microcity","LogicCrystal","Left","Up","Down","orientation","Error","drawPatternedPoly","path","pattern","Black","gridPattern","getBackgroundPattern","save","translate","beginPath","moveTo","pt","lineTo","closePath","fillStyle","strokeStyle","stroke","restore","drawLine","lineWidth","toRGBA","drawPatternedRect","rectangle","filled","dashed","main","fillRect","setLineDash","strokeRect","drawPoly","drawStar","cx","cy","outerRadius","innerRadius","spikes","rot","PI","cos","sin","Structure_1","Device","initialPos","product","imageLoaded","reserved","fontSize","Image","onload","src","globalAlpha","drawImage","imageX","imageY","iv","bx","by","yOff","produced","blockSize","assemble","citizen","isCarryingUnique","progressBar","sent","drop","label","interact","request","worked","op","recipe_1","carrying","it","consumes","includes","consumed","workTime","getEffectiveWorkTime","carry","produces","warn","requires","has","store_1","dispense","stores","getEffectiveOperationalCapacity","res_1","stored","bonus","bonuses","capacity","workSpeed","round","resource","generationTime","generates","snap","allStructures","snapped","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","Structure","view","zoom","Corridor","Ladder","MainTunnel","fifth","MediumSurfaceRoom","SurfaceRoad","first","Dome","seventh","CommonArea","sixth","SmallRoomThree","SmallRoomTwo","SmallDome","MediumRoom","MediumRoomThree","LargeRoom","HugeRoom","SmallDomeThree","MidDome","LargeDome","Arcology","SpaceFunction","Beige","MissionControl","Window","LivingQuarters","Barracks","Kitchen","Checker","LifeSupportPod","Retreat","CloneMatrix","CloneReception","ReadingRoom","Library","Books","Study","Wood","ComputerLab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Leafy","Farm","Factory","ComputerCore","Tech","LifeSciencesLab","Refinery","Mine","HoloMatrix","TimeChamber","LivingRoom","Statuary","Resources_1","world","displayMode","DisplayMode","FullScreen","backgroundColor","start","loader","Loader","key","Resources","addResource","then","citizenSpeed","startHour","Engine","InteractionRequest_1","Strategy","pawn","sleepInterval","currentPlanet","findPoweredDevices","recipes","operations","attempt","pause","gatherBlock","debug","gathered","generatesDesiredBlock","gen","closestDeviceByType","storesDesiredBlock","visitDevice","waitTimes","retrieveResource","visit","workRecipe","knowsRecipe","maker","made","gatherIngredients","performRecipeTask","blocks","blocks_1","ingredient","tries","timesToAttempt","raisedSquare","leafy","bookish","posters","tech","checker","beige","ussf","wood","loadBg","scale","loading","Poster","USSF","backgroundPatterns","bg","matrix","DOMMatrix","createPattern","setTransform","majorUnit","minorUnit","minorScale","empty","edges","edgesInverse","isEmpty","newNode","contains","testNode","measure","tolerance","dfs","dst","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","steps","srcIndex","reverse","sword","craterRock","assembler","indivision","understanding","futureTense","Sword","Texture","CraterRock","Sound","Assembler","Indivision","Understanding","FutureTense","ex","Player","setWidth","setHeight","EatingStrategy","EatingStrategy_1","WhenHungryEatingStrategy","canApply","isHungry","storedResources","desk","eat","SleepingStrategy","SleepingStrategy_1","AnyBedSleepingStrategy","isTired","hour","takeRest","Strategy_1","ConstructionStrategy","unbuiltDevice","findAllDevices","ProxmityBasedConstruction","constructDevice","resources","ProductionStrategy","storeBlock","openStore","CapacityBasedProduction","findStore","storage_1","recipeForStoredResource","CapacityBasedProduction_1","ProximityBasedConstruction_1","AnyBedSleepingStrategy_1","WhenHungryEatingStrategy_1","Citizen","home","isPlanning","workInProgress","sleeping","hunger","energy","currentBuilding","productionStrategy","constructionStrategy","sleepingStrategy","eatingStrategy","speedMultiplier","timeFactor","work","now","Date","getTime","progress","workStarted","workDuration","rotate","carried","saturate","px","pw","py","c_1","duration","reject","pathBetweenPoints","followPath","target","glideTo","actions","walkSpeed","asPromise","all","choice","strategies","strat","Citizen_1","Population","citizens","increase","NavigationTree","seekPath","origin","dest","closestNode","abs","NavigationTree_1","Colony","currentlyConstructing","debugTree","navTree","gradient","createLinearGradient","addColorStop","placeBuilding","buildNavTree","structureTypes","st","pathBetween","destination","srcNode","destNode","machineTypes","ctrl","activeBuildings","PlanetBackground","MountainLayers","layers","skyColor","layerHeight","layerCount","peakCount","onInitialize","layerIndex","unshift","baseY","deltas","genPeaks","wc","sc","ndx","ls_1","layer","drawLayer","ox","oy","peakWidth","dMax","last","maxDiff","times","pick","Mountains","peaks","xOff","peakDistance","drift","baseColor","brightColor","yBase","peak","y0","mtnWidth","PlanetBackground_1","Colony_1","Population_1","Device_1","Planet","hud","onBuildingHover","onDeviceHover","w","depth","sky","createLayer","backMountainLayers","mountains","mountainLayers","population","currentHour","setTime","time","nextHour","inc","oldC","skyColorForHour","newC","mixC","colorMap","night","dawn","morning","afternoon","evening","set","buildingOrDevice","theLayer","theEconomy","popularDemand","resourceGathered","resourceExpended","maxPop","theEconomyWithoutPeople","values","val","closestDevice","acc","Palette","onButtonClick","onButtonEnter","comprehend","comprehended","dragging","makePalette","_element","left","canvas","offsetLeft","top_1","offsetTop","style","top","updateBuilt","prereq","parentElement","removeChild","document","createElement","display","flexWrap","border","addEventListener","clientX","clientY","body","appendChild","title","textContent","fontFamily","fontWeight","padding","margin","btn","buttonFactory","onmouseenter","onclick","fg","paletteButton","textTransform","onmouseover","onmouseleave","CardBody","entity","describeResources","freqs","keys","join","notes","fontStyle","FontStyle","Italic","footer","show","describeEconomy","resourceDescription","domeStatus","bonusMessages","econ","CardTitle","announce","CardTitle_1","CardBody_1","Card","x0","cardBody","ix","iy","present","MusicPlayer","playlist","paused","makePlayer","startMusic","_titleElem","currentTrack","play","advancePlaylist","_wrapper","textAlign","inlineBlock","iconFactory","handleAction","action","song","stop","trackNames","append","iconContent","icon","innerHTML","EconomicValue","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","val1","val2","addValue","updateView","updatedEconomy","Tooltip","message","messageLabel","ResourceListEntry","resourceBlock","hovering","tooltip","visible","credit","amt","UIActor","ResourceListEntry_1","ResourcesList","entries","res1","res2","rx","ry","addEntry","entry","increment","decrement","ResourcesList_1","EconomyView_1","MusicPlayer_1","StatusAnalysisView","h","brand","ty","version","clock","popLabel","musicPlayer","Crater Rock","Future Tense","incrementResource","decrementResource","setMessage","showEconomy","showPopCap","cap","setClock","days","toString","hh","hours","minutes","ampm","padStart","StatusAnalysisView_1","Card_1","Palette_1","Hud","Tabs","tabs","_rootElement","makeRootElement","addTab","element","game","onBuildingSelect","onMachineSelect","onFunctionSelect","canvasWidth","canvasHeight","hidePalettes","status","displayInfo","showCard","machinePalette","structurePalette","structuresForPalette","functionPalette","functionsForPalette","card","showPalettes","updateDetails","rebuildPalettes","updatePalettes","updateEconomy","updateMaxPop","updateBuildingPalette","updateMachinePalette","updateFunctionPalette","builtStructures","builtMachines","machinesForPalette","builtReifiedFunctions","builtFunctions","rf","devicePlaceSize","devicePlaceCount","sg","right","isGroundFloor","leftSlot","rightSlot","topSlot","theSlots","slotY","getTop","backgroundPattern","flagX","flagY","flagpoleHeight","_1","floorHeight","originSlot","pickingOrigin","maxHeight","drawShape","xoff","yoff","bezierCurveTo","halfWidth","slotHeights","heights","y1","btm","lst","slotCount","arc","floorColor","floorEdgeHeight","originX","newCursor","input","output","Hud_1","Planet_1","player_1","Construct","defaultMessage","placingFunction","firstBuilding","buildIt","startConstructing","player","prepareNextBuilding","camera","addTimer","Timer","stepTime","onActivate","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction_1","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","moveCam","direction","camMoveSpeed","dv","move","keyboard","Keys","H","Esc","W","A","S","D","onDeactivate","off","nextMissingStructureOrFunction","reqs","requiredStructuresAndFunctions","req","actualStructureNames","actualFunctionNames","actualNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","spawnFunction","anotherBuilding","assembleBuildingFromStructure","theStructure","Scene","World","colors","Cyan","Vermillion","Chartreuse","Rose","World_1","Construct_1","theWorld","construct","goToScene"],"mappings":"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AxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([102,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { getBackgroundPattern, BackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport const deleteByValueOnce = (arr, elem) => {\r\n  let index = arr.indexOf(elem);\r\n  if (index !== -1) arr.splice(index, 1);\r\n}\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport function eachChunk(a, n) {\r\n  return a.reduce(function (result, value, index, array) {\r\n    if (index % n === 0)\r\n      result.push(array.slice(index, index + n));\r\n    return result;\r\n  }, []);\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function shuffle(arr) {\r\n  return arr.sort(() => Math.random() > 0.5 ? 1 : -1)\r\n}\r\n\r\nexport const zip = (a, b) => a.map((e, i) => [e, b[i]])\r\n\r\nexport const countOccurrences = (arr) => {\r\n  let counts = {}\r\n  arr.forEach((elem) => {\r\n    counts[elem] = counts[elem] || 0\r\n    counts[elem] += 1\r\n  })\r\n  return counts\r\n}\r\n\r\nexport function containsUniq<T>(arr: T[], testElems: T[]) {\r\n  let doesContain = false\r\n  let arrCopy = arr.slice()\r\n  if (arr.length > 0) {\r\n    let missingItem = false\r\n    testElems.forEach(testElem => {\r\n      if (arrCopy.find(e => e === testElem)) {\r\n        deleteByValueOnce(arrCopy, testElem)\r\n      } else {\r\n        missingItem = true\r\n      }\r\n    })\r\n    doesContain = !missingItem\r\n  }\r\n  return doesContain\r\n}\r\n\r\n\r\nexport function mixColors(a: Color, b: Color, factor: number = 0.5): Color {\r\n  let aFactor = factor, bFactor = (1-factor)\r\n  return new Color(\r\n    (a.r * aFactor) + (b.r * bFactor),\r\n    (a.g * aFactor) + (b.g * bFactor),\r\n    (a.b * aFactor) + (b.b * bFactor),\r\n    1\r\n  )\r\n}","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.fourth; break;\r\n        case DeviceSize.Large: sz = major.eighth + major.second; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\nimport { SmallDomeThreeView } from './SmallDomeThreeView';\r\nimport { MidDomeView } from './MidDomeView';\r\nimport { BigDomeView } from './BigDomeView';\r\nimport { SmallRoomThreeView } from './SmallRoomThreeView';\r\nimport { MediumRoomView } from './MediumRoomView';\r\nimport { LargeRoomView } from './LargeRoomView';\r\nimport { HugeRoomView } from './HugeRoomView';\r\nimport { MediumRoomThreeView } from './MediumRoomThreeView';\r\nimport { MediumSurfaceRoomView } from './MediumSurfaceRoomView';\r\n\r\n\r\nconst structureViews: { [key: string]: typeof Building } = {\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n    MediumSurfaceRoomView,\r\n}\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n\r\n    MediumSurfaceRoomView,\r\n\r\n\r\n    structureViews\r\n\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, deleteByValue, containsUniq } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock, emptyMarket, Economy, sumMarkets, equilibrium, allValues, availableCapacity } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { World } from \"../../models/World\";\r\nimport { Machine, allMachines, CommandCenter, MissionLog, StudyMachine } from \"../../models/Machine\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { EconomicValue } from \"../Hud/EconomicValue\";\r\nimport { drawRect, pathFromRect } from \"../../Painting\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0\r\n\r\n    nameLabel: Label\r\n\r\n    placed: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    spaceFunction: SpaceFunction\r\n\r\n    private devices: Device[] = []\r\n    givenName: string\r\n\r\n    private active: boolean = true\r\n    // private built: boolean = false\r\n\r\n    constructor(pos: Vector, public structure: Structure, public planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          structure.infra ? planet.color.darken(0.3) : Color.Transparent\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            if (!this.devices.some(d => d.hover)) {\r\n                this.planet.currentlyViewing = this\r\n            }\r\n        })\r\n\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED BUILDING\", { building: this })\r\n            this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.color = Color.White\r\n\r\n        if (this.structure.infra) { this.active = true }\r\n    }\r\n\r\n    poly() { return this.aabbPoly() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        // this.devices.forEach(device => device.draw(ctx, delta))\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.showLabel && this.spaceFunction) {\r\n            this.nameLabel.pos = this.pos //get getCenter().\r\n            this.nameLabel.pos.x = this.getCenter().x //ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n        }\r\n\r\n        // let debug = true;\r\n        if (Game.debugPath) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = true\r\n        if (showDevicePlaces && this.devicePlaces().length > 0 && this.devices.length < this.devicePlaces().length) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    0.1,\r\n                    Color.White,\r\n                    false,\r\n                    true\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n\r\n        let tryProduce = this.placed;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.tryProduce(this.step));\r\n        }\r\n\r\n        // this.devices.forEach(d => d.update(engine, delta))\r\n\r\n        this.step += 1\r\n    }\r\n\r\n    get name() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.name\r\n        } else {\r\n            return this.structure.name\r\n        }\r\n    }\r\n\r\n    get description() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.description\r\n        } else {\r\n            return this.structure.description\r\n        }\r\n    }\r\n\r\n    economy(emptyUnlessActive: boolean = true): Economy {\r\n        if (emptyUnlessActive && !this.isActive) {\r\n            return emptyMarket()\r\n        } else {\r\n            let machineEconomies = this.devices.map(d => d.economy)\r\n            //machine.economy)\r\n\r\n            let buildingEconomy = {\r\n                ...emptyMarket(),\r\n                Oxygen: { demand: 1, supply: 0 }, // structural demand\r\n                // Water: { demand: 0.1, supply: 0 },\r\n            }\r\n\r\n            let aggregate = [...machineEconomies, buildingEconomy]\r\n                .reduce(sumMarkets, emptyMarket())\r\n\r\n            return aggregate\r\n        }\r\n    }\r\n\r\n    private toggleActive() {\r\n        if (!this.structure.infra) {\r\n            if (this.active) {\r\n                if (this.devices.some(d => d.inUse)) { return }\r\n                let wasEquil = equilibrium(this.planet.economy)\r\n                this.active = false\r\n                if (wasEquil) {\r\n                    if (!equilibrium(this.planet.economy)) {\r\n                        this.active = true\r\n                        // return\r\n                    }\r\n                    // this.active = true\r\n                } else {\r\n                    // we weren't at equilibrium previously\r\n                    // permit it, if we don't have any supply that would go negative without us?\r\n                    // console.log(\"can we toggle?\")\r\n                    for (let value of allValues) {\r\n                        let localCap = availableCapacity(this.economy(false), value)\r\n                        let globalCap = availableCapacity(this.planet.economy, value)\r\n                        // console.log(\"value\", { value, localCap, globalCap})\r\n                        if (localCap > 0 && globalCap < 0) {\r\n                            // don't permit it to be turned off\r\n                            this.active = true\r\n                        }\r\n                    }\r\n                }\r\n            } else { // this.active is false now\r\n                let agg = [\r\n                    this.planet.economy,\r\n                    this.economy(false)\r\n                ].reduce(sumMarkets, emptyMarket())\r\n\r\n                if (equilibrium(agg)) {\r\n                    this.active = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get isActive() { return !!this.active }\r\n\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public debit(res: ResourceBlock) {\r\n        this.planet.spend(res)\r\n    }\r\n\r\n    public populate(pos: Vector, elite: boolean = false) {\r\n        this.planet.populate(pos, elite) //this.pos)\r\n    }\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected aabbPoly(): {x:number,y:number}[] {\r\n        return pathFromRect(this.aabb());\r\n        //return [\r\n        //    // bottom-left\r\n        //    { x: this.pos.x, y: this.pos.y + this.getHeight() },\r\n\r\n        //    // upper-left\r\n        //    { x: this.pos.x, y: this.pos.y },\r\n\r\n        //    // upper-right\r\n        //    { x: this.pos.x + this.getWidth(), y: this.pos.y },\r\n\r\n        //    // bottom-right\r\n        //    { x: this.pos.x + this.getWidth(), y: this.pos.y + this.getHeight() },\r\n        //];\r\n    }\r\n\r\n    protected angledRoofPoly(): {x: number, y: number}[] {\r\n        let angleStartY = 1 * (this.getHeight() / 3) - 3\r\n        let angleStartX = 20 // 1 * (this.getWidth() / 10)\r\n        return [\r\n            // bottom-left\r\n            { x: this.pos.x, y: this.pos.y + this.getHeight() },\r\n\r\n            // upper-left\r\n            { x: this.pos.x, y: this.pos.y + angleStartY },\r\n            { x: this.pos.x + angleStartX, y: this.pos.y },\r\n\r\n            // upper-right\r\n            { x: this.pos.x + this.getWidth() - angleStartX, y: this.pos.y },\r\n            { x: this.pos.x + this.getWidth(), y: this.pos.y + angleStartY },\r\n\r\n            // bottom-right\r\n            { x: this.pos.x + this.getWidth(), y: this.pos.y + this.getHeight() },\r\n        ]\r\n            \r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.placed)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (!this.active) {\r\n            clr = clr.darken(0.8)\r\n        }\r\n\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        // device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        device.pos.subEqual(this.pos) // = this.devicePlaces()[0].position\r\n        // console.log(\"DEVICE IS AT\", { pos: device.pos })\r\n        this.add(device)\r\n        this.updateFunction()\r\n        device.machine.onPlacement(device)\r\n        this.toggleActive()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices //.filter(d => d.built)\r\n    }\r\n\r\n    public updateFunction() {\r\n        let allTheMachines = [ StudyMachine, ...allMachines, CommandCenter, MissionLog ]\r\n        let machines = this.devices.map(\r\n            d => allTheMachines.find((m: typeof Machine) => d.machine instanceof m) // && d.built) //this.devices.some(d => d.machine instanceof m))\r\n        ) //\r\n        // debugger\r\n        console.log(\"MY MACHINES\", { machines })\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let sf = new spaceFn()\r\n\r\n            return containsUniq(\r\n              machines,\r\n              sf.machines\r\n            );\r\n        })\r\n        if (fn) {\r\n            // console.log(\"Determined building function\", { fn })\r\n            let sf = new fn()\r\n            this.spaceFunction = sf\r\n            this.nameLabel.text = sf.name\r\n        } else {\r\n            // console.warn(\"Could not identify function!\")\r\n        }\r\n    }\r\n\r\n    get backgroundPattern() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.background\r\n        } else {\r\n            return BackgroundPattern.Grid\r\n        }\r\n    }\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport const allValues: PureValue[] = [\r\n    PureValue.Power,\r\n    PureValue.Oxygen,\r\n    PureValue.Water,\r\n    PureValue.Shelter,\r\n    PureValue.Hope,\r\n    PureValue.Joy,\r\n    PureValue.Wisdom,\r\n    PureValue.Wealth,\r\n    PureValue.Beauty,\r\n    PureValue.Wonder\r\n]\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return Math.floor(market[value].supply - market[value].demand)\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply,\r\n            demand,\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport const equilibrium: (e: Economy) => boolean = (e) => {\r\n    return allValues.every(value => availableCapacity(e, value) >= 0)\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Biomass = 'Biomass',\r\n    Ore = 'Ore',\r\n    Idea = 'Idea',\r\n\r\n    // derived\r\n    Meal = 'Meal',\r\n    Data = 'Data',\r\n    Mineral = 'Mineral',\r\n    Bioplasma = 'Bioplasma',\r\n\r\n    // higher-order\r\n    Alloy = \"Alloy\",\r\n    Algorithm = \"Algorithm\",\r\n\r\n    // superb\r\n    Argent = \"Argent\",\r\n    Aurum = \"Aurum\",\r\n\r\n    // hyperbolic\r\n    Omnium = \"Omnium\",\r\n}\r\n\r\nlet cStep = 0.3\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Biomass: Color.Green,\r\n    Data: Color.Blue.lighten(cStep),\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(cStep),\r\n    Idea: Color.Blue.lighten(cStep*2), //.desaturate(cStep),\r\n    Ore: Color.Red.darken(cStep),\r\n\r\n    Bioplasma: Color.Viridian,\r\n\r\n    Alloy: Color.DarkGray.darken(cStep), //(cStep),\r\n    Algorithm: Color.Blue.darken(cStep), //.desaturate(cStep),\r\n\r\n    Argent: Color.Gray.lighten(cStep),\r\n    Aurum: Color.Orange.lighten(cStep),\r\n\r\n    Omnium: Color.White,\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    return baseColor.desaturate(0.1) //.lighten(0.1) //.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Color, FontStyle, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { MechanicalOperation, mechanicalOperations } from \"./MechanicalOperation\";\r\nimport { shuffle, range, sample } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\nconst plant = require('../images/houseplant-plain.svg')\r\nconst workstation = require('../images/workstation-plain.svg')\r\n\r\nconst console = require('../images/console-plain.svg')\r\nconst consolePurple = require('../images/console-purple-plain.svg')\r\nconst consoleGreen = require('../images/console-green-plain.svg')\r\nconst consoleRed = require('../images/console-red-plain.svg')\r\nconst megaconsole = require('../images/mega-console-plain.svg')\r\n\r\nconst fabricator = require('../images/fabricator-plain.svg')\r\n\r\nconst couch = require('../images/couch-plain.svg')\r\nconst solar = require('../images/solar-collector-plain.svg')\r\nconst miner = require('../images/miner-plain.svg')\r\n\r\nconst statue = require('../images/statue-plain.svg')\r\nconst codex = require('../images/codex-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n    plant,\r\n    workstation,\r\n\r\n    console,\r\n    consolePurple,\r\n    consoleGreen,\r\n    consoleRed,\r\n    megaconsole,\r\n\r\n    fabricator,\r\n\r\n    couch,\r\n    solar,\r\n    miner,\r\n    statue,\r\n\r\n    codex,\r\n}\r\n\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nlet { store, generate, recipe, spawn, accelerateTime } = mechanicalOperations\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n\r\n    cost: ResourceBlock[] = [ResourceBlock.Mineral]\r\n\r\n    size: DeviceSize = DeviceSize.Small\r\n    operation: MechanicalOperation = { type: 'noop' }\r\n    image = images.vat\r\n    prereqs: (typeof Machine)[] = []\r\n    economy: Economy = emptyMarket()\r\n    forDome: boolean = false\r\n    hide: boolean = false\r\n\r\n    capacity: boolean\r\n\r\n\r\n    concretize(): Machine { return this; } \r\n\r\n    onPlacement(device: Device) {\r\n        // ...whatever we need to script here?\r\n    }\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command Console'\r\n    description = 'commander, we need your help'\r\n    operation = store(\r\n        [ResourceBlock.Mineral], //,ResourceBlock.Biomass],\r\n        24\r\n    )\r\n    image = images.megaconsole\r\n    size = DeviceSize.Medium\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 6, demand: 0 },\r\n        Oxygen: { supply: 16, demand: 0 },\r\n        Water: { supply: 1, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 },\r\n        Shelter: { supply: 1, demand: 0}\r\n    }\r\n\r\n    onPlacement(device: Device) {\r\n        device.built = true\r\n        for (let i in range(20)) {\r\n            device.produceResource(ResourceBlock.Mineral)\r\n        }\r\n        let { building } = device\r\n        building.populate(device.pos.add(building.pos), true)\r\n\r\n        // building.updateFunction()\r\n    }\r\n}\r\n\r\nexport class MissionLog extends Machine {\r\n    name = 'Mission Log'\r\n    description = 'gather data'\r\n    operation = store(\r\n        [ResourceBlock.Data],\r\n        8\r\n    )\r\n    image = images.consolePurple\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n//export class Energon extends Machine {\r\n//    name = 'Energon'\r\n//    description = 'food paste'\r\n//}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 6, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n    image = images.solar\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 10, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H2O Condenser'\r\n    description = 'have a drink'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 5, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n/// small subsurface\r\n\r\nexport class Statue extends Machine {\r\n    name = 'Statue'\r\n    description = 'for honor'\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Hope: { supply: 0.1, demand: 0 },\r\n        Beauty: { supply: 0.1, demand: 0 },\r\n    }\r\n    image = images.statue\r\n}\r\n\r\nexport class StudyMachine extends Machine {\r\n    operation = recipe(\r\n        [ ResourceBlock.Idea, ResourceBlock.Idea, ResourceBlock.Idea ],\r\n        ResourceBlock.Data\r\n    )\r\n    color = Blue\r\n    concretize(): Machine { return new (sample([Workstation, Desk]))() }\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    description = 'get to work'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Codex extends Machine {\r\n    name = 'Codex'\r\n    description = 'read it closely'\r\n    image = images.codex\r\n    prereqs = [ Bookshelf ]\r\n    operation = store([ResourceBlock.Data], 3)\r\n    color = Blue\r\n    // concretize() { return this }\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    description = 'hackety hack'\r\n    prereqs = [ Bookshelf ]\r\n    image = images.workstation\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Couch extends Machine {\r\n    name = 'Couch'\r\n    description = 'take it easy'\r\n    prereqs = []\r\n    image = images.couch\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Joy: { supply: 0.1, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    operation = generate(ResourceBlock.Idea)\r\n    image = images.bookshelf\r\n    prereqs = [ ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    operation = store([ResourceBlock.Meal], 6)\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    operation = recipe(\r\n        [ResourceBlock.Biomass, ResourceBlock.Biomass],\r\n        ResourceBlock.Meal\r\n    )\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    description = 'sweet dreams'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    description = 'so nice'\r\n    prereqs = [ Bed ]\r\n    // produces = ResourceBlock.Food\r\n    cost = [ ResourceBlock.Biomass ]\r\n    operation = generate(ResourceBlock.Biomass, 1)\r\n    color = Green\r\n    image = images.plant\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Water: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\nexport class PersonnelRegistry extends Machine {\r\n    name = 'Personnel Registry'\r\n    description = 'track everybody'\r\n    prereqs = [ CloningVat ]\r\n    operation = store([ResourceBlock.Data], 4)\r\n    color = Yellow\r\n    image = images.console\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Wisdom: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class OrientationConsole extends Machine {\r\n    name = 'Orientation Console'\r\n    description = 'welcome to the colony'\r\n    prereqs = [CloningVat]\r\n    operation = generate(ResourceBlock.Data, 1)\r\n    image = images.consoleRed\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'we all grow'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = spawn()\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class DissolutionVat extends Machine {\r\n    name = 'Dissolution Vat'\r\n    description = 'back to basics'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = recipe(\r\n        [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n        ResourceBlock.Bioplasma\r\n    )\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [PlasmaBank]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class PlasmaBank extends Machine {\r\n    name = 'Bioplasm Bank'\r\n    description = 'hold on'\r\n    operation = store([ ResourceBlock.Bioplasma ])\r\n    prereqs = [AlgaeVat]\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    description = 'you made that'\r\n    operation = recipe(\r\n        [ResourceBlock.Mineral, ResourceBlock.Mineral],\r\n         ResourceBlock.Alloy\r\n    )\r\n    size = DeviceSize.Small\r\n    color = Red\r\n    prereqs = [Workstation]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n    image = images.fabricator\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    description = 'where there is a will'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class LifeSciencesConsole extends Machine {\r\n    name = 'Life Sciences Console'\r\n    description = 'mind and body together'\r\n    operation = store([ResourceBlock.Biomass, ResourceBlock.Data], 5)\r\n    prereqs = [Houseplant, Botany]\r\n    color = Green\r\n    image = images.consoleGreen\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.2 },\r\n    }\r\n}\r\n\r\n// medium\r\n\r\nexport class MetalStorage extends Machine {\r\n    name = 'Metal Storage'\r\n    description = 'contain minerals and alloys?'\r\n    operation = store([ResourceBlock.Mineral, ResourceBlock.Alloy], 8)\r\n    prereqs = [Bookshelf]\r\n    color = Red\r\n    size = DeviceSize.Medium\r\n}\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    operation = store([ResourceBlock.Data, ResourceBlock.Algorithm], 10)\r\n    image = images.server\r\n    prereqs = [Bookshelf, Workstation]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   operation = generate(ResourceBlock.Biomass)\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Oxygen: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   description = 'home on the plains'\r\n   operation = recipe(\r\n       [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n       ResourceBlock.Meal\r\n   )\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    description = 'arbor around the clock'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    description = 'plant lab'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n\r\nexport class MineralProcessor extends Machine {\r\n    name = 'Mineral Processor'\r\n    description = 'wheat from the chaff'\r\n    operation = recipe(\r\n        [ResourceBlock.Ore, ResourceBlock.Ore, ResourceBlock.Ore],\r\n         ResourceBlock.Mineral\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation, Fabricator]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class ThinkingFountain extends Machine {\r\n    name = 'Thinking Fountain'\r\n    description = 'slowly growing'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Mainframe, Megafabricator, MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = generate(ResourceBlock.Aurum, 8)\r\n    cost = [ResourceBlock.Aurum]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class SilverForest extends Machine {\r\n    name = 'Silver Forest'\r\n    description = 'immense serenity'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Megafabricator, Mainframe ]\r\n    color = Color.fromHex('c0c0c0')\r\n    operation = store([ResourceBlock.Argent], 12)\r\n    cost = [ResourceBlock.Alloy, ResourceBlock.Algorithm]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Beauty: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n    forDome = true\r\n}\r\n\r\nexport class TimeCrystal extends Machine {\r\n    name = 'Time Crystal'\r\n    description = 'xlr8'\r\n    size = DeviceSize.Medium\r\n    color = Color.fromHex('e5e4e2')\r\n    operation = accelerateTime()\r\n    cost = [ResourceBlock.Omnium]\r\n    prereqs = [ Megafabricator, SilverForest ]\r\n}\r\n\r\nexport class HoloProjector extends Machine {\r\n    name = 'Holo Projector'\r\n    description = 'whatever your heart desires'\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    operation = generate(ResourceBlock.Data, 3)\r\n    cost = [ResourceBlock.Algorithm, ResourceBlock.Mineral]\r\n    prereqs = [ Mainframe ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 3, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class SacredGrove extends Machine {\r\n    name = 'Sacred Grove'\r\n    description = 'where the furies play'\r\n    size = DeviceSize.Medium\r\n    forDome = true\r\n    cost = [ ResourceBlock.Omnium ]\r\n    prereqs = [ AtomicCompiler ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 4, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class AtomicCompiler extends Machine {\r\n    name = 'Atomic Compiler'\r\n    description = 'super position'\r\n    operation = recipe(\r\n        [ ResourceBlock.Aurum, ResourceBlock.Argent ],\r\n        ResourceBlock.Omnium\r\n    )\r\n    cost = [ ResourceBlock.Argent, ResourceBlock.Algorithm ]\r\n    prereqs = [ ThinkingFountain, SilverForest ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n}\r\n\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    description = 'ore away'\r\n    operation = generate(ResourceBlock.Ore)\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    image = images.miner\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    operation = recipe(\r\n        [ResourceBlock.Alloy, ResourceBlock.Algorithm],\r\n        ResourceBlock.Argent\r\n    )\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class MolecularEngine extends Machine {\r\n    name = 'Molecular Engine'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Megafabricator ]\r\n    color = Violet\r\n    operation = recipe(\r\n        [ResourceBlock.Bioplasma, ResourceBlock.Algorithm],\r\n        ResourceBlock.Aurum\r\n    )\r\n    image = images.megaconsole\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n        Water: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Mainframe extends Machine {\r\n    name = 'Mainframe'\r\n    size = DeviceSize.Large\r\n    color = Blue\r\n    prereqs = [ResearchServer]\r\n    cost = [ ResourceBlock.Mineral, ResourceBlock.Mineral ]\r\n    operation = recipe(\r\n        [ ResourceBlock.Data, ResourceBlock.Data ],\r\n        ResourceBlock.Algorithm\r\n    )\r\n    image = images.server\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 6 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Nature Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    operation = generate(ResourceBlock.Biomass, 12)\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n        Oxygen: { supply: 12, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicPool extends Machine {\r\n    name = 'Logic Pool'\r\n    size = DeviceSize.Large\r\n    prereqs = [ MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = store([ResourceBlock.Aurum], 12)\r\n    cost = [ResourceBlock.Algorithm, ResourceBlock.Bioplasma]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class Cathedral extends Machine {\r\n    name = 'Cathedral'\r\n    description = 'first ultrahumanist'\r\n    size = DeviceSize.Large\r\n    prereqs = [ SacredGrove ]\r\n}\r\n\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n\r\n    MineralProcessor,\r\n    PlasmaBank,\r\n    DissolutionVat,\r\n    MetalStorage,\r\n    Mainframe,\r\n\r\n    PersonnelRegistry,\r\n    MolecularEngine,\r\n    ThinkingFountain,\r\n    SilverForest,\r\n\r\n    OrientationConsole,\r\n    LifeSciencesConsole,\r\n\r\n    TimeCrystal,\r\n    LogicPool,\r\n    HoloProjector,\r\n    Cathedral,\r\n    SacredGrove,\r\n    AtomicCompiler,\r\n\r\n    Couch,\r\n    Statue,\r\n    Codex,\r\n]","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { BackgroundPattern, getBackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\ntype PaintingPath = { x: number, y: number }[]\r\n\r\nexport function pathFromRect(rect: Rectangle): PaintingPath {\r\n  let pos = { x: rect.x, y: rect.y }\r\n  let path = [\r\n            // bottom-left\r\n            { x: pos.x, y: pos.y + rect.height }, // this.getHeight() },\r\n\r\n            // upper-left\r\n            { x: pos.x, y: pos.y },\r\n\r\n            // upper-right\r\n            { x: pos.x + rect.width, y: pos.y },\r\n\r\n            // bottom-right\r\n            { x: pos.x + rect.width, y: pos.y + rect.height },\r\n        ];\r\n\r\n  return path\r\n}\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, clr: Color = Color.White, lineWidth: number = 1) {\r\n  let c = clr.clone()\r\n  // c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawPatternedRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  if (gridPattern) {\r\n    drawPatternedPoly(ctx, pathFromRect(rect), pattern)\r\n    // let { x, y, width, height } = rect;\r\n    // ctx.fillStyle = gridPattern\r\n    // ctx.fillRect(x,y,width,height)\r\n\r\n    //ctx.lineWidth = 0\r\n    //ctx.setLineDash([])\r\n    //ctx.strokeStyle = Color.White.toRGBA()\r\n    //ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawPatternedPoly(\r\n  ctx: CanvasRenderingContext2D,\r\n  path: {x:number, y:number}[],\r\n  // rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid,\r\n  edgeColor: Color = Color.Black\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  if (gridPattern) {\r\n    ctx.save()\r\n    ctx.translate(path[0].x, path[0].y)\r\n    // ctx.moveTo(0, 0)\r\n    ctx.beginPath()\r\n    ctx.moveTo(0,0) //path[0].x, path[0].y)\r\n    path.forEach(pt => ctx.lineTo(pt.x - path[0].x, pt.y-path[0].y))\r\n    ctx.lineTo(0,0) // path[0].x, path[0].y)\r\n    ctx.closePath()\r\n    // let { x, y, width, height } = rect;\r\n    ctx.fillStyle = gridPattern\r\n    ctx.fill()\r\n\r\n\r\n    ctx.strokeStyle = edgeColor.fillStyle()\r\n    ctx.stroke()\r\n    ctx.restore()\r\n    // ctx.fillRect(x,y,width,height)\r\n\r\n    // ctx.lineWidth = 2\r\n    // ctx.setLineDash([])\r\n    // ctx.strokeStyle = Color.White.toRGBA()\r\n    // ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true,\r\n  dashed: boolean = false\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  if (filled) {\r\n    let main = color.clone();\r\n    // main.a = 1\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White.clone();\r\n    ctx.strokeStyle = edge.toRGBA();\r\n    ctx.lineWidth=edgeWidth\r\n    if (dashed) { ctx.setLineDash([5, 10]) }\r\n    else { ctx.setLineDash([]) }\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}\r\n\r\nexport function drawPoly(\r\n  ctx: CanvasRenderingContext2D,\r\n  path: {x:number, y:number}[],\r\n  color: Color\r\n  // rect: Rectangle,\r\n  // pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  // const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  // if (gridPattern) {\r\n    ctx.beginPath()\r\n    ctx.moveTo(path[0].x, path[0].y)\r\n    path.forEach(pt => ctx.lineTo(pt.x, pt.y))\r\n    ctx.lineTo(path[0].x, path[0].y)\r\n    ctx.closePath()\r\n    // let { x, y, width, height } = rect;\r\n    ctx.fillStyle = color.fillStyle()\r\n    ctx.fill()\r\n    // ctx.fillRect(x,y,width,height)\r\n\r\n    // ctx.lineWidth = 2\r\n    // ctx.setLineDash([])\r\n    // ctx.strokeStyle = Color.White.toRGBA()\r\n    // ctx.strokeRect(x,y,width,height)\r\n  // }\r\n}\r\n\r\nexport function drawStar(ctx, cx, cy, outerRadius=3.6, innerRadius=1.4, spikes=5, ) {\r\n    var rot = Math.PI / 2 * 3;\r\n    var x = cx;\r\n    var y = cy;\r\n    var step = Math.PI / spikes;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(cx, cy - outerRadius)\r\n    for (let i = 0; i < spikes; i++) {\r\n        x = cx + Math.cos(rot) * outerRadius;\r\n        y = cy + Math.sin(rot) * outerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n\r\n        x = cx + Math.cos(rot) * innerRadius;\r\n        y = cy + Math.sin(rot) * innerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n    }\r\n    ctx.lineTo(cx, cy - outerRadius);\r\n    ctx.closePath();\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = 'yellow';\r\n    ctx.stroke();\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.fill();\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor, emptyMarket } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\nimport { Recipe, ResourceStorage, MechanicalOperation, ResourceGenerator } from \"../models/MechanicalOperation\";\r\nimport { range, deleteByValueOnce } from \"../Util\";\r\nimport { drawRect } from \"../Painting\";\r\nimport { InteractionRequest } from \"../values/InteractionRequest\";\r\n\r\nexport class Device extends Actor {\r\n    // constructionMaterials: ResourceBlock[] = []\r\n\r\n    // could also use for storage?\r\n    product: ResourceBlock[] = []\r\n    nameLabel: Label\r\n    image: HTMLImageElement\r\n    building: Building\r\n    inUse: boolean = false\r\n    hover: boolean = false\r\n\r\n    imageLoaded: boolean = false\r\n\r\n    built: boolean = false\r\n    reserved: boolean = false\r\n\r\n    constructor(\r\n        public machine: Machine,\r\n        initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = () => { this.imageLoaded = true }\r\n        this.image.src = machine.image\r\n\r\n        this.on('pointerenter', () => {\r\n            // console.log(\"HOVER ON\", { device: this })\r\n            this.hover = true\r\n            if (this.building) {\r\n                // setInterval(() => {\r\n                this.building.planet.currentlyViewing = this\r\n                // }, 75)\r\n            }\r\n        })\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED DEVICE\", { device: this })\r\n            // this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n            if (this.building) {\r\n                this.building.planet.currentlyViewing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    get imageX() { return this.pos.x - this.getWidth() / 2 }\r\n    get imageY() { return this.pos.y - this.getHeight() / 2 - 10 }\r\n\r\n    get economy() { return this.built ? this.machine.economy : emptyMarket() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (this.imageLoaded) {\r\n            if (!this.built) { ctx.globalAlpha = 0.5 }\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.imageX,\r\n                this.imageY,\r\n\r\n                this.getWidth(),\r\n                this.getHeight()\r\n            )\r\n            if (!this.built) { ctx.globalAlpha = 1.0 }\r\n\r\n            if (this.hover) {\r\n                let c = Color.White.clone()\r\n                c.a = 0.6\r\n                drawRect(\r\n                    ctx,\r\n                    { x: this.imageX, y: this.imageY, width: this.getWidth(), height: this.getHeight() },\r\n                    0,\r\n                    c\r\n                )\r\n            }\r\n        }\r\n\r\n        let iv = new Vector(this.imageX, this.imageY)\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = iv\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let { x: bx, y: by } = iv\r\n        let blockSize = 5\r\n        let yOff = this.nameLabel.fontSize\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).toRGBA()\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize + yOff, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get name() { return this.machine.name }\r\n    get description() { return this.machine.description }\r\n    get size() { return this.machine.size }\r\n    get operation() { return this.machine.operation }\r\n\r\n    async assemble(citizen: Citizen) {\r\n        if (citizen.isCarryingUnique(this.machine.cost)) {\r\n            for (let res of this.machine.cost) {\r\n                await citizen.progressBar(1000)\r\n                citizen.drop(res)\r\n            }\r\n            this.built = true\r\n            // this.building.updateFunction()\r\n            // this.building.planet.upd\r\n        }\r\n    }\r\n\r\n    async interact(citizen: Citizen, request: InteractionRequest): Promise<boolean> {\r\n        if (this.inUse || !this.built) {\r\n            return false\r\n        }\r\n\r\n        let worked = false\r\n        let op = this.operation\r\n        if (op.type === 'recipe' && request.type === 'work') {\r\n            let recipe: Recipe = op\r\n            // do we have all the things?\r\n            if (citizen.carrying.some(it => recipe.consumes.includes(it))) {\r\n                this.inUse = true\r\n                if (citizen.isCarryingUnique(recipe.consumes)) {\r\n                    recipe.consumes.forEach(consumed => citizen.drop(consumed))\r\n                    let workTime = this.getEffectiveWorkTime(recipe)\r\n                    await citizen.progressBar(workTime) // recipe.workTime)\r\n                    citizen.carry(recipe.produces)\r\n\r\n                    worked = true\r\n                } else {\r\n                    console.warn(\"not carrying all requirements?\", { requires: recipe.consumes, has: citizen.carrying })\r\n                }\r\n                this.inUse = false\r\n            }\r\n        } else if (op.type === 'store') {\r\n            // accept it! (whatever you have that matches...?)\r\n            let store: ResourceStorage = op\r\n            if (request && request.type === 'retrieve') { // assume dispense request for now?\r\n                this.inUse = true\r\n                worked = this.dispense(citizen, request)\r\n                if (worked) {\r\n                    await citizen.progressBar(500)\r\n                }\r\n                this.inUse = false\r\n            } else if (request && request.type === 'store' &&\r\n                citizen.carrying.some(it => store.stores.includes(it))) { // maybe trying to store?\r\n                if (this.product.length < this.getEffectiveOperationalCapacity(store)) { // store.capacity) {\r\n                    let res = null\r\n                    if (store.stores.some(stored => { res = citizen.drop(stored); return res })) {\r\n                        if (res) {\r\n                            this.produceResource(res)\r\n                            // this.product.push(res)\r\n                            // this.building.redeem(res)\r\n                            worked = true\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.warn(\"no capacity in this store!!\")\r\n                    worked = false\r\n                }\r\n            }\r\n        } else if (op.type === 'generator') {\r\n            this.inUse = true\r\n            worked = this.dispense(citizen, request)\r\n            if (worked) {\r\n                await citizen.progressBar(500)\r\n            }\r\n            this.inUse = false\r\n        }\r\n\r\n        return worked\r\n    }\r\n\r\n    getEffectiveOperationalCapacity(op: ResourceGenerator | ResourceStorage) {\r\n        let bonus = this.building.spaceFunction\r\n        ? this.building.spaceFunction.bonuses.capacity \r\n        : 0\r\n        return op.capacity + bonus\r\n    }\r\n\r\n    getEffectiveWorkTime(op: Recipe) {\r\n        let bonus = this.building.spaceFunction \r\n         ? this.building.spaceFunction.bonuses.workSpeed\r\n         : 1\r\n\r\n        return Math.round(op.workTime * (1/bonus))\r\n    } \r\n\r\n\r\n    private dispense(citizen: Citizen, request: InteractionRequest) {\r\n        if (request && request.type === 'retrieve') {\r\n            let canFulfill = this.product.find(p => p === request.resource)\r\n            if (canFulfill) {\r\n                deleteByValueOnce(this.product, request.resource)\r\n                citizen.carry(request.resource)\r\n                this.building.debit(request.resource)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    public tryProduce(step: number) {\r\n        if (this.building.isActive && this.built) {\r\n            if (this.machine.operation.type === 'generator') {\r\n                if (step % this.machine.operation.generationTime === 0) {\r\n                    if (this.product.length < this.machine.operation.capacity) {\r\n                        this.produceResource(this.machine.operation.generates)\r\n                    }\r\n                }\r\n\r\n            } else if (this.machine.operation.type === 'spawn') {\r\n                if (step % 1000 == 0) {\r\n                    // console.log(\"WOULD SPAWN\")\r\n                    setTimeout(() => this.building.populate(this.pos.add(this.building.pos)), 100)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public produceResource(res: ResourceBlock) {\r\n        this.product.push(res)\r\n        this.building.redeem(res)\r\n    }\r\n\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            allStructures,\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        let snapped = false\r\n        if (bldg) {\r\n            let spot = bldg.nextDevicePlace().position\r\n            let d = spot.distance(pos)\r\n            snapped = d < 150\r\n        }\r\n\r\n        if (snapped) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n        } else {\r\n            this.pos = pos\r\n        }\r\n\r\n        return snapped\r\n    }\r\n}","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    color: Color = Color.Gray\r\n    infra: boolean = false\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n\r\n    hide: boolean = false\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.fifth\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MediumSurfaceRoom ],\r\n        [Orientation.Right]: [  Dome, MediumSurfaceRoom ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.seventh\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea,\r\n            Ladder,\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea,\r\n            Ladder,\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n    infra = true\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.sixth\r\n    height = 20 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n    infra = true\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    description: string = 'Biome sweet biome';\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.sixth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n\r\n    prereqs = [\r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    height = major.fifth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    height = major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 2 * major.eighth\r\n    machines = midBelow\r\n}\r\n\r\nexport class MediumRoomThree extends CommonArea {\r\n    name = 'Mid Room (3)'\r\n    prereqs = [ MediumRoom ]\r\n    view = 'MediumRoomThreeView'\r\n    width = 3 * major.eighth\r\n    height = major.eighth\r\n\r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 4 * major.eighth\r\n    height = 2*major.eighth\r\n    machines = largeBelow\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class MediumSurfaceRoom extends Dome {\r\n    name = 'Mid Surf Bldg'\r\n    description = 'home away from home';\r\n\r\n    view: string = 'MediumSurfaceRoomView';\r\n\r\n    width: number = 4 * major.eighth\r\n    height: number = major.fifth\r\n\r\n    zoom = 0.1\r\n\r\n    prereqs = [ SmallDome ]\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel, MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ MainTunnel, MediumSurfaceRoom ],\r\n    }\r\n\r\n    machines = midBelow\r\n\r\n    hide = false // need another one which cares about connecting to roads...\r\n}\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = major.eighth\r\n    height = major.fourth\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 3 * major.fifth\r\n    height = 2*major.fifth\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 3 * major.seventh\r\n    height = 2 * major.seventh\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n\r\n}\r\n\r\n//////\r\n\r\n// export class MissionControl extends Structure {\r\n//     name: string = 'Mission Control';\r\n//     description: string = 'Keeping everything on track';\r\n//     view: string = 'MissionControlView';\r\n//     width: number = 6 * major.eighth\r\n//     height: number = 1 * major.sixth\r\n//     zoom = 0.1\r\n//     connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n//         [Orientation.Left]: [ SurfaceRoad ],\r\n//         [Orientation.Right]: [ SurfaceRoad ],\r\n//         [Orientation.Up]: [ MainTunnel ],\r\n//         [Orientation.Down]: [ MainTunnel ],\r\n//     }\r\n\r\n//     machines = [ CommandCenter ]\r\n// }\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n        MediumSurfaceRoom,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        MediumRoomThree,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine, Mainframe, CommandCenter, MissionLog, Botany, OrientationConsole, PersonnelRegistry, MineralProcessor, MiningDrill, HoloProjector, TimeCrystal, Couch, Statue } from './Machine';\r\nimport { Color } from 'excalibur';\r\nimport { Structure, MediumSurfaceRoom } from './Structure';\r\nimport { BackgroundPattern } from '../actors/Building/BackgroundPatterns';\r\n\r\nexport class SpaceFunction {\r\n     name: string = '(generic)'\r\n     description: string = '(generic description)'\r\n     machines: (typeof Machine)[] = []\r\n     color: Color = Color.Gray\r\n\r\n     prereqs: (typeof SpaceFunction)[] =  [] \r\n\r\n     structure: typeof Structure = null\r\n     hide: boolean = false\r\n     background: BackgroundPattern = BackgroundPattern.Beige\r\n\r\n     bonuses: {\r\n          capacity: number, // every store/generator gets this??\r\n          workSpeed: number, // 2 should double work speed (dur *= 1/multiplier)\r\n     } = {\r\n          capacity: 0, // boost cap by one\r\n          workSpeed: 1.00 // 20% bonus to work speed\r\n     }\r\n}\r\n\r\nexport class MissionControl extends SpaceFunction {\r\n     hide = true\r\n     name = 'Mission Control'\r\n     description = 'keeping everything on track'\r\n     structure = MediumSurfaceRoom\r\n     prereqs = [] //ComputerCore, Factory, Farm ]\r\n     machines = [ CommandCenter, MissionLog ]\r\n     background = BackgroundPattern.Window\r\n}\r\n\r\nexport class LivingQuarters extends SpaceFunction {\r\n     name = 'Living Quarters'\r\n     description = 'good night'\r\n     machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n     name = 'Barracks'\r\n     description = 'sleep tight'\r\n     machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nexport class Kitchen extends SpaceFunction {\r\n     name = 'Kitchen'\r\n     description = 'stay together'\r\n     machines = [ Stove, Fridge ]\r\n     bonuses = {\r\n          capacity: 2,\r\n          workSpeed: 1.1\r\n     }\r\n     background = BackgroundPattern.Checker\r\n}\r\n\r\nexport class LifeSupportPod extends SpaceFunction {\r\n     name = 'Life Support'\r\n     description = 'keep it going'\r\n     machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n     name = 'Retreat'\r\n     description = 'take it easy'\r\n     machines = [ Cabin, Cabin ]\r\n}\r\n\r\nexport class CloneMatrix extends SpaceFunction {\r\n     name = 'Clone Matrix'\r\n     description = 'clone home'\r\n     machines = [ CloningVat, CloningVat ]\r\n}\r\n\r\nexport class CloneReception extends SpaceFunction {\r\n     name = 'Clone Reception'\r\n     description = 'welcome clone'\r\n     machines = [ CloningVat, OrientationConsole, PersonnelRegistry ]\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n     name = 'Reading Room'\r\n     description = 'butterflies in the sky'\r\n     machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nexport class Library extends SpaceFunction {\r\n     name = 'Library'\r\n     description = 'take a look'\r\n     machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n     background = BackgroundPattern.Books\r\n}\r\n\r\nexport class Study extends SpaceFunction {\r\n     name = 'Study'\r\n     description = 'plan it out'\r\n     machines = [ StudyMachine, Bookshelf ]\r\n     background = BackgroundPattern.Wood\r\n}\r\n\r\nclass ComputerLab extends SpaceFunction {\r\n     name = 'Computer Lab'\r\n     description = 'make it happen'\r\n     machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nexport class Archive extends SpaceFunction {\r\n     name = 'Archive'\r\n     description = 'write it down'\r\n     machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n     name = 'Arboretum'\r\n     description = 'walk it out'\r\n     machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n     name = 'Algae Farm'\r\n     description = 'make do'\r\n     machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nexport class SolarArray extends SpaceFunction {\r\n     name = 'Solar Array'\r\n     description = 'warm up'\r\n     machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nexport class Workshop extends SpaceFunction {\r\n     name = 'Workshop'\r\n     description = 'take form'\r\n     machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\nclass Nursery extends SpaceFunction {\r\n     name = 'Nursery'\r\n     description = 'quiet please'\r\n     machines = [ Houseplant, Houseplant, Houseplant ]\r\n     background = BackgroundPattern.Leafy\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n     name = 'Farm'\r\n     description = 'food for the masses'\r\n     machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n     name = 'Factory'\r\n     description = 'production lines'\r\n     machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\n\r\nexport class ComputerCore extends SpaceFunction {\r\n     name = 'Computer Core'\r\n     description = 'let us calculate'\r\n     machines = [ Mainframe, Mainframe ]\r\n     background = BackgroundPattern.Tech\r\n}\r\n\r\nexport class LifeSciencesLab extends SpaceFunction {\r\n     name = 'Life Sciences Lab'\r\n     description = 'where do i come from'\r\n     machines = [ Botany, Botany ]\r\n}\r\n\r\nexport class Refinery extends SpaceFunction {\r\n     name = 'Refinery'\r\n     description = 'separation'\r\n     machines = [ MineralProcessor ]\r\n}\r\n\r\nexport class Mine extends SpaceFunction {\r\n     name = 'Mine'\r\n     description = 'ore from the stone'\r\n     machines = [ MiningDrill ]\r\n}\r\n\r\nexport class HoloMatrix extends SpaceFunction {\r\n     name = 'Hologram Matrix'\r\n     description = 'dream it'\r\n     machines = [ HoloProjector, HoloProjector ]\r\n}\r\n\r\nexport class TimeChamber extends SpaceFunction {\r\n     name = 'Time Chamber'\r\n     description = 'believe it'\r\n     machines = [ TimeCrystal, TimeCrystal ]\r\n}\r\n\r\n// export class DreamMatrix extends \r\n\r\nexport class LivingRoom extends SpaceFunction {\r\n     name = 'Living Room'\r\n     description = 'just relax'\r\n     machines = [ Couch, Couch ]\r\n}\r\n\r\nexport class Statuary extends SpaceFunction {\r\n     name = 'Statuary'\r\n     description = 'to remember'\r\n     machines = [ Statue, Statue, Statue ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    ComputerLab,\r\n\r\n    ComputerCore,\r\n\r\n    MissionControl,\r\n    LifeSciencesLab,\r\n\r\n    CloneReception,\r\n    \r\n    Refinery,\r\n    Mine,\r\n    HoloMatrix,\r\n    TimeChamber,\r\n\r\n    LivingRoom,\r\n    Statuary,\r\n]","import { Engine, DisplayMode, Loader, Timer, Color } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n  static citizenSpeed: number = 80\r\n  static debugPath: boolean = false\r\n  static startHour: number = 6;\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: Color.Black //world.skyColor\r\n    });\r\n  }\r\n\r\n  public start() {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n\r\n    return super.start(loader).then(() => {\r\n      console.log(\"Osiris running.\")\r\n    });\r\n  }\r\n}","import { Citizen } from \"../actors/Citizen\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { sleep } from \"../Util\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Recipe, MechanicalOperation } from \"../models/MechanicalOperation\";\r\n\r\nexport abstract class Strategy {\r\n    private sleepInterval: number = 250\r\n    protected isActive: boolean = false;\r\n    constructor(protected pawn: Citizen) { }\r\n\r\n    protected abstract async apply();\r\n    abstract canApply(): boolean;\r\n\r\n    protected get planet(): Planet { return this.pawn.currentPlanet; }\r\n    protected get devices(): Device[] { return this.planet.colony.findPoweredDevices(); }\r\n    protected get operations(): MechanicalOperation[] { return this.devices.map(d => d.operation); }\r\n    protected get recipes(): Recipe[] {\r\n        let recipes: Recipe[] = [];\r\n        this.operations.forEach(op => {\r\n            if (op.type === 'recipe') {\r\n                recipes.push(op);\r\n            }\r\n        });\r\n        return recipes;\r\n    }\r\n\r\n\r\n    async attempt(): Promise<void> {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n        if (!this.isActive) {\r\n            this.isActive = true\r\n            // note apply will need to set this.isActive around its critical section\r\n            await this.apply();\r\n            this.isActive = false\r\n        }\r\n\r\n        await this.pause()\r\n        // setInterval(() => { this.attempt() }, this.sleepInterval)\r\n    }\r\n\r\n    protected async pause() {\r\n        await sleep(this.sleepInterval)\r\n    }\r\n\r\n    protected async gatherBlock(res: ResourceBlock): Promise<boolean> {\r\n        console.debug(\"GATHER BLOCK\", { res })\r\n        let gathered = false\r\n        let generatesDesiredBlock = (d: Device) => (d.operation.type === 'generator') &&\r\n            d.product.some(stored => res === stored) //&& !d.inUse\r\n        let gen: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], generatesDesiredBlock)\r\n\r\n        let storesDesiredBlock = (d: Device) => (d.operation.type === 'store') &&\r\n              d.product.some(stored => res === stored) //&& !d.inUse\r\n        let store: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n\r\n        let device: Device = gen || store\r\n\r\n        if (device) {\r\n            // device.inUse = true\r\n            console.debug(\"Found device to gather, visting...\")\r\n            await this.visitDevice(device)\r\n\r\n            if (device.inUse) {\r\n                // at least wait a bit and try again?\r\n                let waitTimes = 0\r\n                while (device.inUse) {\r\n                    console.warn(\"waiting for device to be ready!\")\r\n                    await sleep(5000) //this.pause()\r\n                    if (waitTimes++ > 10) {\r\n                        return false \r\n                    }\r\n                }\r\n            }\r\n\r\n            console.debug(\"Attempt to interact with device...\")\r\n            if (await device.interact(this.pawn, retrieveResource(res))) {\r\n                console.debug(\"Interacted successfully!\")\r\n                gathered = true\r\n            }\r\n        } else {\r\n            console.warn(\"Didn't gather...\")\r\n            // don't work sub-recipes??\r\n            // let recipe = this.recipes.find(recipe => recipe.produces === res);\r\n            // if (recipe) {\r\n                // gathered = await this.workRecipe(recipe);\r\n                // gathered = true\r\n            // }\r\n        }\r\n\r\n        return gathered\r\n    }\r\n\r\n    protected async visitDevice(device: Device) {\r\n        await this.pawn.visit(device)\r\n    }\r\n\r\n\r\n    protected async workRecipe(recipe: Recipe): Promise<boolean> {\r\n        console.debug(\"Working recipe\", { product: recipe.produces })\r\n        let knowsRecipe = (d: Device) => d.operation === recipe && !d.reserved\r\n        let maker = this.planet.colony.closestDeviceByType(this.pawn.pos, [], knowsRecipe)\r\n        let made = false\r\n        if (maker) {\r\n            maker.reserved = true\r\n            // maker.inUse = true\r\n            if (await this.gatherIngredients(recipe.consumes)) {\r\n                await this.visitDevice(maker)\r\n                if (await this.performRecipeTask(maker, recipe)) {\r\n                    made = true\r\n                }\r\n            }\r\n            maker.reserved = false\r\n            // maker.inUse = false\r\n        }\r\n        // await this.pause()\r\n        // await this.workRecipe(recipe);\r\n        return made\r\n    }\r\n\r\n    protected async gatherIngredients(blocks: ResourceBlock[]): Promise<boolean> {\r\n        if (!this.pawn.isCarryingUnique(blocks)) {\r\n            console.debug(\"Gathering blocks...\")\r\n            for (let ingredient of blocks) {\r\n                console.debug(\"attempting to gather\", { ingredient })\r\n                let tries = 0\r\n                let gathered = false\r\n                while (!gathered && tries < 20) {\r\n                    tries += 1\r\n                    if (await this.gatherBlock(ingredient)) {\r\n                        gathered = true\r\n                    } else {\r\n                        await this.pause()\r\n                    }\r\n                }\r\n\r\n                if (!gathered) {\r\n                    console.warn(\"couldn't gather one of the ingredients!!\")\r\n                    return false\r\n                }\r\n                //else {\r\n                //    console.warn(\"didn't gather it!\")\r\n                //    return false\r\n                //}\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    protected async performRecipeTask(maker: Device, recipe: Recipe, timesToAttempt: number = 5) {\r\n        console.debug(\"Try to perform recipe task...\", { produces: recipe.produces })\r\n        let worked = await maker.interact(this.pawn, { type: 'work', recipe })\r\n        if (!worked) {\r\n            // await this.pause()\r\n            console.warn(\"waiting for machine to become available...\")\r\n            for (let i = 0; i < timesToAttempt; i ++) {\r\n                await this.pause()\r\n                if (await this.performRecipeTask(maker, recipe)) {\r\n                    worked = true\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return worked\r\n    }\r\n}","const raisedSquare = require('../../images/raised-square-bg.png')\r\nconst leafy = require('../../images/leafy-bg.png')\r\nconst bookish = require('../../images/books-bg.png')\r\nconst posters = require('../../images/poster-wall-bg.png')\r\nconst tech = require('../../images/tech-bg.png')\r\nconst checker = require('../../images/checker-bg.png')\r\nconst beige = require('../../images/beige-bg.png')\r\nconst window = require('../../images/window-bg.png')\r\nconst ussf = require('../../images/ussf.png')\r\nconst wood = require('../../images/wood-panel-bg.png')\r\n\r\ninterface Background {\r\n    image: HTMLImageElement\r\n    pattern: CanvasPattern\r\n    loading: boolean\r\n}\r\n\r\nconst loadBg = (path, scale = 1) => {\r\n    let background: Background = { image: null, pattern: null, loading: true }\r\n    background.image = new Image();\r\n    background.image.src = path\r\n    background.image.onload = function () {\r\n      background.loading = false\r\n    }\r\n    return { background, scale }\r\n}\r\n\r\nexport enum BackgroundPattern {\r\n    Leafy = 'Leafy',\r\n    Grid = 'Grid',\r\n    Books = 'Books',\r\n    Poster = 'Poster',\r\n    Tech = 'Tech',\r\n    Checker = 'Checker',\r\n    Beige = 'Beige',\r\n    Window = 'Window',\r\n    USSF = 'USSF',\r\n    Wood = 'Wood',\r\n}\r\n\r\nconst backgroundPatterns: { [ key in BackgroundPattern ]: { background: Background, scale: number } } = {\r\n    Leafy: loadBg(leafy),\r\n    Grid: loadBg(raisedSquare),\r\n    Books: loadBg(bookish),\r\n    Poster: loadBg(posters),\r\n    Tech: loadBg(tech),\r\n    Checker: loadBg(checker),\r\n    Beige: loadBg(beige),\r\n    Window: loadBg(window),\r\n    USSF: loadBg(ussf, 0.5),\r\n    Wood: loadBg(wood),\r\n}\r\n\r\nexport const getBackgroundPattern = (ctx: CanvasRenderingContext2D, p: BackgroundPattern) => {\r\n    let pattern = backgroundPatterns[p]\r\n    let bg = pattern.background\r\n    if (!bg.loading) {\r\n        if (!bg.pattern) {\r\n            let matrix = new DOMMatrix() //bg.pattern.cre //ctx. // new SVGMatrix()\r\n\r\n            // bg.image.scal\r\n            // bg.image.scale\r\n            bg.pattern = ctx.createPattern(bg.image, 'repeat');\r\n            bg.pattern.setTransform(matrix.scale(pattern.scale)) //0.5))\r\n\r\n        }\r\n        return bg.pattern\r\n    }\r\n}","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        let tries = 0\r\n        while (visited.length < this.nodes.length && tries++ < this.nodes.length * 20) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Texture, Sound } from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\nconst craterRock = require('./sounds/crater-rock.mp3')\r\nconst assembler = require('./sounds/assembler.mp3')\r\nconst indivision = require('./sounds/indivision.mp3')\r\nconst understanding = require('./sounds/understanding.mp3')\r\nconst futureTense = require('./sounds/future tense.mp3')\r\n// const isomer = require('./sounds/isomer.mp3')\r\n// const outbound = require('./sounds/outbound.mp3')\r\n\r\nlet Resources = {\r\n    Sword: new Texture(sword),\r\n\r\n    CraterRock: new Sound(craterRock),\r\n    Assembler: new Sound(assembler),\r\n    Indivision: new Sound(indivision),\r\n    Understanding: new Sound(understanding),\r\n    FutureTense: new Sound(futureTense),\r\n    // Isomer: new Sound(isomer),\r\n    // Outbound: new Sound(outbound),\r\n\r\n\r\n}\r\n\r\nexport { Resources }\r\n","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class EatingStrategy extends Strategy {}","import { EatingStrategy } from \"./EatingStrategy\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { Fridge, Desk } from \"../models/Machine\";\r\n\r\nexport class WhenHungryEatingStrategy extends EatingStrategy {\r\n    canApply(): boolean {\r\n        return this.pawn.isHungry &&\r\n            this.planet.storedResources.includes(ResourceBlock.Meal)\r\n        // hunger > 0.6\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    protected async apply() {\r\n        // find the store with the food! reserve it maybe?\r\n        let fridge = this.devices.find(d => d.machine.operation.type === 'store' &&\r\n          d.machine.operation.stores.includes(ResourceBlock.Meal) &&\r\n          d.product.includes(ResourceBlock.Meal) &&\r\n          !d.reserved\r\n        )\r\n\r\n        if (fridge) {\r\n            fridge.reserved = true\r\n            // take the meal to a desk? (maybe need table here... or eatingSurface aspect?)\r\n            await this.visitDevice(fridge)\r\n            await fridge.interact(this.pawn, { type: 'retrieve', resource: ResourceBlock.Meal })\r\n            fridge.reserved = false\r\n\r\n            let desk = this.devices.find(d => d.machine instanceof Desk)\r\n            if (desk) {\r\n                await this.visitDevice(desk)\r\n            }\r\n            await this.pawn.eat()\r\n            // fridge.interac\r\n            // this.pawn.interact()\r\n        }\r\n    }\r\n    \r\n    \r\n}","import { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class SleepingStrategy extends Strategy {\r\n\r\n}","import { SleepingStrategy } from \"./SleepingStrategy\";\r\nimport { Bed } from \"../models/Machine\";\r\nimport { shuffle } from \"../Util\";\r\n\r\nexport class AnyBedSleepingStrategy extends SleepingStrategy {\r\n    canApply(): boolean {\r\n        if (!this.pawn.isTired) {\r\n            return false\r\n        }\r\n\r\n        let bedtime = this.planet.hour > 20 || this.planet.hour < 4\r\n        return bedtime\r\n    }\r\n\r\n    protected async apply() {\r\n        // find a bed\r\n        let bed = shuffle(this.devices).find(d => d.machine instanceof Bed && !d.inUse)\r\n        if (bed) {\r\n            bed.inUse = true\r\n            await this.visitDevice(bed)\r\n        }\r\n        await this.pawn.takeRest(1000 * 24)\r\n        if (bed) { \r\n            bed.inUse = false\r\n        }\r\n        return true\r\n    }\r\n\r\n}","import { Strategy } from \"./Strategy\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { containsUniq } from \"../Util\";\r\n\r\nexport abstract class ConstructionStrategy extends Strategy {\r\n    canApply(): boolean {\r\n        return !!this.unbuiltDevice\r\n    }\r\n\r\n    get unbuiltDevice() {\r\n        const isUnbuilt = (d: Device) => !d.built && !d.inUse && d.building.isActive &&\r\n          // the player can TRY to build it, we don't have to hang forever on it though\r\n          containsUniq(this.planet.storedResources, d.machine.cost)\r\n        return this.planet.colony.findAllDevices().find(isUnbuilt)\r\n    }\r\n}","import { ConstructionStrategy } from \"./ConstructionStrategy\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nexport class ProxmityBasedConstruction extends ConstructionStrategy {\r\n    async apply() {\r\n        if (this.unbuiltDevice && this.unbuiltDevice.building) {\r\n            await this.constructDevice(this.unbuiltDevice)\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n    private async constructDevice(device: Device) {\r\n        device.inUse = true\r\n        let resources = device.machine.cost\r\n        if (await this.gatherIngredients(resources)) {\r\n            await this.visitDevice(device)\r\n            await device.assemble(this.pawn)\r\n        } \r\n\r\n        device.inUse = false\r\n    }\r\n}","import { ResourceBlock } from \"../models/Economy\";\r\n\r\nimport { Recipe } from \"../models/MechanicalOperation\";\r\n\r\nexport interface RetrieveResource {\r\n    type: 'retrieve'\r\n    resource: ResourceBlock\r\n    // count: number\r\n}\r\n\r\nexport interface WorkRecipe {\r\n    type: 'work'\r\n    recipe: Recipe\r\n}\r\n\r\nexport interface StoreResource {\r\n    type: 'store'\r\n    resource: ResourceBlock\r\n}\r\n\r\nexport function retrieveResource(res: ResourceBlock): RetrieveResource {\r\n    return {\r\n        type: 'retrieve',\r\n        resource: res,\r\n        // count: 1\r\n    }\r\n}\r\n\r\n\r\nexport type InteractionRequest = StoreResource | RetrieveResource | WorkRecipe; // | ...\r\n\r\n","import { Device } from \"../actors/Device\";\r\nimport { MechanicalOperation, Recipe } from \"../models/MechanicalOperation\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class ProductionStrategy extends Strategy {\r\n\r\n\r\n    protected async storeBlock(res: ResourceBlock) {\r\n        let storesDesiredBlock = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) && //operation.capacity &&\r\n            d.operation.stores.includes(res)\r\n        let openStore = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n        let stored = false\r\n        if (openStore) {\r\n            await this.visitDevice(openStore)\r\n            if (await openStore.interact(this.pawn, { type: 'store', resource: res })) {\r\n                stored = true\r\n            }\r\n        }\r\n\r\n        if (!stored) {\r\n            await this.pause()\r\n            await this.storeBlock(res)\r\n        }\r\n    }\r\n\r\n}\r\n","import { shuffle, containsUniq } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Recipe, ResourceStorage } from \"../models/MechanicalOperation\";\r\nimport { ProductionStrategy } from \"./ProductionStrategy\";\r\n\r\nexport class CapacityBasedProduction extends ProductionStrategy {\r\n    private findStore() {\r\n        const storeWithCapacity = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) //&&\r\n            // !d.inUse\r\n            // containsUniq(this.planet.storedResources, d.operation)\r\n        let store: Device = shuffle(this.devices).find(storeWithCapacity)\r\n        return store\r\n    }\r\n\r\n    canApply(): boolean {\r\n        // throw new Error(\"Method not implemented.\");\r\n        return !!this.findStore()\r\n    }\r\n\r\n    async apply() {\r\n        let store = this.findStore()\r\n\r\n        if (store && store.operation.type === 'store') {\r\n            // store.inUse = true\r\n            const storage: ResourceStorage = store.operation\r\n            const recipeForStoredResource = (r: Recipe) => storage.stores.some(stored => r.produces === stored)\r\n            let recipe: Recipe = shuffle(this.recipes).find(recipeForStoredResource)\r\n            if (recipe && containsUniq(this.planet.storedResources, recipe.consumes)) {\r\n                if (await this.workRecipe(recipe)) {\r\n                    await this.storeBlock(recipe.produces)\r\n                }\r\n            }\r\n            // store.inUse = false\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons, deleteByValueOnce, sleep, containsUniq, deleteByValue } from \"../Util\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { ProductionStrategy } from \"../strategies/ProductionStrategy\";\r\nimport { CapacityBasedProduction } from \"../strategies/CapacityBasedProduction\";\r\nimport { drawStar, drawRect } from \"../Painting\";\r\nimport { ConstructionStrategy } from \"../strategies/ConstructionStrategy\";\r\nimport { ProxmityBasedConstruction } from \"../strategies/ProximityBasedConstruction\";\r\nimport { SleepingStrategy } from \"../strategies/SleepingStrategy\";\r\nimport { AnyBedSleepingStrategy } from \"../strategies/AnyBedSleepingStrategy\";\r\nimport { EatingStrategy } from \"../strategies/EatingStrategy\";\r\nimport { WhenHungryEatingStrategy } from \"../strategies/WhenHungryEatingStrategy\";\r\n\r\nexport class Citizen extends Actor {\r\n    isPlanning: boolean = false // \r\n\r\n    // walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock[] = [] // null\r\n    path: Vector[] = []\r\n\r\n    private workInProgress: boolean = false\r\n    private workStarted: number\r\n    private workDuration: number\r\n    private progress: number\r\n\r\n    private sleeping: boolean = false\r\n\r\n\r\n    private productionStrategy: ProductionStrategy\r\n    private constructionStrategy: ConstructionStrategy\r\n    private sleepingStrategy: SleepingStrategy\r\n    private eatingStrategy: EatingStrategy\r\n\r\n    private hunger: number = 0.0;\r\n    private energy: number = 100\r\n\r\n    constructor(private home: Vector, protected planet: Planet, private elite: boolean = false) {\r\n        super(home.x, home.y, Scale.minor.first, Scale.minor.fourth, Color.White.clone())\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.productionStrategy = new CapacityBasedProduction(this)\r\n        this.constructionStrategy = new ProxmityBasedConstruction(this)\r\n        this.sleepingStrategy = new AnyBedSleepingStrategy(this)\r\n        this.eatingStrategy = new WhenHungryEatingStrategy(this)\r\n    }\r\n\r\n    get isHungry() { return this.hunger > 0.6 }\r\n    get isTired()  { return this.energy < 85 }\r\n\r\n    // get isWorking() { return this.isWorking }\r\n    get currentPlanet() { return this.planet }\r\n\r\n    get walkSpeed() {\r\n        let speedMultiplier = this.planet.timeFactor * (this.elite ? 1.6 : 1)\r\n        return Game.citizenSpeed * speedMultiplier\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // make sure we are busy!\r\n        this.work()\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = \r\n              Math.min(\r\n                  (now - this.workStarted) / this.workDuration,\r\n                  1\r\n              )\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        ctx.save()\r\n        // ctx.globalAlpha = 1.0\r\n        ctx.translate(this.x, this.y - this.getHeight()/2 - 5)\r\n        if (this.sleeping) {\r\n            ctx.rotate(-Math.PI / 2);\r\n            ctx.translate(-10, -10)\r\n        }\r\n        // ctx.globalAlpha = 1.0 //?\r\n        drawRect(\r\n            ctx,\r\n            { x: 0, y: 0, width: this.getWidth(), height: this.getHeight() },\r\n            0,\r\n            Color.White\r\n        )\r\n\r\n        if (this.elite) {\r\n            // draw a little star?\r\n            drawStar(ctx, 8, -5)\r\n        }\r\n\r\n        // super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            let dx = 5\r\n            // if (this.vel.x < 0) { dx = -5 }\r\n            this.carrying.forEach((carried, idx) => {\r\n                ctx.fillStyle = blockColor(carried).clone().saturate(0.2).toRGBA()\r\n                ctx.fillRect(dx, 2 - 4 * idx, 5, 5)\r\n            })\r\n        }\r\n        ctx.restore()\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            ctx.strokeRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n        }\r\n\r\n        // let debugPath = true\r\n        if (this.path && Game.debugPath) {\r\n            let c = Color.White.clone().lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 4\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        this.workInProgress = false\r\n    }\r\n\r\n\r\n    carry(c: ResourceBlock) {\r\n        this.carrying.push(c);\r\n    }\r\n\r\n    isCarryingUnique(resources: ResourceBlock[]): boolean {\r\n        let isCarrying = containsUniq(this.carrying, resources)\r\n        return isCarrying\r\n    }\r\n\r\n    drop(res: ResourceBlock): ResourceBlock {\r\n        if (this.carrying.length > 0) {\r\n            if (this.carrying.find(r => r === res)) {\r\n                deleteByValueOnce(this.carrying, res)\r\n                return res\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    currentBuilding: Building = null\r\n    async visit(device: Device) {\r\n        if (this.currentBuilding != device.building) {\r\n            const path = this.planet.pathBetweenPoints(this.pos.clone(), device.pos.add(device.building.pos))\r\n            await this.followPath(path)\r\n        }\r\n        let target = device.pos.add(device.building.pos)\r\n        await this.glideTo(target)\r\n        this.currentBuilding = device.building\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        if (pos) {\r\n            return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n        }\r\n    }\r\n\r\n    async followPath(path: Vector[]) {\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = []\r\n        }\r\n    }\r\n    \r\n    protected get strategies() {\r\n        return [\r\n            this.sleepingStrategy,\r\n            this.eatingStrategy,\r\n            this.constructionStrategy,\r\n            this.productionStrategy\r\n        ]\r\n    }\r\n\r\n    async work() {\r\n        if (this.isPlanning || this.sleeping) { return }\r\n\r\n        this.isPlanning = true\r\n        // just get rid of it??\r\n        if (this.carrying.length > 0) { this.carrying = [] }\r\n        let choice = this.strategies.find(strat => strat.canApply())\r\n        if (choice) {\r\n            await choice.attempt()\r\n            this.energy -= 5\r\n            this.hunger += 0.04\r\n        }\r\n        this.isPlanning = false\r\n    }\r\n\r\n    async takeRest(duration: number) {\r\n        console.log(\"Citizen taking a well-deserved rest!!\")\r\n        this.sleeping = true\r\n        await this.progressBar(duration)\r\n        this.energy = 100\r\n        this.sleeping = false\r\n    }\r\n\r\n    async eat() {\r\n        console.log(\"Citizen eating a meal!\")\r\n        // this.eating = true\r\n        await this.progressBar(4000)\r\n        deleteByValueOnce(this.carrying, ResourceBlock.Meal)\r\n        this.hunger = 0\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(pos, elite: boolean = false) {\r\n        let citizen = new Citizen(pos, this.planet, elite);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { Game } from '../../Game';\r\n\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = Game.debugPath\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.placed = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0] //.length > 1 ? destination.nodes()[1] : destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination; //.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        // console.log(\"PATH FOUND BTWN POINTS\", { srcNode, destNode, path })\r\n        return path;\r\n    }\r\n\r\n\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findPoweredDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d.pos.add(d.building.pos))\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings[0] //.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices(): Device[] {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n\r\n    findPoweredDevices(): Device[] {\r\n        return flatSingle(this.activeBuildings.map(b => b.getDevices()))\r\n            .filter(d => d.built) /// ....\r\n    }\r\n\r\n    protected get activeBuildings() {\r\n        return this.buildings.filter(b => b.isActive)\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range, mixColors } from '../../Util';\r\nimport { drawRect } from '../../Painting';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 1500, color)\r\n    }\r\n}\r\n\r\nexport class MountainLayers extends PlanetBackground {\r\n    layers: {\r\n        baseY: number,\r\n        // color: Color,\r\n        deltas: number[]\r\n    }[] = []\r\n\r\n    skyColor: Color = Color.Blue.clone()\r\n    layerHeight: number = 48\r\n    layerCount = 3\r\n    peakCount = 200\r\n\r\n    get peakWidth() {\r\n        return Math.floor(this.getWidth() / this.peakCount)\r\n    }\r\n\r\n    onInitialize() {\r\n        let min = -this.layerHeight\r\n        for (let layerIndex of range(this.layerCount)) {\r\n            this.layers.unshift({\r\n                baseY: -this.layerHeight - (20 * layerIndex),\r\n                deltas: this.genPeaks(layerIndex)\r\n            })\r\n        }\r\n    }\r\n\r\n    draw(ctx, delta) {\r\n        let wc = this.color.clone() //.lighten(0.1)\r\n        let sc = this.skyColor.clone() //.lighten(0.1)\r\n\r\n        let ndx = 1\r\n        let ls = this.layers.slice()\r\n        for (let layer of ls) {\r\n            let c = mixColors(wc, sc, (ndx / (this.layers.length+1)))\r\n            this.drawLayer(ctx, layer, c.lighten(0.1))\r\n            ndx += 1\r\n        }\r\n    }\r\n\r\n    private drawLayer(ctx, layer, color) {\r\n        let ox = -this.getWidth()/2, oy = this.pos.y + layer.baseY \r\n        let c = color.clone()\r\n\r\n        ctx.beginPath()\r\n        ctx.moveTo(ox, oy)\r\n        let ndx = 0\r\n        for (let delta of layer.deltas) {\r\n            ctx.lineTo(ox + (ndx * this.peakWidth), oy + delta)\r\n            ndx += 1\r\n        }\r\n        ctx.lineTo(ox + (this.peakCount * this.peakWidth), oy)\r\n        ctx.lineTo(ox + (this.peakCount * this.peakWidth), oy + this.layerHeight)\r\n        ctx.lineTo(ox, oy+this.layerHeight)\r\n        ctx.closePath()\r\n        c.a = 1\r\n        ctx.fillStyle = c.toRGBA()\r\n        ctx.fill()\r\n    }\r\n\r\n    private genPeaks(n) {\r\n        let dMax = 2*(this.layerHeight/3)\r\n        let deltas = []\r\n        let randomDelta = () => (Math.random() * (dMax)) - (dMax/2)\r\n        let last = 0\r\n        let maxDiff = 10 + (n*2)\r\n        for (let times in range(this.peakCount)) {\r\n            let curr = randomDelta()\r\n            let pick = Math.max(\r\n                   last - maxDiff,\r\n                   Math.min(curr, last + maxDiff),\r\n               )\r\n            deltas.push(\r\n               pick\r\n            )\r\n            last = pick\r\n        }\r\n        return deltas\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 10;\r\n        let peakHeight = 3600;\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(2)) {\r\n            let heightRange = 100;\r\n            let drift = 3 * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, (Math.random() * peakHeight) + ((Math.random() * heightRange) - (heightRange / 2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.35); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = baseColor.lighten(0.1) // this.color.saturate(0.2).lighten(0.1)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range, flatSingle, mixColors } from '../../Util';\r\nimport { Mountains, MountainLayers } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { MechanicalOperation } from '../../models/MechanicalOperation';\r\nimport { World } from '../../models/World';\r\n\r\nexport class Planet extends Actor {\r\n    mountains: Mountains\r\n    mountainLayers: MountainLayers\r\n    backMountainLayers: MountainLayers\r\n\r\n    colony: Colony\r\n    population: Population\r\n    // baseColor: Color\r\n    sky: Actor\r\n\r\n    constructor(\r\n        public world: World,\r\n        public hud: Hud,\r\n        // public color: Color,\r\n        private onBuildingHover: (b: Building) => any,\r\n        private onDeviceHover: (d: Device) => any,\r\n        private w: number = 250000,\r\n        private depth: number = 50000,\r\n        ) {\r\n        super(0, depth/2, w, depth, world.color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        this.sky = new Actor(0,-depth,w,depth, world.skyColor)\r\n        this.add(this.sky)\r\n\r\n        let yBase = -depth/2\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.45))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n        let c = this.color.clone()\r\n\r\n        this.backMountainLayers = new MountainLayers(\r\n                -depth / 2 - 50,\r\n                this.getWidth(),\r\n                world.skyColor\r\n            )\r\n        this.add(this.backMountainLayers)\r\n        this.mountains=new Mountains(-depth/2, this.getWidth(), world.skyColor) //.lighten(0.15)))\r\n        this.add(this.mountains)\r\n\r\n        this.mountainLayers = new MountainLayers(\r\n                -depth / 2,\r\n                this.getWidth(),\r\n                this.color.lighten(0.1)\r\n            )\r\n            this.mountainLayers.skyColor = world.skyColor\r\n        this.add(this.mountainLayers)\r\n\r\n        this.colony = new Colony(0,-depth/2)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n\r\n    }\r\n\r\n\r\n    private currentHour: number\r\n    get hour() { return this.currentHour }\r\n\r\n    setTime(time: number) {\r\n        this.hour = (Math.floor(time / 60)) % 24\r\n\r\n        let nextHour = this.hour + 1\r\n\r\n        let minute = Math.floor(time % 60)\r\n        let inc = (minute / 60)\r\n        // console.log({ hour: this.hour, nextHour: nextHour, minute, inc })\r\n\r\n        let oldC = this.skyColorForHour(this.hour),\r\n            newC = this.skyColorForHour(nextHour)\r\n\r\n        let mixC = mixColors(newC, oldC, inc)\r\n\r\n        this.sky.color = mixC\r\n\r\n        this.mountainLayers.skyColor = this.sky.color.lighten(0.06)\r\n        //   mixColors(\r\n        //       this.sky.color.lighten(0.16),\r\n        //       this.color.lighten(0.24),\r\n        //       0.8\r\n        //   )\r\n               //.lighten(0.04) //.lighten(0.02)\r\n        this.mountains.color = this.sky.color.lighten(0.06)\r\n\r\n        this.backMountainLayers.color = this.sky.color.lighten(0.12) //.saturate(0.12) //.darken(0.08) //.lighten(0.04) //.lighten(0.02)\r\n        this.backMountainLayers.skyColor = this.sky.color.lighten(0.24) //.desaturate(0.24)\r\n    }\r\n\r\n    skyColorForHour(hour: number) {\r\n        let c = this.world.skyColor.clone().darken(0.2).desaturate(0.1)\r\n\r\n        let colorMap = {\r\n            night: c.darken(0.7),\r\n            dawn: c.darken(0.2),\r\n            morning: c.lighten(0.1),\r\n            afternoon: c.lighten(0.2).desaturate(0.1),\r\n            evening: c,\r\n        }\r\n\r\n        let result: Color = null\r\n        if (hour >= 5 && hour < 8) { // dawn\r\n            let inc = (hour - 6) / 5\r\n            result = colorMap.dawn.lighten(inc)\r\n        } else if (hour >= 8 && hour < 12) { // morning\r\n            let inc = (hour - 8) / 24\r\n            result = colorMap.morning.lighten(inc)\r\n        } else if (hour >= 12 && hour < 14) { // early afternoon\r\n            result = colorMap.afternoon //.darken(inc)\r\n        } else if (hour >= 14 && hour < 18) {  // late afternoon\r\n            let inc = (hour - 14) / 16\r\n            result = colorMap.afternoon.darken(inc)\r\n        } else if (hour >= 18 && hour < 23) { // evening\r\n            let inc = (hour - 18) / 10\r\n            result = colorMap.evening.darken(inc)\r\n        } else if (hour >= 23) { // late night\r\n            result = colorMap.night\r\n        } else if (hour < 5) { // early morning\r\n            result = colorMap.night\r\n        }\r\n        return result\r\n    }\r\n\r\n    set hour(hour: number) {\r\n        this.currentHour = hour\r\n    }\r\n\r\n    set currentlyViewing(buildingOrDevice: Building | Device) {\r\n        if (buildingOrDevice instanceof Building) {\r\n            let b: Building = buildingOrDevice\r\n            this.onBuildingHover(b)\r\n        } else if (buildingOrDevice instanceof Device) {\r\n            let d: Device = buildingOrDevice\r\n            this.onDeviceHover(d)\r\n        }\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        // let devices = this.colony.findPoweredDevices()\r\n        // let economies = devices.map((d: Device) => d.machine.economy)\r\n\r\n        let buildings = this.colony.buildings\r\n        let economies = buildings.map(b => b.economy())\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    spend(resource: ResourceBlock): any {\r\n        this.hud.resourceExpended(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector, elite: boolean = false) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            // console.log(\"POPULATIN'!\")\r\n            // let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(pos, elite) //home)\r\n        } else {\r\n            console.warn(\"too many citizens already to populate more!\")\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [ PureValue.Shelter, PureValue.Water, PureValue.Oxygen ]\r\n        return Math.max(0, Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        ))\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n       return this.colony.pathBetweenPoints(origin, destination)\r\n    }\r\n\r\n    get timeFactor() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let ops: MechanicalOperation[] = devices.map(d => d.operation) //.filter(op => op.type === 'accelerate')\r\n        return ops\r\n            .map(op => op.type === 'accelerate' ? op.factor : 1)\r\n            .reduce((acc, val) => val * acc, 1.0)\r\n    }\r\n\r\n    get storedResources(): ResourceBlock[] {\r\n        let devices = this.colony.findAllDevices()\r\n        return flatSingle(devices.map(d => d.product))\r\n    }\r\n}","import { Color } from \"excalibur\";\r\nimport { EntityKind } from \"../../values/Entity\";\r\n\r\nclass PaletteGroup {\r\n\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(private name: string, private all: EntityKind[], private comprehend = true) {\r\n    }\r\n}\r\n\r\nexport class Palette {\r\n    private _element: HTMLDivElement;\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(\r\n        private name: string,\r\n        private x: number,\r\n        private y: number,\r\n        private all: EntityKind[],\r\n        private onButtonClick: (EntityKind) => any = null,\r\n        private onButtonEnter: (EntityKind) => any = null,\r\n        private comprehend = true \r\n    ) {\r\n        this.makePalette();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    updateBuilt(built: (EntityKind)[]) {\r\n        this.built = built;\r\n        if (this.comprehend) {\r\n            this.comprehended = this.all.filter((e: EntityKind) => {\r\n                let s = new e();\r\n                let prereqs: (EntityKind)[] = s.prereqs;\r\n                return prereqs.every((prereq: EntityKind) => {\r\n                    let built = this.built.some((s: EntityKind) => s === prereq);\r\n                    return built;\r\n                });\r\n            });\r\n        } else {\r\n            this.comprehended = this.built\r\n        }\r\n        this.makePalette();\r\n    }\r\n\r\n    dragging: boolean = false\r\n    private makePalette() {\r\n        if (this._element) {\r\n            this._element.parentElement.removeChild(this._element);\r\n        }\r\n        if (!(this.comprehended.length > 0)) { return }\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.display = 'flex';\r\n        this._element.style.flexWrap = 'wrap';\r\n        this._element.style.width = '200px';\r\n        this._element.style.border = 'none'; //1px solid black'; //0.5px solid white';\r\n\r\n        this._element.addEventListener('mousedown', (e) => { //.onmousedown = (e) => {\r\n            // alert('click palette')\r\n            this.dragging = true\r\n            console.log(\"START DRAG\")\r\n        })\r\n        document.addEventListener('onmousemove', (e: MouseEvent) => {\r\n            if (this.dragging) {\r\n                this.x = e.clientX\r\n                this.y = e.clientY\r\n            }\r\n        })\r\n\r\n        document.addEventListener('onmouseup', (e) => {\r\n            if (this.dragging) { this.dragging = false }\r\n        })\r\n        // title.onmousemove = (e) => {\r\n        //     if (this.dragging) {\r\n        //         this.x = e.clientX\r\n        //         this.y = e.clientY\r\n        //     }\r\n        // }\r\n        // this._element.onmouseup = (e) => {\r\n        //     this.dragging = false\r\n        //     console.log(\"DRAG END\") \r\n        // }\r\n\r\n        document.body.appendChild(this._element);\r\n\r\n        if (this.name) {\r\n            let title = document.createElement('div')\r\n            title.textContent = this.name\r\n            title.style.fontFamily = 'Verdana'\r\n            title.style.fontSize = '7pt'\r\n            title.style.fontWeight = '400'\r\n            title.style.width = '200px'\r\n            title.style.color = Color.White.toRGBA()\r\n            title.style.backgroundColor = Color.Violet.darken(0.92).toRGBA()\r\n            title.style.padding = '4px'\r\n            title.style.margin = '0px'\r\n            \r\n            this._element.appendChild(\r\n                title\r\n            )\r\n        }\r\n\r\n        this.comprehended\r\n            .map((elem: EntityKind) => new elem())\r\n            .sort((a, b) => a.color > b.color ? -1 : 1)\r\n            .forEach(elem => {\r\n                if (elem.hide) { return }\r\n                let label = elem.name;\r\n                if (!this.built.map(m => new m().name).includes(elem.name)) {\r\n                    label += ' *';\r\n                }\r\n                let clr = elem.color;\r\n                let btn = this.buttonFactory(label, clr);\r\n                this._element.appendChild(btn);\r\n                if (this.onButtonEnter) {\r\n                    btn.onmouseenter = () => { this.onButtonEnter(elem); };\r\n                }\r\n                if (this.onButtonClick) {\r\n                    btn.onclick = () => { this.onButtonClick(elem); };\r\n                }\r\n            });\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.5).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = label;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '6pt';\r\n        paletteButton.style.fontFamily = 'Verdana';\r\n        paletteButton.style.fontWeight = '500';\r\n        paletteButton.style.padding = '2px';\r\n        paletteButton.style.width = '100px';\r\n        paletteButton.style.textTransform = 'uppercase';\r\n        paletteButton.style.border = 'none' //1px solid rgba(255,255,255,0.08)';\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA();\r\n            paletteButton.style.color = fg.toRGBA();\r\n        };\r\n        return paletteButton;\r\n    }\r\n}\r\n","import { Label, Actor, FontStyle, Color } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { PureValue, Economy, ResourceBlock } from \"../../models/Economy\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nimport { countOccurrences, flatSingle } from \"../../Util\";\r\n\r\nexport class CardBody extends Actor {\r\n    description: Label\r\n    values: Label\r\n    notes: Label\r\n    footer: Label\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 0, 0)\r\n        // resources / recipes\r\n\r\n        this.values = new Label('')\r\n        this.values.fontSize = 10\r\n        this.add(this.values)\r\n\r\n        this.notes = new Label('behavioral notes', 0, 30)\r\n        this.notes.fontSize = 11\r\n        this.add(this.notes)\r\n\r\n        this.description = new Label('description', 0, 60)\r\n        this.description.fontSize = 12\r\n        this.description.fontStyle = FontStyle.Italic\r\n        this.description.color = Color.DarkGray\r\n        this.add(this.description)\r\n\r\n        this.footer = new Label('footer', 20, 80)\r\n        this.footer.fontSize = 10\r\n        this.footer.fontStyle = FontStyle.Italic\r\n        this.add(this.footer)\r\n\r\n        this.show(entity)\r\n    }\r\n\r\n    describeResources = (arr: ResourceBlock[]) => {\r\n        let freqs = countOccurrences(arr)\r\n        return Object.keys(freqs)\r\n            .map(elem => `${elem} x${freqs[elem]}`)\r\n            .join(' + ')\r\n    }\r\n\r\n    show(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        if (entity) {\r\n            this.description.text = entity.description;\r\n\r\n            if (entity instanceof Machine || entity instanceof Device) {\r\n                this.values.text =  this.describeEconomy(entity.economy)\r\n                // let footerNotes = []\r\n                let resourceDescription = entity instanceof Machine\r\n                    ? `Cost: ${this.describeResources(entity.cost)}`\r\n                    : (entity.built ? this.describeResources(entity.product) : 'under construction')\r\n                let forDome = entity instanceof Machine ? entity.forDome : entity.machine.forDome\r\n                let domeStatus = `For Dome: ${forDome ? 'Yes' : 'No'}`\r\n                this.footer.text = resourceDescription === ''\r\n                    ? domeStatus\r\n                    : [resourceDescription, domeStatus].join(' | ') \r\n                this.notes.text = '' //\r\n                let op = entity.operation\r\n                if (op) {\r\n                    if (op.type === 'recipe') {\r\n                        this.notes.text = `Turns ${op.consumes.join(' + ')} -> ${op.produces}.`\r\n                    } else if (op.type === 'generator') {\r\n                        this.notes.text = `Generates ${op.generates}.`\r\n                    } else if (op.type === 'store') {\r\n                        this.notes.text = `Stores ${op.stores.join(' + ')}`\r\n                    } else if (op.type === 'spawn') {\r\n                        this.notes.text = 'Decants clones.'\r\n                    }\r\n                }\r\n            } else if (entity instanceof SpaceFunction) {\r\n                let { capacity, workSpeed } = entity.bonuses\r\n                let bonusMessages = [];\r\n                if (capacity > 0) {\r\n                    bonusMessages.push(`+${capacity} cap`)\r\n                }\r\n                if (workSpeed > 1.0) {\r\n                    bonusMessages.push(`+${Math.floor((workSpeed*100)-100)}% efficiency` )\r\n                }\r\n                this.values.text = bonusMessages.join('; ') \r\n                this.notes.text = entity.machines.map(m => (new m()).name).join(' + ')\r\n                this.footer.text = ''\r\n            } else if (entity instanceof Building) {\r\n                this.values.text =  this.describeEconomy(entity.economy(false))\r\n                this.notes.text = entity.getDevices().map(d => d.machine.name).join(' + ')\r\n\r\n                let product = entity.getDevices()\r\n                    .map(d => d.product)\r\n                    .reduce((a, b) => a.concat(b), [])\r\n                this.footer.text = product.length > 0\r\n                    ? \"Currently contains: \" + this.describeResources(product)\r\n                    : ''\r\n            } else {\r\n                this.values.text = ''\r\n                this.notes.text = ''\r\n                this.footer.text = ''\r\n            }\r\n\r\n        }\r\n        // other bonuses? behaviors?\r\n    }\r\n\r\n    private describeEconomy(e: Economy): string {\r\n        let values = []\r\n        let econ = e // entity.economy\r\n        for (let value in PureValue) {\r\n            let { supply, demand } = econ[value]\r\n            let delta = supply - demand\r\n            if (delta > 0) {\r\n                values.push(`+${delta} ${value}`)\r\n            } else if (delta < 0) {\r\n                values.push(`${delta} ${value}`)\r\n            }\r\n        }\r\n        return values.join(' | ')\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nexport class CardTitle extends Actor {\r\n    \r\n    name: Label;\r\n    type: Label;\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 14, 32, entity && entity.color || Color.Gray);\r\n        this.name = new Label(entity && entity.name || '..', 20, 16)\r\n        this.name.fontSize = 28\r\n        this.name.color = Color.Black\r\n        this.add(this.name)\r\n\r\n        this.type = new Label('..', 220, 18)\r\n        this.type.fontSize = 10\r\n        this.type.color = Color.Gray\r\n        this.type.fontStyle = FontStyle.Italic\r\n        this.add(this.type)\r\n\r\n        if (entity) {\r\n            this.announce(entity)\r\n        }\r\n    }\r\n\r\n    announce(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.name.text = entity.name\r\n        this.color = entity.color.desaturate(0.5).darken(0.2)\r\n        if (entity instanceof Machine) { this.type.text = `${DeviceSize[entity.size]} Machine Type` }\r\n        if (entity instanceof Structure) { this.type.text = 'Structure' }\r\n        if (entity instanceof SpaceFunction) { this.type.text = 'Function' }\r\n        if (entity instanceof Building) { this.type.text = 'Building' }\r\n        if (entity instanceof Device) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { CardTitle } from \"./CardTitle\";\r\nimport { CardBody } from \"./CardBody\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\n\r\nexport class Card extends Actor {\r\n    title: CardTitle\r\n    cardBody: CardBody\r\n    image: any\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x + 160, y + 90, 320, 180, Color.White);\r\n        let x0 = -150, y0 = -50;\r\n        this.title = new CardTitle(entity, x0 - 3, y0); //x, y)\r\n        this.add(this.title);\r\n        this.cardBody = new CardBody(entity, x0 + 14, y0 + 40)\r\n        this.add(this.cardBody)\r\n\r\n        this.image = new Image();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        if (this.entity) {\r\n            if (this.entity instanceof Machine) {\r\n                let ix = this.pos.x + 48, iy = this.pos.y - 16\r\n                let isz = 92\r\n                ctx.drawImage(this.image, ix, iy, isz, isz)\r\n            }\r\n        }\r\n    }\r\n\r\n    present(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.title.announce(entity)\r\n        this.cardBody.show(entity)\r\n\r\n        this.entity = entity\r\n        if (this.entity instanceof Machine) { //} || this.entity instanceof Device) {\r\n            this.image.src = this.entity.image\r\n        } else if (this.entity instanceof Device) {\r\n            this.image.src = this.entity.machine.image\r\n        }\r\n    }\r\n\r\n}\r\n","import { Sound, Color } from \"excalibur\";\r\nimport { sample } from \"../../Util\";\r\n\r\ninterface MusicPlayerPlay { type: 'play'}\r\ninterface MusicPlayerPause { type: 'pause'}\r\ninterface MusicPlayerStop { type: 'stop'}\r\ninterface MusicPlayerNext { type: 'next'}\r\ntype MusicPlayerAction = MusicPlayerPlay | MusicPlayerPause | MusicPlayerStop | MusicPlayerNext\r\n\r\nexport class MusicPlayer {\r\n    private _wrapper: HTMLDivElement;\r\n    private _element: HTMLDivElement;\r\n    private _titleElem: HTMLSpanElement;\r\n\r\n    currentTrack: string\r\n    paused: boolean = false\r\n\r\n    constructor(private x: number, private y: number, private playlist: {\r\n        [track: string]: Sound;\r\n    }) {\r\n        this.makePlayer();\r\n        setTimeout(() => { this.startMusic() }, 3000)\r\n        this._titleElem.textContent = `Getting ready...`;\r\n        this.currentTrack = sample(Object.keys(this.playlist)); //[0];\r\n    }\r\n\r\n    startMusic() {\r\n        this._titleElem.textContent = `Playing: ${this.currentTrack}`;\r\n        this.playlist[this.currentTrack].play()\r\n        .then(() => {\r\n                this.advancePlaylist()\r\n        })\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._wrapper.style.left = `${left + this.x}px`;\r\n            this._wrapper.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    private makePlayer() {\r\n        this._wrapper = document.createElement('div')\r\n        this._wrapper.style.position = 'absolute'\r\n        this._wrapper.style.width = '20%'\r\n        this._wrapper.style.textAlign = 'left'\r\n        this._wrapper.style.border = 'none';\r\n        document.body.appendChild(this._wrapper);\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.display = 'inline-block';\r\n        this._element.style.border = 'none';\r\n        this._wrapper.appendChild(this._element)\r\n\r\n        this._titleElem = document.createElement('span');\r\n        this._titleElem.style.fontFamily = 'Verdana';\r\n        this._titleElem.style.fontSize = '7pt';\r\n        this._titleElem.style.padding = '24px'\r\n        this._titleElem.style.color = 'white';\r\n        this._wrapper.appendChild(this.inlineBlock(this._titleElem));\r\n\r\n        let play = this.iconFactory({ type: 'play' }, '&#9655;')\r\n        this._wrapper.appendChild(this.inlineBlock(play));\r\n\r\n        let pause = this.iconFactory({ type: 'pause' }, '&#10072; &#10072;')\r\n        this._wrapper.appendChild(this.inlineBlock(pause))\r\n\r\n        let next = this.iconFactory({ type: 'next' }, '&rarr;')\r\n        this._wrapper.appendChild(this.inlineBlock(next))\r\n\r\n    }\r\n\r\n    handleAction(action: MusicPlayerAction) {\r\n        if (action.type === 'pause') {\r\n            this.song.pause()\r\n            this.paused = true\r\n            this._titleElem.textContent = `Paused: ${this.currentTrack}`;\r\n        } else if (action.type === 'play') {\r\n            this.song.play()\r\n            this.paused = false\r\n            this._titleElem.textContent = `Playing: ${this.currentTrack}`;\r\n        } else if (action.type === 'next') {\r\n            if (this.paused) {\r\n                this.song.play()\r\n                this.paused = false\r\n            }\r\n            this.song.stop()\r\n        }\r\n    }\r\n\r\n    advancePlaylist() {\r\n        let ndx = this.trackNames.indexOf(this.currentTrack)\r\n        ndx = (ndx + 1) % this.trackNames.length\r\n        this.currentTrack = this.trackNames[ndx]\r\n        this.startMusic()\r\n    }\r\n\r\n    get trackNames() { return Object.keys(this.playlist) }\r\n    get song() { return this.playlist[this.currentTrack] }\r\n\r\n    private inlineBlock(elem) {\r\n        let block = document.createElement('div');\r\n        block.style.display = 'inline-block';\r\n        block.style.border = 'none';\r\n        block.append(elem)\r\n        return block\r\n    }\r\n\r\n    private iconFactory(\r\n        action: MusicPlayerAction,\r\n        iconContent: string,\r\n    ) {\r\n        let bg = Color.Transparent\r\n        let fg = Color.White\r\n        let icon = document.createElement('button')\r\n        icon.innerHTML = iconContent\r\n        icon.style.display = 'block';\r\n        icon.style.fontSize = '7pt';\r\n        icon.style.fontFamily = 'Verdana';\r\n        icon.style.border = 'none'\r\n        icon.style.padding = '4px'\r\n        icon.style.background = bg.toRGBA();\r\n        icon.style.color = fg.toRGBA();\r\n        icon.onclick = () => { this.handleAction(action) }\r\n        return icon\r\n    }\r\n\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor, Color } from \"excalibur\";\r\nimport { Economy, PureValue, availableCapacity, allValues } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\nimport { eachChunk } from \"../../Util\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0) //Color.DarkGray.clone().darken(0.5));\r\n\r\n        let index = 0\r\n        for (let [val1, val2] of eachChunk(allValues, 2)) {\r\n            this.addValue(index * 32, 0, val1)\r\n            this.addValue(index * 32, 7, val2)\r\n            index += 1\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    private addValue(x: number, y: number, value: PureValue) {\r\n        let valueLabel: EconomicValue = new EconomicValue(value, x, y)\r\n        this.valueLabels[value] = valueLabel\r\n        this.add(valueLabel)\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value of allValues) {\r\n            this.valueLabels[value].setCount(\r\n                availableCapacity(market, value)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor, UIActor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nclass Tooltip extends Actor {\r\n    messageLabel: Label\r\n    constructor(x: number, y: number, message: string) {\r\n        super(x, y, 60, 16, Color.Black)\r\n        this.messageLabel = new Label(message, -16, 6, 'Verdana')\r\n        this.messageLabel.color = Color.White\r\n        this.add(this.messageLabel)\r\n    }\r\n}\r\n\r\nexport class ResourceListEntry extends UIActor {\r\n    icon: Actor;\r\n    count: Label;\r\n    hovering: boolean = false\r\n    tooltip: Tooltip\r\n\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x-5, y-5, 20, 10)\r\n        let icon = new Actor(5, 5, 10, 10, blockColor(resourceBlock));\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, 15, 10, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n\r\n        this.tooltip = new Tooltip(0, 5, ResourceBlock[resourceBlock])\r\n        this.tooltip.visible = false\r\n        this.add(this.tooltip)\r\n\r\n\r\n        this.on('pointerenter', () => {\r\n            this.tooltip.visible = true\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.tooltip.visible = false\r\n        })\r\n    }\r\n\r\n\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n\r\n    debit(amt: number) {\r\n        this.value -= amt\r\n        this.count.text = `x${this.value}`\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nimport { eachCons, eachChunk } from \"../../Util\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            [ResourceBlock.Biomass]: null,\r\n            [ResourceBlock.Idea]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n            [ResourceBlock.Alloy]: null,\r\n            [ResourceBlock.Bioplasma]: null,\r\n            [ResourceBlock.Algorithm]: null,\r\n            [ResourceBlock.Argent]: null,\r\n            [ResourceBlock.Aurum]: null,\r\n            [ResourceBlock.Omnium]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x,y,0,0); // 200, 60, Color.Green.clone().darken(0.8));\r\n        let rx0 = 0, ry0 = -5;\r\n        let resources = [\r\n            ResourceBlock.Meal,\r\n            ResourceBlock.Bioplasma,\r\n\r\n            ResourceBlock.Data,\r\n            ResourceBlock.Algorithm,\r\n\r\n            ResourceBlock.Mineral,\r\n            ResourceBlock.Alloy,\r\n\r\n            ResourceBlock.Argent,\r\n            ResourceBlock.Aurum,\r\n        ];\r\n\r\n        eachChunk(resources, 2).forEach(([res1, res2], index) => {\r\n            let rx = rx0 + index * 36, ry = ry0 + index * 0;\r\n            this.addEntry(rx, ry, res1)\r\n            this.addEntry(rx, ry + 14, res2)\r\n        });\r\n    }\r\n\r\n    private addEntry(x: number, y: number, res: ResourceBlock) {\r\n        let entry = new ResourceListEntry(x, y, res, 0);\r\n        this.add(entry);\r\n        this.entries[res] = entry;\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n\r\n    decrement(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.debit(1)\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\nimport { MusicPlayer } from \"./MusicPlayer\";\r\nimport { Resources } from \"../../Resources\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n    private musicPlayer: MusicPlayer\r\n    private clock: Label\r\n\r\n    constructor(market: Economy, w: number, h: number) {\r\n        super(0,0, w*2,h, Color.DarkGray.clone().darken(0.92));\r\n\r\n        let ty = 14\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+18)\r\n        brand.fontSize = 28\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.1\", 100, ty + 14)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(130, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 280, ty)\r\n        this.add(this.economy)\r\n\r\n        this.clock = new Label('current time', 600, ty, 'Verdana')\r\n        this.clock.color = Color.White // 'white'\r\n        this.add(this.clock)\r\n\r\n        this.popLabel = new Label(\"\", 600, ty + 14, 'Verdana')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 750, ty, 'Verdana')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.messageLabel.fontStyle = FontStyle.Italic\r\n        this.add(this.messageLabel)\r\n\r\n        this.musicPlayer = new MusicPlayer(726, 12, {\r\n            'Crater Rock': Resources.CraterRock,\r\n            'Indivision': Resources.Indivision,\r\n            'Future Tense': Resources.FutureTense,\r\n            // 'Isomer': Resources.Isomer,\r\n            'Understanding': Resources.Understanding,\r\n            // 'Outbound': Resources.Outbound,\r\n            'Assembler': Resources.Assembler,\r\n        })\r\n// // enable propagating pointer events\r\n// this.enableCapturePointer = true;\r\n// // // enable move events, warning: performance intensive!\r\n// this.capturePointer.captureMoveEvents = true;\r\n//         this.on('pointerenter', () => { alert('hover!')})\r\n    }\r\n\r\n    draw(ctx, delta) {\r\n        super.draw(ctx, delta)\r\n        this.musicPlayer.draw(ctx)\r\n        // drawRect(\r\n        //     ctx,\r\n        //     {x: this.x, y: this.y, width: this.getWidth(), height: this.getHeight() },\r\n        //     0,\r\n        //     Color.Magenta\r\n        // )\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    decrementResource(res: ResourceBlock) {\r\n        this.resources.decrement(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n\r\n    setClock(time: number = 0) {\r\n        let days = (Math.floor(time / (60 * 24))+1).toString()\r\n        let hh = Math.floor(time / 60) % 24\r\n        let hours = Math.floor((hh + 11) % 12 + 1).toString()\r\n        let minutes = Math.floor(time % 60).toString()\r\n        let ampm = hh < 12 ? 'AM' : 'PM'\r\n        this.clock.text = `Day ${days}. ${hours}:${minutes.padStart(2, '0')} ${ampm}`\r\n    }\r\n    \r\n}\r\n","import { UIActor, Label, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, PureValue } from \"../../models/Economy\";\r\nimport { Machine, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Card } from \"./Card\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Palette } from \"./Palette\";\r\nimport { Building } from \"../Building\";\r\n\r\nclass Tabs { //extends UIActor {\r\n    //private structurePalette: Palette\r\n    //private machinePalette: Palette\r\n    //private functionPalette: Palette\r\n    // private active: number = null\r\n\r\n    _rootElement: HTMLDivElement\r\n    private tabs: {name: string, element: HTMLDivElement}[] = []\r\n\r\n    constructor(private x: number, private y: number, private title: string) { //}, x: number, y: number) {\r\n        // super(0,0,300,300)\r\n        this._rootElement = this.makeRootElement()\r\n    }\r\n\r\n    addTab(name: string, element: HTMLDivElement) {\r\n        this.tabs.push({ name, element })\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        if (this._rootElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._rootElement.style.left = `${left + this.x}px`;\r\n            this._rootElement.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    private makeRootElement() {\r\n        let root = document.createElement('div')\r\n        root.style.position = 'absolute'\r\n        root.style.width = '240px'\r\n        root.style.padding = '10px'\r\n\r\n        let title = document.createElement('h2')\r\n        title.style.fontSize = '14pt'\r\n        root.appendChild(title)\r\n\r\n        return root\r\n    }\r\n    \r\n}\r\n\r\nexport class Hud extends UIActor {\r\n    // private hint: Label\r\n\r\n    private hidePalettes: boolean = true\r\n\r\n    private structurePalette: Palette\r\n    private machinePalette: Palette\r\n    private functionPalette: Palette\r\n    private card: Card\r\n\r\n    private status: StatusAnalysisView\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n    static machinesForPalette = allMachines\r\n    static functionsForPalette = allSpaceFunctions\r\n\r\n    constructor(\r\n        game: Game,\r\n        protected onBuildingSelect = null,\r\n        protected onMachineSelect = null,\r\n        protected onFunctionSelect = null\r\n    ) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.status = new StatusAnalysisView(emptyMarket(), game.canvasWidth, 64);\r\n        this.add(this.status)\r\n\r\n        let displayInfo = (e) => this.showCard(e)\r\n        this.machinePalette = new Palette('Machine', 20, 55, allMachines, onMachineSelect, displayInfo) // (e) => this.showCard(e))\r\n        this.structurePalette = new Palette('Structure', 20, 300, Hud.structuresForPalette, onBuildingSelect, displayInfo)\r\n        this.functionPalette = new Palette('Function', 20, 435, Hud.functionsForPalette, onFunctionSelect, displayInfo, false)\r\n\r\n        this.card = new Card(null, 20, game.canvas.height - 200)\r\n        this.add(this.card)\r\n\r\n\r\n    }\r\n\r\n    showPalettes() {\r\n        this.hidePalettes = false\r\n    }\r\n\r\n    setMessage(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (!this.hidePalettes) {\r\n            this.structurePalette.draw(ctx)\r\n            this.machinePalette.draw(ctx)\r\n            this.functionPalette.draw(ctx)\r\n        }\r\n    }\r\n\r\n    update(game: Game, delta: number) {\r\n        super.update(game, delta)\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    resourceExpended(resource: ResourceBlock) {\r\n        this.status.decrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true, time: number = 0) {\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n\r\n        this.status.setClock(time)\r\n    }\r\n\r\n    showCard(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        this.card.present(entity)\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n        this.updateFunctionPalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        let builtStructures =\r\n            Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n        if (!builtStructures.every(s => this.structurePalette.built.includes(s))) {\r\n            this.structurePalette.updateBuilt(builtStructures)\r\n        }\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let devices = colony.findAllDevices()\r\n        let builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine && d.built))\r\n        if (!builtMachines.every(machine => this.machinePalette.built.includes(machine))) {\r\n            this.machinePalette.updateBuilt(builtMachines)\r\n        }\r\n    }\r\n\r\n    private updateFunctionPalette(colony: Colony) {\r\n        let builtReifiedFunctions = flatSingle(colony.buildings.map(b => b.spaceFunction))\r\n        let builtFunctions = Hud.functionsForPalette.filter((fn) => builtReifiedFunctions.some(rf => rf instanceof fn))\r\n        if (!builtFunctions.every(fn => this.functionPalette.built.includes(fn))) {\r\n            this.functionPalette.updateBuilt(builtFunctions)\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawPatternedRect, drawRect, drawPatternedPoly, drawPoly } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\n// import { drawPatternedRect, drawRect } from \"../../Util\";\r\n\r\nexport class MediumSurfaceRoomView extends Building {\r\n    hideBox = true\r\n    // hideLabe\r\n\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() //- this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        // draw from left slot to each device place to right slot?\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n\r\n        if (this.isGroundFloor) {\r\n            let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length - 1])\r\n            g.edge(leftSlot, devices[0])\r\n            g.edge(devices[devices.length - 1], rightSlot)\r\n        } else {\r\n            let topSlot = find(slots[1])\r\n            g.edge(devices[1], topSlot)\r\n        }\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        // g.edge(devices[1], find(slots[1]))\r\n\r\n        return g\r\n    }\r\n\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        let slotY = this.getHeight();\r\n\r\n        if (this.isGroundFloor) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, this.pos.y + slotY,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y, // + this.getHeight(),\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n\r\n        if (this.isGroundFloor) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    this.pos.y + slotY,\r\n                    Orientation.Right\r\n                )\r\n            )\r\n        }\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    get isGroundFloor() {\r\n        return !this.parentSlot || !(this.parentSlot.parent instanceof MediumSurfaceRoomView)\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.planet.colony.buildings.length === 0) {\r\n            cursor.y = this.planet.getTop();\r\n        } // else {\r\n            // this.alignToSlot(cursor)\r\n        // }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.planet.colony.buildings.length === 0) {\r\n            this.pos = cursor\r\n            this.pos.y -= this.getHeight() - 2 // hm\r\n        } else {\r\n            this.alignToSlot(cursor)\r\n\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor()\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n\r\n        // ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n        // let rect = \r\n            // { x: this.pos.x, y: this.pos.y, width: this.getWidth(), height: this.getHeight() };\r\n        drawPatternedPoly(\r\n            ctx,\r\n            this.angledRoofPoly(),\r\n            this.backgroundPattern,\r\n            this.mainColor()\r\n        )\r\n\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black.clone()\r\n            c.a = 0.6\r\n            drawPoly(ctx, this.angledRoofPoly(), c)\r\n        }\r\n\r\n        // a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n\r\n        ctx.fillStyle = Color.Black.fillStyle()\r\n        ctx.fillRect(flagX, flagY-1, 1, flagpoleHeight+1)\r\n        drawPatternedRect(\r\n            ctx,\r\n            { x: flagX, y: flagY, width: 10, height: 6 },\r\n            BackgroundPattern.USSF\r\n        )\r\n        // ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.clone(); }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MediumRoomThreeView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    poly() { return this.angledRoofPoly() }\r\n\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Huge\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Large\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 2\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaceCount = 3\r\n    poly() { return this.angledRoofPoly() }\r\n    //devicePlaces() {\r\n    //    let w = this.getWidth()/2\r\n    //    let x = this.pos.x + w;\r\n    //    let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n    //    let ds = [\r\n    //        new Vector(x - w / 2, y),\r\n    //        new Vector(x, y),\r\n    //        new Vector(x + w / 2, y),\r\n    //    ]\r\n\r\n    //    return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    //}\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { range, eachCons, measureDistance } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.planet.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        // super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length-1])\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n\r\n        return g\r\n\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.clone().darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector, Color } from \"excalibur\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n// import { drawRect, drawPatternedRect } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { drawPatternedRect, drawRect, drawPatternedPoly, drawPoly } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    get floorHeight() { return this.getHeight() / 6 }\r\n    // floorHeight: number = 10\r\n    edgeWidth: number = 0 //.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    poly() { return this.aabbPoly() } //angledRoofPoly() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        let floorColor = this.planet.color.darken(0.6)\r\n\r\n        drawPatternedPoly(\r\n            ctx,\r\n            this.poly(),\r\n            this.backgroundPattern,\r\n            this.mainColor()\r\n        )\r\n\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black.clone()\r\n            c.a = 0.6\r\n            drawPoly(ctx, this.poly(), c)\r\n        }\r\n\r\n        let floorEdgeHeight = 12 // 6\r\n        let floorOff = -5\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorEdgeHeight,\r\n              width: this.getWidth(), height: floorEdgeHeight - floorOff },\r\n              0,\r\n              floorColor.lighten(0.4)\r\n        )\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorOff,\r\n              width: this.getWidth(), height: this.floorHeight + floorOff },\r\n              0,\r\n              floorColor\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let slots: Slot[] = this.slots()\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        // draw from left slot to each device place to right slot?\r\n        let leftSlot = find(slots[0].pos), rightSlot = find(slots[1].pos)\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        return g\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    devicePlaceSize: DeviceSize = DeviceSize.Small\r\n    devicePlaceCount: number = 2\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"0a266eded2bf27831b18735ffc081448.png\";","module.exports = __webpack_public_path__ + \"2475589a97ba4901bfa7ab53b5487778.png\";","module.exports = __webpack_public_path__ + \"98240dde9344ac8d071d076ac951e15d.png\";","module.exports = __webpack_public_path__ + \"da31cf43235263c1c3e0ad45a46360a1.png\";","module.exports = __webpack_public_path__ + \"a6a38278ac501400c6199e0df9e1bf84.png\";","module.exports = __webpack_public_path__ + \"ece1d5d5858bc048d2d949ecc3f5e9bc.png\";","module.exports = __webpack_public_path__ + \"3654f0489813e0668743efde017c9653.png\";","module.exports = __webpack_public_path__ + \"3abbdabf07943966f102ac7345a59986.png\";","module.exports = __webpack_public_path__ + \"d1b4690b9f5fa4957f98602afc8cfdb6.png\";","module.exports = __webpack_public_path__ + \"0eb7a15ea04678b14a2b88b5965aabeb.png\";","module.exports = __webpack_public_path__ + \"dfe6e4db2f0c22d18befa85c1e163369.svg\";","module.exports = __webpack_public_path__ + \"9a947d50110c1d1db07c76a4bba2e653.svg\";","module.exports = __webpack_public_path__ + \"4976b6042ef557ca6085c8d0168251f4.svg\";","module.exports = __webpack_public_path__ + \"46418cf15643d9b1b171c1b64160a5af.svg\";","module.exports = __webpack_public_path__ + \"36a02c2483b688be86ce07bea4bd7295.svg\";","module.exports = __webpack_public_path__ + \"29c5f1be64c99bbc14d5063eea2f0953.svg\";","module.exports = __webpack_public_path__ + \"502f86b65239e20806bbae8bc77a6116.svg\";","module.exports = __webpack_public_path__ + \"5289b20985e3c3a98081267a2da1772e.svg\";","module.exports = __webpack_public_path__ + \"1d893905e4eea3bbc48b0e129e318ea6.svg\";","module.exports = __webpack_public_path__ + \"bd556d00e484db4e52d198d0bf39d0f2.svg\";","module.exports = __webpack_public_path__ + \"650cd431226df0755357c71d61bef1f2.svg\";","module.exports = __webpack_public_path__ + \"f12c591f538ab3026bf13e93f3fa9485.svg\";","module.exports = __webpack_public_path__ + \"3aeb9dd24809ba3fbd4eeb31a28c3b19.svg\";","module.exports = __webpack_public_path__ + \"6cc6f6773bb6eb26fcef87b9629f7b87.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"24611230ec712ba7ee38b99561aedd87.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { ResourceBlock } from \"./Economy\";\r\n\r\nexport type MechanicalOperation =\r\n    Recipe |\r\n    ResourceGenerator |\r\n    ResourceStorage |\r\n    SpawnClone |\r\n    AccelerateTime |\r\n    Noop\r\n\r\nexport interface Noop {\r\n    type: 'noop'\r\n}\r\n\r\nexport interface Recipe {\r\n    type: 'recipe'\r\n    consumes: ResourceBlock[]\r\n    produces: ResourceBlock\r\n    workTime: number\r\n}\r\n\r\nexport interface ResourceGenerator {\r\n    type: 'generator'\r\n    generates: ResourceBlock\r\n    generationTime: number\r\n    capacity: number\r\n}\r\n\r\nexport interface ResourceStorage {\r\n    type: 'store'\r\n    stores: ResourceBlock[]\r\n    capacity: number\r\n}\r\n\r\nexport interface SpawnClone {\r\n    type: 'spawn'\r\n}\r\n\r\nexport interface AccelerateTime {\r\n    type: 'accelerate'\r\n    factor: number\r\n}\r\n\r\nfunction store(res: ResourceBlock[], capacity: number = 10): ResourceStorage {\r\n    return {\r\n        type: 'store',\r\n        stores: res,\r\n        capacity\r\n    }\r\n}\r\n\r\nfunction generate(res: ResourceBlock, cap: number = 4): ResourceGenerator {\r\n    return {\r\n        type: 'generator',\r\n        generates: res,\r\n        generationTime: 1000,\r\n        capacity: cap\r\n    }\r\n}\r\n\r\nfunction recipe(input: ResourceBlock[], output: ResourceBlock): Recipe {\r\n    return {\r\n        type: 'recipe',\r\n        consumes: input,\r\n        produces: output,\r\n        workTime: 1000,\r\n    }\r\n}\r\n\r\nfunction spawn(): SpawnClone {\r\n    return {\r\n        type: 'spawn',\r\n    }\r\n}\r\n\r\nfunction accelerateTime(): AccelerateTime {\r\n    return {\r\n        type: 'accelerate',\r\n        factor: 2\r\n    }\r\n}\r\n\r\nexport const mechanicalOperations = {\r\n    store,\r\n    generate,\r\n    recipe,\r\n    spawn,\r\n    accelerateTime,\r\n}","import { Input, Scene, Timer, Vector } from \"excalibur\";\r\nimport { Building, structureViews } from \"../actors/Building\";\r\nimport { DevicePlace } from \"../actors/Building/Building\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Game } from \"../Game\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { LivingQuarters, MissionControl, SolarArray, SpaceFunction, CloneReception, Kitchen, Workshop, Archive, Refinery, Mine } from \"../models/SpaceFunction\";\r\nimport { Corridor, HugeRoom, LargeRoom, MainTunnel, MediumRoomThree, SmallDome, SmallRoomThree, Structure, SurfaceRoad } from \"../models/Structure\";\r\nimport { flatSingle, zip } from \"../Util\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { Orientation } from \"../values/Orientation\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    placingFunction: SpaceFunction = null\r\n\r\n    time: number = Game.startHour*60\r\n\r\n    static requiredStructuresAndFunctions: (typeof SpaceFunction | typeof Structure)[] = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        SolarArray,\r\n        // LifeSupportPod,\r\n        MainTunnel,\r\n        Corridor,\r\n        LivingQuarters,\r\n        // CloneMatrix,\r\n        // CloneReception,\r\n        // Kitchen,\r\n        // Workshop,\r\n        // // Study,\r\n        // // Library,\r\n        // Archive,\r\n        // Refinery,\r\n        // Mine,\r\n        // ComputerCore,\r\n        \r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, true, this.time)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        let buildIt = (e) => this.startConstructing(e)\r\n\r\n        this.hud = new Hud(game, buildIt, buildIt, buildIt)\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(\r\n            game.world,\r\n            this.hud,\r\n            (b) => this.hud.showCard(b),\r\n            (d) => this.hud.showCard(d)\r\n        )\r\n\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.pos.y = this.planet.getTop() - 1000\r\n        this.camera.zoom(0.01)\r\n        this.camera.zoom(0.125, 10000)\r\n\r\n        this.addTimer(\r\n            new Timer(() => { this.stepTime() }, 50, true)\r\n        )\r\n    }\r\n\r\n    private stepTime() { \r\n        this.time += 0.125 //.25\r\n        this.planet.setTime(this.time) \r\n    }\r\n\r\n    public onActivate() {\r\n        // this.game.controller.activate()\r\n\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n\r\n                // this.camera.pos.x = Math.max(\r\n                //     this.camera.pos.x,\r\n                //     -this.planet.getWidth() ///4\r\n                // )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n\r\n                            if (this.placingFunction) {\r\n                                let fn = this.placingFunction\r\n                                // console.log({ fn, bldg: buildingUnderConstruction })\r\n                                zip(fn.machines, buildingUnderConstruction.devicePlaces()).forEach(([machine, place]: [typeof Machine, DevicePlace]) => {\r\n                                    console.log(\"would add machine\", { machine, place })\r\n                                    let m = (new machine()).concretize()\r\n                                    let device = new Device(m, place.position)\r\n                                    buildingUnderConstruction.addDevice(device)\r\n                                })\r\n                                this.placingFunction = null\r\n                            }\r\n\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            // this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            // this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        let { Up, Down, Left, Right } = Orientation;\r\n        let moveCam = (direction: Orientation) => {\r\n            let camMoveSpeed = 10 * (1/this.camera.getZoom())\r\n            let dv = new Vector(0,0)\r\n            switch(direction) {\r\n            case Left: dv.x = -camMoveSpeed; break\r\n            case Right: dv.x = camMoveSpeed; break\r\n            case Up: dv.y = -camMoveSpeed; break\r\n            case Down: dv.y = camMoveSpeed; break\r\n            }\r\n            // console.log(\"MOVING CAM\", { direction, dv, camMoveSpeed })\r\n            this.camera.move(this.camera.pos.add(dv), 0) //pos.addEqual(dv)\r\n        }\r\n\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                this.planet.colony.currentlyConstructing = null\r\n                this.placingFunction = null\r\n                this.hud.setMessage(this.defaultMessage); //'Welcome to the Colony, Commander.')\r\n            } else if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                moveCam(Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                moveCam(Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                moveCam(Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                moveCam(Right)\r\n            }\r\n        })\r\n        this.game.input.keyboard.on('hold', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                moveCam(Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                moveCam(Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                moveCam(Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                moveCam(Right)\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingStructureOrFunction(): Structure | SpaceFunction {\r\n        let reqs = Construct.requiredStructuresAndFunctions.map(req => new req())\r\n\r\n        let actualStructureNames = this.buildings.map(building => building.structure.name)\r\n        let actualFunctionNames = flatSingle(\r\n            this.buildings.map(building => building.spaceFunction && building.spaceFunction.name)\r\n        )\r\n        let actualNames = [...actualStructureNames, ...actualFunctionNames]\r\n        return reqs.find(req => !actualNames.includes(req.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingStructureOrFunction() //this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.showPalettes()\r\n        }\r\n    }\r\n\r\n    firstBuilding: boolean = true\r\n    startConstructing(structureOrMachine: Structure | Machine | SpaceFunction, pos: Vector = new Vector(0, 0)) {\r\n        this.hud.showCard(structureOrMachine)\r\n        \r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            this.hud.setMessage(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            if (this.firstBuilding) {\r\n                this.camera.zoom(structure.zoom, 250)\r\n                this.camera.pos = theNextOne.pos\r\n                this.firstBuilding = false\r\n            } \r\n        } else if (structureOrMachine instanceof Machine) {\r\n            let machine = structureOrMachine\r\n            this.hud.setMessage(`Install ${machine.name} (${machine.description})`)\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            // this.camera.zoom(1.5, 250)\r\n        } else if (structureOrMachine instanceof SpaceFunction) {\r\n            let fn: SpaceFunction = structureOrMachine\r\n            this.hud.setMessage(`Place ${fn.name} (${fn.description})`)\r\n            theNextOne = this.spawnFunction(fn, pos)\r\n            this.placingFunction = fn\r\n\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        if (device.snap(this.planet)) {\r\n            this.camera.pos = device.pos\r\n \r\n        }\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n\r\n    protected spawnFunction(fn: SpaceFunction, pos: Vector): Building {\r\n        let theStructure: Structure = (fn.structure && new fn.structure()) // || new SmallRoomThree()\r\n        if (!theStructure) {\r\n            theStructure = new SmallRoomThree()\r\n            let machines = fn.machines.map(m => new m())\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Medium)) {\r\n                theStructure = new MediumRoomThree()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Large)) {\r\n                theStructure = new LargeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Huge)) {\r\n                theStructure = new HugeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.forDome)) {\r\n                theStructure = new SmallDome()\r\n            }\r\n        }\r\n\r\n        // console.log(\"SPAWN FUNCTION\", { fn, structure: theStructure })\r\n        let building = this.assembleBuildingFromStructure(theStructure, pos)\r\n        building.reshape(building.constrainCursor(building.pos))\r\n        return building\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Orange, Color.Red, Color.Blue, Color.Green] //, Color.Violet] //, Color.White]\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion, Color.Violet, Color.Chartreuse, Color.Orange, Color.Rose ] ).\r\n        lighten(0.15).\r\n        desaturate(0.65)\r\n\r\n}","module.exports = __webpack_public_path__ + \"37914c496c3c503f7a53d7c9a1457b53.mp3\";","module.exports = __webpack_public_path__ + \"1b8e735649248c4c552a84996e61f241.mp3\";","module.exports = __webpack_public_path__ + \"1a607294aebce07746d6f25ffa517d80.mp3\";","module.exports = __webpack_public_path__ + \"22bdefc1e8515661fdeb8e8076820641.mp3\";","module.exports = __webpack_public_path__ + \"cf150ab26eba01503f4f6dc3d9ab47f7.mp3\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\nimport { Resources } from './Resources';\r\nimport { Sound } from 'excalibur';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n  // setTimeout(() => {\r\n  //   console.log(\"let's jam!\");\r\n  //   let jam: Sound = Resources.CraterRock //play();\r\n  //   jam.play()\r\n  // }, 1500)\r\n  // jam.oncomplete = () => jam.play()\r\n});\r\n"],"sourceRoot":""}