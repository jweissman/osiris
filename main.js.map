{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Util.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Machine.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/values/DeviceSize.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Structure.ts","webpack:///./src/values/Scale.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Device.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MineView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/MissionControlView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/bookshelf.png","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","eachCons","measureDistance","b","drawLine","ctx","lineWidth","Color","White","beginPath","moveTo","x","y","lineTo","strokeStyle","toRGBA","stroke","drawRect","rectangle","edgeWidth","color","filled","width","height","main","fillStyle","fillRect","edge","strokeRect","Orientation","Left","Up","Right","Down","compass","flip","orientation","Error","Orientation_1","Util_1","Graph_1","SpaceFunction_1","DeviceSize_1","DevicePlace","pos","size","this","getVisibleSize","sz","DeviceSize","Small","Medium","Building","_super","structure","planet","_this","built","hover","showLabel","facing","hideBox","childrenBuildings","level","devices","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","console","log","building","collisionType","CollisionType","PreventCollision","nameLabel","Label","levelLabel","fontSize","darken","__extends","levelUp","text","draw","delta","aabb","processedColor","forEach","device","getCenter","measureText","update","engine","produce","constrainCursor","clone","reshape","afterConstruct","handleClick","_pos","slots","nodes","getWidth","getHeight","devicePlaces","graph","supergraph","Graph","g","rootNode","findOrCreate","_i","_a","child","slot","parentSlot","childNode","redeem","res","gather","populate","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","find","bldg","edgeColor","lighten","mainColor","colorBase","clr","Red","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","closestBuildingByType","matchingSlot","compass_1","warn","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","finalize","updateName","hasPlaceForDevice","nextDevicePlace","getDevices","allSpaceFunctions","spaceFn","matched","unseenDevices","machines","machine","matchingDevice","label","Actor","MachineOperation","Economy_1","Scale_1","major","Scale","images","minor","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","Work","SpawnCitizen","CollectResource","CollectMeals","CollectData","Machine","description","third","LightGray","consumes","produces","productionTime","behavior","image","prereqs","CommandCenter","arguments","Fridge","Bookshelf","ResearchServer","ResourceBlock","Hypothesis","Stove","Food","Meal","Desk","Data","OxygenExtractor","AlgaeVat","CloningVat","Bed","WaterCondensingMachine","Building_1","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","MissionControlView_1","MissionControlView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","MineView_1","MineView","SurfaceRoadView_1","SurfaceRoadView","PureValue","Power","Hope","Shelter","Oxygen","emptyMarket","supply","demand","Ore","Mineral","blockColors","Green","Blue","Yellow","Violet","blockColor","block","desaturate","t","setPrototypeOf","__proto__","constructor","create","Machine_1","Structure","view","zoom","dominantColor","Gray","Corridor","Ladder","MainTunnel","second","eighth","MissionControl","SurfaceRoad","fifth","first","Dome","CommonArea","SmallRoomTwo","SmallRoomThree","MediumRoom","sixth","MidDome","majorUnit","fourth","seventh","minorUnit","minorScale","Structure_1","Device","initialPos","product","capacity","imageLoaded","inUse","Image","onload","src","drawImage","bx","by","produced","index","blockSize","interact","citizen","waitToUse","pop","progressBar","sent","carry","carrying","resource","drop","setTimeout","snap","some","position","empty","edges","edgesInverse","isEmpty","node","newNode","contains","testNode","includes","measure","tolerance","dfs","dst","indexOf","union","otherGraph","edgeList","theEdges","_b","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","path","steps","srcIndex","reverse","Resources_1","Game","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","start","loader","Loader","key","Resources","addResource","citizenSpeed","Engine","_1","SmallRoomThreeView","w","floorHeight","ResourceListEntry","resourceBlock","icon","add","count","credit","amt","ResourceListEntry_1","ResourcesList","DarkGray","entries","ry","entry","increment","ResourcesList_1","Hud","game","onBuildingSelect","onMachineSelect","canvasWidth","canvasHeight","comprehendedStructures","builtStructures","comprehendedMachines","builtMachines","messageLabel","_makeStructurePalette","_makeMachinePalette","resources","setMessage","_structurePaletteElement","left","canvas","offsetLeft","top_1","offsetTop","style","top","_machinePaletteElement","top_2","resourceGathered","updatePalettes","updateBuildingPalette","updateMachinePalette","structuresForPalette","every","prereq","parentElement","removeChild","bldgs","availableMachines","findAllDevices","machinesForPalette","document","createElement","border","body","appendChild","sort","_paletteButton","buttonFactory","onclick","btn","bg","fg","paletteButton","textContent","display","fontFamily","fontWeight","padding","textTransform","background","onmouseover","saturate","onmouseleave","UIActor","originSlot","pickingOrigin","maxHeight","getTop","h","setHeight","drawShape","xoff","yoff","bezierCurveTo","rect","halfWidth","slotHeights","heights","y0","y1","btm","lst","right","slotCount","theSlots","Device_1","machine_1","place","theDevice","slotY","flagX","flagY","arc","PI","closePath","leftSlot","rightSlot","originX","newCursor","setWidth","abs","SpaceFunction","LivingQuarters","Kitchen","LifeSupportPod","CloneMatrix","Library","Archive","AlgaeFarm","ex","Player","Game_1","Citizen","walkSpeed","workInProgress","now","Date","getTime","progress","workStarted","workDuration","px","pw","py","vel","glideTo","actions","asPromise","duration","Promise","resolve","reject","pathTo","pathBetween","all","work","item_1","sink","closestDevice","source","Citizen_1","Population","citizens","increase","home","NavigationTree","seekPath","origin","dest","closestNode","NavigationTree_1","Colony","currentlyConstructing","maxPop","navTree","placeBuilding","buildNavTree","structureTypes","st","destination","srcNode","destNode","closestDeviceByType","machineTypes","ctrl","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","yBase","peak","mtnWidth","PlanetBackground","PlanetBackground_1","Colony_1","Population_1","Planet","hud","depth","createLayer","layerHeight","population","theLayer","Planet_1","player_1","Hud_1","SmallRoomThreeView_1","Construct","dragging","startConstructing","player","prepareNextBuilding","camera","onActivate","input","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","onDeactivate","off","nextMissingRequiredStructure","requiredStructures","requiredStructureList","actualStructureNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","anotherBuilding","assembleBuildingFromStructure","structureViews","Scene","World","colors","Cyan","Vermillion","sword","Sword","Texture","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([48,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  // if (edgeWidth > 0) {\r\n  //   let edge = Color.White;\r\n  //   ctx.fillStyle = edge.toRGBA();\r\n  //   ctx.fillRect(x, y, width, height)\r\n  // }\r\n\r\n  if (filled) {\r\n    let main = color;\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x, //+ edgeWidth,\r\n      y, //+ edgeWidth,\r\n      width, // - edgeWidth * 2,\r\n      height // - edgeWidth * 2\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White;\r\n    ctx.strokeStyle = `${edgeWidth}px solid ${edge.toRGBA()}`;\r\n    // ctx.strokeStyle = Stroke.So\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, drawRect, deleteByValue } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    getVisibleSize(): number {\r\n        let sz = 10;\r\n        switch(this.size) {\r\n            case DeviceSize.Small: sz = 15; break;\r\n            case DeviceSize.Medium: sz = 25; break;\r\n        }\r\n        return sz;\r\n    }\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0 //.1\r\n\r\n    nameLabel: Label\r\n    levelLabel: Label\r\n\r\n    built: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    level: number = 1\r\n\r\n    private devices: Device[] = []\r\n\r\n    constructor(pos: Vector, public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            console.log(\"HOVER ON\", { building: this })\r\n        })\r\n\r\n        // this.on('pointerdown', () => {\r\n        //     console.log(\"CLICKED BUILDING\", { building: this })\r\n        //     this.levelUp();\r\n        // })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        // this.nameLabel.fontSize = 11\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.levelLabel = new Label(`Lvl. ${this.level}`, 0, 0, 'Helvetica')\r\n        this.levelLabel.fontSize = 6\r\n        this.levelLabel.color = Color.White.darken(0.2)\r\n    }\r\n\r\n    levelUp() {\r\n        this.level += 1\r\n        this.levelLabel.text = `Lvl. ${this.level}`\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        this.devices.forEach(device => device.draw(ctx, delta))\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n            // this.levelLabel.text = `Lvl. ${this.level}`\r\n            // this.levelLabel.pos = this.getCenter()\r\n            // this.levelLabel.pos.y += 10\r\n            // this.levelLabel.pos.x -= ctx.measureText(this.structure.name).width / 4\r\n            // this.levelLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let debug = false;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = false\r\n        if (showDevicePlaces && this.devicePlaces().length > 0) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.getVisibleSize()\r\n                drawRect(ctx,\r\n                    { x: place.x, y: place.y, width: sz, height: sz },\r\n                    1,\r\n                    Color.White,\r\n                    false\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n        let tryProduce = this.built;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.produce(this.step));\r\n        }\r\n        this.step += 1\r\n    }\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public populate(pos: Vector) {\r\n        this.planet.populate(pos) //this.pos)\r\n    }\r\n\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        this.updateName()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices\r\n    }\r\n\r\n    private updateName() {\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let matched = true;\r\n            let unseenDevices = this.devices.slice() // clone?\r\n            spaceFn.machines.forEach(machine => {\r\n                let matchingDevice = unseenDevices.find(d => d.machine instanceof machine)\r\n                if (!matchingDevice) { matched = false; }\r\n                unseenDevices = deleteByValue(unseenDevices, matchingDevice)\r\n            })\r\n            return matched;\r\n        })\r\n        if (fn) {\r\n            this.nameLabel.text = fn.label\r\n        }\r\n    }\r\n}","import { ResourceBlock } from \"./Economy\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { Color } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\n\r\nlet { major, minor } = Scale\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n}\r\n\r\nexport enum MachineOperation {\r\n    // generic functioning: consuming a block to produce a new block\r\n    Work,\r\n    // more interesting functions\r\n    SpawnCitizen,\r\n    CollectResource,\r\n    CollectMeals,\r\n    CollectData\r\n}\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    width: number = major.third\r\n    height: number = major.third\r\n    color: Color = Color.LightGray\r\n\r\n    size: DeviceSize = DeviceSize.Small\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n\r\n    // need to stop using this both for work time and 'generation' time\r\n    productionTime: number = 500\r\n\r\n    behavior: MachineOperation = MachineOperation.Work\r\n\r\n    image = images.vat\r\n\r\n    prereqs: (typeof Machine)[] = []\r\n\r\n}\r\n\r\n// resource collection\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command'\r\n    description = 'gather resources...'\r\n    behavior = MachineOperation.CollectResource\r\n    image = images.bench\r\n\r\n    size = DeviceSize.Medium\r\n}\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    behavior = MachineOperation.CollectMeals\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n}\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    produces = ResourceBlock.Hypothesis\r\n    behavior = MachineOperation.CollectData\r\n    image = images.server\r\n    prereqs = [Bookshelf]\r\n\r\n    size = DeviceSize.Medium\r\n}\r\n\r\n// meals\r\n\r\n//export class Orchard extends Machine {\r\n//    name = 'Orchard'\r\n//    description = 'grow some food'\r\n//    produces = ResourceBlock.Food\r\n//}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    consumes = ResourceBlock.Food\r\n    produces = ResourceBlock.Meal\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n}\r\n\r\n//export class CookingFire extends Machine {\r\n//    name = 'Cooking Fire'\r\n//    consumes = ResourceBlock.Food\r\n//    produces = ResourceBlock.Meal\r\n//    image = images.fire\r\n//\r\n//    prereqs = [OxygenExtractor]\r\n//}\r\n//export class Cabin extends Machine {\r\n//    name = 'Cabin'\r\n//    produces = ResourceBlock.Food\r\n//\r\n//    image = images.cabin\r\n//    prereqs = [WaterCondensingMachine, OxygenExtractor]\r\n//}\r\n\r\nexport class Desk extends Machine {\r\n    name = 'Desk'\r\n    consumes = ResourceBlock.Hypothesis\r\n    produces = ResourceBlock.Data\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n}\r\n\r\n\r\n// minerals\r\n\r\n// export class MiningDrill extends Machine {\r\n//     name = 'Drill'\r\n//     description = 'find some ores'\r\n//     produces = ResourceBlock.Ore\r\n// }\r\n\r\n// export class MineralProcessor extends Machine {\r\n//     name = 'Processor'\r\n//     description = 'extract some minerals'\r\n\r\n//     consumes = ResourceBlock.Ore\r\n//     produces = ResourceBlock.Mineral\r\n// }\r\n\r\n// data\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    produces = ResourceBlock.Hypothesis\r\n    image = images.bookshelf\r\n    prereqs = [ OxygenExtractor, Desk ]\r\n}\r\n\r\n//export class ExperimentBench extends Machine {\r\n//    name = 'Bench'\r\n//    description = 'test some hypotheses'\r\n//    consumes = ResourceBlock.Hypothesis\r\n//    produces = ResourceBlock.Data\r\n//    image = images.bench\r\n//}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    produces = ResourceBlock.Food\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Medium\r\n}\r\n\r\n// reproduction\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'grow some replacements'\r\n    // consumes = ResourceBlock.Meal\r\n    behavior = MachineOperation.SpawnCitizen \r\n    productionTime = 1500\r\n\r\n    height = major.third\r\n    // width = minor.fifth\r\n    // height = major.first\r\n\r\n    image = images.vat\r\n\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Medium\r\n}\r\n\r\n// providence (power, life support...)\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n}\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    // behavior\r\n    // height = \r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine ]\r\n}\r\n\r\n// export class SolarCell extends Machine {\r\n//     name = 'Solar Cell'\r\n//     description = 'feel the warmth'\r\n// }\r\n\r\n// export class Launchpad extends Machine {\r\n//     name = 'Launchpad'\r\n// }\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H20 Condenser'\r\n}\r\n\r\n// export class AirScrubber extends Machine {\r\n//     name = 'Air Scrubber'\r\n// }\r\n\r\n// export class HypermnesisApparatus extends Machine {\r\n//     name = 'Mind Upgrade'\r\n// }\r\n\r\n// export class AtomicCompiler extends Machine {\r\n//     name = 'Atomic Compiler'\r\n// }\r\n\r\n// export class Icicle extends Machine {\r\n//     name = 'Cryo Coffin'\r\n// }\r\n\r\n// export class TimeCrystal extends Machine {\r\n//     name = 'Quantum Portal'\r\n// }\r\n\r\n// export class GamingRotunda extends Machine {\r\n//     name = 'Gaming Rotunda'\r\n// }\r\n\r\n// export class MineralWorkshop extends Machine {\r\n//     name = 'Workshop'\r\n// }\r\n\r\n// export class SingularityFountain extends Machine {\r\n//     name = 'Singularity Fountain'\r\n// }\r\n\r\n// maybe library node 'stores' data?\r\n//export class LibraryNode {\r\n//    name = 'Library Node'\r\n//\r\n//    consumes = ResourceBlock.\r\n//}","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { MissionControlView } from './MissionControlView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { MineView } from './MineView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\n\r\n\r\n// import { LivingQuartersView } from './LivingQuartersView';\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView, // as AccessTunnelView,\r\n    CommonAreaView,\r\n    DomeView,\r\n    MissionControlView,\r\n    TunnelView,\r\n    ArcologyView,\r\n    LadderView,\r\n    MineView,\r\n    SurfaceRoadView,\r\n\r\n}","export enum DeviceSize {\r\n    Small,\r\n    Medium\r\n}\r\n","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Hope = 'Hope',\r\n    Shelter = 'Shelter',\r\n    Oxygen = 'Oxygen',\r\n}\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport const emptyMarket : Economy = {\r\n    Power: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n    Hope: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n    Shelter: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n    Oxygen: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Food = 'Food',\r\n    Ore = 'Ore',\r\n    Data = 'Data',\r\n    // derived\r\n    Meal = 'Meal',\r\n    Hypothesis = 'Hypothesis',\r\n    Mineral = 'Mineral'\r\n}\r\n\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Food: Color.Green,\r\n    Data: Color.Blue,\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(0.2),\r\n    Hypothesis: Color.Violet.darken(0.4),\r\n    Ore: Color.Red.darken(0.5),\r\n\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    //Color.Violet\r\n    //switch(block) {\r\n    //    case ResourceBlock.Food: baseColor = Color.Green; break\r\n    //    case ResourceBlock.Ore:  baseColor = Color.Red; break\r\n    //    case ResourceBlock.Data: baseColor = Color.Blue; break\r\n    //    case ResourceBlock.Meal: baseColor = Color.Yellow; break\r\n    //}\r\n    return baseColor.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\n\r\nconst { major, minor } = Scale\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    dominantColor: Color = Color.Gray\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n    productionTime: number = 500\r\n\r\n    // constructor(public origin: Vector = new Vector(0, 0)) { }\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n\r\n    prereqs: (typeof Structure)[] = []\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MissionControl ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MissionControl ],\r\n        [Orientation.Right]: [  Dome, MissionControl ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [MainTunnel]\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [CommonArea]\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nexport class Dome extends Structure {\r\n    name: string = 'Biodome';\r\n    description: string = 'Biome sweet biome';\r\n    // dominantColor = Color.Green\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.eighth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        OxygenExtractor, WaterCondensingMachine,\r\n        // Cabin, CookingFire\r\n    ]\r\n}\r\n\r\n// two-slot...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = [\r\n        Stove,\r\n        Bed,\r\n        Desk,\r\n        Bookshelf,\r\n        Fridge,\r\n    ]\r\n\r\n    prereqs = [\r\n        Dome \r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Small Room (2)'\r\n    width = 3 * major.fifth\r\n    // two small slots\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Small Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view: string = 'SmallRoomThreeView'\r\n    // three small slots\r\n    width = 5 * major.fifth\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Medium Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    // view: string = 'MediumRoomView'\r\n    width = 5 * major.sixth\r\n    height = 5 * major.third\r\n    // two medium slots...\r\n    machines = [\r\n        ResearchServer,\r\n        AlgaeVat,\r\n        CloningVat,\r\n    ]\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    prereqs = [ Dome, MediumRoom ]\r\n}\r\n\r\n//////\r\n\r\nexport class MissionControl extends Structure {\r\n    name: string = 'Mission Control';\r\n    description: string = 'Keeping everything on track';\r\n    view: string = 'MissionControlView';\r\n    width: number = 4 * major.third\r\n    height: number = 4 * minor.third\r\n    zoom = 0.1\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = [ CommandCenter ]\r\n}\r\n\r\n//////\r\n\r\n\r\n\r\n// export class Biodome extends Dome {\r\n//     machines = [Orchard]\r\n//     prereqs = [ Study, OxygenAccumulator ]\r\n//     produces = ResourceBlock.Food\r\n//     productionTime = 5000\r\n// }\r\n// \r\n// // let list = [ CloneMatrix ]\r\n// \r\n// export class Corridor extends Structure {\r\n//     name: string = 'Corridor'\r\n//     description: string = 'in the hallway'\r\n//     view: string = 'CorridorView'\r\n//     width: number = minor.fifth\r\n//     height: number = minor.third\r\n//     zoom = 0.5\r\n//     connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n//         [Orientation.Left]: [\r\n//             MainTunnel,\r\n//             Ladder,\r\n//             CommonArea\r\n//             // CloneMatrix, Kitchen, Laboratory, Study, CommonArea,\r\n//             // Mine, Refinery,\r\n//         ],\r\n//         [Orientation.Right]: [\r\n//             MainTunnel,\r\n//             Ladder,\r\n//             CommonArea\r\n//             // CloneMatrix, Kitchen, Laboratory, Study, CommonArea ,\r\n//             // Mine, Refinery,\r\n//         ],\r\n//         [Orientation.Up]: [ ],\r\n//         [Orientation.Down]: [ ],\r\n//     }\r\n// }\r\n// \r\n// class CommonArea extends Structure {\r\n//     name: string = 'Commons'\r\n//     description: string = 'hallway cap'\r\n//     view: string = 'CommonAreaView'\r\n//     width: number = major.eighth\r\n//     height: number = major.fifth\r\n// \r\n//     connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n//         [Orientation.Left]: [\r\n//             Corridor, CommonArea\r\n//             //  Corridor, CloneMatrix, Kitchen, Laboratory, Study, CommonArea\r\n//             ],\r\n//         [Orientation.Right]: [\r\n//             Corridor,\r\n//             CommonArea,\r\n//             // CloneMatrix, Kitchen, Laboratory, Study, CommonArea ],\r\n//         ],\r\n//         [Orientation.Up]: [ Ladder ],\r\n//         [Orientation.Down]: [ Ladder ],\r\n//     }\r\n// }\r\n// \r\n\r\n// \r\n// export class Laboratory extends CommonArea {\r\n//     name: string = 'Lab'\r\n//     description: string = 'learn some things'\r\n//     consumes = ResourceBlock.Hypothesis\r\n//     produces = ResourceBlock.Data\r\n//     dominantColor = Color.Blue\r\n//     view: string = 'LabView'\r\n//     width: number = major.sixth\r\n//     height: number = major.fifth\r\n//     productionTime = 6500\r\n//     machines = [ExperimentBench]\r\n//     prereqs = [ Kitchen, Study ]\r\n// }\r\n// \r\n// \r\n// export class Kitchen extends CommonArea {\r\n//     name: string = 'Kitchen'\r\n//     description: string = 'veg -> meals'\r\n//     dominantColor = Color.Green\r\n//     consumes = ResourceBlock.Food\r\n//     produces = ResourceBlock.Meal\r\n//     view: string = 'KitchenView'\r\n//     width: number = major.fourth\r\n//     height: number = major.fifth\r\n//     productionTime = 2000\r\n//     machines = [Stove]\r\n// }\r\n// \r\n// // a mine is maybe a wide structure that you\r\n// // can gradually dig deeper??\r\n// export class Mine extends CommonArea {\r\n//     name: string = 'Mine'\r\n//     description: string = 'ore else'\r\n//     dominantColor = Color.Red\r\n//     produces = ResourceBlock.Ore\r\n//     productionTime = 20000\r\n//     view: string = 'MineView'\r\n//     width: number = major.eighth // 20 * majorUnit\r\n//     height: number = 3 * major.sixth //20 * majorUnit\r\n//     //connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n//     //    [Orientation.Left]: [ Mine, Refinery, Corridor ],\r\n//     //    [Orientation.Right]: [ Mine, Refinery, Corridor ],\r\n//     //    [Orientation.Up]: [ Ladder ],\r\n//     //    [Orientation.Down]: [ Ladder ],\r\n//     //}\r\n//     machines = [MiningDrill]\r\n//     prereqs = [SolarFarm, Library, WaterCondenser]\r\n// }\r\n// \r\n// export class Study extends CommonArea {\r\n//     name: string = 'Study'\r\n//     description: string = 'reflect'\r\n//     dominantColor = Color.Blue\r\n//     view: string = 'StudyView'\r\n//     width = major.third\r\n//     height = major.fifth\r\n//     produces = ResourceBlock.Hypothesis\r\n//     productionTime = 2000\r\n//     machines = [Bookshelf]\r\n// }\r\n// \r\n// export class Refinery extends CommonArea {\r\n//     name = 'Refinery'\r\n//     description = 'flotate'\r\n//     dominantColor = Color.Red\r\n//     consumes = ResourceBlock.Ore\r\n//     produces = ResourceBlock.Mineral\r\n//     view = 'RefineryView'\r\n//     width = major.fifth\r\n//     height = major.fifth\r\n//     productionTime = 9000\r\n//     machines = [MineralProcessor]\r\n//     prereqs = [Mine]\r\n// }\r\n// \r\n\r\n// \r\n// export class Arcology extends Structure {\r\n//     name = 'Arcology'\r\n//     description = 'megalith'\r\n//     view = 'ArcologyView'\r\n//     dominantColor = Color.Green\r\n//     width = 12 * major.fifth\r\n//     height = 34 * major.fifth\r\n//     zoom = 0.01\r\n//     connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n//         [Orientation.Left]: [ SurfaceRoad ],\r\n//         [Orientation.Right]: [ SurfaceRoad ],\r\n//         [Orientation.Up]: [ ],\r\n//         [Orientation.Down]: [ ],\r\n//     }\r\n//     prereqs = [ Arbor, AugmentationChamber, CarbonDioxideScrubber ]\r\n// }\r\n// \r\n// export class CloneMatrix extends CommonArea {\r\n//     name = 'Clone Matrix'\r\n//     description = 'you seem familiar'\r\n//     dominantColor = Color.Blue\r\n//     view = 'CloneMatrixView'\r\n//     width = major.fifth\r\n//     height = major.eighth\r\n//     machines = [ CloningVat ]\r\n//     prereqs = [ Study ]\r\n// }\r\n// \r\n// export class OxygenAccumulator extends Dome {\r\n//     name = 'O2'\r\n//     description = 'breathe free'\r\n//     // view = 'OxygenAccumulatorView'\r\n//     machines = [ OxygenExtractor ]\r\n//     prereqs = []\r\n// }\r\n// \r\n// export class WaterCondenser extends Dome {\r\n//     name = 'H2O'\r\n//     description = 'drink deeply'\r\n//     machines = [ WaterCondensingMachine ]\r\n//     prereqs = [OxygenAccumulator]\r\n// }\r\n// \r\n// export class CarbonDioxideScrubber extends Dome {\r\n//     name = 'CO2 Scrub'\r\n//     description = 'purified'\r\n//     machines = [AirScrubber]\r\n//     prereqs = [WaterCondenser]\r\n// }\r\n// \r\n// export class SolarFarm extends Dome {\r\n//     name = 'Solar Farm'\r\n//     description = 'feel the warmth on your face'\r\n//     // view = 'SolarFarmView'\r\n//     machines = [ SolarCell ]\r\n//     prereqs = [Kitchen, OxygenAccumulator]\r\n// }\r\n// \r\n// export class AugmentationChamber extends CommonArea {\r\n//     name = 'Augmentation'\r\n//     description = 'upgrade your life'\r\n//     dominantColor = Color.Blue\r\n//     machines = [ HypermnesisApparatus ]\r\n//     prereqs = [CloneMatrix, Factory]\r\n// }\r\n// \r\n// export class Academy extends CommonArea {\r\n//     name = 'Academy'\r\n//     description = 'teach the generations'\r\n//     dominantColor = Color.Blue\r\n//     machines = [Bookshelf]\r\n//     prereqs = [Laboratory, Library, CloneMatrix]\r\n// }\r\n// \r\n// export class Library extends CommonArea {\r\n//     name = 'Library'\r\n//     description = 'study the past'\r\n//     dominantColor = Color.Blue\r\n//     machines = [Bookshelf]\r\n//     prereqs = [Kitchen]\r\n// }\r\n// \r\n// // just an 'upgraded', larger dome with a place for a mid-size machine?\r\n// export class Arbor extends Dome {\r\n//     name = 'Arbor'\r\n//     description = 'conserve the land'\r\n//     machines = [Orchard]\r\n//     prereqs = [Biodome, WaterCondenser, CloneMatrix]\r\n//     width: number  = 6 * major.eighth\r\n//     height: number = 3 * major.eighth\r\n// }\r\n// \r\n// export class ComputerCore extends CommonArea {\r\n//     name = 'Computer Core'\r\n//     description = 'compute the last digit of pi'\r\n//     dominantColor = Color.Blue\r\n//     machines = []\r\n//     prereqs  = [Academy]\r\n//     width  = 20 * major.fifth\r\n//     height = 10 * major.fifth\r\n// }\r\n// \r\n// export class Factory extends CommonArea {\r\n//     name = 'Factory'\r\n//     decription = 'grit with it'\r\n//     dominantColor = Color.Red\r\n//     machines = [MineralWorkshop]\r\n//     prereqs = [ Library ]\r\n//     width = 3 * major.eighth\r\n//     height = major.sixth\r\n// }\r\n// \r\n// export class PowerPlant extends CommonArea {\r\n//     name: string = 'Power Plant'\r\n//     description: string = 'sunny day'\r\n//     dominantColor = Color.Red\r\n//     view: string = 'PowerPlantView'\r\n//     width: number = 2 * major.eighth\r\n//     height: number = 2 * major.eighth\r\n//     prereqs = [ CarbonDioxideScrubber, Factory ]\r\n// }\r\n// \r\n// export class Starport extends Dome {\r\n//     name = 'Starport'\r\n//     description = 'you are cleared for take-off'\r\n//     dominantColor = Color.Violet\r\n//     prereqs = [ Arcology, ComputerCore, PowerPlant ]\r\n//     machines = [Launchpad]\r\n// }\r\n// \r\n// \r\n// export class EntertainmentCenter extends CommonArea {\r\n//     name = 'Entertainment Complex'\r\n//     description = 'let us have a good time'\r\n//     dominantColor = Color.Violet\r\n//     prereqs = [ Starport ] //, \r\n//     machines = [GamingRotunda]\r\n// }\r\n// \r\n// export class SuspendedAnimationTomb extends CommonArea {\r\n//     name = 'Cryo Tomb'\r\n//     description = 'pawns on ice'\r\n//     dominantColor = Color.Violet\r\n//     prereqs = [ Starport ]\r\n//     machines = [ Icicle ]\r\n// }\r\n// \r\n// export class NegentropyPool extends CommonArea {\r\n//     name = 'Negentropy Pool'\r\n//     description = 'extropic singularity'\r\n//     dominantColor = Color.Violet\r\n//     prereqs = [ SuspendedAnimationTomb ]\r\n//     machines = [ SingularityFountain ]\r\n// }\r\n// \r\n// export class StrangeMatterWorkshop extends CommonArea {\r\n//     name = 'Strange Matter Workshop'\r\n//     description = 'advanced tools'\r\n//     dominantColor = Color.Violet\r\n//     prereqs = [ NegentropyPool ]\r\n//     machines = [ AtomicCompiler ]\r\n// }\r\n// \r\n// export class TimeChamber extends CommonArea {\r\n//     name = 'Time Chamber'\r\n//     description = 'welcome to the world of tomorrow'\r\n//     dominantColor = Color.Violet\r\n//     prereqs = [ StrangeMatterWorkshop ] //, \r\n//     machines = [ TimeCrystal ]\r\n// }\r\n// // export class AntimatterCapture extends CommonArea { }\r\n// // export class MolecularEngine extends CommonArea { }\r\n// // export class AtomicCompiler extends CommonArea { }","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0 //.5\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine, MachineOperation } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { Dome, SmallRoomThree, SmallRoomTwo, MediumRoom } from \"../models/Structure\";\r\n\r\nexport class Device extends Actor {\r\n    product: ResourceBlock[] = []\r\n    capacity: number = 4\r\n\r\n    nameLabel: Label\r\n\r\n    image: any\r\n    imageLoaded: boolean = false\r\n\r\n    building: Building // set once built?\r\n\r\n    inUse: boolean = false\r\n\r\n    constructor(\r\n        // public building: Building,\r\n        public machine: Machine,\r\n        private initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            machine.width,\r\n            machine.height,\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = function () {\r\n             this.imageLoaded = true\r\n        }\r\n        this.image.src = machine.image\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        // super.draw(ctx, delta)\r\n        ctx.drawImage(\r\n            this.image,\r\n            this.pos.x - this.getWidth() / 2,\r\n            this.pos.y - this.getHeight() / 2 - 10,\r\n            this.getWidth(), this.getHeight()\r\n        )\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= 10 //ctx.measureText(this.machine.name).width / 2\r\n            this.nameLabel.pos.y -= 28\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let bx = this.x - this.getWidth()/2 + 5, by = this.y - 23\r\n        let blockSize = 5\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).desaturate(0.3).lighten(0.2).toRGBA();\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get produces()       { return this.machine.produces }\r\n    get consumes()       { return this.machine.consumes }\r\n    get productionTime() { return this.machine.productionTime }\r\n\r\n    async interact(citizen: Citizen) {\r\n        if (this.inUse) {\r\n            citizen.waitToUse(this)\r\n            return\r\n        }\r\n\r\n        if (this.product.length > 0) {\r\n            this.product.pop()\r\n            this.inUse = true\r\n            await citizen.progressBar(500) //this.productionTime)\r\n            this.inUse = false\r\n            citizen.carry(this.produces)\r\n        } else {\r\n            if (this.consumes && citizen.carrying === this.consumes) {\r\n                this.inUse = true\r\n                await citizen.progressBar(this.productionTime)\r\n                citizen.carry(this.produces)\r\n                this.inUse = false\r\n            }\r\n        }\r\n\r\n        if (this.machine.behavior === MachineOperation.Work) {\r\n            // ...\r\n\r\n        } else if (this.machine.behavior === MachineOperation.CollectResource) {\r\n            // generic redeem..\r\n            let resource = citizen.drop()\r\n            if (resource) {\r\n                this.building.redeem(resource)\r\n            }\r\n        } else if (this.machine.behavior === MachineOperation.CollectMeals) {\r\n            // store a meal...\r\n            if (citizen.carrying === ResourceBlock.Meal) {\r\n                let resource = citizen.drop()\r\n                if (resource) {\r\n                    this.building.redeem(resource)\r\n                }\r\n            }\r\n        } else if (this.machine.behavior === MachineOperation.CollectData) {\r\n            // store research\r\n            if (citizen.carrying === ResourceBlock.Data) {\r\n                let resource = citizen.drop()\r\n                if (resource) {\r\n                    this.building.redeem(resource)\r\n                }\r\n            }\r\n        } else {\r\n            console.warn(\"no handler for this interaction\", { device: this })\r\n        }\r\n    }\r\n\r\n    public produce(step: number) {\r\n        if (step % this.productionTime === 0) {\r\n            if (this.machine.behavior === MachineOperation.Work) {\r\n\r\n                if (this.produces && !this.consumes && this.product.length < this.capacity) {\r\n                    this.product.push(this.produces)\r\n                }\r\n            } else if (this.machine.behavior === MachineOperation.SpawnCitizen) {\r\n                setTimeout(() => this.building.populate(this.pos), 100)\r\n            }\r\n        }\r\n    }\r\n\r\n    // todo only snap when close enough? try to prevent some mis-clicks?\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            // hmmm\r\n            [ Dome, SmallRoomTwo, SmallRoomThree, MediumRoom ],\r\n            // machines count < device slots count\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        if (bldg) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n            //devicePlaces()[\r\n            //    this.building.devices.length\r\n            //]\r\n        }\r\n\r\n        return !!bldg;\r\n    }\r\n\r\n    finalize() {\r\n        // this.building.devices.push(this)\r\n    }\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 100\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() { //loader: ex.Loader) {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n        let ds = [\r\n            new Vector(x - w / 2, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w / 2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 8, 'Helvetica');\r\n        this.count.fontSize = 12;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            // non-accruable\r\n            [ResourceBlock.Food]: null,\r\n            [ResourceBlock.Hypothesis]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            // displayed/accruable\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 60, 60, Color.DarkGray.darken(0.8));\r\n        let rx0 = -8, ry0 = -10;\r\n        let resources = [ResourceBlock.Meal, ResourceBlock.Data, ResourceBlock.Mineral];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0, ry = ry0 + index * 10;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        console.log(\"INCREMENT\", { resource })\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n}\r\n","import { Label, UIActor, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, Dome, SmallRoomThree, SmallRoomTwo, MediumRoom } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { Desk, Bookshelf, Machine, CloningVat, WaterCondensingMachine, OxygenExtractor, AlgaeVat, Stove, Bed, Fridge, ResearchServer } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\n\r\nexport class Hud extends UIActor {\r\n    private messageLabel: Label\r\n\r\n\r\n    private resources: ResourcesList\r\n\r\n    private _structurePaletteElement: HTMLDivElement\r\n    private _machinePaletteElement: HTMLDivElement\r\n\r\n    static structuresForPalette = [\r\n        // infra\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n\r\n        // surface\r\n        Dome,\r\n\r\n        // subsurface\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n\r\n    ];\r\n\r\n    comprehendedStructures: (typeof Structure)[] = []\r\n    builtStructures: (typeof Structure)[] = []\r\n\r\n    static machinesForPalette = [\r\n        Bed,\r\n        // Cabin,\r\n        // CookingFire,\r\n        Bookshelf,\r\n        Desk,\r\n        Stove,\r\n        Fridge,\r\n\r\n        AlgaeVat,\r\n        CloningVat,\r\n\r\n        ResearchServer,\r\n\r\n        OxygenExtractor,\r\n        WaterCondensingMachine,\r\n    ]\r\n\r\n    comprehendedMachines: (typeof Machine)[] = []\r\n    builtMachines: (typeof Machine)[] = []\r\n\r\n    constructor(private game: Game, protected onBuildingSelect = null, protected onMachineSelect = null) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.messageLabel = new Label('hi', 20, game.canvasHeight - 64, 'Verdana')\r\n        this.messageLabel.fontSize = 24\r\n        this.messageLabel.color = Color.White\r\n        this.add(this.messageLabel)\r\n\r\n        this._makeStructurePalette(onBuildingSelect)\r\n        this._makeMachinePalette(onMachineSelect)\r\n\r\n        this.resources = new ResourcesList(50, 40)\r\n        this.add(this.resources)\r\n\r\n        // this.add(this.status)\r\n\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this._structurePaletteElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._structurePaletteElement.style.left = `${left + 20}px`;\r\n            this._structurePaletteElement.style.top = `${top + 100}px`;\r\n        }\r\n        if (this._machinePaletteElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._machinePaletteElement.style.left = `${left + this.game.canvasWidth - 120}px`;\r\n            this._machinePaletteElement.style.top = `${top + 100}px`;\r\n        }\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.resources.increment(resource)\r\n\r\n    }\r\n\r\n    updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) { //bldgs: Building[]) {\r\n        this.builtStructures = //bldgs\r\n          Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n\r\n\r\n        this.comprehendedStructures = Hud.structuresForPalette.filter((structure: typeof Structure) => {\r\n            let s = new structure()\r\n            let prereqs: (typeof Structure)[] = s.prereqs\r\n            // console.log(\"can i build\", { name: s.name, prereqs })\r\n            return prereqs.every((prereq: (typeof Structure)) => {\r\n                let built = this.builtStructures.some((s: (typeof Structure)) => s === prereq)\r\n                // console.log(\"do i have any\", { prereq, built })\r\n                return built\r\n            })\r\n        })\r\n\r\n        // console.log(\"Built\", { built: this.builtStructures, comprehended: this.comprehendedStructures })\r\n\r\n          // rebuild palette with updated available buildings\r\n        this._structurePaletteElement.parentElement.removeChild(this._structurePaletteElement)\r\n          this._makeStructurePalette(this.onBuildingSelect)\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) { //bldgs: Building[]) {\r\n        let bldgs = colony.buildings\r\n        let availableMachines = flatSingle(bldgs.map(b => b.structure.machines))\r\n        let devices = colony.findAllDevices() //flatSingle(bldgs.map(b => b.devices))\r\n\r\n        this.builtMachines = //flatSingle(bldg.map(b => b.devices))\r\n        Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine))\r\n        // console.log(\"available machines\", { availableMachines })\r\n        this.comprehendedMachines = Hud.machinesForPalette.filter((machine: typeof Machine) => {\r\n            let canBuild = availableMachines.includes(machine);\r\n            // let m = new machine()\r\n            return canBuild && (new machine()).prereqs.every((prereq: (typeof Machine)) => {\r\n                return this.builtMachines.some((m: (typeof Machine)) => m === prereq)\r\n            })\r\n\r\n        }) //availableMachines\r\n        this._machinePaletteElement.parentElement.removeChild(this._machinePaletteElement)\r\n        this._makeMachinePalette(this.onMachineSelect)\r\n    }\r\n\r\n\r\n    protected _makeStructurePalette(fn: (Structure) => any) {\r\n        this._structurePaletteElement = document.createElement('div') \r\n        // this._structurePaletteElement.id = '_thePalette'\r\n        this._structurePaletteElement.style.position = 'absolute'\r\n        this._structurePaletteElement.style.border = '1px solid white'\r\n        document.body.appendChild(this._structurePaletteElement)\r\n\r\n        this.comprehendedStructures\r\n        .map(structure => new structure())\r\n        .sort((a,b) => a.dominantColor > b.dominantColor ? -1 : 1)\r\n        .forEach((structure: Structure) => {\r\n            let label = structure.name\r\n            if (!this.builtStructures.map(s => new s().name).includes(structure.name)) {\r\n                label += ' *';\r\n            }\r\n            let clr = structure.dominantColor\r\n            let _paletteButton = this.buttonFactory(label, clr); //structure);\r\n            this._structurePaletteElement.appendChild(\r\n                _paletteButton\r\n            )\r\n            if (fn) {\r\n                _paletteButton.onclick = () => { fn(structure) }\r\n            }\r\n        });\r\n    }\r\n\r\n    protected _makeMachinePalette(fn: (Machine) => any) {\r\n        this._machinePaletteElement = document.createElement('div')\r\n        // this._machinePaletteElement.id =\r\n        this._machinePaletteElement.style.position = 'absolute'\r\n        this._machinePaletteElement.style.border = '1px solid white'\r\n        document.body.appendChild(this._machinePaletteElement)\r\n\r\n        // Hud.machinesForPalette\r\n        this.comprehendedMachines\r\n            .map(Machine => new Machine())\r\n            .forEach(machine => {\r\n                let label = machine.name\r\n                if (!this.builtMachines.map(m => new m().name).includes(machine.name)) {\r\n                    label += ' *'\r\n                }\r\n                let clr = machine.color\r\n                let btn = this.buttonFactory(label, clr)\r\n                this._machinePaletteElement.appendChild(btn)\r\n                if (fn) {\r\n                    btn.onclick = () => { fn(machine) }\r\n                }\r\n            })\r\n        // this.machin\r\n\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) { //s: Structure) {\r\n        let bg = color.darken(0.6).desaturate(0.5).clone()\r\n        bg.a = 0.8\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone()\r\n        let paletteButton = document.createElement('button');\r\n\r\n        paletteButton.textContent = label; // `${s.name}`;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '10pt';\r\n\r\n        paletteButton.style.fontFamily = 'Helvetica';\r\n        paletteButton.style.fontWeight = '600';\r\n        paletteButton.style.padding = '5px';\r\n        paletteButton.style.width = '100px';\r\n        paletteButton.style.textTransform = 'uppercase'\r\n        paletteButton.style.border = '1px solid rgba(255,255,255,0.08)'\r\n\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA()\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA()\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA()\r\n        }\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA()\r\n            paletteButton.style.color = fg.toRGBA()\r\n        }\r\n\r\n        return paletteButton;\r\n    }\r\n}","import { CommonAreaView } from '.'\r\nimport { Vector } from 'excalibur';\r\n// import { Corridor, Refinery, Mine } from '../../models/Structure';\r\n\r\nexport class MineView extends CommonAreaView {\r\n    floorHeight = 150\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    // validConnectingStructures() { return [ Corridor, Mine, Refinery ]}\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    // edgeWidth = 1\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color } from \"excalibur\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n\r\n    }\r\n\r\n    drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        // ctx.bezierCurveTo(-3 + xoff, 514 + yoff, 1 + xoff, 406 + yoff, 1 + xoff, 391 + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { MissionControl } from \"../../models/Structure\";\r\nimport { range, eachCons, measureDistance, drawRect } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n    // edgeWidth = 0.2\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y) //, Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        // connect node to first slot...\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            // we're determining depth of tunnel\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MissionControlView extends Building {\r\n    hideBox = true\r\n\r\n    devicePlaces() { return this.nodes().map(n => new DevicePlace(n, DeviceSize.Medium)) }\r\n\r\n    afterConstruct() {\r\n        // build devices?\r\n        let { machines } = this.structure;\r\n        if (machines && machines.length > 0) {\r\n            let machine = new machines[0]();\r\n            this.devicePlaces().forEach(place => {\r\n                let theDevice = new Device(machine, place.position)\r\n                this.addDevice(theDevice)\r\n                // this.devices.push(theDevice)\r\n                // theDevice.building = this;\r\n                // this.add(theDevice)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2 // + 1\r\n    }\r\n\r\n    //async interact(citizen: Citizen) {\r\n    //}\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor();\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n        // y is going to be surface height\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        // could draw a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawRect } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 8\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n    // maybe you can set height AND width of common area view??\r\n    // maybe just width...\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n\r\n        drawRect(ctx, this.aabb(), 0.125, this.processedColor())\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight,\r\n              width: this.getWidth(), height: this.floorHeight },\r\n              0,\r\n              this.colorBase().lighten(0.7)\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        // top slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        // bottom slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)) //-16)\r\n        ];\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 10 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge } from './Machine';\r\n\r\nexport class SpaceFunction {\r\n    static label: string = '(generic)';\r\n    static machines: (typeof Machine)[] = [];\r\n}\r\n\r\nclass LivingQuarters extends SpaceFunction {\r\n    static label = 'Living Quarters'\r\n    static machines = [ Bed ]\r\n}\r\n\r\nclass Kitchen extends SpaceFunction {\r\n    static label = 'Kitchen'\r\n    static machines = [ Stove, Fridge ]\r\n}\r\n\r\nclass LifeSupportPod extends SpaceFunction {\r\n    static label = 'Life Support Module'\r\n    static machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\n//export class Retreat extends SpaceFunction {\r\n//    static label = 'Retreat'\r\n//    static machines = [ Cabin, CookingFire ]\r\n//}\r\n\r\nclass CloneMatrix extends SpaceFunction {\r\n    static label = 'Clone Matrix'\r\n    static machines = [ CloningVat, CloningVat ] //\r\n}\r\n\r\nclass Library extends SpaceFunction {\r\n    static label = 'Library'\r\n    static machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nclass Archive extends SpaceFunction {\r\n    static label = 'Archive'\r\n    static machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\n//export class Arboretum extends SpaceFunction {\r\n//    static label = 'Arboretum'\r\n//    static machines = [ Arbor, Arbor ]\r\n//}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n    static label = 'Algae Farm'\r\n    static machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n]","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons } from \"../Util\";\r\n// import { Machine, Stove, ExperimentBench, MineralProcessor, CommandCenter, Orchard, MiningDrill, Bookshelf, CookingFire, Cabin } from \"../models/Machine\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { MachineOperation } from \"../models/Machine\";\r\nimport { worker } from \"cluster\";\r\n// import { Machine, Stove, CommandCenter } from \"../models/Machine\";\r\n\r\nexport class Citizen extends Actor {\r\n\r\n    walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock = null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    constructor(private device: Device, protected planet: Planet) {\r\n        super(device.x, device.y, Scale.minor.first, Scale.minor.third, Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = (now - this.workStarted) / this.workDuration //0.5\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            ctx.fillStyle = blockColor(this.carrying).toRGBA()\r\n            ctx.fillRect(this.x+4, this.y-3, 5, 5)\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            // draw progress bar?\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            // ctx.stroke(20)\r\n            ctx.strokeRect(px, py, pw, ph)\r\n\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n\r\n            this.vel.x += (Math.random())-0.5 // * 10.0)\r\n        }\r\n\r\n        let debugPath = false\r\n        if (this.path && debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 10\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    carry(c: ResourceBlock) { //c: Color) {\r\n        this.carrying = c;\r\n    }\r\n\r\n    drop(): ResourceBlock {\r\n        if (this.carrying) {\r\n            let c = this.carrying; //.clone();\r\n            this.carrying = null;\r\n            return c\r\n        }\r\n        return null\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        // console.log(\"PROGRESS BAR\")\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        // console.log(\"PROGRESS BAR DONE!\")\r\n        this.workInProgress = false\r\n    }\r\n\r\n    async pathTo(building: Building) { //}, onArrival: (Building) => any) {\r\n        // let building = this.planet.closestBuildingByType(this.pos, structure)\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            path.pop()\r\n            path.shift()\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = null\r\n            // onArrival(building);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    waitToUse(device) {\r\n        setTimeout(() => device.interact(this), 250)\r\n    }\r\n\r\n    async work() {\r\n        if (this.carrying) {\r\n            let item: ResourceBlock = this.carrying;\r\n            let sink: Device = this.planet.closestDevice(this.pos,\r\n                [],\r\n                (device) => \r\n                        device.machine.consumes === item ||\r\n                        device.machine.behavior === MachineOperation.CollectResource ||\r\n                        item === ResourceBlock.Meal && device.machine.behavior === MachineOperation.CollectMeals ||\r\n                        item === ResourceBlock.Data && device.machine.behavior === MachineOperation.CollectData\r\n            )\r\n\r\n            if (sink) {\r\n                await this.pathTo(sink.building)\r\n                await this.glideTo(sink.pos)\r\n                await sink.interact(this)\r\n            } else {\r\n                console.log(\"nowhere to deliver it\", this.carrying)\r\n            }\r\n        } else {\r\n            let source: Device = this.planet.closestDevice(this.pos,\r\n                [],\r\n                // [ Cabin, Orchard, MiningDrill, Bookshelf ],\r\n                (d) => d.product.length > 0\r\n            )\r\n\r\n            if (source) {\r\n                await this.pathTo(source.building)\r\n                await this.glideTo(source.pos)\r\n                await source.interact(this)\r\n            } else {\r\n                console.log(\"i guess i can try again? (sleep for a bit first)\")\r\n                await new Promise((resolve, reject) => setTimeout(resolve, 150));\r\n            }\r\n        }\r\n\r\n        setTimeout(() => this.work(), 100)\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(home: Device) {\r\n        let citizen = new Citizen(home, this.planet);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","module.exports = __webpack_public_path__ + \"cffe40698a3b47b52ca0ff90a2c86ddf.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"86e09b7a9e4997af44c45206eb8694ad.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure, MissionControl } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n    maxPop: number = 8\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = false\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findAllDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d)\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices() {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\n\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n\r\n    constructor(\r\n        public hud: Hud,\r\n        public color: Color,\r\n        public width: number = 2000000,\r\n        public depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, width, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2\r\n        // crust\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector) {\r\n        // we could have a colony pop limit for now?\r\n        if (this.population.citizens.length < this.colony.maxPop) {\r\n            // let home = this.closestBuildingByType(pos, [CloneMatrix])\r\n            let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(home)\r\n        }\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n}","import { Scene, Input, Vector } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MissionControl, MainTunnel, Corridor, SurfaceRoad } from \"../models/Structure\";\r\nimport { Building, DomeView, CorridorView, CommonAreaView, TunnelView, MissionControlView, LadderView, } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { SurfaceRoadView } from \"../actors/Building/SurfaceRoadView\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { SmallRoomThreeView } from \"../actors/Building/SmallRoomThreeView\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    static structureViews: { [key: string]: typeof Building } = {\r\n        TunnelView,\r\n        MissionControlView,\r\n        DomeView,\r\n        CorridorView,\r\n        CommonAreaView,\r\n        LadderView,\r\n        SurfaceRoadView,\r\n\r\n        SmallRoomThreeView,\r\n\r\n        //LabView,\r\n        //MineView,\r\n        //KitchenView,\r\n        //PowerPlantView,\r\n        //StudyView,\r\n        //RefineryView,\r\n\r\n        //ArcologyView,\r\n        //CloneMatrixView,\r\n\r\n    }\r\n    ////\r\n    static requiredStructureList: Array<typeof Structure> = [\r\n        MissionControl,\r\n\r\n        SurfaceRoad,\r\n        // OxygenAccumulator,\r\n        // Dome,\r\n        MainTunnel,\r\n        Corridor,\r\n        // Kitchen,\r\n        // Study,\r\n        // CloneMatrix,\r\n    ]\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n\r\n        this.hud = new Hud(game, (structure) => {\r\n            this.startConstructing(structure)\r\n        }, (device) => {\r\n            this.startConstructing(device)\r\n        });\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(this.hud, game.world.color);\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(2, 10000)\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    // console.warn(\"would snap device in place!\")\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            this.hud.updatePalettes(this.planet.colony)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        let bldg = deviceUnderConstruction.building\r\n\r\n                        bldg.addDevice(deviceUnderConstruction)\r\n                        \r\n                        // deviceUnderConstruction.finalize()\r\n                        this.planet.colony.currentlyConstructing = null\r\n                        this.hud.updatePalettes(this.planet.colony)\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingRequiredStructure(): Structure {\r\n        let requiredStructures: Structure[] = Construct.requiredStructureList.map(s => new s())\r\n        let actualStructureNames: string[] = this.buildings.map(building => building.structure.name)\r\n\r\n        return requiredStructures.find(structure => !actualStructureNames.includes(structure.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.setMessage(`Welcome to OSIRIS!`)\r\n        }\r\n    }\r\n\r\n    startConstructing(structureOrMachine: Structure | Machine, pos: Vector = new Vector(0, 0)) {\r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            // structure.origin = pos // thread this out somehow??\r\n            this.hud.setMessage(`Place ${structure.name}`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            this.camera.zoom(structure.zoom, 250)\r\n        } else if (structureOrMachine instanceof Machine) {\r\n            // setup machine?\r\n            let machine = structureOrMachine\r\n            // machine.origin = pos\r\n\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            this.camera.zoom(1.5, 250)\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = theNextOne\r\n        if (theNextOne) {\r\n            console.warn(\"would start constructing\", { theNextOne })\r\n            this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        // let bldg = this.planet.closestBuildingByType(pos, [ CommonArea, Biodome ])\r\n        let device = new Device(machine, pos)\r\n        device.snap(this.planet)\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(anotherBuilding.pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = Construct.structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Red, Color.Blue, Color.Green] // Color.Viridian, Color.Magenta, Color.Chartreuse];\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ). // Color.Rose //World.colors).\r\n        lighten(0.15).\r\n        desaturate(0.65) // sample([Color.Blue, Color.Rose,Color.Blue]).lighten(0.1).desaturate(0.8)\r\n//   colony: Colony = new Colony()\r\n\r\n  \r\n}","module.exports = __webpack_public_path__ + \"0f6ac78b40c6bc151aee01b517f49ca1.png\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\nconst bookshelf = require('./images/bookshelf.png');\r\n// const bookshelfSvg = require('./images/bookshelf-plain.svg');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword),\r\n\r\n    Bookshelf: new ex.Texture(bookshelf),\r\n\r\n    // BookshelfSVG: new ex.Texture(bookshelfSvg)\r\n}\r\n\r\nexport { Resources }\r\n","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\n// scenes\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}