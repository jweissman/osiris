{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/models/Structure.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/Util.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Economy.ts","webpack:///./src/values/Graph.ts","webpack:///./src/actors/Building/KitchenView.ts","webpack:///./src/actors/Building/MessView.ts","webpack:///./src/actors/Building/MineView.ts","webpack:///./src/actors/Building/LabView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Hud.ts","webpack:///./src/actors/Building/LivingQuartersView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/MissionControlView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/AccessTunnelView.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/Game.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","Economy_1","Structure","[object Object]","origin","Vector","this","description","view","width","height","zoom","consumes","produces","MissionControl","MainTunnel","Dome","ResourceBlock","Food","AccessTunnel","CommonArea","LivingQuarters","SurfaceRoad","Laboratory","Data","Kitchen","Meal","Mess","Mine","Ore","majorUnit","Building_1","Building","AccessTunnelView_1","AccessTunnelView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","MissionControlView_1","MissionControlView","TunnelView_1","TunnelView","LivingQuartersView_1","LivingQuartersView","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","distanceToCursor","elem","distance","flatSingle","concat","deleteByValue","e","eachCons","measureDistance","b","Orientation","Left","Up","Right","Down","flip","orientation","ex","Orientation_1","Util_1","Graph_1","Actor","structure","planet","super","x","y","color","built","hover","facing","edgeWidth","hideBox","childrenBuildings","product","capacity","productionTime","step","anchor","setup","traits","trait","Traits","OffscreenCulling","on","collisionType","CollisionType","PreventCollision","label","Label","Color","White","clone","pos","getWidth","getHeight","supergraph","Graph","g","nodes","rootNode","findOrCreate","child","slot","parentSlot","edge","childNode","graph","citizen","console","log","carry","pop","carrying","progressBar","ctx","delta","drawRect","aabb","forEach","produced","index","fillStyle","blockColor","desaturate","lighten","toRGBA","fillRect","getCenter","measureText","draw","slots","rect","Gray","node","Yellow","engine","update","produce","rectangle","edgeColor","main","mainColor","other","rect1","rect2","buildings","find","bldg","overlaps","processedColor","darken","clr","colorBase","overlapsAny","Red","validConnectingStructures","closestBuildingByType","slotList","building","validConnectingDirections","includes","some","ourSlot","theSlot","findSlot","matchingSlot","offset","sub","addEqual","parent","block","Green","Blue","empty","edges","edgesInverse","size","newNode","contains","testNode","measure","tolerance","dfs","src","dst","indexOf","otherGraph","edgeList","theEdges","otherIndex","otherNode","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","cb","bfsIndex","halt","visitedNode","adj","adjacentNode","maxStep","prevStep","dstIndex","bfs","prev","curr","path","steps","srcIndex","reverse","_1","KitchenView","MessView","MineView","floorHeight","t","LabView","Structure_1","SurfaceRoadView","Hud","UIActor","message","onBuildingSelect","fontSize","add","_makePalette","_paletteElement","document","createElement","style","position","body","appendChild","structuresForPalette","_paletteButton","buttonFactory","onclick","stopPropagation","paletteButton","textContent","display","fontFamily","padding","background","Black","text","left","canvas","offsetLeft","top","offsetTop","setTimeout","populate","pickingOrigin","halfWidth","first","slotHeights","y0","y1","btm","right","slotCount","heights","theSlots","buildSlot","alignToSlot","getTop","setHeight","__awaiter","Promise","h","throw","done","then","slotY","resource","drop","flagX","flagY","beginPath","arc","PI","closePath","leftSlot","rightSlot","originX","reshape","constrainCursor","newCursor","setWidth","abs","Player","NavigationTree","dest","shortestPath","Mountains","peaks","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","saturate","yBase","peak","mtnWidth","moveTo","lineTo","Citizen","walkSpeed","workInProgress","now","Date","getTime","progress","workStarted","workDuration","pw","ph","px","py","strokeStyle","strokeRect","Violet","vel","actions","asPromise","duration","resolve","reject","pathBetween","all","glideTo","item","sinks","theSink","walkTo","interact","source","work","Citizen_1","PlanetBackground_1","NavigationTree_1","Planet","depth","citizens","currentlyConstructing","createLayer","layerHeight","theLayer","buildNavTree","afterConstruct","home","structureTypes","structureType","destination","navTree","srcNode","closestNode","destNode","seekPath","ctrl","Planet_1","player_1","Hud_1","SurfaceRoadView_1","LabView_1","MineView_1","MessView_1","KitchenView_1","Construct","Scene","dragging","game","world","player","hud","startConstructing","prepareNextBuilding","input","pointers","primary","camera","dragOrigin","currentBuilding","constrained","button","Input","PointerButton","placementValid","handleClick","placeBuilding","Middle","z","getZoom","deltaY","keyboard","key","Keys","H","move","off","requiredStructures","requiredStructureList","actualStructureNames","nextMissing","nextMissingRequiredStructure","theNextOne","spawnBuilding","anotherBuilding","assembleBuildingFromStructure","structureViews","Colony","structures","World","colors","skyColor","Cyan","Vermillion","colony","sword","Resources","Sword","Texture","Resources_1","Game","Engine","displayMode","DisplayMode","FullScreen","backgroundColor","loader","Loader","addResource","start","Game_1","World_1","Construct_1","theWorld","construct","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([30,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Vector } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\n\r\n// let sizeFactor = 0.85\r\n\r\nlet minorUnit = 8  //* sizeFactor\r\nlet majorUnit = 16 //* sizeFactor\r\n\r\n// let megaUnit = 16 * majorUnit\r\n\r\nexport class Structure {\r\n    name: string = '(default structure name)';\r\n    description: string = '(default structure description)';\r\n    view: string = '<add a default structure (room) view>';\r\n    width: number = 10 //* sizeFactor\r\n    height: number = 10 //* sizeFactor\r\n    zoom: number = 1 // 0.1 //.25\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n\r\n    constructor(public origin: Vector = new Vector(0, 0)) { }\r\n}\r\n\r\nexport class MissionControl extends Structure {\r\n    name: string = 'Mission Control';\r\n    description: string = 'Keeping everything on track';\r\n    view: string = 'MissionControlView';\r\n    width: number = 10 * majorUnit\r\n    height: number = 3 * majorUnit\r\n    zoom = 0.1\r\n}\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = 2 * majorUnit\r\n    height: number = 10 * majorUnit //150 // * sizeFactor\r\n    zoom = 0.25\r\n}\r\n\r\nexport class Dome extends Structure {\r\n    name: string = 'Biodome';\r\n    description: string = 'Biome sweet biome';\r\n    produces = ResourceBlock.Food\r\n\r\n    view: string = 'DomeView';\r\n    width: number = 10 * majorUnit\r\n    height: number = 8 * majorUnit\r\n    zoom = 0.2\r\n}\r\n\r\nexport class AccessTunnel extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'AccessTunnelView'\r\n    width: number = 10 * minorUnit\r\n    height: number = 3 * minorUnit\r\n    zoom = 0.5\r\n}\r\n\r\nexport class CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = 8 * majorUnit\r\n    height: number = 5 * majorUnit\r\n\r\n}\r\n\r\nexport class LivingQuarters extends Structure {\r\n    name: string = 'Quarters'\r\n    description: string = 'sleepy time'\r\n    view: string = 'LivingQuartersView'\r\n    width: number = 3 * majorUnit\r\n    height: number = 5 * majorUnit\r\n}\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = 5 * minorUnit\r\n    height: number = 1 * minorUnit\r\n}\r\n\r\nexport class Laboratory extends Structure {\r\n    name: string = 'Lab'\r\n    description: string = 'learn some things'\r\n    produces = ResourceBlock.Data\r\n    view: string = 'LabView'\r\n    width: number = 11 * majorUnit\r\n    height: number = 5 * majorUnit\r\n}\r\n\r\n\r\nexport class Kitchen extends Structure {\r\n    name: string = 'Kitchen'\r\n    description: string = 'veg -> meals'\r\n    consumes = ResourceBlock.Food\r\n    produces = ResourceBlock.Meal\r\n    view: string = 'KitchenView'\r\n    width: number = 4 * majorUnit\r\n    height: number = 5 * majorUnit\r\n}\r\n\r\nexport class Mess extends Structure {\r\n    name: string = 'Mess'\r\n    description: string = 'consume meals'\r\n    view: string = 'MessView'\r\n    width: number = 6 * majorUnit\r\n    height: number = 5 * majorUnit\r\n}\r\n\r\nexport class Mine extends Structure {\r\n    name: string = 'Mine'\r\n    description: string = 'ore else'\r\n    produces = ResourceBlock.Ore\r\n    view: string = 'MineView'\r\n    width: number = 20 * majorUnit\r\n    height: number = 20 * majorUnit\r\n}\r\n//export class Workshop extends Structure {\r\n//    name: string = 'Workshop'\r\n//    description: string = 'manual'\r\n//    view: string = 'WorkshopView'\r\n//    width: number = 120 * sizeFactor\r\n//    height: number = 80 * sizeFactor\r\n//}\r\n//\r\n//export class Factory extends Structure {\r\n//    name: string = 'Factory'\r\n//    description: string = 'assembly'\r\n//    view: string = 'FactoryView'\r\n//}\r\n\r\n// lab, mine, warehouse/storage, kitchen, workshop, factory","import { Building } from './Building';\r\n\r\nimport { AccessTunnelView } from './AccessTunnelView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { MissionControlView } from './MissionControlView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { LivingQuartersView } from './LivingQuartersView';\r\n\r\nexport {\r\n    Building,\r\n\r\n    AccessTunnelView,\r\n    CommonAreaView,\r\n    DomeView,\r\n    MissionControlView,\r\n    TunnelView,\r\n    LivingQuartersView,\r\n}","import { Vector } from \"excalibur\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem)) //vec) => cursor.distance(vec)\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n}","import { Actor, Vector, CollisionType, Color, Label } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport * as ex from 'excalibur';\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, flatSingle, measureDistance } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\n\r\nexport class Building extends Actor {\r\n    label: Label\r\n    built: boolean = false\r\n    hover: boolean = false\r\n\r\n    facing: Orientation = Orientation.Right\r\n    edgeWidth: number = 4\r\n    hideBox: boolean = false\r\n\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    // input: Color[] = []\r\n    product: ResourceBlock[] = []\r\n\r\n    capacity: number = 4\r\n\r\n    // consumeColor: Color = null\r\n    // productColor: Color = null\r\n    productionTime: number = 500\r\n\r\n    constructor(public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          structure.origin.x, // + 20,\r\n          structure.origin.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new ex.Vector(0,0)\r\n\r\n        // console.log(`CREATE NEW ${structure.name}`, { origin: structure.origin, width: structure.width, height: structure.height })\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.label = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        this.label.color = Color.White\r\n    }\r\n\r\n    setup(): void {}\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    } \r\n    reshape(cursor: Vector): void {\r\n        // by default just follow the mouse\r\n        this.pos = cursor.clone()\r\n\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    // response is whether we're 'done'\r\n    // (in general this would be true, unless you need special handling\r\n    // -- multiple clicks for some reason...)\r\n    handleClick(cursor: Vector): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    get produces() { return this.structure.produces }\r\n    get consumes() { return this.structure.consumes }\r\n\r\n    async interact(citizen: Citizen) {\r\n        console.log(\"interact!!!\")\r\n        // should we give this citizen an item?\r\n        if (this.product.length > 0) {\r\n            console.log(\"we have production to give away\")\r\n            citizen.carry(this.produces) //productColor.clone())\r\n            this.product.pop()\r\n            // return true\r\n        } else {\r\n            console.log(\"we check to see if we can consume\", { consumes: this.consumes, carrying: citizen.carrying})\r\n            // is the citizen carrying a raw material we can process?\r\n            if (this.consumes && citizen.carrying === this.consumes) { //consumeColor) {\r\n                // now we need to await this thing being processed\r\n                await citizen.progressBar(4000)\r\n                //  citizen.carrying\r\n\r\n                // change it in place?\r\n                citizen.carry(this.produces)\r\n            }\r\n        }\r\n    }\r\n\r\n    protected produce(step: number) {\r\n        if (this.produces && !this.consumes && step % this.productionTime === 0) {\r\n            let shouldProduce = true;\r\n            if (shouldProduce) {\r\n                this.product.push(this.produces) //Color.Blue)\r\n                console.log(\"PRODUCE\", { produces: this.produces, product: this.product })\r\n            }\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            this.drawRect(ctx, this.aabb(), this.edgeWidth)\r\n        }\r\n\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).desaturate(0.3).lighten(0.2).toRGBA();\r\n            ctx.fillRect(this.x + 20 * index, this.y - 20, 18, 18)\r\n        })\r\n\r\n        this.label.pos = this.getCenter()//this.label.getWidth() //ctx.measureText()\r\n        this.label.pos.x -= ctx.measureText(this.structure.name).width / 2 //bthis.label.getWidth()\r\n        this.label.draw(ctx, delta)\r\n\r\n        let debug = true;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    this.drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n            if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    this.drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n        if (this.step % 10 === 0) {\r\n            let tryProduce = this.built && this.produces && this.product.length < this.capacity;\r\n            if (tryProduce) {\r\n                this.produce(this.step);\r\n            }\r\n        }\r\n        this.step += 1\r\n    }\r\n\r\n\r\n    protected drawRect(ctx: CanvasRenderingContext2D, rectangle: Rectangle, edgeWidth: number = 5, color: Color = null) {\r\n        let { x, y, width, height } = rectangle;\r\n\r\n        let edge = color || this.edgeColor();\r\n        ctx.fillStyle = edge.toRGBA();\r\n        ctx.fillRect(x, y, width, height)\r\n\r\n        let main = color || this.mainColor();\r\n        ctx.fillStyle = main.toRGBA();\r\n        ctx.fillRect(\r\n            x + edgeWidth,\r\n            y + edgeWidth,\r\n            width - edgeWidth*2,\r\n            height - edgeWidth*2\r\n        )\r\n    }\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.5);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    protected validConnectingStructures(): (typeof Structure)[] {\r\n        return [ ];\r\n    }\r\n\r\n    protected validConnectingDirections(): Orientation[] {\r\n        return [\r\n            Orientation.Up,\r\n            Orientation.Down,\r\n            Orientation.Left,\r\n            Orientation.Right\r\n        ]\r\n    }\r\n\r\n    protected findSlot(pos: Vector): Slot {\r\n        let buildings = this.validConnectingStructures().map(structure =>\r\n            this.planet.closestBuildingByType(pos, [structure])\r\n        )\r\n        let slotList = flatSingle(buildings.map(building => building ? building.slots() : []))\r\n\r\n\r\n        // select slots that COULD match one of our faces (and do so 'legally'...)\r\n        slotList = slotList.filter((slot: Slot) => \r\n            this.validConnectingDirections().includes(slot.facing) &&\r\n              this.slots().some((ourSlot: Slot) => slot.facing === flip(ourSlot.facing))\r\n        )\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(cursor: Vector) {\r\n        let theSlot = this.findSlot(cursor)\r\n        if (theSlot) {\r\n            // position us so our slot lines up\r\n            let matchingSlot = this.slots().find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n}","import { Color } from \"excalibur\";\r\n\r\n// import { Building } from \"../actors/Building\";\r\n\r\n// type Ore = Beryllium \r\nexport enum ResourceBlock {\r\n    // base\r\n    Food = 'Food',\r\n    Ore = 'Ore',\r\n    Data = 'Data',\r\n\r\n    // derived\r\n    Meal = 'Meal',\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    switch(block) {\r\n        case ResourceBlock.Food: return Color.Green\r\n        case ResourceBlock.Ore:  return Color.Red\r\n        case ResourceBlock.Data: return Color.Blue\r\n\r\n        case ResourceBlock.Meal: return Color.Yellow\r\n    }\r\n}\r\n\r\n// a list of tasks?\r\n// type Haul = { source: Building, destination: Building }\r\n// // type Task = Haul\r\n\r\n// export class Economy {\r\n//     constructor() { // map: Graph<Building>)\r\n\r\n//     }\r\n// }","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { CommonAreaView } from \".\";\r\nimport { Color } from \"excalibur\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\n\r\nexport class KitchenView extends CommonAreaView {\r\n}","import { Building, CommonAreaView } from \".\";\r\n\r\nexport class MessView extends CommonAreaView {\r\n\r\n}","import { CommonAreaView } from '.'\r\nimport { Color, Vector } from 'excalibur';\r\nimport { ResourceBlock } from '../../models/Economy';\r\n\r\nexport class MineView extends CommonAreaView {\r\n    // produces = ResourceBlock.Ore\r\n    // productColor = Color.Red\r\n    // productionTime = 1000\r\n    floorHeight = 150\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Color } from \"excalibur\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\n\r\nexport class LabView extends CommonAreaView {\r\n    // productColor = Color.Blue\r\n    //productionTime = 600\r\n}","import { AccessTunnelView } from \".\";\r\nimport { MissionControl, Dome } from \"../../models/Structure\";\r\n\r\nexport class SurfaceRoadView extends AccessTunnelView {\r\n    edgeWidth: 0\r\n    // pickingOrigin: boolean = true\r\n    validConnectingStructures() {\r\n        return [ MissionControl, Dome ];\r\n    }\r\n}","import { Label, UIActor, Color } from \"excalibur\";\r\nimport { Dome, Structure, AccessTunnel, CommonArea, LivingQuarters, SurfaceRoad, Mine, Laboratory, Kitchen, Mess } from \"../models/Structure\";\r\n\r\nexport class Hud extends UIActor {\r\n    static structuresForPalette = [\r\n        Dome, AccessTunnel, CommonArea,\r\n        LivingQuarters, SurfaceRoad,\r\n        Laboratory, Mine,\r\n        Kitchen, Mess,\r\n    ];\r\n    label: Label\r\n    constructor(message = 'welcome to osiris', protected onBuildingSelect = null) {\r\n        super(0, 0);\r\n        this.label = new Label(message, 10, 32, 'Helvetica')\r\n        this.label.fontSize = 32\r\n        this.label.color = Color.White\r\n        this.add(this.label)\r\n\r\n        this._makePalette(onBuildingSelect)\r\n    }\r\n    protected _paletteElement: HTMLDivElement\r\n\r\n    protected _makePalette(fn: (Structure) => any) {\r\n        this._paletteElement = document.createElement('div') \r\n        this._paletteElement.style.position = 'absolute'\r\n        document.body.appendChild(this._paletteElement)\r\n\r\n        // buttons\r\n        Hud.structuresForPalette.forEach((structure: typeof Structure) => {\r\n            let s = new structure()\r\n            let _paletteButton = this.buttonFactory(s);\r\n            this._paletteElement.appendChild(\r\n                _paletteButton\r\n            )\r\n\r\n\r\n            _paletteButton.onclick = (e) => {\r\n                // console.log(`${structure.name}`)\r\n                fn(s) //new structure())\r\n                e.stopPropagation()\r\n            }\r\n        });\r\n    }\r\n\r\n    private buttonFactory(s: Structure) {\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = `${s.name}`;\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '13pt';\r\n        paletteButton.style.fontFamily = 'Helvetica';\r\n        paletteButton.style.padding = '8px';\r\n        paletteButton.style.width = '100px';\r\n        paletteButton.style.background = Color.White.darken(0.08).toRGBA();\r\n        paletteButton.style.color = Color.Black.lighten(0.16).toRGBA();\r\n        return paletteButton;\r\n    }\r\n\r\n    message(text: string) { this.label.text = text }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this._paletteElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._paletteElement.style.left = `${left + 20}px`;\r\n            this._paletteElement.style.top = `${top + 100}px`;\r\n        }\r\n    }\r\n\r\n}","import { CommonAreaView } from \".\";\r\n\r\nexport class LivingQuartersView extends CommonAreaView {\r\n    edgeWidth: number = 2\r\n    afterConstruct() {\r\n        console.log(\"AFTER CONSTRUCT LIVING QUARTERS\")\r\n        setTimeout(() => this.planet.populate(this.pos), 100)\r\n    }\r\n\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { MissionControl } from \"../../models/Structure\";\r\nimport { range, eachCons, measureDistance } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y // + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), y) //, Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n        // super.graph(g)\r\n        // okay, so we need to connect our 'line' of nodes together\r\n        // we don't necessarily need to care if there IS a child node there\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        // connect node to first slot...\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        eachCons(this.slotHeights(), 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n        this.slotHeights().forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n\r\n            child.graph(g)\r\n        }\r\n        //  this.s\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 40\r\n        let slotCount = Math.floor((this.getHeight()-60) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                100 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        // let slotSize = 40\r\n        // let slotCount = Math.floor((this.getHeight()-60) / slotSize)\r\n        let theSlots: Slot[] = []\r\n\r\n        // one at the top pointing up??\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) { //range(slotCount)) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    // 100 + this.pos.y + i * slotSize,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    // 100 + this.pos.y + i * slotSize,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n        // console.log({theSlots})\r\n        return theSlots;\r\n    } \r\n\r\n    validConnectingStructures() { return [ MissionControl ] }\r\n    validConnectingDirections() { return [ Orientation.Down ] }\r\n\r\n    handleClick(cursor: Vector) {\r\n        // pick nearest mission ctrl as origin\r\n        if (this.pickingOrigin) {\r\n            //let theSlot = this.findSlot(cursor);\r\n            ////let lastCtrl: Building = this.planet.closestBuildingByType(\r\n            ////    this.pos, MissionControl // 'Mission Control'\r\n            ////)\r\n            //if (theSlot) {\r\n            //    this.pos = theSlot.pos\r\n            //    // let missionControlWidth = new MissionControl().width\r\n            //    // this.pos.x = slot.pos.x + missionControlWidth / 2 - this.getWidth() / 2 //[0].x\r\n            //    let matchingSlot = this.slots().find(s => s.facing == flip(theSlot.facing))\r\n            //    if (matchingSlot) {\r\n            //        let offset = this.pos.sub(matchingSlot.pos)\r\n            //        this.pos.addEqual(offset)\r\n\r\n                    this.pickingOrigin = false;\r\n                    return false;\r\n            //    }\r\n            //}\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // picking a depth for a tunnel first?\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n\r\n            this.alignToSlot(cursor)\r\n            //let theSlot = this.findSlot(cursor);\r\n            //if (theSlot) {\r\n            //    this.pos = theSlot.pos\r\n            //}\r\n            // snap to nearest mission ctrl?\r\n            //let lastCtrl: Building = this.planet.closestBuildingByType(\r\n            //    cursor, MissionControl //'Mission Control'\r\n            //)\r\n            //this.pos.x = lastCtrl.x + lastCtrl.getWidth() / 2 - this.getWidth() / 2 //[0].x\r\n\r\n        } else {\r\n            // we're determining depth of tunnel\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n    // draw(ctx: CanvasRenderingContext2D) {\r\n    //     let depth = this.getHeight()\r\n    //     let width = this.getWidth()\r\n    //     let edgeWidth = 4\r\n\r\n    //     let edgeColor = this.edgeColor()\r\n    //     let mainColor = this.mainColor()\r\n\r\n    //     ctx.fillStyle = edgeColor.toRGBA()\r\n    //     ctx.fillRect(this.x, this.y, width, depth)\r\n\r\n    //     if (this.pickingOrigin) { mainColor.a = 0.5 }\r\n    //     ctx.fillStyle = mainColor.toRGBA()\r\n    //     ctx.fillRect(this.x + edgeWidth, this.y, width - edgeWidth*2, depth)\r\n    // }\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n}","import { Actor, Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { SSL_OP_TLS_BLOCK_PADDING_BUG } from \"constants\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class MissionControlView extends Building {\r\n    hideBox = true\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n           \r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        // cursor.x = this.x //.getTop()\r\n        cursor.y = this.planet.getTop(); //Math.max(planet.getTop() + 100, cursor.y)\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor // x = cursor.x\r\n        this.pos.y -= this.getHeight() - 2 // + 1\r\n    }\r\n\r\n    async interact(citizen: Citizen) {\r\n        let resource = citizen.drop()\r\n        console.log(\"citizen gathered resource\", { resource })\r\n        // citizen.work()\r\n\r\n        // return true\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        let color = this.mainColor(); //Color.White //.darken(0.3)\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n        // y is going to be surface height\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        // could draw a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3*(this.getWidth()/4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n        // shadow?\r\n        //ctx.fillStyle = this.color.darken(0.2).toRGBA()\r\n        //ctx.fillRect(this.x, this.y, this.getHeight())\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { SurfaceRoad } from \"../../models/Structure\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\n\r\n// we're constrained to the surface, so...\r\nexport class DomeView extends Building {\r\n    productionTime = 300\r\n    // produces = ResourceBlock.Food\r\n    // productColor = Color.Green\r\n    hideBox = true\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots = [];\r\n        let slotY = this.getHeight(); // / 2;\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5, // / 2,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } // this.baseColor; }\r\n\r\n    validConnectingStructures() { return [ SurfaceRoad ]; }\r\n}","import { Building } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { AccessTunnel, Structure, CommonArea, Laboratory, LivingQuarters, Mine, Kitchen, Mess } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 8\r\n    edgeWidth: number = 1\r\n    // maybe you can set height AND width of common area view??\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n        return theSlots;\r\n    }\r\n\r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    protected validConnectingStructures(): (typeof Structure)[] {\r\n        return [ AccessTunnel, CommonArea, Mine, Laboratory, LivingQuarters, Mess, Kitchen ];\r\n    }\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { MainTunnel, CommonArea, LivingQuarters, Laboratory, Mine } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class AccessTunnelView extends Building {\r\n    edgeWidth: number = 0.4\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // picking a depth for a tunnel first?\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            this.facing = theSlot.facing\r\n\r\n            if (theSlot && this.facing === Orientation.Left) {\r\n               this.originX = theSlot.pos.x\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n               this.setWidth(Math.abs(this.originX - cursor.x))\r\n               this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n\r\n    validConnectingStructures() {\r\n        return [\r\n            MainTunnel,\r\n            CommonArea,\r\n            LivingQuarters,\r\n            Laboratory,\r\n            Mine\r\n        ];\r\n    }\r\n\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 30; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 1000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(10)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, peakHeight + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { Structure, MissionControl, Laboratory, Mine, Dome, Kitchen } from \"../models/Structure\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\n\r\nexport class Citizen extends Actor {\r\n    walkSpeed: number = 600\r\n    carrying: ResourceBlock = null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    constructor(building: Building, protected planet: Planet) {\r\n        super(building.nodes()[0].x,building.nodes()[0].y,4,10,Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = (now - this.workStarted) / this.workDuration //0.5\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            ctx.fillStyle = blockColor(this.carrying).toRGBA()\r\n            ctx.fillRect(this.x+4, this.y-3, 5, 5)\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            // draw progress bar?\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            // ctx.stroke(20)\r\n            ctx.strokeRect(px, py, pw, ph)\r\n\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n\r\n            this.vel.x += (Math.random())-0.5 // * 10.0)\r\n        }\r\n    }\r\n\r\n    carry(c: ResourceBlock) { //c: Color) {\r\n        this.carrying = c;\r\n    }\r\n\r\n    drop() {\r\n        if (this.carrying) {\r\n            let c = this.carrying; //.clone();\r\n            this.carrying = null;\r\n            return c\r\n        }\r\n        return true\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        console.log(\"PROGRESS BAR\")\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        console.log(\"PROGRESS BAR DONE!\")\r\n        this.workInProgress = false\r\n    }\r\n\r\n    async walkTo(building: Building) { //}, onArrival: (Building) => any) {\r\n        // let building = this.planet.closestBuildingByType(this.pos, structure)\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = null\r\n            // onArrival(building);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    async work() {\r\n        if (this.carrying) {\r\n            console.log(\"carrying\", this.carrying)\r\n            let item: ResourceBlock = this.carrying;\r\n            let sinks = []\r\n            if (ResourceBlock[item] === 'Food') {\r\n                sinks = [Kitchen]\r\n            } else {\r\n                sinks = [MissionControl]\r\n            }\r\n\r\n            if (sinks.length > 0) {\r\n                let theSink = this.planet.closestBuildingByType(this.pos, sinks)\r\n                if (theSink) {\r\n                    await this.walkTo(theSink) //, async (b) => await b.interact(this))\r\n                    await theSink.interact(this)\r\n                    console.log(\"delivered to sink!\")\r\n                }\r\n            } else {\r\n                console.log(\"nowhere to deliver it\", this.carrying)\r\n            }\r\n        } else {\r\n            let source = this.planet.closestBuildingByType(this.pos,\r\n                [Dome, Mine, Laboratory],\r\n                (building) => building.product.length > 0\r\n            )\r\n\r\n            if (source) {\r\n                await this.walkTo(source) //, async (b) => await b.interact(this))\r\n                await source.interact(this)\r\n                console.log(\"gathered from source!!\")\r\n            } else {\r\n                console.log(\"i guess i can try again? (sleep for a bit first)\")\r\n        await new Promise((resolve, reject) => setTimeout(resolve, 3000));\r\n                //etTimeout(() => this.work(), 500)\r\n            }\r\n        }\r\n\r\n        // console.log(\"DONE WORK\")\r\n        // this.work()\r\n        setTimeout(() => this.work(), 100)\r\n        // await new Promise((resolve, reject) => setTimeout(resolve, 500));\r\n        // await this.work()\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, range } from '../../Util';\r\nimport { Citizen } from '../Citizen';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure, MissionControl, LivingQuarters } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\n\r\nexport class Planet extends Actor {\r\n    buildings: Building[] = []\r\n    citizens: Citizen[] = []\r\n    navTree: NavigationTree\r\n    currentlyConstructing: Building = null\r\n\r\n    constructor(\r\n        // public effectiveY: number,\r\n        public color: Color,\r\n        public width: number = 2000000,\r\n        public depth: number = 100000,\r\n        ) {\r\n        super(0, depth/2, width, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2 // effectiveY + size/2\r\n        // crust\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 20\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n       if (this.currentlyConstructing) {\r\n           this.currentlyConstructing.draw(ctx, delta)\r\n       }\r\n        this.buildings.forEach(building => building.draw(ctx, delta))\r\n\r\n        this.citizens.forEach(citizen => citizen.draw(ctx, delta))\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.buildings.forEach(building => building.update(engine, delta))\r\n        this.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true\r\n        // whew\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building)\r\n            // rebuild nav?\r\n            this.buildNavTree()\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct()\r\n    }\r\n\r\n    populate(pos: Vector) {\r\n        let home = this.closestBuildingByType(pos, [LivingQuarters])\r\n        console.log(\"populating\", { home })\r\n        let citizen = new Citizen(home, this)\r\n        citizen.work()\r\n        this.citizens.push(citizen)\r\n    }\r\n\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        let matching = this.buildings.filter(building => \r\n            structureTypes.some(structureType => (building.structure instanceof structureType)) &&\r\n              predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0])\r\n            return minBy(matching, distanceToCursor)\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) { this.buildNavTree() }\r\n        let srcNode = this.navTree.closestNode(origin)\r\n        let dest = destination.nodes()[0]\r\n        let destNode = this.navTree.closestNode(dest)\r\n        let path = this.navTree.seekPath(srcNode, destNode)\r\n        return path\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl)\r\n        }\r\n    }\r\n\r\n}","import { Scene, Input, UIActor, Label, Vector, LockCameraToActorStrategy } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MissionControl, MainTunnel, Dome, AccessTunnel, CommonArea, LivingQuarters, SurfaceRoad, Kitchen, Mess } from \"../models/Structure\";\r\nimport { Building, DomeView, AccessTunnelView, CommonAreaView, TunnelView, MissionControlView, LivingQuartersView } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud\";\r\nimport { SurfaceRoadView } from \"../actors/Building/SurfaceRoadView\";\r\nimport { LabView } from \"../actors/Building/LabView\";\r\nimport { MineView } from \"../actors/Building/MineView\";\r\nimport { MessView } from \"../actors/Building/MessView\";\r\nimport { KitchenView } from \"../actors/Building/KitchenView\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n    // buildings: Building[] = []\r\n    // people: Citizen[] = []\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    // currentlyBuilding?: Building\r\n\r\n    static structureViews: { [key: string]: typeof Building } = {\r\n        TunnelView,\r\n        MissionControlView, //: new MissionControlView()\r\n        DomeView,\r\n        AccessTunnelView,\r\n        CommonAreaView,\r\n        LivingQuartersView,\r\n        SurfaceRoadView,\r\n        LabView,\r\n        MineView,\r\n        KitchenView,\r\n        MessView,\r\n    }\r\n    ////\r\n    static requiredStructureList: Array<typeof Structure> = [\r\n        MissionControl,\r\n\r\n        SurfaceRoad,\r\n        Dome,\r\n        MainTunnel,\r\n        AccessTunnel,\r\n        Kitchen,\r\n        Mess,\r\n        LivingQuarters,\r\n        \r\n        //CommonArea,\r\n    ]\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        this.planet = new Planet(game.world.color);\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.hud = new Hud('hi', (structure) => {\r\n            //if (this.currentlyBuilding) {\r\n            //    this.remove(this.currentlyBuilding)\r\n            //}\r\n            this.startConstructing(structure)\r\n        });\r\n        this.add(this.hud)\r\n\r\n        this.prepareNextBuilding()\r\n        // this.camera.zoom(0.25)\r\n        // this.camera.y = 0 //-this.planet.depth/2\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentBuilding = this.planet.currentlyConstructing\r\n                if (currentBuilding) {\r\n                    // constrain...\r\n                    let constrained = currentBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentBuilding.reshape(this.player.pos)\r\n                } else {\r\n                    // show pluses where you could expand?\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', (e: Input.PointerUpEvent) => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentBuilding: Building = this.planet.currentlyConstructing\r\n                if (currentBuilding) {\r\n                    let placementValid = !currentBuilding.overlapsAny()\r\n                    // console.log(\"placement valid?\", { placementValid, currentBuilding })\r\n                    if (currentBuilding && placementValid && currentBuilding.handleClick(e.pos)) {\r\n                        // console.log(\"placed!\")\r\n                        this.planet.placeBuilding(currentBuilding)\r\n                        this.planet.currentlyConstructing = null\r\n                        this.prepareNextBuilding(e.pos)\r\n                    } else {\r\n                        // console.log(\"couldn't place?\")\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n\r\n    get buildings() { return this.planet.buildings }\r\n\r\n\r\n    private nextMissingRequiredStructure(): Structure {\r\n        let requiredStructures: Structure[] = Construct.requiredStructureList.map(s => new s())\r\n        let actualStructureNames: string[] = this.buildings.map(building => building.structure.name)\r\n\r\n        // console.log({ actualStructureNames, requiredNames: requiredStructures.map(s => s.name) })\r\n        return requiredStructures.find(structure => !actualStructureNames.includes(structure.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        // let structure = Construct.structureList[this.currentBuildingListIndex % Construct.structureList.length]; \r\n        let structure = null;\r\n        let nextMissing = this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        // else { this.currentBuildingListIndex += 1 }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.message(`Welcome to OSIRIS`)\r\n        }\r\n    }\r\n\r\n    startConstructing(structure: Structure, pos: Vector = new Vector(0, 0)) {\r\n        structure.origin = pos\r\n        this.hud.message(`Place ${structure.name}`)\r\n        let theNextOne = this.spawnBuilding(structure)\r\n        this.planet.currentlyConstructing = theNextOne\r\n        this.camera.pos = theNextOne.pos\r\n        this.camera.zoom(structure.zoom, 250)\r\n\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(anotherBuilding.pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure): Building {\r\n        let View = Construct.structureViews[structure.view]\r\n        let building = new View(structure, this.planet)\r\n        return building;\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\n\r\nexport class Colony {\r\n    // origin: Vector\r\n    structures: Structure[] = []\r\n    // build(structure) ...\r\n}\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Red, Color.Blue, Color.Green] // Color.Viridian, Color.Magenta, Color.Chartreuse];\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ). // Color.Rose //World.colors).\r\n        lighten(0.15).\r\n        desaturate(0.65) // sample([Color.Blue, Color.Rose,Color.Blue]).lighten(0.1).desaturate(0.8)\r\n  colony: Colony = new Colony()\r\n}","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword)\r\n}\r\n\r\nexport { Resources }\r\n","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() { //loader: ex.Loader) {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\n// scenes\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}