{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Util.ts","webpack:///./src/values/DeviceSize.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Machine.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/Painting.ts","webpack:///./src/models/Structure.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/strategies/Strategy.ts","webpack:///./src/actors/Device.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Building/BackgroundPatterns.ts","webpack:///./src/values/Scale.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Resources.ts","webpack:///./src/actors/player.ts","webpack:///./src/strategies/EatingStrategy.ts","webpack:///./src/strategies/WhenHungryEatingStrategy.ts","webpack:///./src/strategies/SleepingStrategy.ts","webpack:///./src/strategies/AnyBedSleepingStrategy.ts","webpack:///./src/strategies/ConstructionStrategy.ts","webpack:///./src/strategies/ProximityBasedConstruction.ts","webpack:///./src/values/InteractionRequest.ts","webpack:///./src/strategies/ProductionStrategy.ts","webpack:///./src/strategies/CapacityBasedProduction.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/actors/Hud/MusicPlayer.ts","webpack:///./src/actors/Hud/Palette.ts","webpack:///./src/actors/Hud/CardBody.ts","webpack:///./src/actors/Hud/CardTitle.ts","webpack:///./src/actors/Hud/Card.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MediumSurfaceRoomView.ts","webpack:///./src/actors/Building/MediumRoomThreeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/images/window-bg.png","webpack:///./src/images/beige-bg.png","webpack:///./src/images/checker-bg.png","webpack:///./src/images/tech-bg.png","webpack:///./src/images/poster-wall-bg.png","webpack:///./src/images/books-bg.png","webpack:///./src/images/leafy-bg.png","webpack:///./src/images/raised-square-bg.png","webpack:///./src/images/fabricator-plain.svg","webpack:///./src/images/mega-console-plain.svg","webpack:///./src/images/console-red-plain.svg","webpack:///./src/images/console-green-plain.svg","webpack:///./src/images/console-purple-plain.svg","webpack:///./src/images/console-plain.svg","webpack:///./src/images/workstation-plain.svg","webpack:///./src/images/houseplant-plain.svg","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/models/MechanicalOperation.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/sounds/future tense.mp3","webpack:///./src/sounds/understanding.mp3","webpack:///./src/sounds/indivision.mp3","webpack:///./src/sounds/assembler.mp3","webpack:///./src/sounds/crater-rock.mp3","webpack:///./src/images/sword.png","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","deleteByValueOnce","index","indexOf","eachCons","measureDistance","b","sleep","ms","Promise","resolve","setTimeout","shuffle","sort","zip","countOccurrences","counts","forEach","containsUniq","testElems","doesContain","arrCopy","missingItem_1","testElem","find","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","fifth","eighth","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","SurfaceRoadView_1","SurfaceRoadView","SmallDomeThreeView_1","SmallDomeThreeView","MidDomeView_1","MidDomeView","BigDomeView_1","BigDomeView","SmallRoomThreeView_1","SmallRoomThreeView","MediumRoomView_1","MediumRoomView","LargeRoomView_1","LargeRoomView","HugeRoomView_1","HugeRoomView","MediumRoomThreeView_1","MediumRoomThreeView","MediumSurfaceRoomView_1","MediumSurfaceRoomView","structureViews","excalibur_1","Orientation_1","Game_1","Util_1","Graph_1","Economy_1","SpaceFunction_1","DeviceSize_1","BackgroundPatterns_1","Painting_1","DevicePlace","pos","this","_super","structure","planet","_this","x","y","width","height","infra","color","darken","Color","Transparent","edgeWidth","placed","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","devices","active","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","some","currentlyViewing","toggleActive","collisionType","CollisionType","PreventCollision","nameLabel","Label","White","__extends","draw","ctx","delta","drawRect","aabb","processedColor","getCenter","measureText","Game","debugPath","slots","slot","rect","Gray","lighten","nodes","node","Yellow","devicePlaces","place","position","visibleSize","update","engine","device","tryProduce","spaceFunction","description","economy","emptyUnlessActive","isActive","emptyMarket","machineEconomies","buildingEconomy","__assign","Oxygen","demand","supply","sumMarkets","inUse","wasEquil","equilibrium","console","log","_i","allValues_1","allValues","localCap","availableCapacity","globalCap","agg","constrainCursor","clone","reshape","afterConstruct","handleClick","_pos","getWidth","getHeight","graph","supergraph","Graph","g","rootNode","findOrCreate","_a","child","parentSlot","edge","childNode","redeem","res","gather","debit","spend","populate","elite","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","bldg","edgeColor","mainColor","colorBase","clr","Red","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","closestBuildingByType","building","matchingSlot","compass_1","compass","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","subEqual","add","updateFunction","machine","onPlacement","hasPlaceForDevice","nextDevicePlace","getDevices","allSpaceFunctions","spaceFn","matched","unseenDevices","machines","matchingDevice","sf","text","background","BackgroundPattern","Grid","Actor","PureValue","market","Power","Water","Shelter","Hope","Joy","Wisdom","Wealth","Beauty","Wonder","ea","eb","newMarket","sa","da","_b","every","ResourceBlock","Biomass","Ore","Idea","Meal","Data","Mineral","Bioplasma","Alloy","Algorithm","Argent","Aurum","Omnium","blockColors","Green","Blue","cStep","Viridian","DarkGray","Orange","blockColor","block","desaturate","t","setPrototypeOf","__proto__","constructor","create","assign","arguments","MechanicalOperation_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","plant","workstation","consolePurple","consoleGreen","consoleRed","megaconsole","fabricator","Violet","store","mechanicalOperations","generate","recipe","spawn","accelerateTime","Machine","LightGray","cost","operation","type","image","prereqs","forDome","hide","concretize","CommandCenter","built","produceResource","MissionLog","OxygenExtractor","WaterCondensingMachine","SolarCell","StudyMachine","Workstation","Desk","Bookshelf","Fridge","Stove","Bed","Houseplant","PersonnelRegistry","CloningVat","OrientationConsole","productionTime","AlgaeVat","DissolutionVat","PlasmaBank","Fabricator","LifeSciencesConsole","Botany","MetalStorage","ResearchServer","Orchard","Cabin","Arbor","MineralProcessor","ThinkingFountain","MolecularEngine","fromHex","SilverForest","Megafabricator","Mainframe","TimeCrystal","HoloProjector","SacredGrove","AtomicCompiler","MiningDrill","Preserve","LogicPool","Cathedral","Microcity","LogicCrystal","allMachines","Left","Up","Down","orientation","Error","drawLine","lineWidth","beginPath","moveTo","lineTo","strokeStyle","toRGBA","stroke","drawPatternedRect","pattern","gridPattern","getBackgroundPattern","fillStyle","fillRect","setLineDash","strokeRect","rectangle","filled","dashed","main","drawStar","cx","cy","outerRadius","innerRadius","spikes","rot","PI","cos","sin","closePath","Machine_1","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","Structure","view","zoom","Corridor","Ladder","MainTunnel","second","MediumSurfaceRoom","SurfaceRoad","first","Dome","CommonArea","SmallRoomThree","sixth","SmallRoomTwo","SmallDome","MediumRoom","MediumRoomThree","LargeRoom","HugeRoom","seventh","SmallDomeThree","MidDome","LargeDome","Arcology","allStructures","Structure_1","SpaceFunction","Beige","bonuses","capacity","workSpeed","MissionControl","Window","LivingQuarters","Barracks","Kitchen","Checker","LifeSupportPod","Retreat","CloneMatrix","CloneReception","ReadingRoom","Library","Books","Study","ComputerLab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Leafy","Farm","Factory","ComputerCore","Tech","LifeSciencesLab","Refinery","Mine","HoloMatrix","TimeChamber","InteractionRequest_1","Strategy","pawn","sleepInterval","currentPlanet","findPoweredDevices","recipes","operations","op","attempt","label","sent","pause","gatherBlock","debug","gathered","generatesDesiredBlock","product","stored","gen","closestDeviceByType","storesDesiredBlock","visitDevice","waitTimes","warn","interact","retrieveResource","visit","workRecipe","produces","knowsRecipe","reserved","maker","made","gatherIngredients","consumes","performRecipeTask","blocks","isCarryingUnique","blocks_1","ingredient","tries","timesToAttempt","worked","Device","initialPos","imageLoaded","fontSize","Image","onload","src","globalAlpha","drawImage","imageX","imageY","iv","bx","by","yOff","produced","blockSize","assemble","citizen","progressBar","drop","request","recipe_1","carrying","it","includes","consumed","workTime","getEffectiveWorkTime","carry","requires","has","store_1","dispense","stores","getEffectiveOperationalCapacity","res_1","bonus","round","resource","generationTime","generates","snap","snapped","Resources_1","world","displayMode","DisplayMode","FullScreen","backgroundColor","Black","start","loader","Loader","key","Resources","addResource","then","citizenSpeed","Engine","raisedSquare","leafy","bookish","posters","tech","checker","beige","loadBg","path","loading","Poster","backgroundPatterns","bg","createPattern","majorUnit","fourth","minorUnit","minorScale","empty","edges","edgesInverse","isEmpty","newNode","contains","testNode","measure","tolerance","dfs","dst","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","steps","srcIndex","reverse","sword","craterRock","assembler","indivision","understanding","futureTense","Sword","Texture","CraterRock","Sound","Assembler","Indivision","Understanding","FutureTense","ex","Player","setWidth","setHeight","EatingStrategy","EatingStrategy_1","WhenHungryEatingStrategy","canApply","isHungry","storedResources","desk","eat","SleepingStrategy","SleepingStrategy_1","AnyBedSleepingStrategy","isTired","hour","takeRest","Strategy_1","ConstructionStrategy","unbuiltDevice","findAllDevices","ProxmityBasedConstruction","constructDevice","resources","ProductionStrategy","storeBlock","openStore","CapacityBasedProduction","findStore","storage_1","recipeForStoredResource","CapacityBasedProduction_1","ProximityBasedConstruction_1","AnyBedSleepingStrategy_1","WhenHungryEatingStrategy_1","Citizen","home","isPlanning","workInProgress","sleeping","hunger","energy","currentBuilding","productionStrategy","constructionStrategy","sleepingStrategy","eatingStrategy","timeFactor","work","now","Date","getTime","progress","workStarted","workDuration","save","translate","rotate","restore","carried","px","pw","py","c_1","duration","reject","pathBetweenPoints","followPath","target","glideTo","actions","walkSpeed","asPromise","all","choice","strategies","strat","Citizen_1","Population","citizens","increase","NavigationTree","seekPath","origin","dest","closestNode","abs","NavigationTree_1","Colony","currentlyConstructing","debugTree","navTree","gradient","createLinearGradient","addColorStop","placeBuilding","buildNavTree","structureTypes","st","pathBetween","destination","srcNode","destNode","machineTypes","ctrl","activeBuildings","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","saturate","yBase","peak","y0","mtnWidth","PlanetBackground","PlanetBackground_1","Colony_1","Population_1","Device_1","Planet","Sky","hud","onBuildingHover","onDeviceHover","w","depth","sky","skyColor","createLayer","layerHeight","population","currentHour","colorMap","night","dawn","morning","afternoon","evening","inc","set","buildingOrDevice","theLayer","theEconomy","popularDemand","resourceGathered","resourceExpended","maxPop","theEconomyWithoutPeople","values","val","closestDevice","factor","acc","MusicPlayer","playlist","paused","makePlayer","startMusic","_titleElem","textContent","currentTrack","keys","play","advancePlaylist","_element","left","canvas","offsetLeft","top_1","offsetTop","_wrapper","style","top","document","createElement","textAlign","border","body","appendChild","display","fontFamily","padding","inlineBlock","iconFactory","handleAction","action","song","stop","ndx","trackNames","append","iconContent","fg","icon","innerHTML","onclick","Palette","onButtonClick","onButtonEnter","comprehend","comprehended","makePalette","updateBuilt","prereq","parentElement","removeChild","title","fontWeight","margin","btn","buttonFactory","onmouseenter","paletteButton","textTransform","onmouseover","onmouseleave","CardBody","entity","describeResources","freqs","join","notes","fontStyle","FontStyle","Italic","footer","show","describeEconomy","resourceDescription","domeStatus","bonusMessages","econ","CardTitle","announce","CardTitle_1","CardBody_1","Card","x0","cardBody","ix","iy","present","EconomicValue","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","updateView","updatedEconomy","allValues_2","ResourceListEntry","resourceBlock","credit","amt","ResourceListEntry_1","ResourcesList","entries","rx","ry","entry","increment","decrement","ResourcesList_1","EconomyView_1","StatusAnalysisView","h","brand","ty","version","popLabel","messageLabel","incrementResource","decrementResource","setMessage","showEconomy","showPopCap","cap","StatusAnalysisView_1","Card_1","Palette_1","MusicPlayer_1","Hud","game","onBuildingSelect","onMachineSelect","onFunctionSelect","canvasWidth","canvasHeight","hidePalettes","status","displayInfo","showCard","structurePalette","structuresForPalette","machinePalette","functionPalette","functionsForPalette","card","clock","musicPlayer","Crater Rock","Future Tense","showPalettes","updateDetails","rebuildPalettes","time","updatePalettes","updateEconomy","updateMaxPop","days","toString","hh","hours","minutes","ampm","padStart","updateBuildingPalette","updateMachinePalette","updateFunctionPalette","builtStructures","builtMachines","machinesForPalette","builtReifiedFunctions","builtFunctions","rf","UIActor","devicePlaceSize","devicePlaceCount","sg","leftSlot","rightSlot","right","theSlots","slotY","getTop","backgroundPattern","flagX","flagY","_1","floorHeight","originSlot","pickingOrigin","maxHeight","drawShape","xoff","yoff","bezierCurveTo","halfWidth","slotHeights","heights","y1","btm","lst","slotCount","arc","floorColor","originX","newCursor","input","output","Hud_1","Planet_1","player_1","Construct","dragging","defaultMessage","placingFunction","firstBuilding","buildIt","startConstructing","player","prepareNextBuilding","camera","addTimer","Timer","stepTime","onActivate","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction_1","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","moveCam","direction","camMoveSpeed","dv","move","keyboard","Keys","H","Esc","W","A","S","D","onDeactivate","off","nextMissingStructureOrFunction","reqs","requiredStructuresAndFunctions","req","actualStructureNames","actualFunctionNames","actualNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","spawnFunction","anotherBuilding","assembleBuildingFromStructure","theStructure","Scene","World","colors","Cyan","Vermillion","bestowName","World_1","Construct_1","theWorld","construct","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([95,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { getBackgroundPattern, BackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport const deleteByValueOnce = (arr, elem) => {\r\n  let index = arr.indexOf(elem);\r\n  if (index !== -1) arr.splice(index, 1);\r\n}\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function shuffle(arr) {\r\n   return arr.sort(() => Math.random() > 0.5 ? 1 : -1) \r\n}\r\n\r\nexport const zip = (a, b) => a.map((e,i) => [e, b[i]])\r\n\r\nexport const countOccurrences = (arr) => {\r\n  let counts = {}\r\n  arr.forEach((elem) => {\r\n    counts[elem] = counts[elem] || 0\r\n    counts[elem] += 1\r\n  })\r\n  return counts\r\n}\r\n\r\nexport function containsUniq<T>(arr: T[], testElems: T[]) {\r\n  let doesContain = false\r\n  let arrCopy = arr.slice()\r\n  if (arr.length > 0) {\r\n    let missingItem = false\r\n    testElems.forEach(testElem => {\r\n      if (arrCopy.find(e => e === testElem)) {\r\n        deleteByValueOnce(arrCopy, testElem)\r\n      } else {\r\n        missingItem = true\r\n      }\r\n    })\r\n    doesContain = !missingItem\r\n  }\r\n  return doesContain\r\n}","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.fifth; break;\r\n        case DeviceSize.Large: sz = major.eighth + major.third; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\nimport { SmallDomeThreeView } from './SmallDomeThreeView';\r\nimport { MidDomeView } from './MidDomeView';\r\nimport { BigDomeView } from './BigDomeView';\r\nimport { SmallRoomThreeView } from './SmallRoomThreeView';\r\nimport { MediumRoomView } from './MediumRoomView';\r\nimport { LargeRoomView } from './LargeRoomView';\r\nimport { HugeRoomView } from './HugeRoomView';\r\nimport { MediumRoomThreeView } from './MediumRoomThreeView';\r\nimport { MediumSurfaceRoomView } from './MediumSurfaceRoomView';\r\n\r\n\r\nconst structureViews: { [key: string]: typeof Building } = {\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n    MediumSurfaceRoomView,\r\n}\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n\r\n    MediumSurfaceRoomView,\r\n\r\n\r\n    structureViews\r\n\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, deleteByValue, containsUniq } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock, emptyMarket, Economy, sumMarkets, equilibrium, allValues, availableCapacity } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { World } from \"../../models/World\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { EconomicValue } from \"../Hud/EconomicValue\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0\r\n\r\n    nameLabel: Label\r\n\r\n    placed: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    spaceFunction: SpaceFunction\r\n\r\n    private devices: Device[] = []\r\n    givenName: string\r\n\r\n    private active: boolean = true\r\n    // private built: boolean = false\r\n\r\n    constructor(pos: Vector, public structure: Structure, public planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          structure.infra ? planet.color.darken(0.3) : Color.Transparent\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            if (!this.devices.some(d => d.hover)) {\r\n                this.planet.currentlyViewing = this\r\n            }\r\n        })\r\n\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED BUILDING\", { building: this })\r\n            this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.color = Color.White\r\n\r\n        if (this.structure.infra) { this.active = true }\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        // this.devices.forEach(device => device.draw(ctx, delta))\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n        }\r\n\r\n        // let debug = true;\r\n        if (Game.debugPath) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = true\r\n        if (showDevicePlaces && this.devicePlaces().length > 0) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    0.1,\r\n                    Color.White,\r\n                    false,\r\n                    true\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n\r\n        let tryProduce = this.placed;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.tryProduce(this.step));\r\n        }\r\n\r\n        // this.devices.forEach(d => d.update(engine, delta))\r\n\r\n        this.step += 1\r\n    }\r\n\r\n    get name() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.name\r\n        } else {\r\n            return this.structure.name\r\n        }\r\n    }\r\n\r\n    get description() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.description\r\n        } else {\r\n            return this.structure.description\r\n        }\r\n    }\r\n\r\n    economy(emptyUnlessActive: boolean = true): Economy {\r\n        if (emptyUnlessActive && !this.isActive) {\r\n            return emptyMarket()\r\n        } else {\r\n            let machineEconomies = this.devices.map(d => d.economy)\r\n            //machine.economy)\r\n\r\n            let buildingEconomy = {\r\n                ...emptyMarket(),\r\n                Oxygen: { demand: 1, supply: 0 }, // structural demand\r\n                // Water: { demand: 0.1, supply: 0 },\r\n            }\r\n\r\n            let aggregate = [...machineEconomies, buildingEconomy]\r\n                .reduce(sumMarkets, emptyMarket())\r\n\r\n            return aggregate\r\n        }\r\n    }\r\n\r\n    private toggleActive() {\r\n        if (!this.structure.infra) {\r\n            if (this.active) {\r\n                if (this.devices.some(d => d.inUse)) { return }\r\n                let wasEquil = equilibrium(this.planet.economy)\r\n                this.active = false\r\n                if (wasEquil) {\r\n                    if (!equilibrium(this.planet.economy)) {\r\n                        this.active = true\r\n                        // return\r\n                    }\r\n                    // this.active = true\r\n                } else {\r\n                    // we weren't at equilibrium previously\r\n                    // permit it, if we don't have any supply that would go negative without us?\r\n                    console.log(\"can we toggle?\")\r\n                    for (let value of allValues) {\r\n                        let localCap = availableCapacity(this.economy(false), value)\r\n                        let globalCap = availableCapacity(this.economy(false), value)\r\n                        console.log(\"value\", { value, localCap, globalCap})\r\n                        if (localCap > 0 && globalCap < 0) {\r\n                            // don't permit it\r\n                            this.active = true\r\n                        }\r\n                    }\r\n                }\r\n            } else { // this.active is false now\r\n                let agg = [\r\n                    this.planet.economy,\r\n                    this.economy(false)\r\n                ].reduce(sumMarkets, emptyMarket())\r\n\r\n                if (equilibrium(agg)) {\r\n                    this.active = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get isActive() { return !!this.active }\r\n\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public debit(res: ResourceBlock) {\r\n        this.planet.spend(res)\r\n    }\r\n\r\n    public populate(pos: Vector, elite: boolean = false) {\r\n        this.planet.populate(pos, elite) //this.pos)\r\n    }\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.placed)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (!this.active) {\r\n            clr = clr.darken(0.8)\r\n        }\r\n\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        // device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        device.pos.subEqual(this.pos) // = this.devicePlaces()[0].position\r\n        // console.log(\"DEVICE IS AT\", { pos: device.pos })\r\n        this.add(device)\r\n        this.updateFunction()\r\n        device.machine.onPlacement(device)\r\n        this.toggleActive()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices //.filter(d => d.built)\r\n    }\r\n\r\n    private updateFunction() {\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let matched = true;\r\n            let unseenDevices = this.devices.slice()\r\n            let sf = new spaceFn()\r\n            sf.machines.forEach((machine: typeof Machine) => {\r\n                let matchingDevice = unseenDevices.find(d => d.machine instanceof machine)\r\n                if (!matchingDevice) { matched = false; }\r\n                unseenDevices = deleteByValue(unseenDevices, matchingDevice)\r\n            })\r\n            return matched\r\n            // return containsUniq(\r\n                // this.devices.map(d => d.machine),\r\n                // sf.machines.map((machine: typeof Machine) => new m())\r\n            // );\r\n        })\r\n        if (fn) {\r\n            // console.log(\"Determined building function\", { fn })\r\n            let sf = new fn()\r\n            this.spaceFunction = sf\r\n            this.nameLabel.text = sf.name\r\n        } else {\r\n            // console.warn(\"Could not identify function!\")\r\n        }\r\n    }\r\n\r\n    get backgroundPattern() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.background\r\n        } else {\r\n            return BackgroundPattern.Grid\r\n        }\r\n    }\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport const allValues: PureValue[] = [\r\n    PureValue.Power,\r\n    PureValue.Oxygen,\r\n    PureValue.Water,\r\n    PureValue.Shelter,\r\n    PureValue.Hope,\r\n    PureValue.Joy,\r\n    PureValue.Wisdom,\r\n    PureValue.Wealth,\r\n    PureValue.Beauty,\r\n    PureValue.Wonder\r\n]\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return Math.floor(market[value].supply - market[value].demand)\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply,\r\n            demand,\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport const equilibrium: (e: Economy) => boolean = (e) => {\r\n    return allValues.every(value => availableCapacity(e, value) >= 0)\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Biomass = 'Biomass',\r\n    Ore = 'Ore',\r\n    Idea = 'Idea',\r\n\r\n    // derived\r\n    Meal = 'Meal',\r\n    Data = 'Data',\r\n    Mineral = 'Mineral',\r\n    Bioplasma = 'Bioplasma',\r\n\r\n    // higher-order\r\n    Alloy = \"Alloy\",\r\n    Algorithm = \"Algorithm\",\r\n\r\n    // superb\r\n    Argent = \"Argent\",\r\n    Aurum = \"Aurum\",\r\n\r\n    // hyperbolic\r\n    Omnium = \"Omnium\",\r\n}\r\n\r\nlet cStep = 0.3\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Biomass: Color.Green,\r\n    Data: Color.Blue.lighten(cStep),\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(cStep),\r\n    Idea: Color.Blue.lighten(cStep*2), //.desaturate(cStep),\r\n    Ore: Color.Red.darken(cStep),\r\n\r\n    Bioplasma: Color.Viridian,\r\n\r\n    Alloy: Color.DarkGray.darken(cStep), //(cStep),\r\n    Algorithm: Color.Blue.darken(cStep), //.desaturate(cStep),\r\n\r\n    Argent: Color.Gray.lighten(cStep),\r\n    Aurum: Color.Orange.lighten(cStep),\r\n\r\n    Omnium: Color.White,\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    return baseColor.desaturate(0.1) //.lighten(0.1) //.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Color, FontStyle, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { MechanicalOperation, mechanicalOperations } from \"./MechanicalOperation\";\r\nimport { shuffle, range } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\nconst plant = require('../images/houseplant-plain.svg')\r\nconst workstation = require('../images/workstation-plain.svg')\r\n\r\nconst console = require('../images/console-plain.svg')\r\nconst consolePurple = require('../images/console-purple-plain.svg')\r\nconst consoleGreen = require('../images/console-green-plain.svg')\r\nconst consoleRed = require('../images/console-red-plain.svg')\r\nconst megaconsole = require('../images/mega-console-plain.svg')\r\n\r\nconst fabricator = require('../images/fabricator-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n    plant,\r\n    workstation,\r\n\r\n    console,\r\n    consolePurple,\r\n    consoleGreen,\r\n    consoleRed,\r\n    megaconsole,\r\n\r\n    fabricator,\r\n}\r\n\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nlet { store, generate, recipe, spawn, accelerateTime } = mechanicalOperations\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n\r\n    cost: ResourceBlock[] = [ResourceBlock.Mineral]\r\n\r\n    size: DeviceSize = DeviceSize.Small\r\n    operation: MechanicalOperation = { type: 'noop' }\r\n    image = images.vat\r\n    prereqs: (typeof Machine)[] = []\r\n    economy: Economy = emptyMarket()\r\n    forDome: boolean = false\r\n    hide: boolean = false\r\n\r\n    capacity: boolean\r\n\r\n\r\n    concretize(): Machine { return this; } \r\n\r\n    onPlacement(device: Device) {\r\n        // ...whatever we need to script here?\r\n    }\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command Console'\r\n    description = 'commander, we need your help'\r\n    operation = store(\r\n        [ResourceBlock.Mineral], //,ResourceBlock.Biomass],\r\n        24\r\n    )\r\n    image = images.megaconsole\r\n    size = DeviceSize.Medium\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 6, demand: 0 },\r\n        Oxygen: { supply: 16, demand: 0 },\r\n        Water: { supply: 1, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 },\r\n        Shelter: { supply: 1, demand: 0}\r\n    }\r\n\r\n    onPlacement(device: Device) {\r\n        device.built = true\r\n        for (let i in range(20)) {\r\n            device.produceResource(ResourceBlock.Mineral)\r\n        }\r\n        let { building } = device\r\n        building.populate(device.pos.add(building.pos), true)\r\n    }\r\n}\r\n\r\nexport class MissionLog extends Machine {\r\n    name = 'Mission Log'\r\n    description = 'gather data'\r\n    operation = store(\r\n        [ResourceBlock.Data],\r\n        8\r\n    )\r\n    image = images.consolePurple\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n//export class Energon extends Machine {\r\n//    name = 'Energon'\r\n//    description = 'food paste'\r\n//}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 6, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 10, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H2O Condenser'\r\n    description = 'have a drink'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 6, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n/// small subsurface\r\n\r\nexport class StudyMachine extends Machine {\r\n    operation = recipe(\r\n        [ ResourceBlock.Idea, ResourceBlock.Idea, ResourceBlock.Idea ],\r\n        ResourceBlock.Data\r\n    )\r\n    color = Blue\r\n    concretize(): Machine { return new (shuffle([Workstation, Desk])[0])() }\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    description = 'get to work'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    description = 'hackety hack'\r\n    prereqs = [ Bookshelf ]\r\n    image = images.workstation\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n    concretize() { return this }\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    operation = generate(ResourceBlock.Idea)\r\n    image = images.bookshelf\r\n    prereqs = [ OxygenExtractor, Desk ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    operation = store([ResourceBlock.Meal], 6)\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    operation = recipe(\r\n        [ResourceBlock.Biomass, ResourceBlock.Biomass],\r\n        ResourceBlock.Meal\r\n    )\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    description = 'sweet dreams'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    description = 'so nice'\r\n    prereqs = [ Bed ]\r\n    // produces = ResourceBlock.Food\r\n    cost = [ ResourceBlock.Biomass ]\r\n    operation = generate(ResourceBlock.Biomass, 1)\r\n    color = Green\r\n    image = images.plant\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Water: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\nexport class PersonnelRegistry extends Machine {\r\n    name = 'Personnel Registry'\r\n    description = 'track everybody'\r\n    prereqs = [ CloningVat ]\r\n    operation = store([ResourceBlock.Data], 4)\r\n    color = Yellow\r\n    image = images.console\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Wisdom: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class OrientationConsole extends Machine {\r\n    name = 'Orientation Console'\r\n    description = 'welcome to the colony'\r\n    prereqs = [CloningVat]\r\n    operation = generate(ResourceBlock.Data, 1)\r\n    image = images.consoleRed\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'we all grow'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = spawn()\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class DissolutionVat extends Machine {\r\n    name = 'Dissolution Vat'\r\n    description = 'back to basics'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = recipe(\r\n        [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n        ResourceBlock.Bioplasma\r\n    )\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [PlasmaBank]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class PlasmaBank extends Machine {\r\n    name = 'Bioplasm Bank'\r\n    description = 'hold on'\r\n    operation = store([ ResourceBlock.Bioplasma ])\r\n    prereqs = [AlgaeVat]\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    description = 'you made that'\r\n    operation = recipe(\r\n        [ResourceBlock.Mineral, ResourceBlock.Mineral],\r\n         ResourceBlock.Alloy\r\n    )\r\n    size = DeviceSize.Small\r\n    color = Red\r\n    prereqs = [Workstation]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n    image = images.fabricator\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    description = 'where there is a will'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class LifeSciencesConsole extends Machine {\r\n    name = 'Life Sciences Console'\r\n    description = 'mind and body together'\r\n    operation = store([ResourceBlock.Biomass, ResourceBlock.Data], 5)\r\n    prereqs = [Houseplant, Botany]\r\n    color = Green\r\n    image = images.consoleGreen\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.2 },\r\n    }\r\n}\r\n\r\n// medium\r\n\r\nexport class MetalStorage extends Machine {\r\n    name = 'Metal Storage'\r\n    description = 'contain minerals and alloys?'\r\n    operation = store([ResourceBlock.Mineral, ResourceBlock.Alloy], 8)\r\n    prereqs = [Bookshelf]\r\n    color = Red\r\n    size = DeviceSize.Medium\r\n}\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    operation = store([ResourceBlock.Data, ResourceBlock.Algorithm], 10)\r\n    image = images.server\r\n    prereqs = [Bookshelf]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   operation = generate(ResourceBlock.Biomass)\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Oxygen: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   description = 'home on the plains'\r\n   operation = recipe(\r\n       [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n       ResourceBlock.Meal\r\n   )\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    description = 'arbor around the clock'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    description = 'plant lab'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n\r\nexport class MineralProcessor extends Machine {\r\n    name = 'Mineral Processor'\r\n    description = 'wheat from the chaff'\r\n    operation = recipe(\r\n        [ResourceBlock.Ore, ResourceBlock.Ore, ResourceBlock.Ore],\r\n         ResourceBlock.Mineral\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation, Fabricator]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class ThinkingFountain extends Machine {\r\n    name = 'Thinking Fountain'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = generate(ResourceBlock.Aurum, 8)\r\n    cost = [ResourceBlock.Aurum]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\nexport class SilverForest extends Machine {\r\n    name = 'Silver Forest'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Megafabricator, Mainframe ]\r\n    color = Color.fromHex('c0c0c0')\r\n    operation = store([ResourceBlock.Argent], 12)\r\n    cost = [ResourceBlock.Alloy, ResourceBlock.Algorithm]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Beauty: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n    forDome = true\r\n}\r\n\r\nexport class TimeCrystal extends Machine {\r\n    name = 'Time Crystal'\r\n    description = 'xlr8'\r\n    size = DeviceSize.Medium\r\n    color = Color.fromHex('e5e4e2')\r\n    operation = accelerateTime()\r\n    cost = [ResourceBlock.Omnium]\r\n    prereqs = [ Megafabricator, SilverForest ]\r\n}\r\n\r\nexport class HoloProjector extends Machine {\r\n    name = 'Holo Projector'\r\n    description = 'whatever your heart desires'\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    operation = generate(ResourceBlock.Data, 3)\r\n    cost = [ResourceBlock.Algorithm, ResourceBlock.Mineral]\r\n    prereqs = [ Mainframe ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 3, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class SacredGrove extends Machine {\r\n    name = 'Sacred Grove'\r\n    description = 'where the furies play'\r\n    size = DeviceSize.Medium\r\n    forDome = true\r\n    cost = [ ResourceBlock.Omnium ]\r\n    prereqs = [ AtomicCompiler ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 4, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class AtomicCompiler extends Machine {\r\n    name = 'Atomic Compiler'\r\n    description = 'super position'\r\n    operation = recipe(\r\n        [ ResourceBlock.Aurum, ResourceBlock.Argent ],\r\n        ResourceBlock.Omnium\r\n    )\r\n    cost = [ ResourceBlock.Argent, ResourceBlock.Algorithm ]\r\n    prereqs = [ ThinkingFountain, SilverForest ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n}\r\n\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    description = 'ore away'\r\n    operation = generate(ResourceBlock.Ore)\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    operation = recipe(\r\n        [ResourceBlock.Alloy, ResourceBlock.Algorithm],\r\n        ResourceBlock.Argent\r\n    )\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class MolecularEngine extends Machine {\r\n    name = 'Molecular Engine'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Megafabricator ]\r\n    color = Violet\r\n    operation = recipe(\r\n        [ResourceBlock.Bioplasma, ResourceBlock.Algorithm],\r\n        ResourceBlock.Aurum\r\n    )\r\n    image = images.megaconsole\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n        Water: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Mainframe extends Machine {\r\n    name = 'Mainframe'\r\n    size = DeviceSize.Large\r\n    color = Blue\r\n    prereqs = [ResearchServer]\r\n    cost = [ ResourceBlock.Mineral, ResourceBlock.Mineral ]\r\n    operation = recipe(\r\n        [ ResourceBlock.Data, ResourceBlock.Data ],\r\n        ResourceBlock.Algorithm\r\n    )\r\n    image = images.server\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 6 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Nature Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    operation = generate(ResourceBlock.Biomass, 12)\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n        Oxygen: { supply: 12, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicPool extends Machine {\r\n    name = 'Logic Pool'\r\n    size = DeviceSize.Large\r\n    prereqs = [ MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = store([ResourceBlock.Aurum], 12)\r\n    cost = [ResourceBlock.Algorithm, ResourceBlock.Bioplasma]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class Cathedral extends Machine {\r\n    name = 'Cathedral'\r\n    description = 'first ultrahumanist'\r\n    size = DeviceSize.Large\r\n    prereqs = [ SacredGrove ]\r\n}\r\n\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n\r\n    MineralProcessor,\r\n    PlasmaBank,\r\n    DissolutionVat,\r\n    MetalStorage,\r\n    Mainframe,\r\n\r\n    PersonnelRegistry,\r\n    MolecularEngine,\r\n    ThinkingFountain,\r\n    SilverForest,\r\n\r\n    OrientationConsole,\r\n    LifeSciencesConsole,\r\n\r\n    TimeCrystal,\r\n    LogicPool,\r\n    HoloProjector,\r\n    Cathedral,\r\n    SacredGrove,\r\n    AtomicCompiler,\r\n\r\n]","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { BackgroundPattern, getBackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawPatternedRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  if (gridPattern) {\r\n    let { x, y, width, height } = rect;\r\n    ctx.fillStyle = gridPattern\r\n    ctx.fillRect(x,y,width,height)\r\n\r\n    ctx.lineWidth = 2\r\n    ctx.setLineDash([])\r\n    ctx.strokeStyle = Color.White.toRGBA()\r\n    ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true,\r\n  dashed: boolean = false\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  if (filled) {\r\n    let main = color;\r\n    // main.a = 1\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White;\r\n    ctx.strokeStyle = edge.toRGBA();\r\n    ctx.lineWidth=edgeWidth\r\n    if (dashed) { ctx.setLineDash([5, 10]) }\r\n    else { ctx.setLineDash([]) }\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}\r\n\r\nexport function drawStar(ctx, cx, cy, outerRadius=3.6, innerRadius=1.4, spikes=5, ) {\r\n    var rot = Math.PI / 2 * 3;\r\n    var x = cx;\r\n    var y = cy;\r\n    var step = Math.PI / spikes;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(cx, cy - outerRadius)\r\n    for (let i = 0; i < spikes; i++) {\r\n        x = cx + Math.cos(rot) * outerRadius;\r\n        y = cy + Math.sin(rot) * outerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n\r\n        x = cx + Math.cos(rot) * innerRadius;\r\n        y = cy + Math.sin(rot) * innerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n    }\r\n    ctx.lineTo(cx, cy - outerRadius);\r\n    ctx.closePath();\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = 'yellow';\r\n    ctx.stroke();\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.fill();\r\n}","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    color: Color = Color.Gray\r\n    infra: boolean = false\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n\r\n    hide: boolean = false\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MediumSurfaceRoom ],\r\n        [Orientation.Right]: [  Dome, MediumSurfaceRoom ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.fifth\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n    infra = true\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n    infra = true\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    description: string = 'Biome sweet biome';\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.sixth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n\r\n    prereqs = [\r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n    // two small slots\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 2 * major.eighth\r\n    height = 2 * major.third\r\n    // two medium slots...\r\n    \r\n    machines = midBelow\r\n}\r\n\r\nexport class MediumRoomThree extends CommonArea {\r\n    name = 'Mid Room (3)'\r\n    prereqs = [ MediumRoom ]\r\n    view = 'MediumRoomThreeView'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.third\r\n\r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 4 * major.eighth\r\n    height = 3 * major.fifth\r\n\r\n    // two big slots?\r\n    machines = largeBelow\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class MediumSurfaceRoom extends Dome {\r\n    name = 'Mid Surf Bldg'\r\n    description = 'home away from home';\r\n\r\n    view: string = 'MediumSurfaceRoomView';\r\n\r\n    width: number = 6 * major.eighth\r\n    height: number = 1 * major.sixth\r\n\r\n    zoom = 0.1\r\n\r\n    prereqs = [ SmallDome ]\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = midBelow\r\n\r\n    hide = true // need another one which cares about connecting to roads\r\n}\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = 2 * major.seventh\r\n    height = major.seventh\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 3 * major.fifth\r\n    height = 2 * major.fifth\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 3 * major.seventh\r\n    height = 2 * major.seventh\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n\r\n}\r\n\r\n//////\r\n\r\n// export class MissionControl extends Structure {\r\n//     name: string = 'Mission Control';\r\n//     description: string = 'Keeping everything on track';\r\n//     view: string = 'MissionControlView';\r\n//     width: number = 6 * major.eighth\r\n//     height: number = 1 * major.sixth\r\n//     zoom = 0.1\r\n//     connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n//         [Orientation.Left]: [ SurfaceRoad ],\r\n//         [Orientation.Right]: [ SurfaceRoad ],\r\n//         [Orientation.Up]: [ MainTunnel ],\r\n//         [Orientation.Down]: [ MainTunnel ],\r\n//     }\r\n\r\n//     machines = [ CommandCenter ]\r\n// }\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n        MediumSurfaceRoom,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        MediumRoomThree,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine, Mainframe, CommandCenter, MissionLog, Botany, OrientationConsole, PersonnelRegistry, MineralProcessor, MiningDrill, HoloProjector, TimeCrystal } from './Machine';\r\nimport { Color } from 'excalibur';\r\nimport { Structure, MediumSurfaceRoom } from './Structure';\r\nimport { BackgroundPattern } from '../actors/Building/BackgroundPatterns';\r\n\r\nexport class SpaceFunction {\r\n     name: string = '(generic)'\r\n     description: string = '(generic description)'\r\n     machines: (typeof Machine)[] = []\r\n     color: Color = Color.Gray\r\n\r\n     prereqs: (typeof SpaceFunction)[] =  [] \r\n\r\n     structure: typeof Structure = null\r\n     hide: boolean = false\r\n     background: BackgroundPattern = BackgroundPattern.Beige\r\n\r\n     bonuses: {\r\n          capacity: number, // every store/generator gets this??\r\n          workSpeed: number, // 2 should double work speed (dur *= 1/multiplier)\r\n     } = {\r\n          capacity: 0, // boost cap by one\r\n          workSpeed: 1.00 // 20% bonus to work speed\r\n     }\r\n}\r\n\r\nexport class MissionControl extends SpaceFunction {\r\n     hide = true\r\n     name = 'Mission Control'\r\n     description = 'keeping everything on track'\r\n     structure = MediumSurfaceRoom\r\n     prereqs = [] //ComputerCore, Factory, Farm ]\r\n     machines = [ CommandCenter, MissionLog ]\r\n     background = BackgroundPattern.Window\r\n}\r\n\r\n\r\nexport class LivingQuarters extends SpaceFunction {\r\n     name = 'Living Quarters'\r\n     description = 'good night'\r\n     machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n     name = 'Barracks'\r\n     description = 'sleep tight'\r\n     machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nexport class Kitchen extends SpaceFunction {\r\n     name = 'Kitchen'\r\n     description = 'stay together'\r\n     machines = [ Stove, Fridge ]\r\n     bonuses = {\r\n          capacity: 2,\r\n          workSpeed: 1.1\r\n     }\r\n     background = BackgroundPattern.Checker\r\n}\r\n\r\nexport class LifeSupportPod extends SpaceFunction {\r\n     name = 'Life Support'\r\n     description = 'keep it going'\r\n     machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n     name = 'Retreat'\r\n     description = 'take it easy'\r\n     machines = [ Cabin, Cabin ]\r\n}\r\n\r\nexport class CloneMatrix extends SpaceFunction {\r\n     name = 'Clone Matrix'\r\n     description = 'clone home'\r\n     machines = [ CloningVat, CloningVat ]\r\n}\r\n\r\nexport class CloneReception extends SpaceFunction {\r\n     name = 'Clone Reception'\r\n     description = 'welcome clone'\r\n     machines = [ CloningVat, OrientationConsole, PersonnelRegistry ]\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n     name = 'Reading Room'\r\n     description = 'butterflies in the sky'\r\n     machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nexport class Library extends SpaceFunction {\r\n     name = 'Library'\r\n     description = 'take a look'\r\n     machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n     background = BackgroundPattern.Books\r\n}\r\n\r\nexport class Study extends SpaceFunction {\r\n     name = 'Study'\r\n     description = 'plan it out'\r\n     machines = [ StudyMachine, Bookshelf ]\r\n}\r\n\r\nclass ComputerLab extends SpaceFunction {\r\n     name = 'Computer Lab'\r\n     description = 'make it happen'\r\n     machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nexport class Archive extends SpaceFunction {\r\n     name = 'Archive'\r\n     description = 'write it down'\r\n     machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n     name = 'Arboretum'\r\n     description = 'walk it out'\r\n     machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n     name = 'Algae Farm'\r\n     description = 'make do'\r\n     machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nexport class SolarArray extends SpaceFunction {\r\n     name = 'Solar Array'\r\n     description = 'warm up'\r\n     machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nexport class Workshop extends SpaceFunction {\r\n     name = 'Workshop'\r\n     description = 'take form'\r\n     machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\nclass Nursery extends SpaceFunction {\r\n     name = 'Nursery'\r\n     description = 'quiet please'\r\n     machines = [ Houseplant, Houseplant, Houseplant ]\r\n     background = BackgroundPattern.Leafy\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n     name = 'Farm'\r\n     description = 'food for the masses'\r\n     machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n     name = 'Factory'\r\n     description = 'production lines'\r\n     machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\n\r\nexport class ComputerCore extends SpaceFunction {\r\n     name = 'Computer Core'\r\n     description = 'let us calculate'\r\n     machines = [ Mainframe, Mainframe ]\r\n     background = BackgroundPattern.Tech\r\n}\r\n\r\nexport class LifeSciencesLab extends SpaceFunction {\r\n     name = 'Life Sciences Lab'\r\n     description = 'where do i come from'\r\n     machines = [ Botany, Botany ]\r\n}\r\n\r\nexport class Refinery extends SpaceFunction {\r\n     name = 'Refinery'\r\n     description = 'separation'\r\n     machines = [ MineralProcessor ]\r\n}\r\n\r\nexport class Mine extends SpaceFunction {\r\n     name = 'Mine'\r\n     description = 'ore from the stone'\r\n     machines = [ MiningDrill ]\r\n}\r\n\r\nexport class HoloMatrix extends SpaceFunction {\r\n     name = 'Hologram Matrix'\r\n     description = 'dream it'\r\n     machines = [ HoloProjector, HoloProjector ]\r\n}\r\n\r\nexport class TimeChamber extends SpaceFunction {\r\n     name = 'Time Chamber'\r\n     description = 'believe it'\r\n     machines = [ TimeCrystal, TimeCrystal ]\r\n}\r\n\r\n// export class DreamMatrix extends \r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    ComputerLab,\r\n\r\n    ComputerCore,\r\n\r\n    MissionControl,\r\n    LifeSciencesLab,\r\n\r\n    CloneReception,\r\n    \r\n    Refinery,\r\n    Mine,\r\n    HoloMatrix,\r\n    TimeChamber,\r\n]","import { Citizen } from \"../actors/Citizen\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { sleep } from \"../Util\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Recipe, MechanicalOperation } from \"../models/MechanicalOperation\";\r\n\r\nexport abstract class Strategy {\r\n    private sleepInterval: number = 250\r\n    protected isActive: boolean = false;\r\n    constructor(protected pawn: Citizen) { }\r\n\r\n    protected abstract async apply();\r\n    abstract canApply(): boolean;\r\n\r\n    protected get planet(): Planet { return this.pawn.currentPlanet; }\r\n    protected get devices(): Device[] { return this.planet.colony.findPoweredDevices(); }\r\n    protected get operations(): MechanicalOperation[] { return this.devices.map(d => d.operation); }\r\n    protected get recipes(): Recipe[] {\r\n        let recipes: Recipe[] = [];\r\n        this.operations.forEach(op => {\r\n            if (op.type === 'recipe') {\r\n                recipes.push(op);\r\n            }\r\n        });\r\n        return recipes;\r\n    }\r\n\r\n\r\n    async attempt(): Promise<void> {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n        if (!this.isActive) {\r\n            this.isActive = true\r\n            // note apply will need to set this.isActive around its critical section\r\n            await this.apply();\r\n            this.isActive = false\r\n        }\r\n\r\n        await this.pause()\r\n        // setInterval(() => { this.attempt() }, this.sleepInterval)\r\n    }\r\n\r\n    protected async pause() {\r\n        await sleep(this.sleepInterval)\r\n    }\r\n\r\n    protected async gatherBlock(res: ResourceBlock): Promise<boolean> {\r\n        console.debug(\"GATHER BLOCK\", { res })\r\n        let gathered = false\r\n        let generatesDesiredBlock = (d: Device) => (d.operation.type === 'generator') &&\r\n            d.product.some(stored => res === stored) //&& !d.inUse\r\n        let gen: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], generatesDesiredBlock)\r\n\r\n        let storesDesiredBlock = (d: Device) => (d.operation.type === 'store') &&\r\n              d.product.some(stored => res === stored) //&& !d.inUse\r\n        let store: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n\r\n        let device: Device = gen || store\r\n\r\n        if (device) {\r\n            // device.inUse = true\r\n            console.debug(\"Found device to gather, visting...\")\r\n            await this.visitDevice(device)\r\n\r\n            if (device.inUse) {\r\n                // at least wait a bit and try again?\r\n                let waitTimes = 0\r\n                while (device.inUse) {\r\n                    console.warn(\"waiting for device to be ready!\")\r\n                    await sleep(5000) //this.pause()\r\n                    if (waitTimes++ > 10) {\r\n                        return false \r\n                    }\r\n                }\r\n            }\r\n\r\n            console.debug(\"Attempt to interact with device...\")\r\n            if (await device.interact(this.pawn, retrieveResource(res))) {\r\n                console.debug(\"Interacted successfully!\")\r\n                gathered = true\r\n            }\r\n        } else {\r\n            console.warn(\"Didn't gather...\")\r\n            // don't work sub-recipes??\r\n            // let recipe = this.recipes.find(recipe => recipe.produces === res);\r\n            // if (recipe) {\r\n                // gathered = await this.workRecipe(recipe);\r\n                // gathered = true\r\n            // }\r\n        }\r\n\r\n        return gathered\r\n    }\r\n\r\n    protected async visitDevice(device: Device) {\r\n        await this.pawn.visit(device)\r\n    }\r\n\r\n\r\n    protected async workRecipe(recipe: Recipe): Promise<boolean> {\r\n        console.debug(\"Working recipe\", { product: recipe.produces })\r\n        let knowsRecipe = (d: Device) => d.operation === recipe && !d.reserved\r\n        let maker = this.planet.colony.closestDeviceByType(this.pawn.pos, [], knowsRecipe)\r\n        let made = false\r\n        if (maker) {\r\n            maker.reserved = true\r\n            // maker.inUse = true\r\n            if (await this.gatherIngredients(recipe.consumes)) {\r\n                await this.visitDevice(maker)\r\n                if (await this.performRecipeTask(maker, recipe)) {\r\n                    made = true\r\n                }\r\n            }\r\n            maker.reserved = false\r\n            // maker.inUse = false\r\n        }\r\n        // await this.pause()\r\n        // await this.workRecipe(recipe);\r\n        return made\r\n    }\r\n\r\n    protected async gatherIngredients(blocks: ResourceBlock[]): Promise<boolean> {\r\n        if (!this.pawn.isCarryingUnique(blocks)) {\r\n            console.debug(\"Gathering blocks...\")\r\n            for (let ingredient of blocks) {\r\n                console.debug(\"attempting to gather\", { ingredient })\r\n                let tries = 0\r\n                let gathered = false\r\n                while (!gathered && tries < 20) {\r\n                    tries += 1\r\n                    if (await this.gatherBlock(ingredient)) {\r\n                        gathered = true\r\n                    } else {\r\n                        await this.pause()\r\n                    }\r\n                }\r\n\r\n                if (!gathered) {\r\n                    console.warn(\"couldn't gather one of the ingredients!!\")\r\n                    return false\r\n                }\r\n                //else {\r\n                //    console.warn(\"didn't gather it!\")\r\n                //    return false\r\n                //}\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    protected async performRecipeTask(maker: Device, recipe: Recipe, timesToAttempt: number = 5) {\r\n        console.debug(\"Try to perform recipe task...\", { produces: recipe.produces })\r\n        let worked = await maker.interact(this.pawn, { type: 'work', recipe })\r\n        if (!worked) {\r\n            // await this.pause()\r\n            console.warn(\"waiting for machine to become available...\")\r\n            for (let i = 0; i < timesToAttempt; i ++) {\r\n                await this.pause()\r\n                if (await this.performRecipeTask(maker, recipe)) {\r\n                    worked = true\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return worked\r\n    }\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor, emptyMarket } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\nimport { Recipe, ResourceStorage, MechanicalOperation, ResourceGenerator } from \"../models/MechanicalOperation\";\r\nimport { range, deleteByValueOnce } from \"../Util\";\r\nimport { drawRect } from \"../Painting\";\r\nimport { InteractionRequest } from \"../values/InteractionRequest\";\r\n\r\nexport class Device extends Actor {\r\n    // constructionMaterials: ResourceBlock[] = []\r\n\r\n    // could also use for storage?\r\n    product: ResourceBlock[] = []\r\n    nameLabel: Label\r\n    image: any\r\n    building: Building\r\n    inUse: boolean = false\r\n    hover: boolean = false\r\n\r\n    imageLoaded: boolean = false\r\n\r\n    built: boolean = false\r\n    reserved: boolean = false\r\n\r\n    constructor(\r\n        public machine: Machine,\r\n        initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = () => { this.imageLoaded = true }\r\n        this.image.src = machine.image\r\n\r\n        this.on('pointerenter', () => {\r\n            // console.log(\"HOVER ON\", { device: this })\r\n            this.hover = true\r\n            if (this.building) {\r\n                // setInterval(() => {\r\n                this.building.planet.currentlyViewing = this\r\n                // }, 75)\r\n            }\r\n        })\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED DEVICE\", { device: this })\r\n            // this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n            if (this.building) {\r\n                this.building.planet.currentlyViewing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    get imageX() { return this.pos.x - this.getWidth() / 2 }\r\n    get imageY() { return this.pos.y - this.getHeight() / 2 - 10 }\r\n\r\n    get economy() { return this.built ? this.machine.economy : emptyMarket() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (this.imageLoaded) {\r\n            if (!this.built) { ctx.globalAlpha = 0.5 }\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.imageX,\r\n                this.imageY,\r\n\r\n                this.getWidth(),\r\n                this.getHeight()\r\n            )\r\n            if (!this.built) { ctx.globalAlpha = 1.0 }\r\n\r\n            if (this.hover) {\r\n                let c = Color.White\r\n                c.a = 0.6\r\n                drawRect(\r\n                    ctx,\r\n                    { x: this.imageX, y: this.imageY, width: this.getWidth(), height: this.getHeight() },\r\n                    0,\r\n                    c\r\n                )\r\n            }\r\n        }\r\n\r\n        let iv = new Vector(this.imageX, this.imageY)\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = iv\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let { x: bx, y: by } = iv\r\n        let blockSize = 5\r\n        let yOff = this.nameLabel.fontSize\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).toRGBA()\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize + yOff, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get name() { return this.machine.name }\r\n    get description() { return this.machine.description }\r\n    get size() { return this.machine.size }\r\n    get operation() { return this.machine.operation }\r\n\r\n    async assemble(citizen: Citizen) {\r\n        if (citizen.isCarryingUnique(this.machine.cost)) {\r\n            for (let res of this.machine.cost) {\r\n                await citizen.progressBar(1000)\r\n                citizen.drop(res)\r\n            }\r\n            this.built = true\r\n        }\r\n    }\r\n\r\n    async interact(citizen: Citizen, request: InteractionRequest): Promise<boolean> {\r\n        if (this.inUse || !this.built) {\r\n            return false\r\n        }\r\n\r\n        let worked = false\r\n        let op = this.operation\r\n        if (op.type === 'recipe' && request.type === 'work') {\r\n            let recipe: Recipe = op\r\n            // do we have all the things?\r\n            if (citizen.carrying.some(it => recipe.consumes.includes(it))) {\r\n                this.inUse = true\r\n                if (citizen.isCarryingUnique(recipe.consumes)) {\r\n                    recipe.consumes.forEach(consumed => citizen.drop(consumed))\r\n                    let workTime = this.getEffectiveWorkTime(recipe)\r\n                    await citizen.progressBar(workTime) // recipe.workTime)\r\n                    citizen.carry(recipe.produces)\r\n\r\n                    worked = true\r\n                } else {\r\n                    console.warn(\"not carrying all requirements?\", { requires: recipe.consumes, has: citizen.carrying })\r\n                }\r\n                this.inUse = false\r\n            }\r\n        } else if (op.type === 'store') {\r\n            // accept it! (whatever you have that matches...?)\r\n            let store: ResourceStorage = op\r\n            if (request && request.type === 'retrieve') { // assume dispense request for now?\r\n                this.inUse = true\r\n                worked = this.dispense(citizen, request)\r\n                if (worked) {\r\n                    await citizen.progressBar(500)\r\n                }\r\n                this.inUse = false\r\n            } else if (request && request.type === 'store' &&\r\n                citizen.carrying.some(it => store.stores.includes(it))) { // maybe trying to store?\r\n                if (this.product.length < this.getEffectiveOperationalCapacity(store)) { // store.capacity) {\r\n                    let res = null\r\n                    if (store.stores.some(stored => { res = citizen.drop(stored); return res })) {\r\n                        if (res) {\r\n                            this.produceResource(res)\r\n                            // this.product.push(res)\r\n                            // this.building.redeem(res)\r\n                            worked = true\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.warn(\"no capacity in this store!!\")\r\n                    worked = false\r\n                }\r\n            }\r\n        } else if (op.type === 'generator') {\r\n            this.inUse = true\r\n            worked = this.dispense(citizen, request)\r\n            if (worked) {\r\n                await citizen.progressBar(500)\r\n            }\r\n            this.inUse = false\r\n        }\r\n\r\n        return worked\r\n    }\r\n\r\n    getEffectiveOperationalCapacity(op: ResourceGenerator | ResourceStorage) {\r\n        let bonus = this.building.spaceFunction\r\n        ? this.building.spaceFunction.bonuses.capacity \r\n        : 0\r\n        return op.capacity + bonus\r\n    }\r\n\r\n    getEffectiveWorkTime(op: Recipe) {\r\n        let bonus = this.building.spaceFunction \r\n         ? this.building.spaceFunction.bonuses.workSpeed\r\n         : 1\r\n\r\n        return Math.round(op.workTime * (1/bonus))\r\n    } \r\n\r\n\r\n    private dispense(citizen: Citizen, request: InteractionRequest) {\r\n        if (request && request.type === 'retrieve') {\r\n            let canFulfill = this.product.find(p => p === request.resource)\r\n            if (canFulfill) {\r\n                deleteByValueOnce(this.product, request.resource)\r\n                citizen.carry(request.resource)\r\n                this.building.debit(request.resource)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    public tryProduce(step: number) {\r\n        if (this.building.isActive && this.built) {\r\n            if (this.machine.operation.type === 'generator') {\r\n                if (step % this.machine.operation.generationTime === 0) {\r\n                    if (this.product.length < this.machine.operation.capacity) {\r\n                        this.produceResource(this.machine.operation.generates)\r\n                    }\r\n                }\r\n\r\n            } else if (this.machine.operation.type === 'spawn') {\r\n                if (step % 1000 == 0) {\r\n                    // console.log(\"WOULD SPAWN\")\r\n                    setTimeout(() => this.building.populate(this.pos.add(this.building.pos)), 100)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public produceResource(res: ResourceBlock) {\r\n        this.product.push(res)\r\n        this.building.redeem(res)\r\n    }\r\n\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            allStructures,\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        let snapped = false\r\n        if (bldg) {\r\n            let spot = bldg.nextDevicePlace().position\r\n            let d = spot.distance(pos)\r\n            snapped = d < 150\r\n        }\r\n\r\n        if (snapped) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n        } else {\r\n            this.pos = pos\r\n        }\r\n\r\n        return snapped\r\n    }\r\n}","import { Engine, DisplayMode, Loader, Timer, Color } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n  static citizenSpeed: number = 73\r\n  static debugPath: boolean = false\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: Color.Black //world.skyColor\r\n    });\r\n  }\r\n\r\n  public start() {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n\r\n    return super.start(loader).then(() => {\r\n      console.log(\"Osiris running.\")\r\n    });\r\n  }\r\n}","const raisedSquare = require('../../images/raised-square-bg.png')\r\nconst leafy = require('../../images/leafy-bg.png')\r\nconst bookish = require('../../images/books-bg.png')\r\nconst posters = require('../../images/poster-wall-bg.png')\r\nconst tech = require('../../images/tech-bg.png')\r\nconst checker = require('../../images/checker-bg.png')\r\nconst beige = require('../../images/beige-bg.png')\r\nconst window = require('../../images/window-bg.png')\r\n\r\ninterface Background {\r\n    image: HTMLImageElement\r\n    pattern: CanvasPattern\r\n    loading: boolean\r\n}\r\n\r\nconst loadBg = (path) => {\r\n    let background: Background = { image: null, pattern: null, loading: true }\r\n    background.image = new Image();\r\n    background.image.src = path\r\n    background.image.onload = function () {\r\n      background.loading = false\r\n    }\r\n    return background\r\n}\r\n\r\nexport enum BackgroundPattern {\r\n    Leafy = 'Leafy',\r\n    Grid = 'Grid',\r\n    Books = 'Books',\r\n    Poster = 'Poster',\r\n    Tech = 'Tech',\r\n    Checker = 'Checker',\r\n    Beige = 'Beige',\r\n    Window = 'Window',\r\n}\r\n\r\nconst backgroundPatterns: { [ key in BackgroundPattern ]: Background } = {\r\n    Leafy: loadBg(leafy),\r\n    Grid: loadBg(raisedSquare),\r\n    Books: loadBg(bookish),\r\n    Poster: loadBg(posters),\r\n    Tech: loadBg(tech),\r\n    Checker: loadBg(checker),\r\n    Beige: loadBg(beige),\r\n    Window: loadBg(window)\r\n}\r\n\r\nexport const getBackgroundPattern = (ctx, pattern: BackgroundPattern) => {\r\n    let bg = backgroundPatterns[pattern]\r\n    if (!bg.loading) {\r\n        if (!bg.pattern) {\r\n            // bg.image.\r\n            bg.pattern = ctx.createPattern(bg.image, 'repeat');\r\n        }\r\n        return bg.pattern\r\n    }\r\n}","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        let tries = 0\r\n        while (visited.length < this.nodes.length && tries++ < this.nodes.length * 20) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Texture, Sound } from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\nconst craterRock = require('./sounds/crater-rock.mp3')\r\nconst assembler = require('./sounds/assembler.mp3')\r\nconst indivision = require('./sounds/indivision.mp3')\r\nconst understanding = require('./sounds/understanding.mp3')\r\nconst futureTense = require('./sounds/future tense.mp3')\r\n// const isomer = require('./sounds/isomer.mp3')\r\n// const outbound = require('./sounds/outbound.mp3')\r\n\r\nlet Resources = {\r\n    Sword: new Texture(sword),\r\n\r\n    CraterRock: new Sound(craterRock),\r\n    Assembler: new Sound(assembler),\r\n    Indivision: new Sound(indivision),\r\n    Understanding: new Sound(understanding),\r\n    FutureTense: new Sound(futureTense),\r\n    // Isomer: new Sound(isomer),\r\n    // Outbound: new Sound(outbound),\r\n\r\n\r\n}\r\n\r\nexport { Resources }\r\n","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class EatingStrategy extends Strategy {}","import { EatingStrategy } from \"./EatingStrategy\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { Fridge, Desk } from \"../models/Machine\";\r\n\r\nexport class WhenHungryEatingStrategy extends EatingStrategy {\r\n    canApply(): boolean {\r\n        return this.pawn.isHungry &&\r\n            this.planet.storedResources.includes(ResourceBlock.Meal)\r\n        // hunger > 0.6\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    protected async apply() {\r\n        // find the store with the food! reserve it maybe?\r\n        let fridge = this.devices.find(d => d.machine.operation.type === 'store' &&\r\n          d.machine.operation.stores.includes(ResourceBlock.Meal) &&\r\n          d.product.includes(ResourceBlock.Meal) &&\r\n          !d.reserved\r\n        )\r\n\r\n        if (fridge) {\r\n            fridge.reserved = true\r\n            // take the meal to a desk? (maybe need table here... or eatingSurface aspect?)\r\n            await this.visitDevice(fridge)\r\n            await fridge.interact(this.pawn, { type: 'retrieve', resource: ResourceBlock.Meal })\r\n            fridge.reserved = false\r\n\r\n            let desk = this.devices.find(d => d.machine instanceof Desk)\r\n            if (desk) {\r\n                await this.visitDevice(desk)\r\n            }\r\n            await this.pawn.eat()\r\n            // fridge.interac\r\n            // this.pawn.interact()\r\n        }\r\n    }\r\n    \r\n    \r\n}","import { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class SleepingStrategy extends Strategy {\r\n\r\n}","import { SleepingStrategy } from \"./SleepingStrategy\";\r\nimport { Bed } from \"../models/Machine\";\r\nimport { shuffle } from \"../Util\";\r\n\r\nexport class AnyBedSleepingStrategy extends SleepingStrategy {\r\n    canApply(): boolean {\r\n        if (this.pawn.isTired) { //energy > 95) {\r\n            return false\r\n        }\r\n\r\n        let bedtime = this.planet.hour > 21 || this.planet.hour < 4\r\n        return bedtime\r\n    }\r\n\r\n    protected async apply() {\r\n        // find a bed\r\n        let bed = shuffle(this.devices).find(d => d.machine instanceof Bed && !d.inUse)\r\n        if (bed) {\r\n            bed.inUse = true\r\n            await this.visitDevice(bed)\r\n        }\r\n        await this.pawn.takeRest(1000 * 24)\r\n        if (bed) { \r\n            bed.inUse = false\r\n        }\r\n        return true\r\n    }\r\n\r\n}","import { Strategy } from \"./Strategy\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { containsUniq } from \"../Util\";\r\n\r\nexport abstract class ConstructionStrategy extends Strategy {\r\n    canApply(): boolean {\r\n        return !!this.unbuiltDevice\r\n    }\r\n\r\n    get unbuiltDevice() {\r\n        const isUnbuilt = (d: Device) => !d.built && !d.inUse && d.building.isActive &&\r\n          // the player can TRY to build it, we don't have to hang forever on it though\r\n          containsUniq(this.planet.storedResources, d.machine.cost)\r\n        return this.planet.colony.findAllDevices().find(isUnbuilt)\r\n    }\r\n}","import { ConstructionStrategy } from \"./ConstructionStrategy\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nexport class ProxmityBasedConstruction extends ConstructionStrategy {\r\n    async apply() {\r\n        if (this.unbuiltDevice && this.unbuiltDevice.building) {\r\n            await this.constructDevice(this.unbuiltDevice)\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n    private async constructDevice(device: Device) {\r\n        device.inUse = true\r\n        let resources = device.machine.cost\r\n        if (await this.gatherIngredients(resources)) {\r\n            await this.visitDevice(device)\r\n            await device.assemble(this.pawn)\r\n        } \r\n\r\n        device.inUse = false\r\n    }\r\n}","import { ResourceBlock } from \"../models/Economy\";\r\n\r\nimport { Recipe } from \"../models/MechanicalOperation\";\r\n\r\nexport interface RetrieveResource {\r\n    type: 'retrieve'\r\n    resource: ResourceBlock\r\n    // count: number\r\n}\r\n\r\nexport interface WorkRecipe {\r\n    type: 'work'\r\n    recipe: Recipe\r\n}\r\n\r\nexport interface StoreResource {\r\n    type: 'store'\r\n    resource: ResourceBlock\r\n}\r\n\r\nexport function retrieveResource(res: ResourceBlock): RetrieveResource {\r\n    return {\r\n        type: 'retrieve',\r\n        resource: res,\r\n        // count: 1\r\n    }\r\n}\r\n\r\n\r\nexport type InteractionRequest = StoreResource | RetrieveResource | WorkRecipe; // | ...\r\n\r\n","import { Device } from \"../actors/Device\";\r\nimport { MechanicalOperation, Recipe } from \"../models/MechanicalOperation\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class ProductionStrategy extends Strategy {\r\n\r\n\r\n    protected async storeBlock(res: ResourceBlock) {\r\n        let storesDesiredBlock = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) && //operation.capacity &&\r\n            d.operation.stores.includes(res)\r\n        let openStore = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n        let stored = false\r\n        if (openStore) {\r\n            await this.visitDevice(openStore)\r\n            if (await openStore.interact(this.pawn, { type: 'store', resource: res })) {\r\n                stored = true\r\n            }\r\n        }\r\n\r\n        if (!stored) {\r\n            await this.pause()\r\n            await this.storeBlock(res)\r\n        }\r\n    }\r\n\r\n}\r\n","import { shuffle, containsUniq } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Recipe, ResourceStorage } from \"../models/MechanicalOperation\";\r\nimport { ProductionStrategy } from \"./ProductionStrategy\";\r\n\r\nexport class CapacityBasedProduction extends ProductionStrategy {\r\n    private findStore() {\r\n        const storeWithCapacity = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) //&&\r\n            // !d.inUse\r\n            // containsUniq(this.planet.storedResources, d.operation)\r\n        let store: Device = shuffle(this.devices).find(storeWithCapacity)\r\n        return store\r\n    }\r\n\r\n    canApply(): boolean {\r\n        // throw new Error(\"Method not implemented.\");\r\n        return !!this.findStore()\r\n    }\r\n\r\n    async apply() {\r\n        let store = this.findStore()\r\n\r\n        if (store && store.operation.type === 'store') {\r\n            // store.inUse = true\r\n            const storage: ResourceStorage = store.operation\r\n            const recipeForStoredResource = (r: Recipe) => storage.stores.some(stored => r.produces === stored)\r\n            let recipe: Recipe = shuffle(this.recipes).find(recipeForStoredResource)\r\n            if (recipe && containsUniq(this.planet.storedResources, recipe.consumes)) {\r\n                if (await this.workRecipe(recipe)) {\r\n                    await this.storeBlock(recipe.produces)\r\n                }\r\n            }\r\n            // store.inUse = false\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons, deleteByValueOnce, sleep, containsUniq, deleteByValue } from \"../Util\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { ProductionStrategy } from \"../strategies/ProductionStrategy\";\r\nimport { CapacityBasedProduction } from \"../strategies/CapacityBasedProduction\";\r\nimport { drawStar, drawRect } from \"../Painting\";\r\nimport { ConstructionStrategy } from \"../strategies/ConstructionStrategy\";\r\nimport { ProxmityBasedConstruction } from \"../strategies/ProximityBasedConstruction\";\r\nimport { SleepingStrategy } from \"../strategies/SleepingStrategy\";\r\nimport { AnyBedSleepingStrategy } from \"../strategies/AnyBedSleepingStrategy\";\r\nimport { EatingStrategy } from \"../strategies/EatingStrategy\";\r\nimport { WhenHungryEatingStrategy } from \"../strategies/WhenHungryEatingStrategy\";\r\n\r\nexport class Citizen extends Actor {\r\n    isPlanning: boolean = false // \r\n\r\n    // walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock[] = [] // null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    sleeping: boolean = false\r\n\r\n\r\n    private productionStrategy: ProductionStrategy\r\n    private constructionStrategy: ConstructionStrategy\r\n    private sleepingStrategy: SleepingStrategy\r\n    private eatingStrategy: EatingStrategy\r\n\r\n    private hunger: number = 0.0;\r\n    private energy: number = 100\r\n\r\n    constructor(private home: Vector, protected planet: Planet, private elite: boolean = false) {\r\n        super(home.x, home.y, Scale.minor.first, Scale.minor.fourth, Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.productionStrategy = new CapacityBasedProduction(this)\r\n        this.constructionStrategy = new ProxmityBasedConstruction(this)\r\n        this.sleepingStrategy = new AnyBedSleepingStrategy(this)\r\n        this.eatingStrategy = new WhenHungryEatingStrategy(this)\r\n    }\r\n\r\n    get isHungry() { return this.hunger > 0.6 }\r\n    get isTired()  { return this.energy < 95 }\r\n\r\n    // get isWorking() { return this.isWorking }\r\n    get currentPlanet() { return this.planet }\r\n\r\n    get walkSpeed() {\r\n        return this.planet.timeFactor * Game.citizenSpeed + (this.elite ? 250 : 0)\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // make sure we are busy!\r\n        this.work()\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = \r\n              Math.min(\r\n                  (now - this.workStarted) / this.workDuration,\r\n                  1\r\n              )\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        ctx.save()\r\n        // ctx.globalAlpha = 1.0\r\n        ctx.translate(this.x, this.y - this.getHeight()/2)\r\n        if (this.sleeping) {\r\n            ctx.rotate(Math.PI / 2);\r\n            ctx.translate(0, -5)\r\n        }\r\n        // ctx.globalAlpha = 1.0 //?\r\n        drawRect(\r\n            ctx,\r\n            { x: 0, y: 0, width: this.getWidth(), height: this.getHeight() },\r\n            0,\r\n            Color.White\r\n        )\r\n        // super.draw(ctx, delta)\r\n        ctx.restore()\r\n\r\n        if (this.elite) {\r\n            // draw a little star?\r\n            drawStar(ctx, this.pos.x + 6, this.pos.y - 9)\r\n        }\r\n\r\n        if (this.carrying) {\r\n            this.carrying.forEach((carried, idx) => {\r\n                ctx.fillStyle = blockColor(carried).toRGBA()\r\n                ctx.fillRect(this.x + 4, this.y - 3 * idx, 5, 5)\r\n            })\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            ctx.strokeRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n        }\r\n\r\n        // let debugPath = true\r\n        if (this.path && Game.debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 4\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        this.workInProgress = false\r\n    }\r\n\r\n\r\n    carry(c: ResourceBlock) {\r\n        this.carrying.push(c);\r\n    }\r\n\r\n    isCarryingUnique(resources: ResourceBlock[]): boolean {\r\n        let isCarrying = containsUniq(this.carrying, resources)\r\n        return isCarrying\r\n    }\r\n\r\n    drop(res: ResourceBlock): ResourceBlock {\r\n        if (this.carrying.length > 0) {\r\n            if (this.carrying.find(r => r === res)) {\r\n                deleteByValueOnce(this.carrying, res)\r\n                return res\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    currentBuilding: Building = null\r\n    async visit(device: Device) {\r\n        if (this.currentBuilding != device.building) {\r\n            const path = this.planet.pathBetweenPoints(this.pos.clone(), device.pos.add(device.building.pos))\r\n            await this.followPath(path)\r\n        }\r\n        let target = device.pos.add(device.building.pos)\r\n        await this.glideTo(target)\r\n        this.currentBuilding = device.building\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        if (pos) {\r\n            return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n        }\r\n    }\r\n\r\n    async followPath(path: Vector[]) {\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = []\r\n        }\r\n    }\r\n    \r\n    protected get strategies() {\r\n        return [\r\n            this.sleepingStrategy,\r\n            this.eatingStrategy,\r\n            this.constructionStrategy,\r\n            this.productionStrategy\r\n        ]\r\n    }\r\n\r\n    async work() {\r\n        if (this.isPlanning || this.sleeping) { return }\r\n\r\n        this.isPlanning = true\r\n        // just get rid of it??\r\n        if (this.carrying.length > 0) { this.carrying = [] }\r\n        let choice = this.strategies.find(strat => strat.canApply())\r\n        if (choice) {\r\n            await choice.attempt()\r\n            this.energy -= 4\r\n            this.hunger += 0.1\r\n        }\r\n        this.isPlanning = false\r\n    }\r\n\r\n    async takeRest(duration: number) {\r\n        console.log(\"Citizen taking a well-deserved rest!!\")\r\n        this.sleeping = true\r\n        await this.progressBar(duration)\r\n        this.energy = 100\r\n        this.sleeping = false\r\n    }\r\n\r\n    async eat() {\r\n        console.log(\"Citizen eating a meal!\")\r\n        // this.eating = true\r\n        await this.progressBar(4000)\r\n        deleteByValueOnce(this.carrying, ResourceBlock.Meal)\r\n        this.hunger = 0\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(pos, elite: boolean = false) {\r\n        let citizen = new Citizen(pos, this.planet, elite);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { Game } from '../../Game';\r\n\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = Game.debugPath\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.placed = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0] //.length > 1 ? destination.nodes()[1] : destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination; //.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        // console.log(\"PATH FOUND BTWN POINTS\", { srcNode, destNode, path })\r\n        return path;\r\n    }\r\n\r\n\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findPoweredDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d.pos.add(d.building.pos))\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings[0] //.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices(): Device[] {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n\r\n    findPoweredDevices(): Device[] {\r\n        return flatSingle(this.activeBuildings.map(b => b.getDevices()))\r\n            .filter(d => d.built) /// ....\r\n    }\r\n\r\n    protected get activeBuildings() {\r\n        return this.buildings.filter(b => b.isActive)\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range, flatSingle } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { AccelerateTime, MechanicalOperation } from '../../models/MechanicalOperation';\r\nimport { World } from '../../models/World';\r\nimport { drawRect } from '../../Painting';\r\n\r\nclass Sky extends Actor {\r\n    constructor(\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number,\r\n        color: Color\r\n    ) {\r\n        super(x,y,width,height,color)\r\n    }\r\n\r\n    draw(ctx, delta) {\r\n        drawRect(\r\n            ctx,\r\n            {x: this.x, y: this.y, width: this.getWidth(), height: this.getHeight() },\r\n            0,\r\n            this.color,\r\n        )\r\n    }\r\n}\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n    // baseColor: Color\r\n    sky: Actor\r\n\r\n    constructor(\r\n        public world: World,\r\n        public hud: Hud,\r\n        // public color: Color,\r\n        private onBuildingHover: (b: Building) => any,\r\n        private onDeviceHover: (d: Device) => any,\r\n        private w: number = 2000000,\r\n        private depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, w, depth, world.color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        // this.baseColor = world.color.clone()\r\n\r\n        this.sky = new Actor(0,-depth,w,depth, world.skyColor) //Color.Blue)\r\n        this.add(this.sky)\r\n\r\n        let yBase = -depth/2\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n\r\n    }\r\n\r\n\r\n    private currentHour: number\r\n    get hour() { return this.currentHour }\r\n    set hour(hour: number) {\r\n        this.currentHour = hour\r\n\r\n        let c = this.world.skyColor.clone().darken(0.2).desaturate(0.1)\r\n\r\n        let colorMap = {\r\n            night: c.darken(0.7),\r\n            dawn: c.darken(0.2),\r\n            morning: c.lighten(0.1),\r\n            afternoon: c.lighten(0.3),\r\n            evening: c,\r\n        }\r\n\r\n        if (hour >= 5 && hour < 8) { // dawn\r\n            let inc = (hour - 6) / 5\r\n            this.sky.color = colorMap.dawn.lighten(inc)\r\n        } else if (hour >= 8 && hour < 12) { // morning\r\n            let inc = (hour - 8) / 24\r\n            this.sky.color = colorMap.morning.lighten(inc)\r\n        } else if (hour >= 12 && hour < 14) { // early afternoon\r\n            this.sky.color = colorMap.afternoon //.darken(inc)\r\n        } else if (hour >= 14 && hour < 18) {  // late afternoon\r\n            let inc = (hour - 14) / 16\r\n            this.sky.color = colorMap.afternoon.darken(inc)\r\n        } else if (hour >= 18 && hour < 23) { // evening\r\n            let inc = (hour - 18) / 10\r\n            this.sky.color = colorMap.evening.darken(inc)\r\n        } else if (hour >= 23) { // late night\r\n            this.sky.color = colorMap.night\r\n        } else if (hour < 5) { // early morning\r\n            this.sky.color = colorMap.night\r\n        } else {\r\n            console.warn(\"No sky color handler for current time:\", { hour })\r\n        }\r\n    }\r\n\r\n    set currentlyViewing(buildingOrDevice: Building | Device) {\r\n        if (buildingOrDevice instanceof Building) {\r\n            let b: Building = buildingOrDevice\r\n            this.onBuildingHover(b)\r\n        } else if (buildingOrDevice instanceof Device) {\r\n            let d: Device = buildingOrDevice\r\n            this.onDeviceHover(d)\r\n        }\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        // let devices = this.colony.findPoweredDevices()\r\n        // let economies = devices.map((d: Device) => d.machine.economy)\r\n\r\n        let buildings = this.colony.buildings\r\n        let economies = buildings.map(b => b.economy())\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    spend(resource: ResourceBlock): any {\r\n        this.hud.resourceExpended(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector, elite: boolean = false) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            // console.log(\"POPULATIN'!\")\r\n            // let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(pos, elite) //home)\r\n        } else {\r\n            console.warn(\"too many citizens already to populate more!\")\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [ PureValue.Shelter, PureValue.Water, PureValue.Oxygen ]\r\n        return Math.max(0, Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        ))\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n       return this.colony.pathBetweenPoints(origin, destination)\r\n    }\r\n\r\n    get timeFactor() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let ops: MechanicalOperation[] = devices.map(d => d.operation) //.filter(op => op.type === 'accelerate')\r\n        return ops\r\n            .map(op => op.type === 'accelerate' ? op.factor : 1)\r\n            .reduce((acc, val) => val * acc, 1.0)\r\n    }\r\n\r\n    get storedResources(): ResourceBlock[] {\r\n        let devices = this.colony.findAllDevices()\r\n        return flatSingle(devices.map(d => d.product))\r\n    }\r\n}","import { Sound, Color } from \"excalibur\";\r\nimport { sample } from \"../../Util\";\r\n\r\ninterface MusicPlayerPlay { type: 'play'}\r\ninterface MusicPlayerPause { type: 'pause'}\r\ninterface MusicPlayerStop { type: 'stop'}\r\ninterface MusicPlayerNext { type: 'next'}\r\ntype MusicPlayerAction = MusicPlayerPlay | MusicPlayerPause | MusicPlayerStop | MusicPlayerNext\r\n\r\nexport class MusicPlayer {\r\n    private _wrapper: HTMLDivElement;\r\n    private _element: HTMLDivElement;\r\n    private _titleElem: HTMLSpanElement;\r\n\r\n    currentTrack: string\r\n    paused: boolean = false\r\n\r\n    constructor(private x: number, private y: number, private playlist: {\r\n        [track: string]: Sound;\r\n    }) {\r\n        this.makePlayer();\r\n        setTimeout(() => { this.startMusic() }, 3000)\r\n        this._titleElem.textContent = `Please wait, the jams are on their way...`;\r\n        this.currentTrack = sample(Object.keys(this.playlist)); //[0];\r\n    }\r\n\r\n    startMusic() {\r\n        this._titleElem.textContent = `Playing: ${this.currentTrack}`;\r\n        this.playlist[this.currentTrack].play()\r\n        .then(() => {\r\n                this.advancePlaylist()\r\n        })\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._wrapper.style.left = `${left + this.x}px`;\r\n            this._wrapper.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    private makePlayer() {\r\n        this._wrapper = document.createElement('div')\r\n        this._wrapper.style.position = 'absolute'\r\n        this._wrapper.style.width = '20%'\r\n        this._wrapper.style.textAlign = 'center'\r\n        this._wrapper.style.border = 'none';\r\n        document.body.appendChild(this._wrapper);\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.display = 'inline-block';\r\n        this._element.style.border = 'none';\r\n        this._wrapper.appendChild(this._element)\r\n\r\n        this._titleElem = document.createElement('span');\r\n        this._titleElem.style.fontFamily = 'Verdana';\r\n        this._titleElem.style.fontSize = '7pt';\r\n        this._titleElem.style.padding = '24px'\r\n        this._titleElem.style.color = 'white';\r\n        this._wrapper.appendChild(this.inlineBlock(this._titleElem));\r\n\r\n        let play = this.iconFactory({ type: 'play' }, '&#9655;')\r\n        this._wrapper.appendChild(this.inlineBlock(play));\r\n\r\n        let pause = this.iconFactory({ type: 'pause' }, '&#10072; &#10072;')\r\n        this._wrapper.appendChild(this.inlineBlock(pause))\r\n\r\n        let next = this.iconFactory({ type: 'next' }, '&rarr;')\r\n        this._wrapper.appendChild(this.inlineBlock(next))\r\n\r\n    }\r\n\r\n    handleAction(action: MusicPlayerAction) {\r\n        if (action.type === 'pause') {\r\n            this.song.pause()\r\n            this.paused = true\r\n            this._titleElem.textContent = `Paused: ${this.currentTrack}`;\r\n        } else if (action.type === 'play') {\r\n            this.song.play()\r\n            this.paused = false\r\n            this._titleElem.textContent = `Playing: ${this.currentTrack}`;\r\n        } else if (action.type === 'next') {\r\n            if (this.paused) {\r\n                this.song.play()\r\n                this.paused = false\r\n            }\r\n            this.song.stop()\r\n        }\r\n    }\r\n\r\n    advancePlaylist() {\r\n        let ndx = this.trackNames.indexOf(this.currentTrack)\r\n        ndx = (ndx + 1) % this.trackNames.length\r\n        this.currentTrack = this.trackNames[ndx]\r\n        this.startMusic()\r\n    }\r\n\r\n    get trackNames() { return Object.keys(this.playlist) }\r\n    get song() { return this.playlist[this.currentTrack] }\r\n\r\n    private inlineBlock(elem) {\r\n        let block = document.createElement('div');\r\n        block.style.display = 'inline-block';\r\n        block.style.border = 'none';\r\n        block.append(elem)\r\n        return block\r\n    }\r\n\r\n    private iconFactory(\r\n        action: MusicPlayerAction,\r\n        iconContent: string,\r\n    ) {\r\n        let bg = Color.Transparent\r\n        let fg = Color.White\r\n        let icon = document.createElement('button')\r\n        icon.innerHTML = iconContent\r\n        icon.style.display = 'block';\r\n        icon.style.fontSize = '7pt';\r\n        icon.style.fontFamily = 'Verdana';\r\n        icon.style.border = 'none'\r\n        icon.style.padding = '4px'\r\n        icon.style.background = bg.toRGBA();\r\n        icon.style.color = fg.toRGBA();\r\n        icon.onclick = () => { this.handleAction(action) }\r\n        return icon\r\n    }\r\n\r\n}\r\n","import { Color } from \"excalibur\";\r\nimport { EntityKind } from \"../../values/Entity\";\r\n\r\nexport class Palette {\r\n    private _element: HTMLDivElement;\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(\r\n        private name: string,\r\n        private x: number,\r\n        private y: number,\r\n        private all: EntityKind[],\r\n        private onButtonClick: (EntityKind) => any = null,\r\n        private onButtonEnter: (EntityKind) => any = null,\r\n        private comprehend = true \r\n    ) {\r\n        this.makePalette();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    updateBuilt(built: (EntityKind)[]) {\r\n        this.built = built;\r\n        if (this.comprehend) {\r\n            this.comprehended = this.all.filter((e: EntityKind) => {\r\n                let s = new e();\r\n                let prereqs: (EntityKind)[] = s.prereqs;\r\n                return prereqs.every((prereq: EntityKind) => {\r\n                    let built = this.built.some((s: EntityKind) => s === prereq);\r\n                    return built;\r\n                });\r\n            });\r\n        } else {\r\n            this.comprehended = this.built\r\n        }\r\n        this.makePalette();\r\n    }\r\n\r\n    private makePalette() {\r\n        if (this._element) {\r\n            this._element.parentElement.removeChild(this._element);\r\n        }\r\n        if (!(this.comprehended.length > 0)) { return }\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.border = 'none'; //1px solid black'; //0.5px solid white';\r\n        document.body.appendChild(this._element);\r\n\r\n        if (this.name) {\r\n            let title = document.createElement('h2')\r\n            title.textContent = this.name\r\n            title.style.fontFamily = 'Verdana'\r\n            title.style.fontSize = '7pt'\r\n            title.style.fontWeight = '400'\r\n            title.style.color = Color.White.toRGBA()\r\n            title.style.backgroundColor = Color.Violet.darken(0.92).toRGBA()\r\n            title.style.padding = '4px'\r\n            title.style.margin = '0px'\r\n            this._element.appendChild(\r\n                title\r\n            )\r\n        }\r\n\r\n        this.comprehended\r\n            .map((elem: EntityKind) => new elem())\r\n            .sort((a, b) => a.color > b.color ? -1 : 1)\r\n            .forEach(elem => {\r\n                if (elem.hide) { return }\r\n                let label = elem.name;\r\n                if (!this.built.map(m => new m().name).includes(elem.name)) {\r\n                    label += ' *';\r\n                }\r\n                let clr = elem.color;\r\n                let btn = this.buttonFactory(label, clr);\r\n                this._element.appendChild(btn);\r\n                if (this.onButtonEnter) {\r\n                    btn.onmouseenter = () => { this.onButtonEnter(elem); };\r\n                }\r\n                if (this.onButtonClick) {\r\n                    btn.onclick = () => { this.onButtonClick(elem); };\r\n                }\r\n            });\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.5).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = label;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '7pt';\r\n        paletteButton.style.fontFamily = 'Verdana';\r\n        paletteButton.style.fontWeight = '500';\r\n        paletteButton.style.padding = '3px';\r\n        paletteButton.style.width = '124px';\r\n        paletteButton.style.textTransform = 'uppercase';\r\n        paletteButton.style.border = 'none' //1px solid rgba(255,255,255,0.08)';\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA();\r\n            paletteButton.style.color = fg.toRGBA();\r\n        };\r\n        return paletteButton;\r\n    }\r\n}\r\n","import { Label, Actor, FontStyle, Color } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { PureValue, Economy, ResourceBlock } from \"../../models/Economy\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nimport { countOccurrences, flatSingle } from \"../../Util\";\r\n\r\nexport class CardBody extends Actor {\r\n    description: Label\r\n    values: Label\r\n    notes: Label\r\n    footer: Label\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 0, 0)\r\n        // resources / recipes\r\n\r\n        this.values = new Label('')\r\n        this.values.fontSize = 10\r\n        this.add(this.values)\r\n\r\n        this.notes = new Label('behavioral notes', 0, 30)\r\n        this.notes.fontSize = 11\r\n        this.add(this.notes)\r\n\r\n        this.description = new Label('description', 0, 60)\r\n        this.description.fontSize = 12\r\n        this.description.fontStyle = FontStyle.Italic\r\n        this.description.color = Color.DarkGray\r\n        this.add(this.description)\r\n\r\n        this.footer = new Label('footer', 20, 80)\r\n        this.footer.fontSize = 10\r\n        this.footer.fontStyle = FontStyle.Italic\r\n        this.add(this.footer)\r\n\r\n        this.show(entity)\r\n    }\r\n\r\n    describeResources = (arr: ResourceBlock[]) => {\r\n        let freqs = countOccurrences(arr)\r\n        return Object.keys(freqs)\r\n            .map(elem => `${elem} x${freqs[elem]}`)\r\n            .join(' + ')\r\n    }\r\n\r\n    show(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        if (entity) {\r\n            this.description.text = entity.description;\r\n\r\n            if (entity instanceof Machine || entity instanceof Device) {\r\n                this.values.text =  this.describeEconomy(entity.economy)\r\n                // let footerNotes = []\r\n                let resourceDescription = entity instanceof Machine\r\n                    ? `Cost: ${this.describeResources(entity.cost)}`\r\n                    : (entity.built ? this.describeResources(entity.product) : 'under construction')\r\n                let forDome = entity instanceof Machine ? entity.forDome : entity.machine.forDome\r\n                let domeStatus = `For Dome: ${forDome ? 'Yes' : 'No'}`\r\n                this.footer.text = resourceDescription === ''\r\n                    ? domeStatus\r\n                    : [resourceDescription, domeStatus].join(' | ') \r\n                this.notes.text = '' //\r\n                let op = entity.operation\r\n                if (op) {\r\n                    if (op.type === 'recipe') {\r\n                        this.notes.text = `Turns ${op.consumes.join(' + ')} -> ${op.produces}.`\r\n                    } else if (op.type === 'generator') {\r\n                        this.notes.text = `Generates ${op.generates}.`\r\n                    } else if (op.type === 'store') {\r\n                        this.notes.text = `Stores ${op.stores.join(' + ')}`\r\n                    } else if (op.type === 'spawn') {\r\n                        this.notes.text = 'Decants clones.'\r\n                    }\r\n                }\r\n            } else if (entity instanceof SpaceFunction) {\r\n                let { capacity, workSpeed } = entity.bonuses\r\n                let bonusMessages = [];\r\n                if (capacity > 0) {\r\n                    bonusMessages.push(`+${capacity} cap`)\r\n                }\r\n                if (workSpeed > 1.0) {\r\n                    bonusMessages.push(`+${Math.floor((workSpeed*100)-100)}% efficiency` )\r\n                }\r\n                this.values.text = bonusMessages.join('; ') \r\n                this.notes.text = entity.machines.map(m => (new m()).name).join(' + ')\r\n                this.footer.text = ''\r\n            } else if (entity instanceof Building) {\r\n                this.values.text =  this.describeEconomy(entity.economy(false))\r\n                this.notes.text = entity.getDevices().map(d => d.machine.name).join(' + ')\r\n\r\n                let product = entity.getDevices()\r\n                    .map(d => d.product)\r\n                    .reduce((a, b) => a.concat(b), [])\r\n                this.footer.text = product.length > 0\r\n                    ? \"Currently contains: \" + this.describeResources(product)\r\n                    : ''\r\n            } else {\r\n                this.values.text = ''\r\n                this.notes.text = ''\r\n                this.footer.text = ''\r\n            }\r\n\r\n        }\r\n        // other bonuses? behaviors?\r\n    }\r\n\r\n    private describeEconomy(e: Economy): string {\r\n        let values = []\r\n        let econ = e // entity.economy\r\n        for (let value in PureValue) {\r\n            let { supply, demand } = econ[value]\r\n            let delta = supply - demand\r\n            if (delta > 0) {\r\n                values.push(`+${delta} ${value}`)\r\n            } else if (delta < 0) {\r\n                values.push(`${delta} ${value}`)\r\n            }\r\n        }\r\n        return values.join(' | ')\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nexport class CardTitle extends Actor {\r\n    \r\n    name: Label;\r\n    type: Label;\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 14, 32, entity && entity.color || Color.Gray);\r\n        this.name = new Label(entity && entity.name || '..', 20, 16)\r\n        this.name.fontSize = 28\r\n        this.name.color = Color.Black\r\n        this.add(this.name)\r\n\r\n        this.type = new Label('..', 232, 16)\r\n        this.type.fontSize = 10\r\n        this.type.color = Color.Gray\r\n        this.type.fontStyle = FontStyle.Italic\r\n        this.add(this.type)\r\n\r\n        if (entity) {\r\n            this.announce(entity)\r\n        }\r\n    }\r\n\r\n    announce(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.name.text = entity.name\r\n        this.color = entity.color.desaturate(0.5).darken(0.2)\r\n        if (entity instanceof Machine) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n        if (entity instanceof Structure) { this.type.text = 'Structure' }\r\n        if (entity instanceof SpaceFunction) { this.type.text = 'Function' }\r\n        if (entity instanceof Building) { this.type.text = 'Building' }\r\n        if (entity instanceof Device) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { CardTitle } from \"./CardTitle\";\r\nimport { CardBody } from \"./CardBody\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\n\r\nexport class Card extends Actor {\r\n    title: CardTitle\r\n    cardBody: CardBody\r\n    image: any\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x + 160, y + 90, 320, 180, Color.White);\r\n        let x0 = -150, y0 = -50;\r\n        this.title = new CardTitle(entity, x0 - 3, y0); //x, y)\r\n        this.add(this.title);\r\n        this.cardBody = new CardBody(entity, x0 + 14, y0 + 40)\r\n        this.add(this.cardBody)\r\n\r\n        this.image = new Image();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        if (this.entity) {\r\n            if (this.entity instanceof Machine) {\r\n                let ix = this.pos.x + 48, iy = this.pos.y - 16\r\n                let isz = 92\r\n                ctx.drawImage(this.image, ix, iy, isz, isz)\r\n            }\r\n        }\r\n    }\r\n\r\n    present(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.title.announce(entity)\r\n        this.cardBody.show(entity)\r\n\r\n        this.entity = entity\r\n        if (this.entity instanceof Machine) {\r\n            this.image.src = this.entity.image\r\n        }\r\n    }\r\n\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor } from \"excalibur\";\r\nimport { Economy, PureValue, availableCapacity, allValues } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n\r\n        let index = 0\r\n        for (let value of allValues) {\r\n            let valueLabel: EconomicValue =  new EconomicValue(value, (index++ * 32), 0)\r\n            this.valueLabels[value] = valueLabel\r\n            this.add(valueLabel)\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value of allValues) {\r\n            this.valueLabels[value].setCount(\r\n                availableCapacity(market, value)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 6, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n\r\n    debit(amt: number) {\r\n        this.value -= amt\r\n        this.count.text = `x${this.value}`\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            [ResourceBlock.Biomass]: null,\r\n            [ResourceBlock.Idea]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n            [ResourceBlock.Alloy]: null,\r\n            [ResourceBlock.Bioplasma]: null,\r\n            [ResourceBlock.Algorithm]: null,\r\n            [ResourceBlock.Argent]: null,\r\n            [ResourceBlock.Aurum]: null,\r\n            [ResourceBlock.Omnium]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0, Color.DarkGray.darken(0.8));\r\n        let rx0 = 0, ry0 = -2.5;\r\n        let resources = [\r\n            ResourceBlock.Meal,\r\n            ResourceBlock.Data,\r\n            ResourceBlock.Mineral,\r\n\r\n            ResourceBlock.Bioplasma,\r\n            ResourceBlock.Alloy,\r\n            ResourceBlock.Algorithm,\r\n\r\n            ResourceBlock.Argent,\r\n            ResourceBlock.Aurum,\r\n        ];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0 + index * 18, ry = ry0 + index * 0;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n\r\n    decrement(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.debit(1)\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n\r\n    constructor(market: Economy, w: number = 10000, h: number = 36) {\r\n        super(0,0, w, h, Color.DarkGray.darken(0.8));\r\n\r\n        let ty = 14\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+2)\r\n        brand.fontSize = 12\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.1\", 48, ty + 2)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(70, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 360, ty)\r\n        this.add(this.economy)\r\n\r\n        this.popLabel = new Label(\"\", 1000, ty, 'Helvetica')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 1080, ty, 'Helvetica')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.messageLabel.fontStyle = FontStyle.Italic\r\n        this.add(this.messageLabel)\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    decrementResource(res: ResourceBlock) {\r\n        this.resources.decrement(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n    \r\n}\r\n","import { UIActor, Label, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, PureValue } from \"../../models/Economy\";\r\nimport { Machine, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Card } from \"./Card\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Palette } from \"./Palette\";\r\nimport { Building } from \"../Building\";\r\nimport { Resources } from \"../../Resources\";\r\nimport { MusicPlayer } from \"./MusicPlayer\";\r\n\r\nexport class Hud extends UIActor {\r\n    private musicPlayer: MusicPlayer\r\n    private clock: Label\r\n    private hint: Label\r\n\r\n    private hidePalettes: boolean = true\r\n    private structurePalette: Palette //<Structure> \r\n    private machinePalette: Palette //<Machine>\r\n    private functionPalette: Palette\r\n    private card: Card\r\n\r\n    private status: StatusAnalysisView\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n    static machinesForPalette = allMachines\r\n    static functionsForPalette = allSpaceFunctions\r\n\r\n\r\n\r\n    constructor(\r\n        game: Game,\r\n        protected onBuildingSelect = null,\r\n        protected onMachineSelect = null,\r\n        protected onFunctionSelect = null\r\n    ) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.status = new StatusAnalysisView(emptyMarket());\r\n        this.add(this.status)\r\n\r\n        let displayInfo = (e) => this.showCard(e)\r\n        this.structurePalette = new Palette('Structure', 20, 35, Hud.structuresForPalette, onBuildingSelect, displayInfo)\r\n        this.machinePalette = new Palette('Machine', 20, 300, allMachines, onMachineSelect, displayInfo) // (e) => this.showCard(e))\r\n        this.functionPalette = new Palette('Function', 220, 35, Hud.functionsForPalette, onFunctionSelect, displayInfo, false)\r\n\r\n        this.card = new Card(null, 20, 800) // game.canvasHeight - 200)\r\n        this.add(this.card)\r\n\r\n        this.clock = new Label('current time', 1340, 14, 'Verdana')\r\n        this.clock.color = Color.White // 'white'\r\n        this.add(this.clock)\r\n\r\n        this.musicPlayer = new MusicPlayer(1360, -2, {\r\n            'Crater Rock': Resources.CraterRock,\r\n            'Indivision': Resources.Indivision,\r\n            'Future Tense': Resources.FutureTense,\r\n            // 'Isomer': Resources.Isomer,\r\n            'Understanding': Resources.Understanding,\r\n            // 'Outbound': Resources.Outbound,\r\n            'Assembler': Resources.Assembler,\r\n        })\r\n        // this.add(this.musicPlayer)\r\n\r\n        // this.hint = new Label('Guide: Construct Life Support (a Dome with H20 Condenser + O2 Extractor)', 400, 30, 'Verdana')\r\n        // this.add(this.hint)\r\n    }\r\n\r\n    showPalettes() {\r\n        this.hidePalettes = false\r\n    }\r\n\r\n    setMessage(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        this.musicPlayer.draw(ctx)\r\n        if (!this.hidePalettes) {\r\n            this.structurePalette.draw(ctx)\r\n            this.machinePalette.draw(ctx)\r\n            this.functionPalette.draw(ctx)\r\n        }\r\n    }\r\n\r\n    update(game: Game, delta: number) {\r\n        super.update(game, delta)\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    resourceExpended(resource: ResourceBlock) {\r\n        this.status.decrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true, time: number = 0) {\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n\r\n        let days = (Math.floor(time / (60 * 24))+1).toString()\r\n        let hh = Math.floor(time / 60) % 24\r\n        let hours = Math.floor((hh + 11) % 12 + 1).toString()\r\n        let minutes = Math.floor(time % 60).toString()\r\n        let ampm = hh < 12 ? 'AM' : 'PM'\r\n        this.clock.text = `Day ${days}. ${hours}:${minutes.padStart(2, '0')} ${ampm}`\r\n    }\r\n\r\n    showCard(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        this.card.present(entity)\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n        this.updateFunctionPalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        let builtStructures =\r\n            Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n\r\n        this.structurePalette.updateBuilt(builtStructures)\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let devices = colony.findAllDevices()\r\n        let builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine))\r\n        this.machinePalette.updateBuilt(builtMachines)\r\n    }\r\n\r\n    private updateFunctionPalette(colony: Colony) {\r\n        let builtReifiedFunctions = flatSingle(colony.buildings.map(b => b.spaceFunction))\r\n        let builtFunctions = Hud.functionsForPalette.filter((fn) => builtReifiedFunctions.some(rf => rf instanceof fn))\r\n        this.functionPalette.updateBuilt(builtFunctions)\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawPatternedRect, drawRect } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n// import { drawPatternedRect, drawRect } from \"../../Util\";\r\n\r\nexport class MediumSurfaceRoomView extends Building {\r\n    hideBox = true\r\n\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() //- this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        // draw from left slot to each device place to right slot?\r\n        let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length-1])\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        // g.edge(devices[1], find(slots[1]))\r\n\r\n        return g\r\n    }\r\n  \r\n    // afterConstruct() {\r\n    //     let { machines } = this.structure;\r\n    //     if (machines && machines.length > 0) {\r\n    //         let machine = new machines[0]();\r\n    //         this.devicePlaces().forEach(place => {\r\n    //             let theDevice = new Device(machine, place.position)\r\n    //             this.addDevice(theDevice)\r\n    //         })\r\n    //     }\r\n\r\n    // }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor()\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n\r\n        // ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n        // let rect = \r\n            // { x: this.pos.x, y: this.pos.y, width: this.getWidth(), height: this.getHeight() };\r\n        drawPatternedRect(\r\n            ctx,\r\n            this.aabb(),\r\n            this.backgroundPattern\r\n        )\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black\r\n            c.a = 0.6\r\n            drawRect(ctx, this.aabb(), 0, c)\r\n        }\r\n\r\n        // a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomThreeView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Huge\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Large\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 2\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaceCount = 3\r\n    //devicePlaces() {\r\n    //    let w = this.getWidth()/2\r\n    //    let x = this.pos.x + w;\r\n    //    let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n    //    let ds = [\r\n    //        new Vector(x - w / 2, y),\r\n    //        new Vector(x, y),\r\n    //        new Vector(x + w / 2, y),\r\n    //    ]\r\n\r\n    //    return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    //}\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { range, eachCons, measureDistance } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.planet.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        // super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length-1])\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n\r\n        return g\r\n\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.clone().darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector, Color } from \"excalibur\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n// import { drawRect, drawPatternedRect } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { drawPatternedRect, drawRect } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 12\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        // let wallColor = this.processedColor() //.darken(0.4)\r\n        let floorColor = this.planet.color.darken(0.6) //Color.Violet.darken(0.92)\r\n\r\n        // drawRect(ctx, this.aabb(), 0.5, wallColor)\r\n        drawPatternedRect(ctx, this.aabb(), this.backgroundPattern)\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black\r\n            c.a = 0.6\r\n            drawRect(ctx, this.aabb(), 0, c)\r\n        }\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight,\r\n              width: this.getWidth(), height: this.floorHeight },\r\n              0.2,\r\n              floorColor\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let slots: Slot[] = this.slots()\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        // draw from left slot to each device place to right slot?\r\n        let leftSlot = find(slots[0].pos), rightSlot = find(slots[1].pos)\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        return g\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    devicePlaceSize: DeviceSize = DeviceSize.Small\r\n    devicePlaceCount: number = 2\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"98240dde9344ac8d071d076ac951e15d.png\";","module.exports = __webpack_public_path__ + \"da31cf43235263c1c3e0ad45a46360a1.png\";","module.exports = __webpack_public_path__ + \"a6a38278ac501400c6199e0df9e1bf84.png\";","module.exports = __webpack_public_path__ + \"ece1d5d5858bc048d2d949ecc3f5e9bc.png\";","module.exports = __webpack_public_path__ + \"3654f0489813e0668743efde017c9653.png\";","module.exports = __webpack_public_path__ + \"3abbdabf07943966f102ac7345a59986.png\";","module.exports = __webpack_public_path__ + \"d1b4690b9f5fa4957f98602afc8cfdb6.png\";","module.exports = __webpack_public_path__ + \"0eb7a15ea04678b14a2b88b5965aabeb.png\";","module.exports = __webpack_public_path__ + \"29c5f1be64c99bbc14d5063eea2f0953.svg\";","module.exports = __webpack_public_path__ + \"502f86b65239e20806bbae8bc77a6116.svg\";","module.exports = __webpack_public_path__ + \"5289b20985e3c3a98081267a2da1772e.svg\";","module.exports = __webpack_public_path__ + \"1d893905e4eea3bbc48b0e129e318ea6.svg\";","module.exports = __webpack_public_path__ + \"bd556d00e484db4e52d198d0bf39d0f2.svg\";","module.exports = __webpack_public_path__ + \"650cd431226df0755357c71d61bef1f2.svg\";","module.exports = __webpack_public_path__ + \"f12c591f538ab3026bf13e93f3fa9485.svg\";","module.exports = __webpack_public_path__ + \"3aeb9dd24809ba3fbd4eeb31a28c3b19.svg\";","module.exports = __webpack_public_path__ + \"6cc6f6773bb6eb26fcef87b9629f7b87.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"24611230ec712ba7ee38b99561aedd87.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { ResourceBlock } from \"./Economy\";\r\n\r\nexport type MechanicalOperation =\r\n    Recipe |\r\n    ResourceGenerator |\r\n    ResourceStorage |\r\n    SpawnClone |\r\n    AccelerateTime |\r\n    Noop\r\n\r\nexport interface Noop {\r\n    type: 'noop'\r\n}\r\n\r\nexport interface Recipe {\r\n    type: 'recipe'\r\n    consumes: ResourceBlock[]\r\n    produces: ResourceBlock\r\n    workTime: number\r\n}\r\n\r\nexport interface ResourceGenerator {\r\n    type: 'generator'\r\n    generates: ResourceBlock\r\n    generationTime: number\r\n    capacity: number\r\n}\r\n\r\nexport interface ResourceStorage {\r\n    type: 'store'\r\n    stores: ResourceBlock[]\r\n    capacity: number\r\n}\r\n\r\nexport interface SpawnClone {\r\n    type: 'spawn'\r\n}\r\n\r\nexport interface AccelerateTime {\r\n    type: 'accelerate'\r\n    factor: number\r\n}\r\n\r\nfunction store(res: ResourceBlock[], capacity: number = 10): ResourceStorage {\r\n    return {\r\n        type: 'store',\r\n        stores: res,\r\n        capacity\r\n    }\r\n}\r\n\r\nfunction generate(res: ResourceBlock, cap: number = 4): ResourceGenerator {\r\n    return {\r\n        type: 'generator',\r\n        generates: res,\r\n        generationTime: 1000,\r\n        capacity: cap\r\n    }\r\n}\r\n\r\nfunction recipe(input: ResourceBlock[], output: ResourceBlock): Recipe {\r\n    return {\r\n        type: 'recipe',\r\n        consumes: input,\r\n        produces: output,\r\n        workTime: 1000,\r\n    }\r\n}\r\n\r\nfunction spawn(): SpawnClone {\r\n    return {\r\n        type: 'spawn',\r\n    }\r\n}\r\n\r\nfunction accelerateTime(): AccelerateTime {\r\n    return {\r\n        type: 'accelerate',\r\n        factor: 2\r\n    }\r\n}\r\n\r\nexport const mechanicalOperations = {\r\n    store,\r\n    generate,\r\n    recipe,\r\n    spawn,\r\n    accelerateTime,\r\n}","import { Input, Scene, Timer, Vector } from \"excalibur\";\r\nimport { Building, structureViews } from \"../actors/Building\";\r\nimport { DevicePlace } from \"../actors/Building/Building\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Game } from \"../Game\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { LivingQuarters, MissionControl, SolarArray, SpaceFunction, CloneReception, Kitchen, Workshop, Archive, Refinery, Mine } from \"../models/SpaceFunction\";\r\nimport { Corridor, HugeRoom, LargeRoom, MainTunnel, MediumRoomThree, SmallDome, SmallRoomThree, Structure, SurfaceRoad } from \"../models/Structure\";\r\nimport { flatSingle, zip } from \"../Util\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { Orientation } from \"../values/Orientation\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    placingFunction: SpaceFunction = null\r\n\r\n    time: number = 7*60\r\n\r\n    static requiredStructuresAndFunctions: (typeof SpaceFunction | typeof Structure)[] = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        SolarArray,\r\n        // LifeSupportPod,\r\n        MainTunnel,\r\n        Corridor,\r\n        LivingQuarters,\r\n        // CloneMatrix,\r\n        // CloneReception,\r\n        // Kitchen,\r\n        // Workshop,\r\n        // // Study,\r\n        // // Library,\r\n        // Archive,\r\n        // Refinery,\r\n        // Mine,\r\n        // ComputerCore,\r\n        \r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, false, this.time)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        let buildIt = (e) => this.startConstructing(e)\r\n\r\n        this.hud = new Hud(game, buildIt, buildIt, buildIt)\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(\r\n            game.world,\r\n            this.hud,\r\n            (b) => this.hud.showCard(b),\r\n            (d) => this.hud.showCard(d)\r\n        )\r\n\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.pos.y = this.planet.getTop() - 1000\r\n        this.camera.zoom(0.01)\r\n        this.camera.zoom(0.125, 10000)\r\n\r\n        this.addTimer(\r\n            new Timer(() => { this.stepTime() }, 50, true)\r\n        )\r\n    }\r\n\r\n    private stepTime() { \r\n        this.time += 1 //.25\r\n        this.planet.hour = (Math.floor(this.time / 60)) % 24\r\n    }\r\n\r\n    public onActivate() {\r\n        // this.game.controller.activate()\r\n\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n\r\n                            if (this.placingFunction) {\r\n                                let fn = this.placingFunction\r\n                                // console.log({ fn, bldg: buildingUnderConstruction })\r\n                                zip(fn.machines, buildingUnderConstruction.devicePlaces()).forEach(([machine, place]: [typeof Machine, DevicePlace]) => {\r\n                                    console.log(\"would add machine\", { machine, place })\r\n                                    let m = (new machine()).concretize()\r\n                                    let device = new Device(m, place.position)\r\n                                    buildingUnderConstruction.addDevice(device)\r\n                                })\r\n                                this.placingFunction = null\r\n                            }\r\n\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        let { Up, Down, Left, Right } = Orientation;\r\n        let moveCam = (direction: Orientation) => {\r\n            let camMoveSpeed = 10 * (1/this.camera.getZoom())\r\n            let dv = new Vector(0,0)\r\n            switch(direction) {\r\n            case Left: dv.x = -camMoveSpeed; break\r\n            case Right: dv.x = camMoveSpeed; break\r\n            case Up: dv.y = -camMoveSpeed; break\r\n            case Down: dv.y = camMoveSpeed; break\r\n            }\r\n            // console.log(\"MOVING CAM\", { direction, dv, camMoveSpeed })\r\n            this.camera.move(this.camera.pos.add(dv), 0) //pos.addEqual(dv)\r\n        }\r\n\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                this.planet.colony.currentlyConstructing = null\r\n                this.placingFunction = null\r\n                this.hud.setMessage(this.defaultMessage); //'Welcome to the Colony, Commander.')\r\n            } else if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                moveCam(Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                moveCam(Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                moveCam(Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                moveCam(Right)\r\n            }\r\n        })\r\n        this.game.input.keyboard.on('hold', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                moveCam(Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                moveCam(Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                moveCam(Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                moveCam(Right)\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingStructureOrFunction(): Structure | SpaceFunction {\r\n        let reqs = Construct.requiredStructuresAndFunctions.map(req => new req())\r\n\r\n        let actualStructureNames = this.buildings.map(building => building.structure.name)\r\n        let actualFunctionNames = flatSingle(\r\n            this.buildings.map(building => building.spaceFunction && building.spaceFunction.name)\r\n        )\r\n        let actualNames = [...actualStructureNames, ...actualFunctionNames]\r\n        return reqs.find(req => !actualNames.includes(req.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingStructureOrFunction() //this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.showPalettes()\r\n        }\r\n    }\r\n\r\n    firstBuilding: boolean = true\r\n    startConstructing(structureOrMachine: Structure | Machine | SpaceFunction, pos: Vector = new Vector(0, 0)) {\r\n        this.hud.showCard(structureOrMachine)\r\n        \r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            this.hud.setMessage(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            if (this.firstBuilding) {\r\n                this.camera.zoom(structure.zoom, 250)\r\n                this.camera.pos = theNextOne.pos\r\n                this.firstBuilding = false\r\n            } \r\n        } else if (structureOrMachine instanceof Machine) {\r\n            let machine = structureOrMachine\r\n            this.hud.setMessage(`Install ${machine.name} (${machine.description})`)\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            // this.camera.zoom(1.5, 250)\r\n        } else if (structureOrMachine instanceof SpaceFunction) {\r\n            let fn: SpaceFunction = structureOrMachine\r\n            this.hud.setMessage(`Place ${fn.name} (${fn.description})`)\r\n            theNextOne = this.spawnFunction(fn, pos)\r\n            this.placingFunction = fn\r\n\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        if (device.snap(this.planet)) {\r\n            this.camera.pos = device.pos\r\n \r\n        }\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n\r\n    protected spawnFunction(fn: SpaceFunction, pos: Vector): Building {\r\n        let theStructure: Structure = (fn.structure && new fn.structure()) // || new SmallRoomThree()\r\n        if (!theStructure) {\r\n            theStructure = new SmallRoomThree()\r\n            let machines = fn.machines.map(m => new m())\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Medium)) {\r\n                theStructure = new MediumRoomThree()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Large)) {\r\n                theStructure = new LargeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Huge)) {\r\n                theStructure = new HugeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.forDome)) {\r\n                theStructure = new SmallDome()\r\n            }\r\n        }\r\n\r\n        // console.log(\"SPAWN FUNCTION\", { fn, structure: theStructure })\r\n        let building = this.assembleBuildingFromStructure(theStructure, pos)\r\n        building.reshape(building.constrainCursor(building.pos))\r\n        return building\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Orange] //Red, Color.Blue, Color.Green]\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ).\r\n        lighten(0.15).\r\n        desaturate(0.65)\r\n\r\n  \r\n    static bestowName(): any {\r\n        let nameList = [\r\n            'Aragorn',\r\n            'Anodyne',\r\n            'Carolyn',\r\n            'Exeter',\r\n            'Colwreath',\r\n            'India',\r\n            'Comma',\r\n            'Terabithia'\r\n        ]\r\n        return sample(nameList)\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"37914c496c3c503f7a53d7c9a1457b53.mp3\";","module.exports = __webpack_public_path__ + \"1b8e735649248c4c552a84996e61f241.mp3\";","module.exports = __webpack_public_path__ + \"1a607294aebce07746d6f25ffa517d80.mp3\";","module.exports = __webpack_public_path__ + \"22bdefc1e8515661fdeb8e8076820641.mp3\";","module.exports = __webpack_public_path__ + \"cf150ab26eba01503f4f6dc3d9ab47f7.mp3\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\nimport { Resources } from './Resources';\r\nimport { Sound } from 'excalibur';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n  // setTimeout(() => {\r\n  //   console.log(\"let's jam!\");\r\n  //   let jam: Sound = Resources.CraterRock //play();\r\n  //   jam.play()\r\n  // }, 1500)\r\n  // jam.oncomplete = () => jam.play()\r\n});\r\n"],"sourceRoot":""}