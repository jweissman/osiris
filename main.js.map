{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Util.ts","webpack:///./src/values/DeviceSize.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Machine.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/Painting.ts","webpack:///./src/models/Structure.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/Game.ts","webpack:///./src/strategies/Strategy.ts","webpack:///./src/actors/Device.ts","webpack:///./src/actors/Building/BackgroundPatterns.ts","webpack:///./src/values/Scale.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Resources.ts","webpack:///./src/actors/player.ts","webpack:///./src/strategies/EatingStrategy.ts","webpack:///./src/strategies/WhenHungryEatingStrategy.ts","webpack:///./src/strategies/SleepingStrategy.ts","webpack:///./src/strategies/AnyBedSleepingStrategy.ts","webpack:///./src/strategies/ConstructionStrategy.ts","webpack:///./src/strategies/ProximityBasedConstruction.ts","webpack:///./src/values/InteractionRequest.ts","webpack:///./src/strategies/ProductionStrategy.ts","webpack:///./src/strategies/CapacityBasedProduction.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/actors/Hud/MusicPlayer.ts","webpack:///./src/actors/Hud/Palette.ts","webpack:///./src/actors/Hud/CardBody.ts","webpack:///./src/actors/Hud/CardTitle.ts","webpack:///./src/actors/Hud/Card.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MediumSurfaceRoomView.ts","webpack:///./src/actors/Building/MediumRoomThreeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/images/window-bg.png","webpack:///./src/images/beige-bg.png","webpack:///./src/images/checker-bg.png","webpack:///./src/images/tech-bg.png","webpack:///./src/images/poster-wall-bg.png","webpack:///./src/images/books-bg.png","webpack:///./src/images/leafy-bg.png","webpack:///./src/images/raised-square-bg.png","webpack:///./src/images/fabricator-plain.svg","webpack:///./src/images/mega-console-plain.svg","webpack:///./src/images/console-red-plain.svg","webpack:///./src/images/console-green-plain.svg","webpack:///./src/images/console-purple-plain.svg","webpack:///./src/images/console-plain.svg","webpack:///./src/images/workstation-plain.svg","webpack:///./src/images/houseplant-plain.svg","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/models/MechanicalOperation.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/sounds/future tense.mp3","webpack:///./src/sounds/understanding.mp3","webpack:///./src/sounds/indivision.mp3","webpack:///./src/sounds/assembler.mp3","webpack:///./src/sounds/crater-rock.mp3","webpack:///./src/images/sword.png","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","deleteByValueOnce","index","indexOf","eachCons","measureDistance","b","sleep","ms","Promise","resolve","setTimeout","shuffle","sort","zip","countOccurrences","counts","forEach","containsUniq","testElems","doesContain","arrCopy","missingItem_1","testElem","find","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","fifth","eighth","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","SurfaceRoadView_1","SurfaceRoadView","SmallDomeThreeView_1","SmallDomeThreeView","MidDomeView_1","MidDomeView","BigDomeView_1","BigDomeView","SmallRoomThreeView_1","SmallRoomThreeView","MediumRoomView_1","MediumRoomView","LargeRoomView_1","LargeRoomView","HugeRoomView_1","HugeRoomView","MediumRoomThreeView_1","MediumRoomThreeView","MediumSurfaceRoomView_1","MediumSurfaceRoomView","structureViews","excalibur_1","Orientation_1","Game_1","Util_1","Graph_1","Economy_1","SpaceFunction_1","DeviceSize_1","BackgroundPatterns_1","Painting_1","DevicePlace","pos","this","_super","structure","planet","_this","x","y","width","height","infra","color","darken","Color","Transparent","edgeWidth","placed","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","devices","active","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","some","currentlyViewing","toggleActive","collisionType","CollisionType","PreventCollision","nameLabel","Label","White","__extends","draw","ctx","delta","drawRect","aabb","processedColor","getCenter","measureText","Game","debugPath","slots","slot","rect","Gray","lighten","nodes","node","Yellow","devicePlaces","place","position","visibleSize","update","engine","device","tryProduce","spaceFunction","description","economy","emptyUnlessActive","isActive","emptyMarket","machineEconomies","buildingEconomy","__assign","Oxygen","demand","supply","sumMarkets","inUse","wasEquil","equilibrium","_i","allValues_1","allValues","localCap","availableCapacity","globalCap","agg","constrainCursor","clone","reshape","afterConstruct","handleClick","_pos","getWidth","getHeight","graph","supergraph","Graph","g","rootNode","findOrCreate","_a","child","parentSlot","edge","childNode","redeem","res","gather","debit","spend","populate","elite","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","bldg","edgeColor","mainColor","colorBase","clr","Red","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","closestBuildingByType","building","matchingSlot","compass_1","compass","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","subEqual","add","updateFunction","machine","onPlacement","hasPlaceForDevice","nextDevicePlace","getDevices","allSpaceFunctions","spaceFn","matched","unseenDevices","machines","matchingDevice","sf","text","background","BackgroundPattern","Grid","Actor","PureValue","market","Power","Water","Shelter","Hope","Joy","Wisdom","Wealth","Beauty","Wonder","ea","eb","newMarket","sa","da","_b","every","ResourceBlock","Biomass","Ore","Idea","Meal","Data","Mineral","Bioplasma","Alloy","Algorithm","Argent","Aurum","Omnium","blockColors","Green","Blue","cStep","Viridian","DarkGray","Orange","blockColor","block","desaturate","t","setPrototypeOf","__proto__","constructor","create","assign","arguments","MechanicalOperation_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","plant","workstation","console","consolePurple","consoleGreen","consoleRed","megaconsole","fabricator","Violet","store","mechanicalOperations","generate","recipe","spawn","accelerateTime","Machine","LightGray","cost","operation","type","image","prereqs","forDome","hide","concretize","CommandCenter","built","produceResource","MissionLog","OxygenExtractor","WaterCondensingMachine","SolarCell","StudyMachine","Workstation","Desk","Bookshelf","Fridge","Stove","Bed","Houseplant","PersonnelRegistry","CloningVat","OrientationConsole","productionTime","AlgaeVat","DissolutionVat","PlasmaBank","Fabricator","LifeSciencesConsole","Botany","MetalStorage","ResearchServer","Orchard","Cabin","Arbor","MineralProcessor","ThinkingFountain","Mainframe","Megafabricator","MolecularEngine","fromHex","SilverForest","TimeCrystal","HoloProjector","SacredGrove","AtomicCompiler","MiningDrill","Preserve","LogicPool","Cathedral","Microcity","LogicCrystal","allMachines","Left","Up","Down","orientation","Error","drawLine","lineWidth","beginPath","moveTo","lineTo","strokeStyle","toRGBA","stroke","drawPatternedRect","pattern","gridPattern","getBackgroundPattern","fillStyle","fillRect","setLineDash","strokeRect","rectangle","filled","dashed","main","drawStar","cx","cy","outerRadius","innerRadius","spikes","rot","PI","cos","sin","closePath","Machine_1","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","Structure","view","zoom","Corridor","Ladder","MainTunnel","second","MediumSurfaceRoom","SurfaceRoad","first","Dome","seventh","CommonArea","SmallRoomThree","sixth","SmallRoomTwo","SmallDome","MediumRoom","MediumRoomThree","LargeRoom","HugeRoom","SmallDomeThree","MidDome","LargeDome","Arcology","allStructures","Structure_1","SpaceFunction","Beige","bonuses","capacity","workSpeed","MissionControl","Window","LivingQuarters","Barracks","Kitchen","Checker","LifeSupportPod","Retreat","CloneMatrix","CloneReception","ReadingRoom","Library","Books","Study","ComputerLab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Leafy","Farm","Factory","ComputerCore","Tech","LifeSciencesLab","Refinery","Mine","HoloMatrix","TimeChamber","Resources_1","world","displayMode","DisplayMode","FullScreen","backgroundColor","Black","start","loader","Loader","key","Resources","addResource","then","log","citizenSpeed","startHour","Engine","InteractionRequest_1","Strategy","pawn","sleepInterval","currentPlanet","findPoweredDevices","recipes","operations","op","attempt","label","sent","pause","gatherBlock","debug","gathered","generatesDesiredBlock","product","stored","gen","closestDeviceByType","storesDesiredBlock","visitDevice","waitTimes","warn","interact","retrieveResource","visit","workRecipe","produces","knowsRecipe","reserved","maker","made","gatherIngredients","consumes","performRecipeTask","blocks","isCarryingUnique","blocks_1","ingredient","tries","timesToAttempt","worked","Device","initialPos","imageLoaded","fontSize","Image","onload","src","globalAlpha","drawImage","imageX","imageY","iv","bx","by","yOff","produced","blockSize","assemble","citizen","progressBar","drop","request","recipe_1","carrying","it","includes","consumed","workTime","getEffectiveWorkTime","carry","requires","has","store_1","dispense","stores","getEffectiveOperationalCapacity","res_1","bonus","round","resource","generationTime","generates","snap","snapped","raisedSquare","leafy","bookish","posters","tech","checker","beige","loadBg","path","loading","Poster","backgroundPatterns","bg","createPattern","majorUnit","fourth","minorUnit","minorScale","empty","edges","edgesInverse","isEmpty","newNode","contains","testNode","measure","tolerance","dfs","dst","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","steps","srcIndex","reverse","sword","craterRock","assembler","indivision","understanding","futureTense","Sword","Texture","CraterRock","Sound","Assembler","Indivision","Understanding","FutureTense","ex","Player","setWidth","setHeight","EatingStrategy","EatingStrategy_1","WhenHungryEatingStrategy","canApply","isHungry","storedResources","desk","eat","SleepingStrategy","SleepingStrategy_1","AnyBedSleepingStrategy","isTired","hour","takeRest","Strategy_1","ConstructionStrategy","unbuiltDevice","findAllDevices","ProxmityBasedConstruction","constructDevice","resources","ProductionStrategy","storeBlock","openStore","CapacityBasedProduction","findStore","storage_1","recipeForStoredResource","CapacityBasedProduction_1","ProximityBasedConstruction_1","AnyBedSleepingStrategy_1","WhenHungryEatingStrategy_1","Citizen","home","isPlanning","workInProgress","sleeping","hunger","energy","currentBuilding","productionStrategy","constructionStrategy","sleepingStrategy","eatingStrategy","speedMultiplier","timeFactor","work","now","Date","getTime","progress","workStarted","workDuration","save","translate","rotate","dx_1","vel","carried","saturate","restore","px","pw","py","c_1","duration","reject","pathBetweenPoints","followPath","target","glideTo","actions","walkSpeed","asPromise","all","choice","strategies","strat","Citizen_1","Population","citizens","increase","NavigationTree","seekPath","origin","dest","closestNode","abs","NavigationTree_1","Colony","currentlyConstructing","debugTree","navTree","gradient","createLinearGradient","addColorStop","placeBuilding","buildNavTree","structureTypes","st","pathBetween","destination","srcNode","destNode","machineTypes","ctrl","activeBuildings","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","yBase","peak","y0","mtnWidth","PlanetBackground","PlanetBackground_1","Colony_1","Population_1","Device_1","Planet","Sky","hud","onBuildingHover","onDeviceHover","w","depth","sky","skyColor","createLayer","layerHeight","population","currentHour","colorMap","night","dawn","morning","afternoon","evening","inc","set","buildingOrDevice","theLayer","theEconomy","popularDemand","resourceGathered","resourceExpended","maxPop","theEconomyWithoutPeople","values","val","closestDevice","factor","acc","MusicPlayer","playlist","paused","makePlayer","startMusic","_titleElem","textContent","currentTrack","keys","play","advancePlaylist","_element","left","canvas","offsetLeft","top_1","offsetTop","_wrapper","style","top","document","createElement","textAlign","border","body","appendChild","display","fontFamily","padding","inlineBlock","iconFactory","handleAction","action","song","stop","ndx","trackNames","append","iconContent","fg","icon","innerHTML","onclick","Palette","onButtonClick","onButtonEnter","comprehend","comprehended","makePalette","updateBuilt","prereq","parentElement","removeChild","title","fontWeight","margin","btn","buttonFactory","onmouseenter","paletteButton","textTransform","onmouseover","onmouseleave","CardBody","entity","describeResources","freqs","join","notes","fontStyle","FontStyle","Italic","footer","show","describeEconomy","resourceDescription","domeStatus","bonusMessages","econ","CardTitle","announce","CardTitle_1","CardBody_1","Card","x0","cardBody","ix","iy","present","EconomicValue","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","updateView","updatedEconomy","allValues_2","ResourceListEntry","resourceBlock","credit","amt","ResourceListEntry_1","ResourcesList","entries","rx","ry","entry","increment","decrement","ResourcesList_1","EconomyView_1","StatusAnalysisView","h","brand","ty","version","popLabel","messageLabel","incrementResource","decrementResource","setMessage","showEconomy","showPopCap","cap","StatusAnalysisView_1","Card_1","Palette_1","MusicPlayer_1","Hud","game","onBuildingSelect","onMachineSelect","onFunctionSelect","canvasWidth","canvasHeight","hidePalettes","status","displayInfo","showCard","structurePalette","structuresForPalette","machinePalette","functionPalette","functionsForPalette","card","clock","musicPlayer","Crater Rock","Future Tense","showPalettes","updateDetails","rebuildPalettes","time","updatePalettes","updateEconomy","updateMaxPop","days","toString","hh","hours","minutes","ampm","padStart","updateBuildingPalette","updateMachinePalette","updateFunctionPalette","builtStructures","builtMachines","machinesForPalette","builtReifiedFunctions","builtFunctions","rf","UIActor","devicePlaceSize","devicePlaceCount","sg","leftSlot","rightSlot","right","theSlots","slotY","getTop","backgroundPattern","flagX","flagY","_1","floorHeight","originSlot","pickingOrigin","maxHeight","drawShape","xoff","yoff","bezierCurveTo","halfWidth","slotHeights","heights","y1","btm","lst","slotCount","arc","floorColor","floorEdgeHeight","originX","newCursor","input","output","Hud_1","Planet_1","player_1","Construct","dragging","defaultMessage","placingFunction","firstBuilding","buildIt","startConstructing","player","prepareNextBuilding","camera","addTimer","Timer","stepTime","onActivate","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction_1","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","moveCam","direction","camMoveSpeed","dv","move","keyboard","Keys","H","Esc","W","A","S","D","onDeactivate","off","nextMissingStructureOrFunction","reqs","requiredStructuresAndFunctions","req","actualStructureNames","actualFunctionNames","actualNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","spawnFunction","anotherBuilding","assembleBuildingFromStructure","theStructure","Scene","World","colors","Cyan","Vermillion","bestowName","World_1","Construct_1","theWorld","construct","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([95,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { getBackgroundPattern, BackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport const deleteByValueOnce = (arr, elem) => {\r\n  let index = arr.indexOf(elem);\r\n  if (index !== -1) arr.splice(index, 1);\r\n}\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function shuffle(arr) {\r\n   return arr.sort(() => Math.random() > 0.5 ? 1 : -1) \r\n}\r\n\r\nexport const zip = (a, b) => a.map((e,i) => [e, b[i]])\r\n\r\nexport const countOccurrences = (arr) => {\r\n  let counts = {}\r\n  arr.forEach((elem) => {\r\n    counts[elem] = counts[elem] || 0\r\n    counts[elem] += 1\r\n  })\r\n  return counts\r\n}\r\n\r\nexport function containsUniq<T>(arr: T[], testElems: T[]) {\r\n  let doesContain = false\r\n  let arrCopy = arr.slice()\r\n  if (arr.length > 0) {\r\n    let missingItem = false\r\n    testElems.forEach(testElem => {\r\n      if (arrCopy.find(e => e === testElem)) {\r\n        deleteByValueOnce(arrCopy, testElem)\r\n      } else {\r\n        missingItem = true\r\n      }\r\n    })\r\n    doesContain = !missingItem\r\n  }\r\n  return doesContain\r\n}","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.fifth; break;\r\n        case DeviceSize.Large: sz = major.eighth + major.third; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\nimport { SmallDomeThreeView } from './SmallDomeThreeView';\r\nimport { MidDomeView } from './MidDomeView';\r\nimport { BigDomeView } from './BigDomeView';\r\nimport { SmallRoomThreeView } from './SmallRoomThreeView';\r\nimport { MediumRoomView } from './MediumRoomView';\r\nimport { LargeRoomView } from './LargeRoomView';\r\nimport { HugeRoomView } from './HugeRoomView';\r\nimport { MediumRoomThreeView } from './MediumRoomThreeView';\r\nimport { MediumSurfaceRoomView } from './MediumSurfaceRoomView';\r\n\r\n\r\nconst structureViews: { [key: string]: typeof Building } = {\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n    MediumSurfaceRoomView,\r\n}\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n\r\n    MediumSurfaceRoomView,\r\n\r\n\r\n    structureViews\r\n\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, deleteByValue, containsUniq } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock, emptyMarket, Economy, sumMarkets, equilibrium, allValues, availableCapacity } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { World } from \"../../models/World\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { EconomicValue } from \"../Hud/EconomicValue\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0\r\n\r\n    nameLabel: Label\r\n\r\n    placed: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    spaceFunction: SpaceFunction\r\n\r\n    private devices: Device[] = []\r\n    givenName: string\r\n\r\n    private active: boolean = true\r\n    // private built: boolean = false\r\n\r\n    constructor(pos: Vector, public structure: Structure, public planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          structure.infra ? planet.color.darken(0.3) : Color.Transparent\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            if (!this.devices.some(d => d.hover)) {\r\n                this.planet.currentlyViewing = this\r\n            }\r\n        })\r\n\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED BUILDING\", { building: this })\r\n            this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.color = Color.White\r\n\r\n        if (this.structure.infra) { this.active = true }\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        // this.devices.forEach(device => device.draw(ctx, delta))\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n        }\r\n\r\n        // let debug = true;\r\n        if (Game.debugPath) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = true\r\n        if (showDevicePlaces && this.devicePlaces().length > 0) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    0.1,\r\n                    Color.White,\r\n                    false,\r\n                    true\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n\r\n        let tryProduce = this.placed;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.tryProduce(this.step));\r\n        }\r\n\r\n        // this.devices.forEach(d => d.update(engine, delta))\r\n\r\n        this.step += 1\r\n    }\r\n\r\n    get name() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.name\r\n        } else {\r\n            return this.structure.name\r\n        }\r\n    }\r\n\r\n    get description() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.description\r\n        } else {\r\n            return this.structure.description\r\n        }\r\n    }\r\n\r\n    economy(emptyUnlessActive: boolean = true): Economy {\r\n        if (emptyUnlessActive && !this.isActive) {\r\n            return emptyMarket()\r\n        } else {\r\n            let machineEconomies = this.devices.map(d => d.economy)\r\n            //machine.economy)\r\n\r\n            let buildingEconomy = {\r\n                ...emptyMarket(),\r\n                Oxygen: { demand: 1, supply: 0 }, // structural demand\r\n                // Water: { demand: 0.1, supply: 0 },\r\n            }\r\n\r\n            let aggregate = [...machineEconomies, buildingEconomy]\r\n                .reduce(sumMarkets, emptyMarket())\r\n\r\n            return aggregate\r\n        }\r\n    }\r\n\r\n    private toggleActive() {\r\n        if (!this.structure.infra) {\r\n            if (this.active) {\r\n                if (this.devices.some(d => d.inUse)) { return }\r\n                let wasEquil = equilibrium(this.planet.economy)\r\n                this.active = false\r\n                if (wasEquil) {\r\n                    if (!equilibrium(this.planet.economy)) {\r\n                        this.active = true\r\n                        // return\r\n                    }\r\n                    // this.active = true\r\n                } else {\r\n                    // we weren't at equilibrium previously\r\n                    // permit it, if we don't have any supply that would go negative without us?\r\n                    // console.log(\"can we toggle?\")\r\n                    for (let value of allValues) {\r\n                        let localCap = availableCapacity(this.economy(false), value)\r\n                        let globalCap = availableCapacity(this.planet.economy, value)\r\n                        // console.log(\"value\", { value, localCap, globalCap})\r\n                        if (localCap > 0 && globalCap < 0) {\r\n                            // don't permit it to be turned off\r\n                            this.active = true\r\n                        }\r\n                    }\r\n                }\r\n            } else { // this.active is false now\r\n                let agg = [\r\n                    this.planet.economy,\r\n                    this.economy(false)\r\n                ].reduce(sumMarkets, emptyMarket())\r\n\r\n                if (equilibrium(agg)) {\r\n                    this.active = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get isActive() { return !!this.active }\r\n\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public debit(res: ResourceBlock) {\r\n        this.planet.spend(res)\r\n    }\r\n\r\n    public populate(pos: Vector, elite: boolean = false) {\r\n        this.planet.populate(pos, elite) //this.pos)\r\n    }\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.placed)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (!this.active) {\r\n            clr = clr.darken(0.8)\r\n        }\r\n\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        // device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        device.pos.subEqual(this.pos) // = this.devicePlaces()[0].position\r\n        // console.log(\"DEVICE IS AT\", { pos: device.pos })\r\n        this.add(device)\r\n        this.updateFunction()\r\n        device.machine.onPlacement(device)\r\n        this.toggleActive()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices //.filter(d => d.built)\r\n    }\r\n\r\n    private updateFunction() {\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let matched = true;\r\n            let unseenDevices = this.devices.slice()\r\n            let sf = new spaceFn()\r\n            sf.machines.forEach((machine: typeof Machine) => {\r\n                let matchingDevice = unseenDevices.find(d => d.machine instanceof machine)\r\n                if (!matchingDevice) { matched = false; }\r\n                unseenDevices = deleteByValue(unseenDevices, matchingDevice)\r\n            })\r\n            return matched\r\n            // return containsUniq(\r\n                // this.devices.map(d => d.machine),\r\n                // sf.machines.map((machine: typeof Machine) => new m())\r\n            // );\r\n        })\r\n        if (fn) {\r\n            // console.log(\"Determined building function\", { fn })\r\n            let sf = new fn()\r\n            this.spaceFunction = sf\r\n            this.nameLabel.text = sf.name\r\n        } else {\r\n            // console.warn(\"Could not identify function!\")\r\n        }\r\n    }\r\n\r\n    get backgroundPattern() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.background\r\n        } else {\r\n            return BackgroundPattern.Grid\r\n        }\r\n    }\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport const allValues: PureValue[] = [\r\n    PureValue.Power,\r\n    PureValue.Oxygen,\r\n    PureValue.Water,\r\n    PureValue.Shelter,\r\n    PureValue.Hope,\r\n    PureValue.Joy,\r\n    PureValue.Wisdom,\r\n    PureValue.Wealth,\r\n    PureValue.Beauty,\r\n    PureValue.Wonder\r\n]\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return Math.floor(market[value].supply - market[value].demand)\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply,\r\n            demand,\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport const equilibrium: (e: Economy) => boolean = (e) => {\r\n    return allValues.every(value => availableCapacity(e, value) >= 0)\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Biomass = 'Biomass',\r\n    Ore = 'Ore',\r\n    Idea = 'Idea',\r\n\r\n    // derived\r\n    Meal = 'Meal',\r\n    Data = 'Data',\r\n    Mineral = 'Mineral',\r\n    Bioplasma = 'Bioplasma',\r\n\r\n    // higher-order\r\n    Alloy = \"Alloy\",\r\n    Algorithm = \"Algorithm\",\r\n\r\n    // superb\r\n    Argent = \"Argent\",\r\n    Aurum = \"Aurum\",\r\n\r\n    // hyperbolic\r\n    Omnium = \"Omnium\",\r\n}\r\n\r\nlet cStep = 0.3\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Biomass: Color.Green,\r\n    Data: Color.Blue.lighten(cStep),\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(cStep),\r\n    Idea: Color.Blue.lighten(cStep*2), //.desaturate(cStep),\r\n    Ore: Color.Red.darken(cStep),\r\n\r\n    Bioplasma: Color.Viridian,\r\n\r\n    Alloy: Color.DarkGray.darken(cStep), //(cStep),\r\n    Algorithm: Color.Blue.darken(cStep), //.desaturate(cStep),\r\n\r\n    Argent: Color.Gray.lighten(cStep),\r\n    Aurum: Color.Orange.lighten(cStep),\r\n\r\n    Omnium: Color.White,\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    return baseColor.desaturate(0.1) //.lighten(0.1) //.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Color, FontStyle, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { MechanicalOperation, mechanicalOperations } from \"./MechanicalOperation\";\r\nimport { shuffle, range } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\nconst plant = require('../images/houseplant-plain.svg')\r\nconst workstation = require('../images/workstation-plain.svg')\r\n\r\nconst console = require('../images/console-plain.svg')\r\nconst consolePurple = require('../images/console-purple-plain.svg')\r\nconst consoleGreen = require('../images/console-green-plain.svg')\r\nconst consoleRed = require('../images/console-red-plain.svg')\r\nconst megaconsole = require('../images/mega-console-plain.svg')\r\n\r\nconst fabricator = require('../images/fabricator-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n    plant,\r\n    workstation,\r\n\r\n    console,\r\n    consolePurple,\r\n    consoleGreen,\r\n    consoleRed,\r\n    megaconsole,\r\n\r\n    fabricator,\r\n}\r\n\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nlet { store, generate, recipe, spawn, accelerateTime } = mechanicalOperations\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n\r\n    cost: ResourceBlock[] = [ResourceBlock.Mineral]\r\n\r\n    size: DeviceSize = DeviceSize.Small\r\n    operation: MechanicalOperation = { type: 'noop' }\r\n    image = images.vat\r\n    prereqs: (typeof Machine)[] = []\r\n    economy: Economy = emptyMarket()\r\n    forDome: boolean = false\r\n    hide: boolean = false\r\n\r\n    capacity: boolean\r\n\r\n\r\n    concretize(): Machine { return this; } \r\n\r\n    onPlacement(device: Device) {\r\n        // ...whatever we need to script here?\r\n    }\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command Console'\r\n    description = 'commander, we need your help'\r\n    operation = store(\r\n        [ResourceBlock.Mineral], //,ResourceBlock.Biomass],\r\n        24\r\n    )\r\n    image = images.megaconsole\r\n    size = DeviceSize.Medium\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 6, demand: 0 },\r\n        Oxygen: { supply: 16, demand: 0 },\r\n        Water: { supply: 1, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 },\r\n        Shelter: { supply: 1, demand: 0}\r\n    }\r\n\r\n    onPlacement(device: Device) {\r\n        device.built = true\r\n        for (let i in range(20)) {\r\n            device.produceResource(ResourceBlock.Mineral)\r\n        }\r\n        let { building } = device\r\n        building.populate(device.pos.add(building.pos), true)\r\n    }\r\n}\r\n\r\nexport class MissionLog extends Machine {\r\n    name = 'Mission Log'\r\n    description = 'gather data'\r\n    operation = store(\r\n        [ResourceBlock.Data],\r\n        8\r\n    )\r\n    image = images.consolePurple\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n//export class Energon extends Machine {\r\n//    name = 'Energon'\r\n//    description = 'food paste'\r\n//}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 6, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 10, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H2O Condenser'\r\n    description = 'have a drink'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 6, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n/// small subsurface\r\n\r\nexport class StudyMachine extends Machine {\r\n    operation = recipe(\r\n        [ ResourceBlock.Idea, ResourceBlock.Idea, ResourceBlock.Idea ],\r\n        ResourceBlock.Data\r\n    )\r\n    color = Blue\r\n    concretize(): Machine { return new (shuffle([Workstation, Desk])[0])() }\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    description = 'get to work'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    description = 'hackety hack'\r\n    prereqs = [ Bookshelf ]\r\n    image = images.workstation\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n    concretize() { return this }\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    operation = generate(ResourceBlock.Idea)\r\n    image = images.bookshelf\r\n    prereqs = [ OxygenExtractor, Desk ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    operation = store([ResourceBlock.Meal], 6)\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    operation = recipe(\r\n        [ResourceBlock.Biomass, ResourceBlock.Biomass],\r\n        ResourceBlock.Meal\r\n    )\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    description = 'sweet dreams'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    description = 'so nice'\r\n    prereqs = [ Bed ]\r\n    // produces = ResourceBlock.Food\r\n    cost = [ ResourceBlock.Biomass ]\r\n    operation = generate(ResourceBlock.Biomass, 1)\r\n    color = Green\r\n    image = images.plant\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Water: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\nexport class PersonnelRegistry extends Machine {\r\n    name = 'Personnel Registry'\r\n    description = 'track everybody'\r\n    prereqs = [ CloningVat ]\r\n    operation = store([ResourceBlock.Data], 4)\r\n    color = Yellow\r\n    image = images.console\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Wisdom: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class OrientationConsole extends Machine {\r\n    name = 'Orientation Console'\r\n    description = 'welcome to the colony'\r\n    prereqs = [CloningVat]\r\n    operation = generate(ResourceBlock.Data, 1)\r\n    image = images.consoleRed\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'we all grow'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = spawn()\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class DissolutionVat extends Machine {\r\n    name = 'Dissolution Vat'\r\n    description = 'back to basics'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = recipe(\r\n        [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n        ResourceBlock.Bioplasma\r\n    )\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [PlasmaBank]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class PlasmaBank extends Machine {\r\n    name = 'Bioplasm Bank'\r\n    description = 'hold on'\r\n    operation = store([ ResourceBlock.Bioplasma ])\r\n    prereqs = [AlgaeVat]\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    description = 'you made that'\r\n    operation = recipe(\r\n        [ResourceBlock.Mineral, ResourceBlock.Mineral],\r\n         ResourceBlock.Alloy\r\n    )\r\n    size = DeviceSize.Small\r\n    color = Red\r\n    prereqs = [Workstation]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n    image = images.fabricator\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    description = 'where there is a will'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class LifeSciencesConsole extends Machine {\r\n    name = 'Life Sciences Console'\r\n    description = 'mind and body together'\r\n    operation = store([ResourceBlock.Biomass, ResourceBlock.Data], 5)\r\n    prereqs = [Houseplant, Botany]\r\n    color = Green\r\n    image = images.consoleGreen\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.2 },\r\n    }\r\n}\r\n\r\n// medium\r\n\r\nexport class MetalStorage extends Machine {\r\n    name = 'Metal Storage'\r\n    description = 'contain minerals and alloys?'\r\n    operation = store([ResourceBlock.Mineral, ResourceBlock.Alloy], 8)\r\n    prereqs = [Bookshelf]\r\n    color = Red\r\n    size = DeviceSize.Medium\r\n}\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    operation = store([ResourceBlock.Data, ResourceBlock.Algorithm], 10)\r\n    image = images.server\r\n    prereqs = [Bookshelf, Workstation]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   operation = generate(ResourceBlock.Biomass)\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Oxygen: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   description = 'home on the plains'\r\n   operation = recipe(\r\n       [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n       ResourceBlock.Meal\r\n   )\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    description = 'arbor around the clock'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    description = 'plant lab'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n\r\nexport class MineralProcessor extends Machine {\r\n    name = 'Mineral Processor'\r\n    description = 'wheat from the chaff'\r\n    operation = recipe(\r\n        [ResourceBlock.Ore, ResourceBlock.Ore, ResourceBlock.Ore],\r\n         ResourceBlock.Mineral\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation, Fabricator]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class ThinkingFountain extends Machine {\r\n    name = 'Thinking Fountain'\r\n    description = 'slowly growing'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Mainframe, Megafabricator, MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = generate(ResourceBlock.Aurum, 8)\r\n    cost = [ResourceBlock.Aurum]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class SilverForest extends Machine {\r\n    name = 'Silver Forest'\r\n    description = 'immense serenity'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Megafabricator, Mainframe ]\r\n    color = Color.fromHex('c0c0c0')\r\n    operation = store([ResourceBlock.Argent], 12)\r\n    cost = [ResourceBlock.Alloy, ResourceBlock.Algorithm]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Beauty: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n    forDome = true\r\n}\r\n\r\nexport class TimeCrystal extends Machine {\r\n    name = 'Time Crystal'\r\n    description = 'xlr8'\r\n    size = DeviceSize.Medium\r\n    color = Color.fromHex('e5e4e2')\r\n    operation = accelerateTime()\r\n    cost = [ResourceBlock.Omnium]\r\n    prereqs = [ Megafabricator, SilverForest ]\r\n}\r\n\r\nexport class HoloProjector extends Machine {\r\n    name = 'Holo Projector'\r\n    description = 'whatever your heart desires'\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    operation = generate(ResourceBlock.Data, 3)\r\n    cost = [ResourceBlock.Algorithm, ResourceBlock.Mineral]\r\n    prereqs = [ Mainframe ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 3, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class SacredGrove extends Machine {\r\n    name = 'Sacred Grove'\r\n    description = 'where the furies play'\r\n    size = DeviceSize.Medium\r\n    forDome = true\r\n    cost = [ ResourceBlock.Omnium ]\r\n    prereqs = [ AtomicCompiler ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 4, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class AtomicCompiler extends Machine {\r\n    name = 'Atomic Compiler'\r\n    description = 'super position'\r\n    operation = recipe(\r\n        [ ResourceBlock.Aurum, ResourceBlock.Argent ],\r\n        ResourceBlock.Omnium\r\n    )\r\n    cost = [ ResourceBlock.Argent, ResourceBlock.Algorithm ]\r\n    prereqs = [ ThinkingFountain, SilverForest ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n}\r\n\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    description = 'ore away'\r\n    operation = generate(ResourceBlock.Ore)\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    operation = recipe(\r\n        [ResourceBlock.Alloy, ResourceBlock.Algorithm],\r\n        ResourceBlock.Argent\r\n    )\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class MolecularEngine extends Machine {\r\n    name = 'Molecular Engine'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Megafabricator ]\r\n    color = Violet\r\n    operation = recipe(\r\n        [ResourceBlock.Bioplasma, ResourceBlock.Algorithm],\r\n        ResourceBlock.Aurum\r\n    )\r\n    image = images.megaconsole\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n        Water: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Mainframe extends Machine {\r\n    name = 'Mainframe'\r\n    size = DeviceSize.Large\r\n    color = Blue\r\n    prereqs = [ResearchServer]\r\n    cost = [ ResourceBlock.Mineral, ResourceBlock.Mineral ]\r\n    operation = recipe(\r\n        [ ResourceBlock.Data, ResourceBlock.Data ],\r\n        ResourceBlock.Algorithm\r\n    )\r\n    image = images.server\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 6 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Nature Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    operation = generate(ResourceBlock.Biomass, 12)\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n        Oxygen: { supply: 12, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicPool extends Machine {\r\n    name = 'Logic Pool'\r\n    size = DeviceSize.Large\r\n    prereqs = [ MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = store([ResourceBlock.Aurum], 12)\r\n    cost = [ResourceBlock.Algorithm, ResourceBlock.Bioplasma]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class Cathedral extends Machine {\r\n    name = 'Cathedral'\r\n    description = 'first ultrahumanist'\r\n    size = DeviceSize.Large\r\n    prereqs = [ SacredGrove ]\r\n}\r\n\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n\r\n    MineralProcessor,\r\n    PlasmaBank,\r\n    DissolutionVat,\r\n    MetalStorage,\r\n    Mainframe,\r\n\r\n    PersonnelRegistry,\r\n    MolecularEngine,\r\n    ThinkingFountain,\r\n    SilverForest,\r\n\r\n    OrientationConsole,\r\n    LifeSciencesConsole,\r\n\r\n    TimeCrystal,\r\n    LogicPool,\r\n    HoloProjector,\r\n    Cathedral,\r\n    SacredGrove,\r\n    AtomicCompiler,\r\n\r\n]","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { BackgroundPattern, getBackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, clr: Color = Color.White, lineWidth: number = 1) {\r\n  let c = clr.clone()\r\n  // c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawPatternedRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  if (gridPattern) {\r\n    let { x, y, width, height } = rect;\r\n    ctx.fillStyle = gridPattern\r\n    ctx.fillRect(x,y,width,height)\r\n\r\n    ctx.lineWidth = 2\r\n    ctx.setLineDash([])\r\n    ctx.strokeStyle = Color.White.toRGBA()\r\n    ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true,\r\n  dashed: boolean = false\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  if (filled) {\r\n    let main = color.clone();\r\n    // main.a = 1\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White.clone();\r\n    ctx.strokeStyle = edge.toRGBA();\r\n    ctx.lineWidth=edgeWidth\r\n    if (dashed) { ctx.setLineDash([5, 10]) }\r\n    else { ctx.setLineDash([]) }\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}\r\n\r\nexport function drawStar(ctx, cx, cy, outerRadius=3.6, innerRadius=1.4, spikes=5, ) {\r\n    var rot = Math.PI / 2 * 3;\r\n    var x = cx;\r\n    var y = cy;\r\n    var step = Math.PI / spikes;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(cx, cy - outerRadius)\r\n    for (let i = 0; i < spikes; i++) {\r\n        x = cx + Math.cos(rot) * outerRadius;\r\n        y = cy + Math.sin(rot) * outerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n\r\n        x = cx + Math.cos(rot) * innerRadius;\r\n        y = cy + Math.sin(rot) * innerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n    }\r\n    ctx.lineTo(cx, cy - outerRadius);\r\n    ctx.closePath();\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = 'yellow';\r\n    ctx.stroke();\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.fill();\r\n}","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    color: Color = Color.Gray\r\n    infra: boolean = false\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n\r\n    hide: boolean = false\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MediumSurfaceRoom ],\r\n        [Orientation.Right]: [  Dome, MediumSurfaceRoom ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.seventh\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n    infra = true\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n    infra = true\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    description: string = 'Biome sweet biome';\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.sixth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n\r\n    prereqs = [\r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n    // two small slots\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 2 * major.eighth\r\n    height = 2 * major.third\r\n    // two medium slots...\r\n    \r\n    machines = midBelow\r\n}\r\n\r\nexport class MediumRoomThree extends CommonArea {\r\n    name = 'Mid Room (3)'\r\n    prereqs = [ MediumRoom ]\r\n    view = 'MediumRoomThreeView'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.third\r\n\r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 4 * major.eighth\r\n    height = 3 * major.fifth\r\n\r\n    // two big slots?\r\n    machines = largeBelow\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class MediumSurfaceRoom extends Dome {\r\n    name = 'Mid Surf Bldg'\r\n    description = 'home away from home';\r\n\r\n    view: string = 'MediumSurfaceRoomView';\r\n\r\n    width: number = 6 * major.eighth\r\n    height: number = 1 * major.sixth\r\n\r\n    zoom = 0.1\r\n\r\n    prereqs = [ SmallDome ]\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = midBelow\r\n\r\n    hide = true // need another one which cares about connecting to roads\r\n}\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = 2 * major.seventh\r\n    height = major.seventh\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 3 * major.fifth\r\n    height = 2 * major.fifth\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 3 * major.seventh\r\n    height = 2 * major.seventh\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n\r\n}\r\n\r\n//////\r\n\r\n// export class MissionControl extends Structure {\r\n//     name: string = 'Mission Control';\r\n//     description: string = 'Keeping everything on track';\r\n//     view: string = 'MissionControlView';\r\n//     width: number = 6 * major.eighth\r\n//     height: number = 1 * major.sixth\r\n//     zoom = 0.1\r\n//     connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n//         [Orientation.Left]: [ SurfaceRoad ],\r\n//         [Orientation.Right]: [ SurfaceRoad ],\r\n//         [Orientation.Up]: [ MainTunnel ],\r\n//         [Orientation.Down]: [ MainTunnel ],\r\n//     }\r\n\r\n//     machines = [ CommandCenter ]\r\n// }\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n        MediumSurfaceRoom,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        MediumRoomThree,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine, Mainframe, CommandCenter, MissionLog, Botany, OrientationConsole, PersonnelRegistry, MineralProcessor, MiningDrill, HoloProjector, TimeCrystal } from './Machine';\r\nimport { Color } from 'excalibur';\r\nimport { Structure, MediumSurfaceRoom } from './Structure';\r\nimport { BackgroundPattern } from '../actors/Building/BackgroundPatterns';\r\n\r\nexport class SpaceFunction {\r\n     name: string = '(generic)'\r\n     description: string = '(generic description)'\r\n     machines: (typeof Machine)[] = []\r\n     color: Color = Color.Gray\r\n\r\n     prereqs: (typeof SpaceFunction)[] =  [] \r\n\r\n     structure: typeof Structure = null\r\n     hide: boolean = false\r\n     background: BackgroundPattern = BackgroundPattern.Beige\r\n\r\n     bonuses: {\r\n          capacity: number, // every store/generator gets this??\r\n          workSpeed: number, // 2 should double work speed (dur *= 1/multiplier)\r\n     } = {\r\n          capacity: 0, // boost cap by one\r\n          workSpeed: 1.00 // 20% bonus to work speed\r\n     }\r\n}\r\n\r\nexport class MissionControl extends SpaceFunction {\r\n     hide = true\r\n     name = 'Mission Control'\r\n     description = 'keeping everything on track'\r\n     structure = MediumSurfaceRoom\r\n     prereqs = [] //ComputerCore, Factory, Farm ]\r\n     machines = [ CommandCenter, MissionLog ]\r\n     background = BackgroundPattern.Window\r\n}\r\n\r\n\r\nexport class LivingQuarters extends SpaceFunction {\r\n     name = 'Living Quarters'\r\n     description = 'good night'\r\n     machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n     name = 'Barracks'\r\n     description = 'sleep tight'\r\n     machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nexport class Kitchen extends SpaceFunction {\r\n     name = 'Kitchen'\r\n     description = 'stay together'\r\n     machines = [ Stove, Fridge ]\r\n     bonuses = {\r\n          capacity: 2,\r\n          workSpeed: 1.1\r\n     }\r\n     background = BackgroundPattern.Checker\r\n}\r\n\r\nexport class LifeSupportPod extends SpaceFunction {\r\n     name = 'Life Support'\r\n     description = 'keep it going'\r\n     machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n     name = 'Retreat'\r\n     description = 'take it easy'\r\n     machines = [ Cabin, Cabin ]\r\n}\r\n\r\nexport class CloneMatrix extends SpaceFunction {\r\n     name = 'Clone Matrix'\r\n     description = 'clone home'\r\n     machines = [ CloningVat, CloningVat ]\r\n}\r\n\r\nexport class CloneReception extends SpaceFunction {\r\n     name = 'Clone Reception'\r\n     description = 'welcome clone'\r\n     machines = [ CloningVat, OrientationConsole, PersonnelRegistry ]\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n     name = 'Reading Room'\r\n     description = 'butterflies in the sky'\r\n     machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nexport class Library extends SpaceFunction {\r\n     name = 'Library'\r\n     description = 'take a look'\r\n     machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n     background = BackgroundPattern.Books\r\n}\r\n\r\nexport class Study extends SpaceFunction {\r\n     name = 'Study'\r\n     description = 'plan it out'\r\n     machines = [ StudyMachine, Bookshelf ]\r\n}\r\n\r\nclass ComputerLab extends SpaceFunction {\r\n     name = 'Computer Lab'\r\n     description = 'make it happen'\r\n     machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nexport class Archive extends SpaceFunction {\r\n     name = 'Archive'\r\n     description = 'write it down'\r\n     machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n     name = 'Arboretum'\r\n     description = 'walk it out'\r\n     machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n     name = 'Algae Farm'\r\n     description = 'make do'\r\n     machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nexport class SolarArray extends SpaceFunction {\r\n     name = 'Solar Array'\r\n     description = 'warm up'\r\n     machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nexport class Workshop extends SpaceFunction {\r\n     name = 'Workshop'\r\n     description = 'take form'\r\n     machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\nclass Nursery extends SpaceFunction {\r\n     name = 'Nursery'\r\n     description = 'quiet please'\r\n     machines = [ Houseplant, Houseplant, Houseplant ]\r\n     background = BackgroundPattern.Leafy\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n     name = 'Farm'\r\n     description = 'food for the masses'\r\n     machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n     name = 'Factory'\r\n     description = 'production lines'\r\n     machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\n\r\nexport class ComputerCore extends SpaceFunction {\r\n     name = 'Computer Core'\r\n     description = 'let us calculate'\r\n     machines = [ Mainframe, Mainframe ]\r\n     background = BackgroundPattern.Tech\r\n}\r\n\r\nexport class LifeSciencesLab extends SpaceFunction {\r\n     name = 'Life Sciences Lab'\r\n     description = 'where do i come from'\r\n     machines = [ Botany, Botany ]\r\n}\r\n\r\nexport class Refinery extends SpaceFunction {\r\n     name = 'Refinery'\r\n     description = 'separation'\r\n     machines = [ MineralProcessor ]\r\n}\r\n\r\nexport class Mine extends SpaceFunction {\r\n     name = 'Mine'\r\n     description = 'ore from the stone'\r\n     machines = [ MiningDrill ]\r\n}\r\n\r\nexport class HoloMatrix extends SpaceFunction {\r\n     name = 'Hologram Matrix'\r\n     description = 'dream it'\r\n     machines = [ HoloProjector, HoloProjector ]\r\n}\r\n\r\nexport class TimeChamber extends SpaceFunction {\r\n     name = 'Time Chamber'\r\n     description = 'believe it'\r\n     machines = [ TimeCrystal, TimeCrystal ]\r\n}\r\n\r\n// export class DreamMatrix extends \r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    ComputerLab,\r\n\r\n    ComputerCore,\r\n\r\n    MissionControl,\r\n    LifeSciencesLab,\r\n\r\n    CloneReception,\r\n    \r\n    Refinery,\r\n    Mine,\r\n    HoloMatrix,\r\n    TimeChamber,\r\n]","import { Engine, DisplayMode, Loader, Timer, Color } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n  static citizenSpeed: number = 150\r\n  static debugPath: boolean = false\r\n  static startHour: number = 8;\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: Color.Black //world.skyColor\r\n    });\r\n  }\r\n\r\n  public start() {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n\r\n    return super.start(loader).then(() => {\r\n      console.log(\"Osiris running.\")\r\n    });\r\n  }\r\n}","import { Citizen } from \"../actors/Citizen\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { sleep } from \"../Util\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Recipe, MechanicalOperation } from \"../models/MechanicalOperation\";\r\n\r\nexport abstract class Strategy {\r\n    private sleepInterval: number = 250\r\n    protected isActive: boolean = false;\r\n    constructor(protected pawn: Citizen) { }\r\n\r\n    protected abstract async apply();\r\n    abstract canApply(): boolean;\r\n\r\n    protected get planet(): Planet { return this.pawn.currentPlanet; }\r\n    protected get devices(): Device[] { return this.planet.colony.findPoweredDevices(); }\r\n    protected get operations(): MechanicalOperation[] { return this.devices.map(d => d.operation); }\r\n    protected get recipes(): Recipe[] {\r\n        let recipes: Recipe[] = [];\r\n        this.operations.forEach(op => {\r\n            if (op.type === 'recipe') {\r\n                recipes.push(op);\r\n            }\r\n        });\r\n        return recipes;\r\n    }\r\n\r\n\r\n    async attempt(): Promise<void> {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n        if (!this.isActive) {\r\n            this.isActive = true\r\n            // note apply will need to set this.isActive around its critical section\r\n            await this.apply();\r\n            this.isActive = false\r\n        }\r\n\r\n        await this.pause()\r\n        // setInterval(() => { this.attempt() }, this.sleepInterval)\r\n    }\r\n\r\n    protected async pause() {\r\n        await sleep(this.sleepInterval)\r\n    }\r\n\r\n    protected async gatherBlock(res: ResourceBlock): Promise<boolean> {\r\n        console.debug(\"GATHER BLOCK\", { res })\r\n        let gathered = false\r\n        let generatesDesiredBlock = (d: Device) => (d.operation.type === 'generator') &&\r\n            d.product.some(stored => res === stored) //&& !d.inUse\r\n        let gen: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], generatesDesiredBlock)\r\n\r\n        let storesDesiredBlock = (d: Device) => (d.operation.type === 'store') &&\r\n              d.product.some(stored => res === stored) //&& !d.inUse\r\n        let store: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n\r\n        let device: Device = gen || store\r\n\r\n        if (device) {\r\n            // device.inUse = true\r\n            console.debug(\"Found device to gather, visting...\")\r\n            await this.visitDevice(device)\r\n\r\n            if (device.inUse) {\r\n                // at least wait a bit and try again?\r\n                let waitTimes = 0\r\n                while (device.inUse) {\r\n                    console.warn(\"waiting for device to be ready!\")\r\n                    await sleep(5000) //this.pause()\r\n                    if (waitTimes++ > 10) {\r\n                        return false \r\n                    }\r\n                }\r\n            }\r\n\r\n            console.debug(\"Attempt to interact with device...\")\r\n            if (await device.interact(this.pawn, retrieveResource(res))) {\r\n                console.debug(\"Interacted successfully!\")\r\n                gathered = true\r\n            }\r\n        } else {\r\n            console.warn(\"Didn't gather...\")\r\n            // don't work sub-recipes??\r\n            // let recipe = this.recipes.find(recipe => recipe.produces === res);\r\n            // if (recipe) {\r\n                // gathered = await this.workRecipe(recipe);\r\n                // gathered = true\r\n            // }\r\n        }\r\n\r\n        return gathered\r\n    }\r\n\r\n    protected async visitDevice(device: Device) {\r\n        await this.pawn.visit(device)\r\n    }\r\n\r\n\r\n    protected async workRecipe(recipe: Recipe): Promise<boolean> {\r\n        console.debug(\"Working recipe\", { product: recipe.produces })\r\n        let knowsRecipe = (d: Device) => d.operation === recipe && !d.reserved\r\n        let maker = this.planet.colony.closestDeviceByType(this.pawn.pos, [], knowsRecipe)\r\n        let made = false\r\n        if (maker) {\r\n            maker.reserved = true\r\n            // maker.inUse = true\r\n            if (await this.gatherIngredients(recipe.consumes)) {\r\n                await this.visitDevice(maker)\r\n                if (await this.performRecipeTask(maker, recipe)) {\r\n                    made = true\r\n                }\r\n            }\r\n            maker.reserved = false\r\n            // maker.inUse = false\r\n        }\r\n        // await this.pause()\r\n        // await this.workRecipe(recipe);\r\n        return made\r\n    }\r\n\r\n    protected async gatherIngredients(blocks: ResourceBlock[]): Promise<boolean> {\r\n        if (!this.pawn.isCarryingUnique(blocks)) {\r\n            console.debug(\"Gathering blocks...\")\r\n            for (let ingredient of blocks) {\r\n                console.debug(\"attempting to gather\", { ingredient })\r\n                let tries = 0\r\n                let gathered = false\r\n                while (!gathered && tries < 20) {\r\n                    tries += 1\r\n                    if (await this.gatherBlock(ingredient)) {\r\n                        gathered = true\r\n                    } else {\r\n                        await this.pause()\r\n                    }\r\n                }\r\n\r\n                if (!gathered) {\r\n                    console.warn(\"couldn't gather one of the ingredients!!\")\r\n                    return false\r\n                }\r\n                //else {\r\n                //    console.warn(\"didn't gather it!\")\r\n                //    return false\r\n                //}\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    protected async performRecipeTask(maker: Device, recipe: Recipe, timesToAttempt: number = 5) {\r\n        console.debug(\"Try to perform recipe task...\", { produces: recipe.produces })\r\n        let worked = await maker.interact(this.pawn, { type: 'work', recipe })\r\n        if (!worked) {\r\n            // await this.pause()\r\n            console.warn(\"waiting for machine to become available...\")\r\n            for (let i = 0; i < timesToAttempt; i ++) {\r\n                await this.pause()\r\n                if (await this.performRecipeTask(maker, recipe)) {\r\n                    worked = true\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return worked\r\n    }\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor, emptyMarket } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\nimport { Recipe, ResourceStorage, MechanicalOperation, ResourceGenerator } from \"../models/MechanicalOperation\";\r\nimport { range, deleteByValueOnce } from \"../Util\";\r\nimport { drawRect } from \"../Painting\";\r\nimport { InteractionRequest } from \"../values/InteractionRequest\";\r\n\r\nexport class Device extends Actor {\r\n    // constructionMaterials: ResourceBlock[] = []\r\n\r\n    // could also use for storage?\r\n    product: ResourceBlock[] = []\r\n    nameLabel: Label\r\n    image: any\r\n    building: Building\r\n    inUse: boolean = false\r\n    hover: boolean = false\r\n\r\n    imageLoaded: boolean = false\r\n\r\n    built: boolean = false\r\n    reserved: boolean = false\r\n\r\n    constructor(\r\n        public machine: Machine,\r\n        initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = () => { this.imageLoaded = true }\r\n        this.image.src = machine.image\r\n\r\n        this.on('pointerenter', () => {\r\n            // console.log(\"HOVER ON\", { device: this })\r\n            this.hover = true\r\n            if (this.building) {\r\n                // setInterval(() => {\r\n                this.building.planet.currentlyViewing = this\r\n                // }, 75)\r\n            }\r\n        })\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED DEVICE\", { device: this })\r\n            // this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n            if (this.building) {\r\n                this.building.planet.currentlyViewing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    get imageX() { return this.pos.x - this.getWidth() / 2 }\r\n    get imageY() { return this.pos.y - this.getHeight() / 2 - 10 }\r\n\r\n    get economy() { return this.built ? this.machine.economy : emptyMarket() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (this.imageLoaded) {\r\n            if (!this.built) { ctx.globalAlpha = 0.5 }\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.imageX,\r\n                this.imageY,\r\n\r\n                this.getWidth(),\r\n                this.getHeight()\r\n            )\r\n            if (!this.built) { ctx.globalAlpha = 1.0 }\r\n\r\n            if (this.hover) {\r\n                let c = Color.White.clone()\r\n                c.a = 0.6\r\n                drawRect(\r\n                    ctx,\r\n                    { x: this.imageX, y: this.imageY, width: this.getWidth(), height: this.getHeight() },\r\n                    0,\r\n                    c\r\n                )\r\n            }\r\n        }\r\n\r\n        let iv = new Vector(this.imageX, this.imageY)\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = iv\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let { x: bx, y: by } = iv\r\n        let blockSize = 5\r\n        let yOff = this.nameLabel.fontSize\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).toRGBA()\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize + yOff, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get name() { return this.machine.name }\r\n    get description() { return this.machine.description }\r\n    get size() { return this.machine.size }\r\n    get operation() { return this.machine.operation }\r\n\r\n    async assemble(citizen: Citizen) {\r\n        if (citizen.isCarryingUnique(this.machine.cost)) {\r\n            for (let res of this.machine.cost) {\r\n                await citizen.progressBar(1000)\r\n                citizen.drop(res)\r\n            }\r\n            this.built = true\r\n        }\r\n    }\r\n\r\n    async interact(citizen: Citizen, request: InteractionRequest): Promise<boolean> {\r\n        if (this.inUse || !this.built) {\r\n            return false\r\n        }\r\n\r\n        let worked = false\r\n        let op = this.operation\r\n        if (op.type === 'recipe' && request.type === 'work') {\r\n            let recipe: Recipe = op\r\n            // do we have all the things?\r\n            if (citizen.carrying.some(it => recipe.consumes.includes(it))) {\r\n                this.inUse = true\r\n                if (citizen.isCarryingUnique(recipe.consumes)) {\r\n                    recipe.consumes.forEach(consumed => citizen.drop(consumed))\r\n                    let workTime = this.getEffectiveWorkTime(recipe)\r\n                    await citizen.progressBar(workTime) // recipe.workTime)\r\n                    citizen.carry(recipe.produces)\r\n\r\n                    worked = true\r\n                } else {\r\n                    console.warn(\"not carrying all requirements?\", { requires: recipe.consumes, has: citizen.carrying })\r\n                }\r\n                this.inUse = false\r\n            }\r\n        } else if (op.type === 'store') {\r\n            // accept it! (whatever you have that matches...?)\r\n            let store: ResourceStorage = op\r\n            if (request && request.type === 'retrieve') { // assume dispense request for now?\r\n                this.inUse = true\r\n                worked = this.dispense(citizen, request)\r\n                if (worked) {\r\n                    await citizen.progressBar(500)\r\n                }\r\n                this.inUse = false\r\n            } else if (request && request.type === 'store' &&\r\n                citizen.carrying.some(it => store.stores.includes(it))) { // maybe trying to store?\r\n                if (this.product.length < this.getEffectiveOperationalCapacity(store)) { // store.capacity) {\r\n                    let res = null\r\n                    if (store.stores.some(stored => { res = citizen.drop(stored); return res })) {\r\n                        if (res) {\r\n                            this.produceResource(res)\r\n                            // this.product.push(res)\r\n                            // this.building.redeem(res)\r\n                            worked = true\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.warn(\"no capacity in this store!!\")\r\n                    worked = false\r\n                }\r\n            }\r\n        } else if (op.type === 'generator') {\r\n            this.inUse = true\r\n            worked = this.dispense(citizen, request)\r\n            if (worked) {\r\n                await citizen.progressBar(500)\r\n            }\r\n            this.inUse = false\r\n        }\r\n\r\n        return worked\r\n    }\r\n\r\n    getEffectiveOperationalCapacity(op: ResourceGenerator | ResourceStorage) {\r\n        let bonus = this.building.spaceFunction\r\n        ? this.building.spaceFunction.bonuses.capacity \r\n        : 0\r\n        return op.capacity + bonus\r\n    }\r\n\r\n    getEffectiveWorkTime(op: Recipe) {\r\n        let bonus = this.building.spaceFunction \r\n         ? this.building.spaceFunction.bonuses.workSpeed\r\n         : 1\r\n\r\n        return Math.round(op.workTime * (1/bonus))\r\n    } \r\n\r\n\r\n    private dispense(citizen: Citizen, request: InteractionRequest) {\r\n        if (request && request.type === 'retrieve') {\r\n            let canFulfill = this.product.find(p => p === request.resource)\r\n            if (canFulfill) {\r\n                deleteByValueOnce(this.product, request.resource)\r\n                citizen.carry(request.resource)\r\n                this.building.debit(request.resource)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    public tryProduce(step: number) {\r\n        if (this.building.isActive && this.built) {\r\n            if (this.machine.operation.type === 'generator') {\r\n                if (step % this.machine.operation.generationTime === 0) {\r\n                    if (this.product.length < this.machine.operation.capacity) {\r\n                        this.produceResource(this.machine.operation.generates)\r\n                    }\r\n                }\r\n\r\n            } else if (this.machine.operation.type === 'spawn') {\r\n                if (step % 1000 == 0) {\r\n                    // console.log(\"WOULD SPAWN\")\r\n                    setTimeout(() => this.building.populate(this.pos.add(this.building.pos)), 100)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public produceResource(res: ResourceBlock) {\r\n        this.product.push(res)\r\n        this.building.redeem(res)\r\n    }\r\n\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            allStructures,\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        let snapped = false\r\n        if (bldg) {\r\n            let spot = bldg.nextDevicePlace().position\r\n            let d = spot.distance(pos)\r\n            snapped = d < 150\r\n        }\r\n\r\n        if (snapped) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n        } else {\r\n            this.pos = pos\r\n        }\r\n\r\n        return snapped\r\n    }\r\n}","const raisedSquare = require('../../images/raised-square-bg.png')\r\nconst leafy = require('../../images/leafy-bg.png')\r\nconst bookish = require('../../images/books-bg.png')\r\nconst posters = require('../../images/poster-wall-bg.png')\r\nconst tech = require('../../images/tech-bg.png')\r\nconst checker = require('../../images/checker-bg.png')\r\nconst beige = require('../../images/beige-bg.png')\r\nconst window = require('../../images/window-bg.png')\r\n\r\ninterface Background {\r\n    image: HTMLImageElement\r\n    pattern: CanvasPattern\r\n    loading: boolean\r\n}\r\n\r\nconst loadBg = (path) => {\r\n    let background: Background = { image: null, pattern: null, loading: true }\r\n    background.image = new Image();\r\n    background.image.src = path\r\n    background.image.onload = function () {\r\n      background.loading = false\r\n    }\r\n    return background\r\n}\r\n\r\nexport enum BackgroundPattern {\r\n    Leafy = 'Leafy',\r\n    Grid = 'Grid',\r\n    Books = 'Books',\r\n    Poster = 'Poster',\r\n    Tech = 'Tech',\r\n    Checker = 'Checker',\r\n    Beige = 'Beige',\r\n    Window = 'Window',\r\n}\r\n\r\nconst backgroundPatterns: { [ key in BackgroundPattern ]: Background } = {\r\n    Leafy: loadBg(leafy),\r\n    Grid: loadBg(raisedSquare),\r\n    Books: loadBg(bookish),\r\n    Poster: loadBg(posters),\r\n    Tech: loadBg(tech),\r\n    Checker: loadBg(checker),\r\n    Beige: loadBg(beige),\r\n    Window: loadBg(window)\r\n}\r\n\r\nexport const getBackgroundPattern = (ctx, pattern: BackgroundPattern) => {\r\n    let bg = backgroundPatterns[pattern]\r\n    if (!bg.loading) {\r\n        if (!bg.pattern) {\r\n            // bg.image.\r\n            bg.pattern = ctx.createPattern(bg.image, 'repeat');\r\n        }\r\n        return bg.pattern\r\n    }\r\n}","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        let tries = 0\r\n        while (visited.length < this.nodes.length && tries++ < this.nodes.length * 20) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Texture, Sound } from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\nconst craterRock = require('./sounds/crater-rock.mp3')\r\nconst assembler = require('./sounds/assembler.mp3')\r\nconst indivision = require('./sounds/indivision.mp3')\r\nconst understanding = require('./sounds/understanding.mp3')\r\nconst futureTense = require('./sounds/future tense.mp3')\r\n// const isomer = require('./sounds/isomer.mp3')\r\n// const outbound = require('./sounds/outbound.mp3')\r\n\r\nlet Resources = {\r\n    Sword: new Texture(sword),\r\n\r\n    CraterRock: new Sound(craterRock),\r\n    Assembler: new Sound(assembler),\r\n    Indivision: new Sound(indivision),\r\n    Understanding: new Sound(understanding),\r\n    FutureTense: new Sound(futureTense),\r\n    // Isomer: new Sound(isomer),\r\n    // Outbound: new Sound(outbound),\r\n\r\n\r\n}\r\n\r\nexport { Resources }\r\n","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class EatingStrategy extends Strategy {}","import { EatingStrategy } from \"./EatingStrategy\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { Fridge, Desk } from \"../models/Machine\";\r\n\r\nexport class WhenHungryEatingStrategy extends EatingStrategy {\r\n    canApply(): boolean {\r\n        return this.pawn.isHungry &&\r\n            this.planet.storedResources.includes(ResourceBlock.Meal)\r\n        // hunger > 0.6\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    protected async apply() {\r\n        // find the store with the food! reserve it maybe?\r\n        let fridge = this.devices.find(d => d.machine.operation.type === 'store' &&\r\n          d.machine.operation.stores.includes(ResourceBlock.Meal) &&\r\n          d.product.includes(ResourceBlock.Meal) &&\r\n          !d.reserved\r\n        )\r\n\r\n        if (fridge) {\r\n            fridge.reserved = true\r\n            // take the meal to a desk? (maybe need table here... or eatingSurface aspect?)\r\n            await this.visitDevice(fridge)\r\n            await fridge.interact(this.pawn, { type: 'retrieve', resource: ResourceBlock.Meal })\r\n            fridge.reserved = false\r\n\r\n            let desk = this.devices.find(d => d.machine instanceof Desk)\r\n            if (desk) {\r\n                await this.visitDevice(desk)\r\n            }\r\n            await this.pawn.eat()\r\n            // fridge.interac\r\n            // this.pawn.interact()\r\n        }\r\n    }\r\n    \r\n    \r\n}","import { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class SleepingStrategy extends Strategy {\r\n\r\n}","import { SleepingStrategy } from \"./SleepingStrategy\";\r\nimport { Bed } from \"../models/Machine\";\r\nimport { shuffle } from \"../Util\";\r\n\r\nexport class AnyBedSleepingStrategy extends SleepingStrategy {\r\n    canApply(): boolean {\r\n        if (!this.pawn.isTired) {\r\n            return false\r\n        }\r\n\r\n        let bedtime = this.planet.hour > 20 || this.planet.hour < 4\r\n        return bedtime\r\n    }\r\n\r\n    protected async apply() {\r\n        // find a bed\r\n        let bed = shuffle(this.devices).find(d => d.machine instanceof Bed && !d.inUse)\r\n        if (bed) {\r\n            bed.inUse = true\r\n            await this.visitDevice(bed)\r\n        }\r\n        await this.pawn.takeRest(1000 * 24)\r\n        if (bed) { \r\n            bed.inUse = false\r\n        }\r\n        return true\r\n    }\r\n\r\n}","import { Strategy } from \"./Strategy\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { containsUniq } from \"../Util\";\r\n\r\nexport abstract class ConstructionStrategy extends Strategy {\r\n    canApply(): boolean {\r\n        return !!this.unbuiltDevice\r\n    }\r\n\r\n    get unbuiltDevice() {\r\n        const isUnbuilt = (d: Device) => !d.built && !d.inUse && d.building.isActive &&\r\n          // the player can TRY to build it, we don't have to hang forever on it though\r\n          containsUniq(this.planet.storedResources, d.machine.cost)\r\n        return this.planet.colony.findAllDevices().find(isUnbuilt)\r\n    }\r\n}","import { ConstructionStrategy } from \"./ConstructionStrategy\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nexport class ProxmityBasedConstruction extends ConstructionStrategy {\r\n    async apply() {\r\n        if (this.unbuiltDevice && this.unbuiltDevice.building) {\r\n            await this.constructDevice(this.unbuiltDevice)\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n    private async constructDevice(device: Device) {\r\n        device.inUse = true\r\n        let resources = device.machine.cost\r\n        if (await this.gatherIngredients(resources)) {\r\n            await this.visitDevice(device)\r\n            await device.assemble(this.pawn)\r\n        } \r\n\r\n        device.inUse = false\r\n    }\r\n}","import { ResourceBlock } from \"../models/Economy\";\r\n\r\nimport { Recipe } from \"../models/MechanicalOperation\";\r\n\r\nexport interface RetrieveResource {\r\n    type: 'retrieve'\r\n    resource: ResourceBlock\r\n    // count: number\r\n}\r\n\r\nexport interface WorkRecipe {\r\n    type: 'work'\r\n    recipe: Recipe\r\n}\r\n\r\nexport interface StoreResource {\r\n    type: 'store'\r\n    resource: ResourceBlock\r\n}\r\n\r\nexport function retrieveResource(res: ResourceBlock): RetrieveResource {\r\n    return {\r\n        type: 'retrieve',\r\n        resource: res,\r\n        // count: 1\r\n    }\r\n}\r\n\r\n\r\nexport type InteractionRequest = StoreResource | RetrieveResource | WorkRecipe; // | ...\r\n\r\n","import { Device } from \"../actors/Device\";\r\nimport { MechanicalOperation, Recipe } from \"../models/MechanicalOperation\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class ProductionStrategy extends Strategy {\r\n\r\n\r\n    protected async storeBlock(res: ResourceBlock) {\r\n        let storesDesiredBlock = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) && //operation.capacity &&\r\n            d.operation.stores.includes(res)\r\n        let openStore = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n        let stored = false\r\n        if (openStore) {\r\n            await this.visitDevice(openStore)\r\n            if (await openStore.interact(this.pawn, { type: 'store', resource: res })) {\r\n                stored = true\r\n            }\r\n        }\r\n\r\n        if (!stored) {\r\n            await this.pause()\r\n            await this.storeBlock(res)\r\n        }\r\n    }\r\n\r\n}\r\n","import { shuffle, containsUniq } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Recipe, ResourceStorage } from \"../models/MechanicalOperation\";\r\nimport { ProductionStrategy } from \"./ProductionStrategy\";\r\n\r\nexport class CapacityBasedProduction extends ProductionStrategy {\r\n    private findStore() {\r\n        const storeWithCapacity = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) //&&\r\n            // !d.inUse\r\n            // containsUniq(this.planet.storedResources, d.operation)\r\n        let store: Device = shuffle(this.devices).find(storeWithCapacity)\r\n        return store\r\n    }\r\n\r\n    canApply(): boolean {\r\n        // throw new Error(\"Method not implemented.\");\r\n        return !!this.findStore()\r\n    }\r\n\r\n    async apply() {\r\n        let store = this.findStore()\r\n\r\n        if (store && store.operation.type === 'store') {\r\n            // store.inUse = true\r\n            const storage: ResourceStorage = store.operation\r\n            const recipeForStoredResource = (r: Recipe) => storage.stores.some(stored => r.produces === stored)\r\n            let recipe: Recipe = shuffle(this.recipes).find(recipeForStoredResource)\r\n            if (recipe && containsUniq(this.planet.storedResources, recipe.consumes)) {\r\n                if (await this.workRecipe(recipe)) {\r\n                    await this.storeBlock(recipe.produces)\r\n                }\r\n            }\r\n            // store.inUse = false\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons, deleteByValueOnce, sleep, containsUniq, deleteByValue } from \"../Util\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { ProductionStrategy } from \"../strategies/ProductionStrategy\";\r\nimport { CapacityBasedProduction } from \"../strategies/CapacityBasedProduction\";\r\nimport { drawStar, drawRect } from \"../Painting\";\r\nimport { ConstructionStrategy } from \"../strategies/ConstructionStrategy\";\r\nimport { ProxmityBasedConstruction } from \"../strategies/ProximityBasedConstruction\";\r\nimport { SleepingStrategy } from \"../strategies/SleepingStrategy\";\r\nimport { AnyBedSleepingStrategy } from \"../strategies/AnyBedSleepingStrategy\";\r\nimport { EatingStrategy } from \"../strategies/EatingStrategy\";\r\nimport { WhenHungryEatingStrategy } from \"../strategies/WhenHungryEatingStrategy\";\r\n\r\nexport class Citizen extends Actor {\r\n    isPlanning: boolean = false // \r\n\r\n    // walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock[] = [] // null\r\n    path: Vector[] = []\r\n\r\n    private workInProgress: boolean = false\r\n    private workStarted: number\r\n    private workDuration: number\r\n    private progress: number\r\n\r\n    private sleeping: boolean = false\r\n\r\n\r\n    private productionStrategy: ProductionStrategy\r\n    private constructionStrategy: ConstructionStrategy\r\n    private sleepingStrategy: SleepingStrategy\r\n    private eatingStrategy: EatingStrategy\r\n\r\n    private hunger: number = 0.0;\r\n    private energy: number = 100\r\n\r\n    constructor(private home: Vector, protected planet: Planet, private elite: boolean = false) {\r\n        super(home.x, home.y, Scale.minor.first, Scale.minor.fourth, Color.White.clone())\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.productionStrategy = new CapacityBasedProduction(this)\r\n        this.constructionStrategy = new ProxmityBasedConstruction(this)\r\n        this.sleepingStrategy = new AnyBedSleepingStrategy(this)\r\n        this.eatingStrategy = new WhenHungryEatingStrategy(this)\r\n    }\r\n\r\n    get isHungry() { return this.hunger > 0.6 }\r\n    get isTired()  { return this.energy < 85 }\r\n\r\n    // get isWorking() { return this.isWorking }\r\n    get currentPlanet() { return this.planet }\r\n\r\n    get walkSpeed() {\r\n        let speedMultiplier = this.planet.timeFactor * (this.elite ? 1.6 : 1)\r\n        return Game.citizenSpeed * speedMultiplier\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // make sure we are busy!\r\n        this.work()\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = \r\n              Math.min(\r\n                  (now - this.workStarted) / this.workDuration,\r\n                  1\r\n              )\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        ctx.save()\r\n        // ctx.globalAlpha = 1.0\r\n        ctx.translate(this.x, this.y - this.getHeight()/2 - 5)\r\n        if (this.sleeping) {\r\n            ctx.rotate(-Math.PI / 2);\r\n            ctx.translate(-10, -10)\r\n        }\r\n        // ctx.globalAlpha = 1.0 //?\r\n        drawRect(\r\n            ctx,\r\n            { x: 0, y: 0, width: this.getWidth(), height: this.getHeight() },\r\n            0,\r\n            Color.White\r\n        )\r\n\r\n        if (this.elite) {\r\n            // draw a little star?\r\n            drawStar(ctx, 8, -5)\r\n        }\r\n\r\n        // super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            let dx = 5\r\n            if (this.vel.x < 0) { dx = -5 }\r\n            this.carrying.forEach((carried, idx) => {\r\n                ctx.fillStyle = blockColor(carried).clone().saturate(0.2).toRGBA()\r\n                ctx.fillRect(dx, 2 - 4 * idx, 5, 5)\r\n            })\r\n        }\r\n        ctx.restore()\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            ctx.strokeRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n        }\r\n\r\n        // let debugPath = true\r\n        if (this.path && Game.debugPath) {\r\n            let c = Color.White.clone().lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 4\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        this.workInProgress = false\r\n    }\r\n\r\n\r\n    carry(c: ResourceBlock) {\r\n        this.carrying.push(c);\r\n    }\r\n\r\n    isCarryingUnique(resources: ResourceBlock[]): boolean {\r\n        let isCarrying = containsUniq(this.carrying, resources)\r\n        return isCarrying\r\n    }\r\n\r\n    drop(res: ResourceBlock): ResourceBlock {\r\n        if (this.carrying.length > 0) {\r\n            if (this.carrying.find(r => r === res)) {\r\n                deleteByValueOnce(this.carrying, res)\r\n                return res\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    currentBuilding: Building = null\r\n    async visit(device: Device) {\r\n        if (this.currentBuilding != device.building) {\r\n            const path = this.planet.pathBetweenPoints(this.pos.clone(), device.pos.add(device.building.pos))\r\n            await this.followPath(path)\r\n        }\r\n        let target = device.pos.add(device.building.pos)\r\n        await this.glideTo(target)\r\n        this.currentBuilding = device.building\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        if (pos) {\r\n            return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n        }\r\n    }\r\n\r\n    async followPath(path: Vector[]) {\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = []\r\n        }\r\n    }\r\n    \r\n    protected get strategies() {\r\n        return [\r\n            this.sleepingStrategy,\r\n            this.eatingStrategy,\r\n            this.constructionStrategy,\r\n            this.productionStrategy\r\n        ]\r\n    }\r\n\r\n    async work() {\r\n        if (this.isPlanning || this.sleeping) { return }\r\n\r\n        this.isPlanning = true\r\n        // just get rid of it??\r\n        if (this.carrying.length > 0) { this.carrying = [] }\r\n        let choice = this.strategies.find(strat => strat.canApply())\r\n        if (choice) {\r\n            await choice.attempt()\r\n            this.energy -= 5\r\n            this.hunger += 0.04\r\n        }\r\n        this.isPlanning = false\r\n    }\r\n\r\n    async takeRest(duration: number) {\r\n        console.log(\"Citizen taking a well-deserved rest!!\")\r\n        this.sleeping = true\r\n        await this.progressBar(duration)\r\n        this.energy = 100\r\n        this.sleeping = false\r\n    }\r\n\r\n    async eat() {\r\n        console.log(\"Citizen eating a meal!\")\r\n        // this.eating = true\r\n        await this.progressBar(4000)\r\n        deleteByValueOnce(this.carrying, ResourceBlock.Meal)\r\n        this.hunger = 0\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(pos, elite: boolean = false) {\r\n        let citizen = new Citizen(pos, this.planet, elite);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { Game } from '../../Game';\r\n\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = Game.debugPath\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.placed = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0] //.length > 1 ? destination.nodes()[1] : destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination; //.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        // console.log(\"PATH FOUND BTWN POINTS\", { srcNode, destNode, path })\r\n        return path;\r\n    }\r\n\r\n\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findPoweredDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d.pos.add(d.building.pos))\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings[0] //.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices(): Device[] {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n\r\n    findPoweredDevices(): Device[] {\r\n        return flatSingle(this.activeBuildings.map(b => b.getDevices()))\r\n            .filter(d => d.built) /// ....\r\n    }\r\n\r\n    protected get activeBuildings() {\r\n        return this.buildings.filter(b => b.isActive)\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range, flatSingle } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { AccelerateTime, MechanicalOperation } from '../../models/MechanicalOperation';\r\nimport { World } from '../../models/World';\r\nimport { drawRect } from '../../Painting';\r\n\r\nclass Sky extends Actor {\r\n    constructor(\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number,\r\n        color: Color\r\n    ) {\r\n        super(x,y,width,height,color)\r\n    }\r\n\r\n    draw(ctx, delta) {\r\n        drawRect(\r\n            ctx,\r\n            {x: this.x, y: this.y, width: this.getWidth(), height: this.getHeight() },\r\n            0,\r\n            this.color,\r\n        )\r\n    }\r\n}\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n    // baseColor: Color\r\n    sky: Actor\r\n\r\n    constructor(\r\n        public world: World,\r\n        public hud: Hud,\r\n        // public color: Color,\r\n        private onBuildingHover: (b: Building) => any,\r\n        private onDeviceHover: (d: Device) => any,\r\n        private w: number = 2000000,\r\n        private depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, w, depth, world.color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        // this.baseColor = world.color.clone()\r\n\r\n        this.sky = new Actor(0,-depth,w,depth, world.skyColor) //Color.Blue)\r\n        this.add(this.sky)\r\n\r\n        let yBase = -depth/2\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n\r\n    }\r\n\r\n\r\n    private currentHour: number\r\n    get hour() { return this.currentHour }\r\n    set hour(hour: number) {\r\n        this.currentHour = hour\r\n\r\n        let c = this.world.skyColor.clone().darken(0.2).desaturate(0.1)\r\n\r\n        let colorMap = {\r\n            night: c.darken(0.7),\r\n            dawn: c.darken(0.2),\r\n            morning: c.lighten(0.1),\r\n            afternoon: c.lighten(0.3),\r\n            evening: c,\r\n        }\r\n\r\n        if (hour >= 5 && hour < 8) { // dawn\r\n            let inc = (hour - 6) / 5\r\n            this.sky.color = colorMap.dawn.lighten(inc)\r\n        } else if (hour >= 8 && hour < 12) { // morning\r\n            let inc = (hour - 8) / 24\r\n            this.sky.color = colorMap.morning.lighten(inc)\r\n        } else if (hour >= 12 && hour < 14) { // early afternoon\r\n            this.sky.color = colorMap.afternoon //.darken(inc)\r\n        } else if (hour >= 14 && hour < 18) {  // late afternoon\r\n            let inc = (hour - 14) / 16\r\n            this.sky.color = colorMap.afternoon.darken(inc)\r\n        } else if (hour >= 18 && hour < 23) { // evening\r\n            let inc = (hour - 18) / 10\r\n            this.sky.color = colorMap.evening.darken(inc)\r\n        } else if (hour >= 23) { // late night\r\n            this.sky.color = colorMap.night\r\n        } else if (hour < 5) { // early morning\r\n            this.sky.color = colorMap.night\r\n        } else {\r\n            console.warn(\"No sky color handler for current time:\", { hour })\r\n        }\r\n\r\n        // this.sky.color.screen\r\n    }\r\n\r\n    set currentlyViewing(buildingOrDevice: Building | Device) {\r\n        if (buildingOrDevice instanceof Building) {\r\n            let b: Building = buildingOrDevice\r\n            this.onBuildingHover(b)\r\n        } else if (buildingOrDevice instanceof Device) {\r\n            let d: Device = buildingOrDevice\r\n            this.onDeviceHover(d)\r\n        }\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        // let devices = this.colony.findPoweredDevices()\r\n        // let economies = devices.map((d: Device) => d.machine.economy)\r\n\r\n        let buildings = this.colony.buildings\r\n        let economies = buildings.map(b => b.economy())\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    spend(resource: ResourceBlock): any {\r\n        this.hud.resourceExpended(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector, elite: boolean = false) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            // console.log(\"POPULATIN'!\")\r\n            // let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(pos, elite) //home)\r\n        } else {\r\n            console.warn(\"too many citizens already to populate more!\")\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [ PureValue.Shelter, PureValue.Water, PureValue.Oxygen ]\r\n        return Math.max(0, Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        ))\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n       return this.colony.pathBetweenPoints(origin, destination)\r\n    }\r\n\r\n    get timeFactor() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let ops: MechanicalOperation[] = devices.map(d => d.operation) //.filter(op => op.type === 'accelerate')\r\n        return ops\r\n            .map(op => op.type === 'accelerate' ? op.factor : 1)\r\n            .reduce((acc, val) => val * acc, 1.0)\r\n    }\r\n\r\n    get storedResources(): ResourceBlock[] {\r\n        let devices = this.colony.findAllDevices()\r\n        return flatSingle(devices.map(d => d.product))\r\n    }\r\n}","import { Sound, Color } from \"excalibur\";\r\nimport { sample } from \"../../Util\";\r\n\r\ninterface MusicPlayerPlay { type: 'play'}\r\ninterface MusicPlayerPause { type: 'pause'}\r\ninterface MusicPlayerStop { type: 'stop'}\r\ninterface MusicPlayerNext { type: 'next'}\r\ntype MusicPlayerAction = MusicPlayerPlay | MusicPlayerPause | MusicPlayerStop | MusicPlayerNext\r\n\r\nexport class MusicPlayer {\r\n    private _wrapper: HTMLDivElement;\r\n    private _element: HTMLDivElement;\r\n    private _titleElem: HTMLSpanElement;\r\n\r\n    currentTrack: string\r\n    paused: boolean = false\r\n\r\n    constructor(private x: number, private y: number, private playlist: {\r\n        [track: string]: Sound;\r\n    }) {\r\n        this.makePlayer();\r\n        setTimeout(() => { this.startMusic() }, 3000)\r\n        this._titleElem.textContent = `Please wait, the jams are on their way...`;\r\n        this.currentTrack = sample(Object.keys(this.playlist)); //[0];\r\n    }\r\n\r\n    startMusic() {\r\n        this._titleElem.textContent = `Playing: ${this.currentTrack}`;\r\n        this.playlist[this.currentTrack].play()\r\n        .then(() => {\r\n                this.advancePlaylist()\r\n        })\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._wrapper.style.left = `${left + this.x}px`;\r\n            this._wrapper.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    private makePlayer() {\r\n        this._wrapper = document.createElement('div')\r\n        this._wrapper.style.position = 'absolute'\r\n        this._wrapper.style.width = '20%'\r\n        this._wrapper.style.textAlign = 'center'\r\n        this._wrapper.style.border = 'none';\r\n        document.body.appendChild(this._wrapper);\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.display = 'inline-block';\r\n        this._element.style.border = 'none';\r\n        this._wrapper.appendChild(this._element)\r\n\r\n        this._titleElem = document.createElement('span');\r\n        this._titleElem.style.fontFamily = 'Verdana';\r\n        this._titleElem.style.fontSize = '7pt';\r\n        this._titleElem.style.padding = '24px'\r\n        this._titleElem.style.color = 'white';\r\n        this._wrapper.appendChild(this.inlineBlock(this._titleElem));\r\n\r\n        let play = this.iconFactory({ type: 'play' }, '&#9655;')\r\n        this._wrapper.appendChild(this.inlineBlock(play));\r\n\r\n        let pause = this.iconFactory({ type: 'pause' }, '&#10072; &#10072;')\r\n        this._wrapper.appendChild(this.inlineBlock(pause))\r\n\r\n        let next = this.iconFactory({ type: 'next' }, '&rarr;')\r\n        this._wrapper.appendChild(this.inlineBlock(next))\r\n\r\n    }\r\n\r\n    handleAction(action: MusicPlayerAction) {\r\n        if (action.type === 'pause') {\r\n            this.song.pause()\r\n            this.paused = true\r\n            this._titleElem.textContent = `Paused: ${this.currentTrack}`;\r\n        } else if (action.type === 'play') {\r\n            this.song.play()\r\n            this.paused = false\r\n            this._titleElem.textContent = `Playing: ${this.currentTrack}`;\r\n        } else if (action.type === 'next') {\r\n            if (this.paused) {\r\n                this.song.play()\r\n                this.paused = false\r\n            }\r\n            this.song.stop()\r\n        }\r\n    }\r\n\r\n    advancePlaylist() {\r\n        let ndx = this.trackNames.indexOf(this.currentTrack)\r\n        ndx = (ndx + 1) % this.trackNames.length\r\n        this.currentTrack = this.trackNames[ndx]\r\n        this.startMusic()\r\n    }\r\n\r\n    get trackNames() { return Object.keys(this.playlist) }\r\n    get song() { return this.playlist[this.currentTrack] }\r\n\r\n    private inlineBlock(elem) {\r\n        let block = document.createElement('div');\r\n        block.style.display = 'inline-block';\r\n        block.style.border = 'none';\r\n        block.append(elem)\r\n        return block\r\n    }\r\n\r\n    private iconFactory(\r\n        action: MusicPlayerAction,\r\n        iconContent: string,\r\n    ) {\r\n        let bg = Color.Transparent\r\n        let fg = Color.White\r\n        let icon = document.createElement('button')\r\n        icon.innerHTML = iconContent\r\n        icon.style.display = 'block';\r\n        icon.style.fontSize = '7pt';\r\n        icon.style.fontFamily = 'Verdana';\r\n        icon.style.border = 'none'\r\n        icon.style.padding = '4px'\r\n        icon.style.background = bg.toRGBA();\r\n        icon.style.color = fg.toRGBA();\r\n        icon.onclick = () => { this.handleAction(action) }\r\n        return icon\r\n    }\r\n\r\n}\r\n","import { Color } from \"excalibur\";\r\nimport { EntityKind } from \"../../values/Entity\";\r\n\r\nexport class Palette {\r\n    private _element: HTMLDivElement;\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(\r\n        private name: string,\r\n        private x: number,\r\n        private y: number,\r\n        private all: EntityKind[],\r\n        private onButtonClick: (EntityKind) => any = null,\r\n        private onButtonEnter: (EntityKind) => any = null,\r\n        private comprehend = true \r\n    ) {\r\n        this.makePalette();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    updateBuilt(built: (EntityKind)[]) {\r\n        this.built = built;\r\n        if (this.comprehend) {\r\n            this.comprehended = this.all.filter((e: EntityKind) => {\r\n                let s = new e();\r\n                let prereqs: (EntityKind)[] = s.prereqs;\r\n                return prereqs.every((prereq: EntityKind) => {\r\n                    let built = this.built.some((s: EntityKind) => s === prereq);\r\n                    return built;\r\n                });\r\n            });\r\n        } else {\r\n            this.comprehended = this.built\r\n        }\r\n        this.makePalette();\r\n    }\r\n\r\n    private makePalette() {\r\n        if (this._element) {\r\n            this._element.parentElement.removeChild(this._element);\r\n        }\r\n        if (!(this.comprehended.length > 0)) { return }\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.border = 'none'; //1px solid black'; //0.5px solid white';\r\n        document.body.appendChild(this._element);\r\n\r\n        if (this.name) {\r\n            let title = document.createElement('h2')\r\n            title.textContent = this.name\r\n            title.style.fontFamily = 'Verdana'\r\n            title.style.fontSize = '7pt'\r\n            title.style.fontWeight = '400'\r\n            title.style.color = Color.White.toRGBA()\r\n            title.style.backgroundColor = Color.Violet.darken(0.92).toRGBA()\r\n            title.style.padding = '4px'\r\n            title.style.margin = '0px'\r\n            this._element.appendChild(\r\n                title\r\n            )\r\n        }\r\n\r\n        this.comprehended\r\n            .map((elem: EntityKind) => new elem())\r\n            .sort((a, b) => a.color > b.color ? -1 : 1)\r\n            .forEach(elem => {\r\n                if (elem.hide) { return }\r\n                let label = elem.name;\r\n                if (!this.built.map(m => new m().name).includes(elem.name)) {\r\n                    label += ' *';\r\n                }\r\n                let clr = elem.color;\r\n                let btn = this.buttonFactory(label, clr);\r\n                this._element.appendChild(btn);\r\n                if (this.onButtonEnter) {\r\n                    btn.onmouseenter = () => { this.onButtonEnter(elem); };\r\n                }\r\n                if (this.onButtonClick) {\r\n                    btn.onclick = () => { this.onButtonClick(elem); };\r\n                }\r\n            });\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.5).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = label;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '7pt';\r\n        paletteButton.style.fontFamily = 'Verdana';\r\n        paletteButton.style.fontWeight = '500';\r\n        paletteButton.style.padding = '3px';\r\n        paletteButton.style.width = '124px';\r\n        paletteButton.style.textTransform = 'uppercase';\r\n        paletteButton.style.border = 'none' //1px solid rgba(255,255,255,0.08)';\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA();\r\n            paletteButton.style.color = fg.toRGBA();\r\n        };\r\n        return paletteButton;\r\n    }\r\n}\r\n","import { Label, Actor, FontStyle, Color } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { PureValue, Economy, ResourceBlock } from \"../../models/Economy\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nimport { countOccurrences, flatSingle } from \"../../Util\";\r\n\r\nexport class CardBody extends Actor {\r\n    description: Label\r\n    values: Label\r\n    notes: Label\r\n    footer: Label\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 0, 0)\r\n        // resources / recipes\r\n\r\n        this.values = new Label('')\r\n        this.values.fontSize = 10\r\n        this.add(this.values)\r\n\r\n        this.notes = new Label('behavioral notes', 0, 30)\r\n        this.notes.fontSize = 11\r\n        this.add(this.notes)\r\n\r\n        this.description = new Label('description', 0, 60)\r\n        this.description.fontSize = 12\r\n        this.description.fontStyle = FontStyle.Italic\r\n        this.description.color = Color.DarkGray\r\n        this.add(this.description)\r\n\r\n        this.footer = new Label('footer', 20, 80)\r\n        this.footer.fontSize = 10\r\n        this.footer.fontStyle = FontStyle.Italic\r\n        this.add(this.footer)\r\n\r\n        this.show(entity)\r\n    }\r\n\r\n    describeResources = (arr: ResourceBlock[]) => {\r\n        let freqs = countOccurrences(arr)\r\n        return Object.keys(freqs)\r\n            .map(elem => `${elem} x${freqs[elem]}`)\r\n            .join(' + ')\r\n    }\r\n\r\n    show(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        if (entity) {\r\n            this.description.text = entity.description;\r\n\r\n            if (entity instanceof Machine || entity instanceof Device) {\r\n                this.values.text =  this.describeEconomy(entity.economy)\r\n                // let footerNotes = []\r\n                let resourceDescription = entity instanceof Machine\r\n                    ? `Cost: ${this.describeResources(entity.cost)}`\r\n                    : (entity.built ? this.describeResources(entity.product) : 'under construction')\r\n                let forDome = entity instanceof Machine ? entity.forDome : entity.machine.forDome\r\n                let domeStatus = `For Dome: ${forDome ? 'Yes' : 'No'}`\r\n                this.footer.text = resourceDescription === ''\r\n                    ? domeStatus\r\n                    : [resourceDescription, domeStatus].join(' | ') \r\n                this.notes.text = '' //\r\n                let op = entity.operation\r\n                if (op) {\r\n                    if (op.type === 'recipe') {\r\n                        this.notes.text = `Turns ${op.consumes.join(' + ')} -> ${op.produces}.`\r\n                    } else if (op.type === 'generator') {\r\n                        this.notes.text = `Generates ${op.generates}.`\r\n                    } else if (op.type === 'store') {\r\n                        this.notes.text = `Stores ${op.stores.join(' + ')}`\r\n                    } else if (op.type === 'spawn') {\r\n                        this.notes.text = 'Decants clones.'\r\n                    }\r\n                }\r\n            } else if (entity instanceof SpaceFunction) {\r\n                let { capacity, workSpeed } = entity.bonuses\r\n                let bonusMessages = [];\r\n                if (capacity > 0) {\r\n                    bonusMessages.push(`+${capacity} cap`)\r\n                }\r\n                if (workSpeed > 1.0) {\r\n                    bonusMessages.push(`+${Math.floor((workSpeed*100)-100)}% efficiency` )\r\n                }\r\n                this.values.text = bonusMessages.join('; ') \r\n                this.notes.text = entity.machines.map(m => (new m()).name).join(' + ')\r\n                this.footer.text = ''\r\n            } else if (entity instanceof Building) {\r\n                this.values.text =  this.describeEconomy(entity.economy(false))\r\n                this.notes.text = entity.getDevices().map(d => d.machine.name).join(' + ')\r\n\r\n                let product = entity.getDevices()\r\n                    .map(d => d.product)\r\n                    .reduce((a, b) => a.concat(b), [])\r\n                this.footer.text = product.length > 0\r\n                    ? \"Currently contains: \" + this.describeResources(product)\r\n                    : ''\r\n            } else {\r\n                this.values.text = ''\r\n                this.notes.text = ''\r\n                this.footer.text = ''\r\n            }\r\n\r\n        }\r\n        // other bonuses? behaviors?\r\n    }\r\n\r\n    private describeEconomy(e: Economy): string {\r\n        let values = []\r\n        let econ = e // entity.economy\r\n        for (let value in PureValue) {\r\n            let { supply, demand } = econ[value]\r\n            let delta = supply - demand\r\n            if (delta > 0) {\r\n                values.push(`+${delta} ${value}`)\r\n            } else if (delta < 0) {\r\n                values.push(`${delta} ${value}`)\r\n            }\r\n        }\r\n        return values.join(' | ')\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nexport class CardTitle extends Actor {\r\n    \r\n    name: Label;\r\n    type: Label;\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 14, 32, entity && entity.color || Color.Gray);\r\n        this.name = new Label(entity && entity.name || '..', 20, 16)\r\n        this.name.fontSize = 28\r\n        this.name.color = Color.Black\r\n        this.add(this.name)\r\n\r\n        this.type = new Label('..', 232, 16)\r\n        this.type.fontSize = 10\r\n        this.type.color = Color.Gray\r\n        this.type.fontStyle = FontStyle.Italic\r\n        this.add(this.type)\r\n\r\n        if (entity) {\r\n            this.announce(entity)\r\n        }\r\n    }\r\n\r\n    announce(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.name.text = entity.name\r\n        this.color = entity.color.desaturate(0.5).darken(0.2)\r\n        if (entity instanceof Machine) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n        if (entity instanceof Structure) { this.type.text = 'Structure' }\r\n        if (entity instanceof SpaceFunction) { this.type.text = 'Function' }\r\n        if (entity instanceof Building) { this.type.text = 'Building' }\r\n        if (entity instanceof Device) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { CardTitle } from \"./CardTitle\";\r\nimport { CardBody } from \"./CardBody\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\n\r\nexport class Card extends Actor {\r\n    title: CardTitle\r\n    cardBody: CardBody\r\n    image: any\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x + 160, y + 90, 320, 180, Color.White);\r\n        let x0 = -150, y0 = -50;\r\n        this.title = new CardTitle(entity, x0 - 3, y0); //x, y)\r\n        this.add(this.title);\r\n        this.cardBody = new CardBody(entity, x0 + 14, y0 + 40)\r\n        this.add(this.cardBody)\r\n\r\n        this.image = new Image();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        if (this.entity) {\r\n            if (this.entity instanceof Machine) {\r\n                let ix = this.pos.x + 48, iy = this.pos.y - 16\r\n                let isz = 92\r\n                ctx.drawImage(this.image, ix, iy, isz, isz)\r\n            }\r\n        }\r\n    }\r\n\r\n    present(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.title.announce(entity)\r\n        this.cardBody.show(entity)\r\n\r\n        this.entity = entity\r\n        if (this.entity instanceof Machine) {\r\n            this.image.src = this.entity.image\r\n        }\r\n    }\r\n\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor } from \"excalibur\";\r\nimport { Economy, PureValue, availableCapacity, allValues } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n\r\n        let index = 0\r\n        for (let value of allValues) {\r\n            let valueLabel: EconomicValue =  new EconomicValue(value, (index++ * 32), 0)\r\n            this.valueLabels[value] = valueLabel\r\n            this.add(valueLabel)\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value of allValues) {\r\n            this.valueLabels[value].setCount(\r\n                availableCapacity(market, value)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 6, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n\r\n    debit(amt: number) {\r\n        this.value -= amt\r\n        this.count.text = `x${this.value}`\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            [ResourceBlock.Biomass]: null,\r\n            [ResourceBlock.Idea]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n            [ResourceBlock.Alloy]: null,\r\n            [ResourceBlock.Bioplasma]: null,\r\n            [ResourceBlock.Algorithm]: null,\r\n            [ResourceBlock.Argent]: null,\r\n            [ResourceBlock.Aurum]: null,\r\n            [ResourceBlock.Omnium]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0, Color.DarkGray.darken(0.8));\r\n        let rx0 = 0, ry0 = -2.5;\r\n        let resources = [\r\n            ResourceBlock.Meal,\r\n            ResourceBlock.Data,\r\n            ResourceBlock.Mineral,\r\n\r\n            ResourceBlock.Bioplasma,\r\n            ResourceBlock.Alloy,\r\n            ResourceBlock.Algorithm,\r\n\r\n            ResourceBlock.Argent,\r\n            ResourceBlock.Aurum,\r\n        ];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0 + index * 18, ry = ry0 + index * 0;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n\r\n    decrement(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.debit(1)\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n\r\n    constructor(market: Economy, w: number = 10000, h: number = 36) {\r\n        super(0,0, w, h, Color.DarkGray.darken(0.8));\r\n\r\n        let ty = 14\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+2)\r\n        brand.fontSize = 12\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.1\", 48, ty + 2)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(70, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 360, ty)\r\n        this.add(this.economy)\r\n\r\n        this.popLabel = new Label(\"\", 1000, ty, 'Helvetica')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 1080, ty, 'Helvetica')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.messageLabel.fontStyle = FontStyle.Italic\r\n        this.add(this.messageLabel)\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    decrementResource(res: ResourceBlock) {\r\n        this.resources.decrement(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n    \r\n}\r\n","import { UIActor, Label, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, PureValue } from \"../../models/Economy\";\r\nimport { Machine, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Card } from \"./Card\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Palette } from \"./Palette\";\r\nimport { Building } from \"../Building\";\r\nimport { Resources } from \"../../Resources\";\r\nimport { MusicPlayer } from \"./MusicPlayer\";\r\n\r\nexport class Hud extends UIActor {\r\n    private musicPlayer: MusicPlayer\r\n    private clock: Label\r\n    private hint: Label\r\n\r\n    private hidePalettes: boolean = true\r\n    private structurePalette: Palette //<Structure> \r\n    private machinePalette: Palette //<Machine>\r\n    private functionPalette: Palette\r\n    private card: Card\r\n\r\n    private status: StatusAnalysisView\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n    static machinesForPalette = allMachines\r\n    static functionsForPalette = allSpaceFunctions\r\n\r\n\r\n\r\n    constructor(\r\n        game: Game,\r\n        protected onBuildingSelect = null,\r\n        protected onMachineSelect = null,\r\n        protected onFunctionSelect = null\r\n    ) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.status = new StatusAnalysisView(emptyMarket());\r\n        this.add(this.status)\r\n\r\n        let displayInfo = (e) => this.showCard(e)\r\n        this.structurePalette = new Palette('Structure', 20, 35, Hud.structuresForPalette, onBuildingSelect, displayInfo)\r\n        this.machinePalette = new Palette('Machine', 20, 300, allMachines, onMachineSelect, displayInfo) // (e) => this.showCard(e))\r\n        this.functionPalette = new Palette('Function', 220, 35, Hud.functionsForPalette, onFunctionSelect, displayInfo, false)\r\n\r\n        this.card = new Card(null, 20, 800) // game.canvasHeight - 200)\r\n        this.add(this.card)\r\n\r\n        this.clock = new Label('current time', 1340, 14, 'Verdana')\r\n        this.clock.color = Color.White // 'white'\r\n        this.add(this.clock)\r\n\r\n        this.musicPlayer = new MusicPlayer(1360, -2, {\r\n            'Crater Rock': Resources.CraterRock,\r\n            'Indivision': Resources.Indivision,\r\n            'Future Tense': Resources.FutureTense,\r\n            // 'Isomer': Resources.Isomer,\r\n            'Understanding': Resources.Understanding,\r\n            // 'Outbound': Resources.Outbound,\r\n            'Assembler': Resources.Assembler,\r\n        })\r\n        // this.add(this.musicPlayer)\r\n\r\n        // this.hint = new Label('Guide: Construct Life Support (a Dome with H20 Condenser + O2 Extractor)', 400, 30, 'Verdana')\r\n        // this.add(this.hint)\r\n    }\r\n\r\n    showPalettes() {\r\n        this.hidePalettes = false\r\n    }\r\n\r\n    setMessage(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        this.musicPlayer.draw(ctx)\r\n        if (!this.hidePalettes) {\r\n            this.structurePalette.draw(ctx)\r\n            this.machinePalette.draw(ctx)\r\n            this.functionPalette.draw(ctx)\r\n        }\r\n    }\r\n\r\n    update(game: Game, delta: number) {\r\n        super.update(game, delta)\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    resourceExpended(resource: ResourceBlock) {\r\n        this.status.decrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true, time: number = 0) {\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n\r\n        let days = (Math.floor(time / (60 * 24))+1).toString()\r\n        let hh = Math.floor(time / 60) % 24\r\n        let hours = Math.floor((hh + 11) % 12 + 1).toString()\r\n        let minutes = Math.floor(time % 60).toString()\r\n        let ampm = hh < 12 ? 'AM' : 'PM'\r\n        this.clock.text = `Day ${days}. ${hours}:${minutes.padStart(2, '0')} ${ampm}`\r\n    }\r\n\r\n    showCard(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        this.card.present(entity)\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n        this.updateFunctionPalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        let builtStructures =\r\n            Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n\r\n        this.structurePalette.updateBuilt(builtStructures)\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let devices = colony.findAllDevices()\r\n        let builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine))\r\n        this.machinePalette.updateBuilt(builtMachines)\r\n    }\r\n\r\n    private updateFunctionPalette(colony: Colony) {\r\n        let builtReifiedFunctions = flatSingle(colony.buildings.map(b => b.spaceFunction))\r\n        let builtFunctions = Hud.functionsForPalette.filter((fn) => builtReifiedFunctions.some(rf => rf instanceof fn))\r\n        this.functionPalette.updateBuilt(builtFunctions)\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawPatternedRect, drawRect } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n// import { drawPatternedRect, drawRect } from \"../../Util\";\r\n\r\nexport class MediumSurfaceRoomView extends Building {\r\n    hideBox = true\r\n\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() //- this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        // draw from left slot to each device place to right slot?\r\n        let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length-1])\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        // g.edge(devices[1], find(slots[1]))\r\n\r\n        return g\r\n    }\r\n  \r\n    // afterConstruct() {\r\n    //     let { machines } = this.structure;\r\n    //     if (machines && machines.length > 0) {\r\n    //         let machine = new machines[0]();\r\n    //         this.devicePlaces().forEach(place => {\r\n    //             let theDevice = new Device(machine, place.position)\r\n    //             this.addDevice(theDevice)\r\n    //         })\r\n    //     }\r\n\r\n    // }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor()\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n\r\n        // ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n        // let rect = \r\n            // { x: this.pos.x, y: this.pos.y, width: this.getWidth(), height: this.getHeight() };\r\n        drawPatternedRect(\r\n            ctx,\r\n            this.aabb(),\r\n            this.backgroundPattern\r\n        )\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black\r\n            c.a = 0.6\r\n            drawRect(ctx, this.aabb(), 0, c)\r\n        }\r\n\r\n        // a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.clone(); }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomThreeView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Huge\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Large\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 2\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaceCount = 3\r\n    //devicePlaces() {\r\n    //    let w = this.getWidth()/2\r\n    //    let x = this.pos.x + w;\r\n    //    let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n    //    let ds = [\r\n    //        new Vector(x - w / 2, y),\r\n    //        new Vector(x, y),\r\n    //        new Vector(x + w / 2, y),\r\n    //    ]\r\n\r\n    //    return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    //}\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { range, eachCons, measureDistance } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.planet.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        // super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length-1])\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n\r\n        return g\r\n\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.clone().darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector, Color } from \"excalibur\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n// import { drawRect, drawPatternedRect } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { drawPatternedRect, drawRect } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    get floorHeight() { return this.getHeight() / 6 }\r\n    // floorHeight: number = 10\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        // let wallColor = this.processedColor() //.darken(0.4)\r\n        let floorColor = this.planet.color.darken(0.6) //Color.Violet.darken(0.92)\r\n\r\n        // drawRect(ctx, this.aabb(), 0.5, wallColor)\r\n        drawPatternedRect(ctx, this.aabb(), this.backgroundPattern)\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black\r\n            c.a = 0.6\r\n            drawRect(ctx, this.aabb(), 0, c)\r\n        }\r\n\r\n        let floorEdgeHeight = 12 // 6\r\n        let floorOff = -5\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorEdgeHeight,\r\n              width: this.getWidth(), height: floorEdgeHeight - floorOff },\r\n              0,\r\n              floorColor.lighten(0.4)\r\n        )\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorOff,\r\n              width: this.getWidth(), height: this.floorHeight + floorOff },\r\n              0.2,\r\n              floorColor\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let slots: Slot[] = this.slots()\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        // draw from left slot to each device place to right slot?\r\n        let leftSlot = find(slots[0].pos), rightSlot = find(slots[1].pos)\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        return g\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    devicePlaceSize: DeviceSize = DeviceSize.Small\r\n    devicePlaceCount: number = 2\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"98240dde9344ac8d071d076ac951e15d.png\";","module.exports = __webpack_public_path__ + \"da31cf43235263c1c3e0ad45a46360a1.png\";","module.exports = __webpack_public_path__ + \"a6a38278ac501400c6199e0df9e1bf84.png\";","module.exports = __webpack_public_path__ + \"ece1d5d5858bc048d2d949ecc3f5e9bc.png\";","module.exports = __webpack_public_path__ + \"3654f0489813e0668743efde017c9653.png\";","module.exports = __webpack_public_path__ + \"3abbdabf07943966f102ac7345a59986.png\";","module.exports = __webpack_public_path__ + \"d1b4690b9f5fa4957f98602afc8cfdb6.png\";","module.exports = __webpack_public_path__ + \"0eb7a15ea04678b14a2b88b5965aabeb.png\";","module.exports = __webpack_public_path__ + \"29c5f1be64c99bbc14d5063eea2f0953.svg\";","module.exports = __webpack_public_path__ + \"502f86b65239e20806bbae8bc77a6116.svg\";","module.exports = __webpack_public_path__ + \"5289b20985e3c3a98081267a2da1772e.svg\";","module.exports = __webpack_public_path__ + \"1d893905e4eea3bbc48b0e129e318ea6.svg\";","module.exports = __webpack_public_path__ + \"bd556d00e484db4e52d198d0bf39d0f2.svg\";","module.exports = __webpack_public_path__ + \"650cd431226df0755357c71d61bef1f2.svg\";","module.exports = __webpack_public_path__ + \"f12c591f538ab3026bf13e93f3fa9485.svg\";","module.exports = __webpack_public_path__ + \"3aeb9dd24809ba3fbd4eeb31a28c3b19.svg\";","module.exports = __webpack_public_path__ + \"6cc6f6773bb6eb26fcef87b9629f7b87.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"24611230ec712ba7ee38b99561aedd87.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { ResourceBlock } from \"./Economy\";\r\n\r\nexport type MechanicalOperation =\r\n    Recipe |\r\n    ResourceGenerator |\r\n    ResourceStorage |\r\n    SpawnClone |\r\n    AccelerateTime |\r\n    Noop\r\n\r\nexport interface Noop {\r\n    type: 'noop'\r\n}\r\n\r\nexport interface Recipe {\r\n    type: 'recipe'\r\n    consumes: ResourceBlock[]\r\n    produces: ResourceBlock\r\n    workTime: number\r\n}\r\n\r\nexport interface ResourceGenerator {\r\n    type: 'generator'\r\n    generates: ResourceBlock\r\n    generationTime: number\r\n    capacity: number\r\n}\r\n\r\nexport interface ResourceStorage {\r\n    type: 'store'\r\n    stores: ResourceBlock[]\r\n    capacity: number\r\n}\r\n\r\nexport interface SpawnClone {\r\n    type: 'spawn'\r\n}\r\n\r\nexport interface AccelerateTime {\r\n    type: 'accelerate'\r\n    factor: number\r\n}\r\n\r\nfunction store(res: ResourceBlock[], capacity: number = 10): ResourceStorage {\r\n    return {\r\n        type: 'store',\r\n        stores: res,\r\n        capacity\r\n    }\r\n}\r\n\r\nfunction generate(res: ResourceBlock, cap: number = 4): ResourceGenerator {\r\n    return {\r\n        type: 'generator',\r\n        generates: res,\r\n        generationTime: 1000,\r\n        capacity: cap\r\n    }\r\n}\r\n\r\nfunction recipe(input: ResourceBlock[], output: ResourceBlock): Recipe {\r\n    return {\r\n        type: 'recipe',\r\n        consumes: input,\r\n        produces: output,\r\n        workTime: 1000,\r\n    }\r\n}\r\n\r\nfunction spawn(): SpawnClone {\r\n    return {\r\n        type: 'spawn',\r\n    }\r\n}\r\n\r\nfunction accelerateTime(): AccelerateTime {\r\n    return {\r\n        type: 'accelerate',\r\n        factor: 2\r\n    }\r\n}\r\n\r\nexport const mechanicalOperations = {\r\n    store,\r\n    generate,\r\n    recipe,\r\n    spawn,\r\n    accelerateTime,\r\n}","import { Input, Scene, Timer, Vector } from \"excalibur\";\r\nimport { Building, structureViews } from \"../actors/Building\";\r\nimport { DevicePlace } from \"../actors/Building/Building\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Game } from \"../Game\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { LivingQuarters, MissionControl, SolarArray, SpaceFunction, CloneReception, Kitchen, Workshop, Archive, Refinery, Mine } from \"../models/SpaceFunction\";\r\nimport { Corridor, HugeRoom, LargeRoom, MainTunnel, MediumRoomThree, SmallDome, SmallRoomThree, Structure, SurfaceRoad } from \"../models/Structure\";\r\nimport { flatSingle, zip } from \"../Util\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { Orientation } from \"../values/Orientation\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    placingFunction: SpaceFunction = null\r\n\r\n    time: number = Game.startHour*60\r\n\r\n    static requiredStructuresAndFunctions: (typeof SpaceFunction | typeof Structure)[] = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        SolarArray,\r\n        // LifeSupportPod,\r\n        MainTunnel,\r\n        Corridor,\r\n        LivingQuarters,\r\n        // CloneMatrix,\r\n        // CloneReception,\r\n        // Kitchen,\r\n        // Workshop,\r\n        // // Study,\r\n        // // Library,\r\n        // Archive,\r\n        // Refinery,\r\n        // Mine,\r\n        // ComputerCore,\r\n        \r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, false, this.time)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        let buildIt = (e) => this.startConstructing(e)\r\n\r\n        this.hud = new Hud(game, buildIt, buildIt, buildIt)\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(\r\n            game.world,\r\n            this.hud,\r\n            (b) => this.hud.showCard(b),\r\n            (d) => this.hud.showCard(d)\r\n        )\r\n\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.pos.y = this.planet.getTop() - 1000\r\n        this.camera.zoom(0.01)\r\n        this.camera.zoom(0.125, 10000)\r\n\r\n        this.addTimer(\r\n            new Timer(() => { this.stepTime() }, 50, true)\r\n        )\r\n    }\r\n\r\n    private stepTime() { \r\n        this.time += 1 //.25\r\n        this.planet.hour = (Math.floor(this.time / 60)) % 24\r\n    }\r\n\r\n    public onActivate() {\r\n        // this.game.controller.activate()\r\n\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n\r\n                            if (this.placingFunction) {\r\n                                let fn = this.placingFunction\r\n                                // console.log({ fn, bldg: buildingUnderConstruction })\r\n                                zip(fn.machines, buildingUnderConstruction.devicePlaces()).forEach(([machine, place]: [typeof Machine, DevicePlace]) => {\r\n                                    console.log(\"would add machine\", { machine, place })\r\n                                    let m = (new machine()).concretize()\r\n                                    let device = new Device(m, place.position)\r\n                                    buildingUnderConstruction.addDevice(device)\r\n                                })\r\n                                this.placingFunction = null\r\n                            }\r\n\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        let { Up, Down, Left, Right } = Orientation;\r\n        let moveCam = (direction: Orientation) => {\r\n            let camMoveSpeed = 10 * (1/this.camera.getZoom())\r\n            let dv = new Vector(0,0)\r\n            switch(direction) {\r\n            case Left: dv.x = -camMoveSpeed; break\r\n            case Right: dv.x = camMoveSpeed; break\r\n            case Up: dv.y = -camMoveSpeed; break\r\n            case Down: dv.y = camMoveSpeed; break\r\n            }\r\n            // console.log(\"MOVING CAM\", { direction, dv, camMoveSpeed })\r\n            this.camera.move(this.camera.pos.add(dv), 0) //pos.addEqual(dv)\r\n        }\r\n\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                this.planet.colony.currentlyConstructing = null\r\n                this.placingFunction = null\r\n                this.hud.setMessage(this.defaultMessage); //'Welcome to the Colony, Commander.')\r\n            } else if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                moveCam(Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                moveCam(Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                moveCam(Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                moveCam(Right)\r\n            }\r\n        })\r\n        this.game.input.keyboard.on('hold', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                moveCam(Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                moveCam(Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                moveCam(Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                moveCam(Right)\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingStructureOrFunction(): Structure | SpaceFunction {\r\n        let reqs = Construct.requiredStructuresAndFunctions.map(req => new req())\r\n\r\n        let actualStructureNames = this.buildings.map(building => building.structure.name)\r\n        let actualFunctionNames = flatSingle(\r\n            this.buildings.map(building => building.spaceFunction && building.spaceFunction.name)\r\n        )\r\n        let actualNames = [...actualStructureNames, ...actualFunctionNames]\r\n        return reqs.find(req => !actualNames.includes(req.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingStructureOrFunction() //this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.showPalettes()\r\n        }\r\n    }\r\n\r\n    firstBuilding: boolean = true\r\n    startConstructing(structureOrMachine: Structure | Machine | SpaceFunction, pos: Vector = new Vector(0, 0)) {\r\n        this.hud.showCard(structureOrMachine)\r\n        \r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            this.hud.setMessage(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            if (this.firstBuilding) {\r\n                this.camera.zoom(structure.zoom, 250)\r\n                this.camera.pos = theNextOne.pos\r\n                this.firstBuilding = false\r\n            } \r\n        } else if (structureOrMachine instanceof Machine) {\r\n            let machine = structureOrMachine\r\n            this.hud.setMessage(`Install ${machine.name} (${machine.description})`)\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            // this.camera.zoom(1.5, 250)\r\n        } else if (structureOrMachine instanceof SpaceFunction) {\r\n            let fn: SpaceFunction = structureOrMachine\r\n            this.hud.setMessage(`Place ${fn.name} (${fn.description})`)\r\n            theNextOne = this.spawnFunction(fn, pos)\r\n            this.placingFunction = fn\r\n\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        if (device.snap(this.planet)) {\r\n            this.camera.pos = device.pos\r\n \r\n        }\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n\r\n    protected spawnFunction(fn: SpaceFunction, pos: Vector): Building {\r\n        let theStructure: Structure = (fn.structure && new fn.structure()) // || new SmallRoomThree()\r\n        if (!theStructure) {\r\n            theStructure = new SmallRoomThree()\r\n            let machines = fn.machines.map(m => new m())\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Medium)) {\r\n                theStructure = new MediumRoomThree()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Large)) {\r\n                theStructure = new LargeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Huge)) {\r\n                theStructure = new HugeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.forDome)) {\r\n                theStructure = new SmallDome()\r\n            }\r\n        }\r\n\r\n        // console.log(\"SPAWN FUNCTION\", { fn, structure: theStructure })\r\n        let building = this.assembleBuildingFromStructure(theStructure, pos)\r\n        building.reshape(building.constrainCursor(building.pos))\r\n        return building\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Orange, Color.Red, Color.Blue, Color.Green, Color.Violet, Color.White]\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion, Color.Violet ] ).\r\n        lighten(0.15).\r\n        desaturate(0.65)\r\n\r\n  \r\n    static bestowName(): any {\r\n        let nameList = [\r\n            'Aragorn',\r\n            'Anodyne',\r\n            'Carolyn',\r\n            'Exeter',\r\n            'Colwreath',\r\n            'India',\r\n            'Comma',\r\n            'Terabithia'\r\n        ]\r\n        return sample(nameList)\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"37914c496c3c503f7a53d7c9a1457b53.mp3\";","module.exports = __webpack_public_path__ + \"1b8e735649248c4c552a84996e61f241.mp3\";","module.exports = __webpack_public_path__ + \"1a607294aebce07746d6f25ffa517d80.mp3\";","module.exports = __webpack_public_path__ + \"22bdefc1e8515661fdeb8e8076820641.mp3\";","module.exports = __webpack_public_path__ + \"cf150ab26eba01503f4f6dc3d9ab47f7.mp3\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\nimport { Resources } from './Resources';\r\nimport { Sound } from 'excalibur';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n  // setTimeout(() => {\r\n  //   console.log(\"let's jam!\");\r\n  //   let jam: Sound = Resources.CraterRock //play();\r\n  //   jam.play()\r\n  // }, 1500)\r\n  // jam.oncomplete = () => jam.play()\r\n});\r\n"],"sourceRoot":""}