{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/models/Structure.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/Util.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/values/Graph.ts","webpack:///./src/actors/Building/KitchenView.ts","webpack:///./src/actors/Building/MessView.ts","webpack:///./src/actors/Building/MineView.ts","webpack:///./src/actors/Building/LabView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Hud.ts","webpack:///./src/actors/Building/LivingQuartersView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/MissionControlView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/AccessTunnelView.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/Game.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","sizeFactor","Structure","[object Object]","origin","Vector","this","description","view","width","height","zoom","MissionControl","MainTunnel","Dome","AccessTunnel","CommonArea","LivingQuarters","SurfaceRoad","Laboratory","Mine","Kitchen","Mess","Building_1","Building","AccessTunnelView_1","AccessTunnelView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","MissionControlView_1","MissionControlView","TunnelView_1","TunnelView","LivingQuartersView_1","LivingQuartersView","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","distanceToCursor","elem","distance","flatSingle","concat","deleteByValue","e","eachCons","measureDistance","b","Orientation","Left","Up","Right","Down","flip","orientation","ex","Orientation_1","Util_1","Graph_1","Actor","structure","planet","super","x","y","color","built","hover","facing","edgeWidth","hideBox","childrenBuildings","product","capacity","productColor","productionTime","step","anchor","setup","traits","trait","Traits","OffscreenCulling","on","collisionType","CollisionType","PreventCollision","label","Label","Color","White","clone","pos","getWidth","getHeight","supergraph","Graph","g","nodes","rootNode","findOrCreate","child","slot","parentSlot","edge","childNode","graph","citizen","carry","pop","ctx","delta","drawRect","aabb","forEach","produced","index","fillStyle","desaturate","lighten","toRGBA","fillRect","getCenter","measureText","draw","slots","rect","Gray","node","Yellow","engine","update","produce","rectangle","edgeColor","main","mainColor","other","rect1","rect2","buildings","find","bldg","overlaps","processedColor","darken","clr","colorBase","overlapsAny","Red","validConnectingStructures","closestBuildingByType","slotList","building","validConnectingDirections","includes","some","ourSlot","theSlot","findSlot","matchingSlot","offset","sub","addEqual","parent","empty","edges","edgesInverse","size","newNode","contains","testNode","measure","tolerance","dfs","src","dst","indexOf","otherGraph","edgeList","theEdges","otherIndex","otherNode","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","cb","bfsIndex","halt","visitedNode","adj","adjacentNode","maxStep","prevStep","dstIndex","bfs","prev","curr","path","steps","srcIndex","reverse","_1","KitchenView","MessView","MineView","floorHeight","t","LabView","Blue","Structure_1","SurfaceRoadView","Hud","UIActor","message","onBuildingSelect","fontSize","add","_makePalette","_paletteElement","document","createElement","style","position","body","appendChild","structuresForPalette","_paletteButton","buttonFactory","onclick","stopPropagation","paletteButton","textContent","display","fontFamily","padding","background","Black","text","left","canvas","offsetLeft","top","offsetTop","console","log","setTimeout","populate","pickingOrigin","halfWidth","first","slotHeights","y0","y1","btm","right","slotCount","heights","theSlots","buildSlot","alignToSlot","getTop","setHeight","slotY","resource","drop","flagX","flagY","Green","beginPath","arc","PI","closePath","leftSlot","rightSlot","originX","reshape","constrainCursor","newCursor","setWidth","abs","Player","NavigationTree","dest","shortestPath","Mountains","peaks","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","saturate","yBase","peak","mtnWidth","moveTo","lineTo","Citizen","walkSpeed","carrying","actions","asPromise","onArrival","pathBetween","Promise","all","glideTo","ctrl","shop","walkTo","interact","work","Citizen_1","PlanetBackground_1","NavigationTree_1","Planet","depth","citizens","currentlyConstructing","createLayer","layerHeight","theLayer","buildNavTree","afterConstruct","home","structureTypes","structureType","vec","destination","navTree","srcNode","closestNode","destNode","seekPath","Planet_1","player_1","Hud_1","SurfaceRoadView_1","LabView_1","MineView_1","MessView_1","KitchenView_1","Construct","Scene","dragging","game","world","player","hud","startConstructing","prepareNextBuilding","input","pointers","primary","camera","dragOrigin","currentBuilding","constrained","button","Input","PointerButton","placementValid","handleClick","placeBuilding","Middle","z","getZoom","deltaY","keyboard","key","Keys","H","move","off","requiredStructures","requiredStructureList","actualStructureNames","nextMissing","nextMissingRequiredStructure","theNextOne","spawnBuilding","anotherBuilding","assembleBuildingFromStructure","structureViews","Colony","structures","World","colors","skyColor","Cyan","Vermillion","colony","sword","Resources","Sword","Texture","Resources_1","Game","Engine","displayMode","DisplayMode","FullScreen","backgroundColor","loader","Loader","addResource","start","Game_1","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([29,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Vector } from 'excalibur';\r\n\r\nlet sizeFactor = 1\r\n\r\nexport class Structure {\r\n    name: string = '(default structure name)';\r\n    description: string = '(default structure description)';\r\n    view: string = '<add a default structure (room) view>';\r\n    width: number = 10 * sizeFactor\r\n    height: number = 10 * sizeFactor\r\n    zoom: number = 1 // 0.1 //.25\r\n    constructor(public origin: Vector = new Vector(0, 0)) { }\r\n}\r\n\r\nexport class MissionControl extends Structure {\r\n    name: string = 'Mission Control';\r\n    description: string = 'Keeping everything on track';\r\n    view: string = 'MissionControlView';\r\n    width: number = 90 * sizeFactor\r\n    height: number = 24 * sizeFactor\r\n    zoom = 0.1\r\n}\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = 30 * sizeFactor\r\n    height: number = 100 * sizeFactor\r\n    // zoom = 0.25\r\n}\r\n\r\nexport class Dome extends Structure {\r\n    name: string = 'Biodome';\r\n    description: string = 'Biome sweet biome';\r\n    view: string = 'DomeView';\r\n    width: number = 90 * sizeFactor\r\n    height: number = 60 * sizeFactor\r\n    // zoom = 0.2\r\n}\r\n\r\nexport class AccessTunnel extends Structure {\r\n    name: string = 'Access Tunnel'\r\n    description: string = 'in the hallway'\r\n    view: string = 'AccessTunnelView'\r\n    width: number = 10 * sizeFactor\r\n    height: number = 15 * sizeFactor\r\n}\r\n\r\nexport class CommonArea extends Structure {\r\n    name: string = 'Common Area'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = 120 * sizeFactor\r\n    height: number = 70 * sizeFactor\r\n\r\n}\r\n\r\nexport class LivingQuarters extends Structure {\r\n    name: string = 'Living Quarters'\r\n    description: string = 'sleepy time'\r\n    view: string = 'LivingQuartersView'\r\n    width: number = 80 * sizeFactor\r\n    height: number = 60 * sizeFactor\r\n}\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Surface Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = 20 * sizeFactor\r\n    height: number = 8 * sizeFactor\r\n}\r\n\r\nexport class Laboratory extends Structure {\r\n    name: string = 'Research Lab'\r\n    description: string = 'learn some things'\r\n    view: string = 'LabView'\r\n    width: number = 100 * sizeFactor\r\n    height: number = 40 * sizeFactor\r\n}\r\n\r\nexport class Mine extends Structure {\r\n    name: string = 'Omnium Mine'\r\n    description: string = 'ore else'\r\n    view: string = 'MineView'\r\n    width: number = 200 * sizeFactor\r\n    height: number = 200 * sizeFactor\r\n}\r\n\r\nexport class Kitchen extends Structure {\r\n    name: string = 'Kitchen'\r\n    description: string = 'veg -> meals'\r\n    view: string = 'KitchenView'\r\n    width: number = 240 * sizeFactor\r\n    height: number = 100 * sizeFactor\r\n}\r\n\r\nexport class Mess extends Structure {\r\n    name: string = 'Mess Hall'\r\n    description: string = 'consume meals'\r\n    view: string = 'MessView'\r\n    width: number = 400 * sizeFactor\r\n    height: number = 100 * sizeFactor\r\n}\r\n\r\n//export class Workshop extends Structure {\r\n//    name: string = 'Workshop'\r\n//    description: string = 'manual'\r\n//    view: string = 'WorkshopView'\r\n//    width: number = 120 * sizeFactor\r\n//    height: number = 80 * sizeFactor\r\n//}\r\n//\r\n//export class Factory extends Structure {\r\n//    name: string = 'Factory'\r\n//    description: string = 'assembly'\r\n//    view: string = 'FactoryView'\r\n//}\r\n\r\n// lab, mine, warehouse/storage, kitchen, workshop, factory","import { Building } from './Building';\r\n\r\nimport { AccessTunnelView } from './AccessTunnelView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { MissionControlView } from './MissionControlView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { LivingQuartersView } from './LivingQuartersView';\r\n\r\nexport {\r\n    Building,\r\n\r\n    AccessTunnelView,\r\n    CommonAreaView,\r\n    DomeView,\r\n    MissionControlView,\r\n    TunnelView,\r\n    LivingQuartersView,\r\n}","import { Vector } from \"excalibur\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem)) //vec) => cursor.distance(vec)\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n}","import { Actor, Vector, CollisionType, Color, Label } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport * as ex from 'excalibur';\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, flatSingle, measureDistance } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class Building extends Actor {\r\n    label: Label\r\n    built: boolean = false\r\n    hover: boolean = false\r\n\r\n    facing: Orientation = Orientation.Right\r\n    edgeWidth: number = 4\r\n    hideBox: boolean = false\r\n\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    product: Color[] = []\r\n\r\n    capacity: number = 4\r\n    productColor: Color = null\r\n    productionTime: number = 500\r\n\r\n    constructor(public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          structure.origin.x, // + 20,\r\n          structure.origin.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new ex.Vector(0,0)\r\n\r\n        // console.log(`CREATE NEW ${structure.name}`, { origin: structure.origin, width: structure.width, height: structure.height })\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.label = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        this.label.color = Color.White\r\n    }\r\n\r\n    setup(): void {}\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    } \r\n    reshape(cursor: Vector): void {\r\n        // by default just follow the mouse\r\n        this.pos = cursor.clone()\r\n\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    // response is whether we're 'done'\r\n    // (in general this would be true, unless you need special handling\r\n    // -- multiple clicks for some reason...)\r\n    handleClick(cursor: Vector): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    interact(citizen: Citizen) {\r\n        // should we give this citizen an item?\r\n        if (this.product.length > 0) {\r\n            citizen.carry(this.productColor.clone())\r\n            this.product.pop()\r\n            // return true\r\n        }\r\n        // should we get a resource?\r\n        // etc\r\n        return true\r\n    }\r\n\r\n    protected produce(step: number) {\r\n        if (this.productColor && step % this.productionTime === 0) {\r\n            this.product.push(this.productColor) //Color.Blue)\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        // super.draw(ctx, delta)\r\n        if (!this.hideBox) {\r\n            this.drawRect(ctx, this.aabb(), this.edgeWidth)\r\n        }\r\n\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = produced.desaturate(0.3).lighten(0.2).toRGBA();\r\n            ctx.fillRect(this.x + 20 * index, this.y - 20, 18, 18)\r\n        })\r\n\r\n        this.label.pos = this.getCenter()//this.label.getWidth() //ctx.measureText()\r\n        this.label.pos.x -= ctx.measureText(this.structure.name).width / 2 //bthis.label.getWidth()\r\n        this.label.draw(ctx, delta)\r\n\r\n        let debug = true;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    this.drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n            if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    this.drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n\r\n        if (this.built && this.step % 10 === 0 && this.product.length < this.capacity) {\r\n            this.produce(this.step);\r\n        }\r\n        this.step += 1\r\n    }\r\n\r\n    // protected produce(step: number) {}\r\n\r\n    protected drawRect(ctx: CanvasRenderingContext2D, rectangle: Rectangle, edgeWidth: number = 5, color: Color = null) {\r\n        let { x, y, width, height } = rectangle;\r\n\r\n        let edge = color || this.edgeColor();\r\n        ctx.fillStyle = edge.toRGBA();\r\n        ctx.fillRect(x, y, width, height) // this.getWidth(), this.getHeight())\r\n\r\n        let main = color || this.mainColor();\r\n        ctx.fillStyle = main.toRGBA();\r\n        ctx.fillRect(\r\n            x + edgeWidth,\r\n            y + edgeWidth,\r\n            width - edgeWidth*2,\r\n            height - edgeWidth*2\r\n        )\r\n    }\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.5);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    protected validConnectingStructures(): (typeof Structure)[] {\r\n        return [ ];\r\n    }\r\n\r\n    protected validConnectingDirections(): Orientation[] {\r\n        return [\r\n            Orientation.Up,\r\n            Orientation.Down,\r\n            Orientation.Left,\r\n            Orientation.Right\r\n        ]\r\n    }\r\n\r\n    protected findSlot(pos: Vector): Slot {\r\n        let buildings = this.validConnectingStructures().map(structure =>\r\n            this.planet.closestBuildingByType(pos, [structure])\r\n        )\r\n        let slotList = flatSingle(buildings.map(building => building ? building.slots() : []))\r\n\r\n\r\n        // select slots that COULD match one of our faces (and do so 'legally'...)\r\n        slotList = slotList.filter((slot: Slot) => \r\n            this.validConnectingDirections().includes(slot.facing) &&\r\n              this.slots().some((ourSlot: Slot) => slot.facing === flip(ourSlot.facing))\r\n        )\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(cursor: Vector) {\r\n        let theSlot = this.findSlot(cursor)\r\n        if (theSlot) {\r\n            // position us so our slot lines up\r\n            let matchingSlot = this.slots().find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Building, CommonAreaView } from \".\";\r\n\r\nexport class KitchenView extends CommonAreaView {\r\n}","import { Building, CommonAreaView } from \".\";\r\n\r\nexport class MessView extends CommonAreaView {\r\n\r\n}","import { CommonAreaView } from '.'\r\nimport { Color, Vector } from 'excalibur';\r\n\r\nexport class MineView extends CommonAreaView {\r\n    productColor = Color.Red\r\n    productionTime = 1000\r\n    floorHeight = 150\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Color } from \"excalibur\";\r\nimport { Citizen } from \"../Citizen\";\r\n\r\nexport class LabView extends CommonAreaView {\r\n    productColor = Color.Blue\r\n    productionTime = 600\r\n}","import { AccessTunnelView } from \".\";\r\nimport { MissionControl, Dome } from \"../../models/Structure\";\r\n\r\nexport class SurfaceRoadView extends AccessTunnelView {\r\n    edgeWidth: 0\r\n    // pickingOrigin: boolean = true\r\n    validConnectingStructures() {\r\n        return [ MissionControl, Dome ];\r\n    }\r\n}","import { Label, UIActor, Color } from \"excalibur\";\r\nimport { Dome, Structure, AccessTunnel, CommonArea, LivingQuarters, SurfaceRoad, Mine, Laboratory, Kitchen, Mess } from \"../models/Structure\";\r\n\r\nexport class Hud extends UIActor {\r\n    static structuresForPalette = [\r\n        Dome, AccessTunnel, CommonArea,\r\n        LivingQuarters, SurfaceRoad,\r\n        Laboratory, Mine,\r\n        Kitchen, Mess,\r\n    ];\r\n    label: Label\r\n    constructor(message = 'welcome to osiris', protected onBuildingSelect = null) {\r\n        super(0, 0);\r\n        this.label = new Label(message, 10, 32, 'Helvetica')\r\n        this.label.fontSize = 32\r\n        this.label.color = Color.White\r\n        this.add(this.label)\r\n\r\n        this._makePalette(onBuildingSelect)\r\n    }\r\n    protected _paletteElement: HTMLDivElement\r\n\r\n    protected _makePalette(fn: (Structure) => any) {\r\n        this._paletteElement = document.createElement('div') \r\n        this._paletteElement.style.position = 'absolute'\r\n        document.body.appendChild(this._paletteElement)\r\n\r\n        // buttons\r\n        Hud.structuresForPalette.forEach((structure: typeof Structure) => {\r\n            let s = new structure()\r\n            let _paletteButton = this.buttonFactory(s);\r\n            this._paletteElement.appendChild(\r\n                _paletteButton\r\n            )\r\n\r\n\r\n            _paletteButton.onclick = (e) => {\r\n                // console.log(`${structure.name}`)\r\n                fn(s) //new structure())\r\n                e.stopPropagation()\r\n            }\r\n        });\r\n    }\r\n\r\n    private buttonFactory(s: Structure) {\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = `${s.name}`;\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '13pt';\r\n        paletteButton.style.fontFamily = 'Helvetica';\r\n        paletteButton.style.padding = '8px';\r\n        paletteButton.style.width = '100px';\r\n        paletteButton.style.background = Color.White.darken(0.08).toRGBA();\r\n        paletteButton.style.color = Color.Black.lighten(0.16).toRGBA();\r\n        return paletteButton;\r\n    }\r\n\r\n    message(text: string) { this.label.text = text }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this._paletteElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._paletteElement.style.left = `${left + 20}px`;\r\n            this._paletteElement.style.top = `${top + 100}px`;\r\n        }\r\n    }\r\n\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { setupMaster } from \"cluster\";\r\n\r\nexport class LivingQuartersView extends CommonAreaView {\r\n    edgeWidth: number = 2\r\n    afterConstruct() {\r\n        console.log(\"AFTER CONSTRUCT LIVING QUARTERS\")\r\n        setTimeout(() => this.planet.populate(), 1000)\r\n    }\r\n\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { MissionControl } from \"../../models/Structure\";\r\nimport { range, eachCons, measureDistance } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y // + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), y) //, Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n        // super.graph(g)\r\n        // okay, so we need to connect our 'line' of nodes together\r\n        // we don't necessarily need to care if there IS a child node there\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        // connect node to first slot...\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        eachCons(this.slotHeights(), 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n        this.slotHeights().forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n\r\n            child.graph(g)\r\n        }\r\n        //  this.s\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 40\r\n        let slotCount = Math.floor((this.getHeight()-60) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                100 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        // let slotSize = 40\r\n        // let slotCount = Math.floor((this.getHeight()-60) / slotSize)\r\n        let theSlots: Slot[] = []\r\n\r\n        // one at the top pointing up??\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) { //range(slotCount)) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    // 100 + this.pos.y + i * slotSize,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    // 100 + this.pos.y + i * slotSize,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n        // console.log({theSlots})\r\n        return theSlots;\r\n    } \r\n\r\n    validConnectingStructures() { return [ MissionControl ] }\r\n    validConnectingDirections() { return [ Orientation.Down ] }\r\n\r\n    handleClick(cursor: Vector) {\r\n        // pick nearest mission ctrl as origin\r\n        if (this.pickingOrigin) {\r\n            //let theSlot = this.findSlot(cursor);\r\n            ////let lastCtrl: Building = this.planet.closestBuildingByType(\r\n            ////    this.pos, MissionControl // 'Mission Control'\r\n            ////)\r\n            //if (theSlot) {\r\n            //    this.pos = theSlot.pos\r\n            //    // let missionControlWidth = new MissionControl().width\r\n            //    // this.pos.x = slot.pos.x + missionControlWidth / 2 - this.getWidth() / 2 //[0].x\r\n            //    let matchingSlot = this.slots().find(s => s.facing == flip(theSlot.facing))\r\n            //    if (matchingSlot) {\r\n            //        let offset = this.pos.sub(matchingSlot.pos)\r\n            //        this.pos.addEqual(offset)\r\n\r\n                    this.pickingOrigin = false;\r\n                    return false;\r\n            //    }\r\n            //}\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // picking a depth for a tunnel first?\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n\r\n            this.alignToSlot(cursor)\r\n            //let theSlot = this.findSlot(cursor);\r\n            //if (theSlot) {\r\n            //    this.pos = theSlot.pos\r\n            //}\r\n            // snap to nearest mission ctrl?\r\n            //let lastCtrl: Building = this.planet.closestBuildingByType(\r\n            //    cursor, MissionControl //'Mission Control'\r\n            //)\r\n            //this.pos.x = lastCtrl.x + lastCtrl.getWidth() / 2 - this.getWidth() / 2 //[0].x\r\n\r\n        } else {\r\n            // we're determining depth of tunnel\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n    // draw(ctx: CanvasRenderingContext2D) {\r\n    //     let depth = this.getHeight()\r\n    //     let width = this.getWidth()\r\n    //     let edgeWidth = 4\r\n\r\n    //     let edgeColor = this.edgeColor()\r\n    //     let mainColor = this.mainColor()\r\n\r\n    //     ctx.fillStyle = edgeColor.toRGBA()\r\n    //     ctx.fillRect(this.x, this.y, width, depth)\r\n\r\n    //     if (this.pickingOrigin) { mainColor.a = 0.5 }\r\n    //     ctx.fillStyle = mainColor.toRGBA()\r\n    //     ctx.fillRect(this.x + edgeWidth, this.y, width - edgeWidth*2, depth)\r\n    // }\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n}","import { Actor, Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { SSL_OP_TLS_BLOCK_PADDING_BUG } from \"constants\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class MissionControlView extends Building {\r\n    hideBox = true\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n           \r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        // cursor.x = this.x //.getTop()\r\n        cursor.y = this.planet.getTop(); //Math.max(planet.getTop() + 100, cursor.y)\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor // x = cursor.x\r\n        this.pos.y -= this.getHeight() - 2 // + 1\r\n    }\r\n\r\n    interact(citizen: Citizen) {\r\n        let resource = citizen.drop()\r\n        console.log(\"citizen gathered resource\", { resource })\r\n        // citizen.work()\r\n\r\n        return true\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        let color = this.mainColor(); //Color.White //.darken(0.3)\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n        // y is going to be surface height\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        // could draw a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3*(this.getWidth()/4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n        // shadow?\r\n        //ctx.fillStyle = this.color.darken(0.2).toRGBA()\r\n        //ctx.fillRect(this.x, this.y, this.getHeight())\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { SurfaceRoad } from \"../../models/Structure\";\r\n\r\n// we're constrained to the surface, so...\r\nexport class DomeView extends Building {\r\n    productionTime = 800\r\n    productColor = Color.Green\r\n    hideBox = true\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots = [];\r\n        let slotY = this.getHeight(); // / 2;\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    // constrainCursor(cursor: Vector): Vector {\r\n    //     // cursor.x = this.x //.getTop()\r\n    //     cursor.y = this.planet.getTop() - this.getHeight() + 4; //Math.max(planet.getTop() + 100, cursor.y)\r\n    //     return cursor;\r\n    // }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n        // this.pos = cursor // x = cursor.x\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        // super.draw(ctx, delta)\r\n\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5, // / 2,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } // this.baseColor; }\r\n\r\n    validConnectingStructures() { return [ SurfaceRoad ]; }\r\n}","import { Building } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { AccessTunnel, Structure, CommonArea, Laboratory, LivingQuarters, Mine, Kitchen, Mess } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 8\r\n    edgeWidth: number = 1\r\n    // maybe you can set height AND width of common area view??\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n        return theSlots;\r\n    }\r\n\r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    protected validConnectingStructures(): (typeof Structure)[] {\r\n        return [ AccessTunnel, CommonArea, Mine, Laboratory, LivingQuarters, Mess, Kitchen ];\r\n    }\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { MainTunnel, CommonArea, LivingQuarters, Laboratory, Mine } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class AccessTunnelView extends Building {\r\n    edgeWidth: number = 0.4\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // picking a depth for a tunnel first?\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            this.facing = theSlot.facing\r\n\r\n            if (theSlot && this.facing === Orientation.Left) {\r\n               this.originX = theSlot.pos.x\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n               this.setWidth(Math.abs(this.originX - cursor.x))\r\n               this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n\r\n    validConnectingStructures() {\r\n        return [\r\n            MainTunnel,\r\n            CommonArea,\r\n            LivingQuarters,\r\n            Laboratory,\r\n            Mine\r\n        ];\r\n    }\r\n\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 30; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 1000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(10)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, peakHeight + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { Structure, MissionControl, Laboratory, Mine, Dome } from \"../models/Structure\";\r\n\r\nexport class Citizen extends Actor {\r\n    walkSpeed: number = 50\r\n    carrying: Color = null\r\n    path: Vector[] = []\r\n\r\n    constructor(building: Building, protected planet: Planet) {\r\n        super(building.nodes()[0].x,building.nodes()[0].y,4,10,Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            ctx.fillStyle = this.carrying.toRGBA()\r\n            ctx.fillRect(this.x+4, this.y-3, 5, 5)\r\n        }\r\n    }\r\n\r\n    carry(c: Color) {\r\n        this.carrying = c;\r\n    }\r\n\r\n    drop() {\r\n        if (this.carrying) {\r\n            let c = this.carrying.clone();\r\n            this.carrying = null;\r\n            return c\r\n        }\r\n        return true\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async walkTo(building: Building, onArrival: (Building) => any) {\r\n        // let building = this.planet.closestBuildingByType(this.pos, structure)\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = null\r\n            onArrival(building);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    //async patrol(structure: typeof Structure, otherStructure: typeof Structure, onArrival: (Building) => any) {\r\n    //    await this.walkTo(structure, onArrival)\r\n    //    await this.walkTo(otherStructure, onArrival)\r\n    //    // this.patrol(structure, otherStructure, onArrival)\r\n    //}\r\n\r\n    async work() {\r\n        let ctrl = this.planet.closestBuildingByType(this.pos, [MissionControl])\r\n        let shop = this.planet.closestBuildingByType(this.pos,\r\n            [Dome, Mine, Laboratory],\r\n            (building) => building.product.length > 0\r\n        )\r\n        // tryInteract = (b) => if (!b.interact(this))\r\n\r\n        if (shop && ctrl) {\r\n            await this.walkTo(shop, (b) => b.interact(this))\r\n            await this.walkTo(ctrl, (b) => b.interact(this))\r\n            console.log(\"worked!!\")\r\n        } else {\r\n            console.log(\"i guess i can try again?\")\r\n        }\r\n        setTimeout(() => this.work(), 4000)\r\n        //workshop: typeof Structure, store: typeof Structure) {\r\n        // this.patrol(workshop, store, (building: Building) => {\r\n            // building.interact(this)\r\n        // })\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, range } from '../../Util';\r\nimport { Citizen } from '../Citizen';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure, MissionControl, LivingQuarters } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\n\r\nexport class Planet extends Actor {\r\n    buildings: Building[] = []\r\n    citizens: Citizen[] = []\r\n    navTree: NavigationTree\r\n    currentlyConstructing: Building = null\r\n\r\n    constructor(\r\n        // public effectiveY: number,\r\n        public color: Color,\r\n        public width: number = 2000000,\r\n        public depth: number = 100000,\r\n        ) {\r\n        super(0, depth/2, width, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2 // effectiveY + size/2\r\n        // crust\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 20\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n       if (this.currentlyConstructing) {\r\n           this.currentlyConstructing.draw(ctx, delta)\r\n       }\r\n        this.buildings.forEach(building => building.draw(ctx, delta))\r\n\r\n        this.citizens.forEach(citizen => citizen.draw(ctx, delta))\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.buildings.forEach(building => building.update(engine, delta))\r\n        this.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true\r\n        // whew\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building)\r\n            // rebuild nav?\r\n            this.buildNavTree()\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct()\r\n    }\r\n\r\n    populate() {\r\n        // let ctrl = this.planet.closestBuildingByType(this.player.pos, MissionControl) //bubuildings[0] //.pos\r\n        // let dome = this.planet.closestBuildingByType(this.player.pos, Dome)\r\n        let home = this.closestBuildingByType(new Vector(0,0), [LivingQuarters])\r\n        console.log(\"populating\", { home })\r\n        //buildings[1]\r\n        let citizen = new Citizen(home, this) //ctrl.x, ctrl.y)\r\n        citizen.work() //Dome, MissionControl) // LivingQuarters)\r\n\r\n        // citizen.y = this.planet.getTop() + citizen.getHeight() / 3\r\n        this.citizens.push(citizen)\r\n    }\r\n\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        let matching = this.buildings.filter(building => \r\n            structureTypes.some(structureType => (building.structure instanceof structureType)) &&\r\n              predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (vec) => cursor.distance(vec)\r\n            return minBy(matching, distanceToCursor)\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) { this.buildNavTree() }\r\n        let srcNode = this.navTree.closestNode(origin)\r\n        let dest = destination.nodes()[0]\r\n        let destNode = this.navTree.closestNode(dest)\r\n        let path = this.navTree.seekPath(srcNode, destNode)\r\n        return path\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl)\r\n        }\r\n    }\r\n\r\n}","import { Scene, Input, UIActor, Label, Vector, LockCameraToActorStrategy } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MissionControl, MainTunnel, Dome, AccessTunnel, CommonArea, LivingQuarters, SurfaceRoad } from \"../models/Structure\";\r\nimport { Building, DomeView, AccessTunnelView, CommonAreaView, TunnelView, MissionControlView, LivingQuartersView } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud\";\r\nimport { SurfaceRoadView } from \"../actors/Building/SurfaceRoadView\";\r\nimport { LabView } from \"../actors/Building/LabView\";\r\nimport { MineView } from \"../actors/Building/MineView\";\r\nimport { MessView } from \"../actors/Building/MessView\";\r\nimport { KitchenView } from \"../actors/Building/KitchenView\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n    // buildings: Building[] = []\r\n    // people: Citizen[] = []\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    // currentlyBuilding?: Building\r\n\r\n    static structureViews: { [key: string]: typeof Building } = {\r\n        TunnelView,\r\n        MissionControlView, //: new MissionControlView()\r\n        DomeView,\r\n        AccessTunnelView,\r\n        CommonAreaView,\r\n        LivingQuartersView,\r\n        SurfaceRoadView,\r\n        LabView,\r\n        MineView,\r\n        KitchenView,\r\n        MessView,\r\n    }\r\n    ////\r\n    static requiredStructureList: Structure[] = [\r\n        new MissionControl(),\r\n\r\n        new SurfaceRoad(),\r\n        new Dome(),\r\n        new MainTunnel(),\r\n        new AccessTunnel(),\r\n        new LivingQuarters(),\r\n        // new CommonArea(),\r\n    ]\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        this.planet = new Planet(game.world.color);\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.hud = new Hud('hi', (structure) => {\r\n            //if (this.currentlyBuilding) {\r\n            //    this.remove(this.currentlyBuilding)\r\n            //}\r\n            this.startConstructing(structure)\r\n        });\r\n        this.add(this.hud)\r\n\r\n        this.prepareNextBuilding()\r\n        // this.camera.zoom(0.25)\r\n        // this.camera.y = 0 //-this.planet.depth/2\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentBuilding = this.planet.currentlyConstructing\r\n                if (currentBuilding) {\r\n                    // constrain...\r\n                    let constrained = currentBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentBuilding.reshape(this.player.pos)\r\n                } else {\r\n                    // show pluses where you could expand?\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', (e: Input.PointerUpEvent) => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentBuilding: Building = this.planet.currentlyConstructing\r\n                if (currentBuilding) {\r\n                    let placementValid = !currentBuilding.overlapsAny()\r\n                    // console.log(\"placement valid?\", { placementValid, currentBuilding })\r\n                    if (currentBuilding && placementValid && currentBuilding.handleClick(e.pos)) {\r\n                        // console.log(\"placed!\")\r\n                        this.planet.placeBuilding(currentBuilding)\r\n                        this.planet.currentlyConstructing = null\r\n                        this.prepareNextBuilding(e.pos)\r\n                    } else {\r\n                        // console.log(\"couldn't place?\")\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n\r\n    get buildings() { return this.planet.buildings }\r\n\r\n\r\n    private nextMissingRequiredStructure(): Structure {\r\n        let requiredStructures: Structure[] = Construct.requiredStructureList\r\n        let actualStructureNames: string[] = this.buildings.map(building => building.structure.name)\r\n\r\n        // console.log({ actualStructureNames, requiredNames: requiredStructures.map(s => s.name) })\r\n        return requiredStructures.find(structure => !actualStructureNames.includes(structure.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        // let structure = Construct.structureList[this.currentBuildingListIndex % Construct.structureList.length]; \r\n        let structure = null;\r\n        let nextMissing = this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        // else { this.currentBuildingListIndex += 1 }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        }\r\n    }\r\n\r\n    startConstructing(structure: Structure, pos: Vector = new Vector(0, 0)) {\r\n        // this.currentlyBuilding = null // ?\r\n        // this.remove(this.currentlyBuilding)\r\n        // if (structure) {\r\n        structure.origin = pos\r\n        this.hud.message(`Place ${structure.name}`)\r\n        let theNextOne = this.spawnBuilding(structure)\r\n        //this.add(theNextOne)\r\n        this.planet.currentlyConstructing = theNextOne\r\n        // this.camera.pos = theNextOne.constrainCursor(this.player.pos) //camera.pos)\r\n        this.camera.pos = theNextOne.pos // move(theNextOne.pos, 250)\r\n        this.camera.zoom(structure.zoom, 250)\r\n        // }\r\n        //else {\r\n        //    this.hud.message(`Welcome to OSIRIS`)\r\n\r\n        //    // spawn people?\r\n        //    //for(let i in range(5))\r\n        //    this.spawnCitizen()\r\n        //    \r\n        //    // this.camera.addStrategy(new LockCameraToActorStrategy(this.people[0]))\r\n        //}\r\n    }\r\n\r\n    //public populate() {\r\n    //    this.spawnCitizen()\r\n    //}\r\n\r\n    //protected spawnCitizen() {\r\n    //    // let ctrl = this.planet.closestBuildingByType(this.player.pos, MissionControl) //bubuildings[0] //.pos\r\n    //    // let dome = this.planet.closestBuildingByType(this.player.pos, Dome)\r\n    //    let home = this.planet.closestBuildingByType(this.player.pos, [LivingQuarters])\r\n    //    //buildings[1]\r\n    //    let citizen = new Citizen(home, this.planet) //ctrl.x, ctrl.y)\r\n    //    citizen.work() //Dome, MissionControl) // LivingQuarters)\r\n\r\n    //    // citizen.y = this.planet.getTop() + citizen.getHeight() / 3\r\n    //    // this.people.push(citizen)\r\n    //    this.add(citizen)\r\n    //    // citizen.setZIndex(1000)\r\n    //}\r\n\r\n\r\n\r\n    protected spawnBuilding(structure: Structure): Building {\r\n        // console.log(\"spawn\", { structure })\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(anotherBuilding.pos))\r\n        // this.add(anotherBuilding)\r\n        // this.buildings.push(anotherBuilding)\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure): Building {\r\n        let View = Construct.structureViews[structure.view]\r\n        let building = new View(structure, this.planet)\r\n        return building;\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\n\r\nexport class Colony {\r\n    // origin: Vector\r\n    structures: Structure[] = []\r\n    // build(structure) ...\r\n}\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Red, Color.Blue, Color.Green] // Color.Viridian, Color.Magenta, Color.Chartreuse];\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ). // Color.Rose //World.colors).\r\n        lighten(0.15).\r\n        desaturate(0.65) // sample([Color.Blue, Color.Rose,Color.Blue]).lighten(0.1).desaturate(0.8)\r\n  colony: Colony = new Colony()\r\n}","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword)\r\n}\r\n\r\nexport { Resources }\r\n","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() { //loader: ex.Loader) {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\n// scenes\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}