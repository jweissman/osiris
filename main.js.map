{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/actors/Building/Building.ts","webpack:///./src/values/DeviceSize.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/Util.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/models/Machine.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Structure.ts","webpack:///./src/values/Scale.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Device.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MineView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/MissionControlView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/bookshelf.png","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","Orientation_1","Util_1","Graph_1","SpaceFunction_1","DeviceSize_1","DevicePlace","pos","size","this","getVisibleDeviceSize","Building","_super","structure","planet","_this","x","y","width","height","color","edgeWidth","built","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","level","devices","step","anchor","Vector","setup","traits","filter","trait","Traits","OffscreenCulling","on","console","log","building","collisionType","CollisionType","PreventCollision","nameLabel","Label","Color","White","levelLabel","fontSize","darken","__extends","levelUp","text","draw","ctx","delta","drawRect","aabb","processedColor","forEach","device","getCenter","measureText","update","engine","produce","constrainCursor","cursor","clone","reshape","afterConstruct","handleClick","_pos","slots","nodes","getWidth","getHeight","Math","floor","devicePlaces","graph","supergraph","Graph","g","rootNode","findOrCreate","measureDistance","_i","_a","child","slot","parentSlot","edge","childNode","redeem","res","gather","populate","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","find","bldg","edgeColor","lighten","mainColor","colorBase","clr","Red","a","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","map","closestBuildingByType","matchingSlot","compass_1","compass","closest","warn","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","finalize","updateName","hasPlaceForDevice","nextDevicePlace","getDevices","fn","allSpaceFunctions","spaceFn","matched","unseenDevices","machines","machine","matchingDevice","deleteByValue","label","Actor","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","Huge","sz","third","sixth","eighth","Building_1","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","MissionControlView_1","MissionControlView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","MineView_1","MineView","SurfaceRoadView_1","SurfaceRoadView","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","minBy","min","maxBy","max","sample","random","range","Array","fill","_val","idx","getVector","predicate","matching","elem","distance","flatSingle","concat","e","eachCons","b","drawLine","lineWidth","beginPath","moveTo","lineTo","strokeStyle","toRGBA","stroke","rectangle","filled","main","fillStyle","fillRect","strokeRect","Left","Up","Down","orientation","Error","MachineOperation","Economy_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","Green","Blue","Orange","Violet","Yellow","Work","SpawnCitizen","CollectResource","CollectMeals","CollectData","Machine","description","LightGray","consumes","produces","generationTime","workTime","capacity","behavior","image","prereqs","CommandCenter","arguments","OxygenExtractor","WaterCondensingMachine","SolarCell","StudyMachine","ResourceBlock","Hypothesis","Data","Desk","Workstation","Bookshelf","Fridge","Stove","Food","Meal","Bed","Houseplant","ResearchServer","Orchard","AlgaeVat","Cabin","Arbor","CloningVat","productionTime","Fabricator","Ore","Mineral","MiningDrill","Megafabricator","Preserve","Microcity","LogicCrystal","allMachines","PureValue","Power","Hope","Shelter","Oxygen","emptyMarket","supply","demand","Alloy","blockColors","blockColor","block","desaturate","t","setPrototypeOf","__proto__","constructor","create","Machine_1","Structure","view","zoom","dominantColor","Gray","Corridor","Ladder","MainTunnel","second","MissionControl","SurfaceRoad","fifth","first","Dome","CommonArea","SmallRoomThree","SmallRoomTwo","SmallDome","MediumRoom","LargeRoom","HugeRoom","MidDome","LargeDome","Arcology","allStructures","majorUnit","fourth","seventh","minorUnit","minorScale","Structure_1","Device","initialPos","product","imageLoaded","inUse","Image","onload","src","drawImage","bx","by","produced","index","blockSize","interact","citizen","waitToUse","pop","progressBar","sent","carry","carrying","resource","drop","setTimeout","snap","some","position","empty","edges","edgesInverse","isEmpty","node","newNode","contains","testNode","includes","measure","tolerance","dfs","dst","indexOf","union","otherGraph","edgeList","theEdges","_b","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","path","steps","srcIndex","reverse","Resources_1","Game","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","start","loader","Loader","key","Resources","addResource","citizenSpeed","Engine","BigDomeView","w","_1","HugeRoomView","floorHeight","LargeRoomView","MediumRoomView","MidDomeView","SmallRoomThreeView","ResourceListEntry","resourceBlock","icon","add","count","credit","amt","ResourceListEntry_1","ResourcesList","DarkGray","entries","ry","entry","increment","ResourcesList_1","Hud","game","onBuildingSelect","onMachineSelect","canvasWidth","canvasHeight","restrictConstruction","comprehendedStructures","builtStructures","comprehendedMachines","builtMachines","messageLabel","_makeStructurePalette","_makeMachinePalette","resources","setMessage","_structurePaletteElement","left","canvas","offsetLeft","top_1","offsetTop","style","top","_machinePaletteElement","top_2","resourceGathered","updatePalettes","updateBuildingPalette","updateMachinePalette","structuresForPalette","every","prereq","parentElement","removeChild","bldgs","availableMachines","findAllDevices","machinesForPalette","document","createElement","border","body","appendChild","_paletteButton","buttonFactory","onclick","sort","btn","bg","fg","paletteButton","textContent","display","fontFamily","fontWeight","padding","textTransform","background","onmouseover","saturate","onmouseleave","UIActor","originSlot","pickingOrigin","maxHeight","getTop","h","setHeight","drawShape","xoff","yoff","bezierCurveTo","rect","halfWidth","slotHeights","heights","y0","y1","btm","lst","right","slotCount","theSlots","Device_1","machine_1","place","theDevice","slotY","flagX","flagY","arc","PI","closePath","leftSlot","rightSlot","originX","newCursor","setWidth","abs","SpaceFunction","LivingQuarters","Barracks","Kitchen","LifeSupportPod","Retreat","CloneMatrix","ReadingRoom","Library","Study","Lab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Farm","Factory","ex","Player","Game_1","Citizen","walkSpeed","workInProgress","now","Date","getTime","progress","workStarted","workDuration","px","pw","py","vel","glideTo","actions","asPromise","duration","Promise","resolve","reject","pathTo","pathBetween","all","work","item_1","sink","closestDevice","source","Citizen_1","Population","citizens","increase","home","NavigationTree","seekPath","origin","dest","closestNode","NavigationTree_1","Colony","currentlyConstructing","maxPop","navTree","placeBuilding","buildNavTree","structureTypes","st","destination","srcNode","destNode","closestDeviceByType","machineTypes","ctrl","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","yBase","peak","mtnWidth","PlanetBackground","PlanetBackground_1","Colony_1","Population_1","Planet","hud","depth","createLayer","layerHeight","population","theLayer","Planet_1","player_1","Hud_1","SmallRoomThreeView_1","MidDomeView_1","MediumRoomView_1","LargeRoomView_1","HugeRoomView_1","BigDomeView_1","Construct","dragging","startConstructing","player","prepareNextBuilding","camera","onActivate","input","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","Esc","onDeactivate","off","nextMissingRequiredStructure","requiredStructures","requiredStructureList","actualStructureNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","anotherBuilding","assembleBuildingFromStructure","structureViews","Scene","World","colors","Cyan","Vermillion","sword","Sword","Texture","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"aACA,SAAAA,EAAAC,GAOA,IANA,IAKAC,EAAAC,EALAC,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAGAM,EAAA,EAAAC,KACQD,EAAAH,EAAAK,OAAoBF,IAC5BJ,EAAAC,EAAAG,GACAG,EAAAP,IACAK,EAAAG,KAAAD,EAAAP,GAAA,IAEAO,EAAAP,GAAA,EAEA,IAAAD,KAAAG,EACAO,OAAAC,UAAAC,eAAAC,KAAAV,EAAAH,KACAc,EAAAd,GAAAG,EAAAH,IAIA,IADAe,KAAAhB,GACAO,EAAAC,QACAD,EAAAU,OAAAV,GAOA,OAHAW,EAAAR,KAAAS,MAAAD,EAAAb,OAGAe,IAEA,SAAAA,IAEA,IADA,IAAAC,EACAf,EAAA,EAAiBA,EAAAY,EAAAV,OAA4BF,IAAA,CAG7C,IAFA,IAAAgB,EAAAJ,EAAAZ,GACAiB,KACAC,EAAA,EAAkBA,EAAAF,EAAAd,OAA2BgB,IAAA,CAC7C,IAAAC,EAAAH,EAAAE,GACA,IAAAf,EAAAgB,KAAAF,MAEAA,IACAL,EAAAQ,OAAApB,IAAA,GACAe,EAAAM,IAAAC,EAAAN,EAAA,KAGA,OAAAD,EAIA,IAAAQ,KAKApB,GACAqB,EAAA,GAGAZ,KAGA,SAAAS,EAAA1B,GAGA,GAAA4B,EAAA5B,GACA,OAAA4B,EAAA5B,GAAA8B,QAGA,IAAAC,EAAAH,EAAA5B,IACAK,EAAAL,EACAgC,KACAF,YAUA,OANAhB,EAAAd,GAAAa,KAAAkB,EAAAD,QAAAC,IAAAD,QAAAJ,GAGAK,EAAAC,KAGAD,EAAAD,QAKAJ,EAAAO,EAAAnB,EAGAY,EAAAQ,EAAAN,EAGAF,EAAAS,EAAA,SAAAL,EAAAM,EAAAC,GACAX,EAAAY,EAAAR,EAAAM,IACA1B,OAAA6B,eAAAT,EAAAM,GACAI,gBACAC,cACAC,IAAAL,KAMAX,EAAAiB,EAAA,SAAAb,GACApB,OAAA6B,eAAAT,EAAA,cAAiDc,YAIjDlB,EAAAmB,EAAA,SAAAd,GACA,IAAAM,EAAAN,KAAAe,WACA,WAA2B,OAAAf,EAAAgB,SAC3B,WAAiC,OAAAhB,GAEjC,OADAL,EAAAS,EAAAE,EAAA,IAAAA,GACAA,GAIAX,EAAAY,EAAA,SAAAU,EAAAC,GAAsD,OAAAvC,OAAAC,UAAAC,eAAAC,KAAAmC,EAAAC,IAGtDvB,EAAAwB,EAAA,GAEA,IAAAC,EAAAC,OAAAC,aAAAD,OAAAC,iBACAC,EAAAH,EAAA1C,KAAA8C,KAAAJ,GACAA,EAAA1C,KAAAX,EACAqD,IAAAK,QACA,QAAAnD,EAAA,EAAgBA,EAAA8C,EAAA5C,OAAuBF,IAAAP,EAAAqD,EAAA9C,IACvC,IAAAU,EAAAuC,EAIArC,EAAAR,MAAA,OAEAU,qaCrIA,IAAAsC,EAAA/B,EAAA,GAIAgC,EAAAhC,EAAA,GAGAiC,EAAAjC,EAAA,GACAkC,EAAAlC,EAAA,IAGAmC,EAAAnC,EAAA,IACAoC,EAAApC,EAAA,GAEAqC,EAAA,WACI,SAAAA,EAAoBC,EAAqBC,GAArBC,KAAAF,MAAqBE,KAAAD,OAI7C,OAHIvD,OAAA6B,eAAIwB,EAAApD,UAAA,YAAA+B,IAAJ,WAAiB,OAAOwB,KAAKF,qCAC7BtD,OAAA6B,eAAIwB,EAAApD,UAAA,eAAA+B,IAAJ,WAAoB,OAAOoB,EAAAK,qBAAqBD,KAAKD,uCAEzDF,EALA,GAAajC,EAAAiC,cAOb,IAAAK,EAAA,SAAAC,GAkBI,SAAAD,EAAYJ,EAAoBM,EAAgCC,GAAhE,IAAAC,EACIH,EAAAxD,KAAAqD,KACEF,EAAIS,EACJT,EAAIU,EACJJ,EAAUK,MACVL,EAAUM,OACVL,EAAOM,QACRX,YAP2BM,EAAAF,YAAgCE,EAAAD,SAjBhEC,EAAAM,UAAoB,EAKpBN,EAAAO,SACAP,EAAAQ,SACAR,EAAAS,aACAT,EAAAU,OAAsBxB,EAAAyB,YAAYC,MAClCZ,EAAAa,WAEAb,EAAAc,qBAEAd,EAAAe,MAAgB,EAERf,EAAAgB,WAkGRhB,EAAAiB,KAAe,EAxFXjB,EAAKkB,OAAS,IAAIjC,EAAAkC,OAAO,EAAE,GAE3BnB,EAAKoB,QACLpB,EAAKqB,OAASrB,EAAKqB,OAAOC,OAAO,SAAAC,GAAS,QAAEA,aAAiBtC,EAAAuC,OAAOC,oBAEpEzB,EAAK0B,GAAG,eAAgB,WACpB1B,EAAKQ,SACLmB,QAAQC,IAAI,YAAcC,SAAU7B,MAQxCA,EAAK0B,GAAG,eAAgB,WACpB1B,EAAKQ,WAGTR,EAAK8B,cAAgB7C,EAAA8C,cAAcC,iBAEnChC,EAAKiC,UAAY,IAAIhD,EAAAiD,MAAMlC,EAAKF,UAAUlC,KAAM,EAAG,EAAG,aAEtDoC,EAAKiC,UAAU5B,MAAQpB,EAAAkD,MAAMC,MAE7BpC,EAAKqC,WAAa,IAAIpD,EAAAiD,MAAM,QAAQlC,EAAKe,MAAS,EAAG,EAAG,aACxDf,EAAKqC,WAAWC,SAAW,EAC3BtC,EAAKqC,WAAWhC,MAAQpB,EAAAkD,MAAMC,MAAMG,OAAO,IAAA1G,EAmRnD,OAxU8B2G,EAAA5C,EAAAC,GAwD1BD,EAAAzD,UAAAsG,QAAA,WACI/C,KAAKqB,OAAS,EACdrB,KAAK2C,WAAWK,KAAO,QAAQhD,KAAKqB,OAIxCnB,EAAAzD,UAAAwG,KAAA,SAAKC,EAA+BC,GAC3BnD,KAAKmB,SACN1B,EAAA2D,SAASF,EAAKlD,KAAKqD,OAAQrD,KAAKY,UAAWZ,KAAKsD,kBAEpDtD,KAAKsB,QAAQiC,QAAQ,SAAAC,GAAU,OAAAA,EAAOP,KAAKC,EAAKC,KAE5CnD,KAAKe,YACLf,KAAKuC,UAAUzC,IAAME,KAAKyD,YAC1BzD,KAAKuC,UAAUzC,IAAIS,GAAK2C,EAAIQ,YAAY1D,KAAKI,UAAUlC,MAAMuC,MAAQ,EACrET,KAAKuC,UAAUU,KAAKC,EAAKC,KA4CjCjD,EAAAzD,UAAAkH,OAAA,SAAOC,EAAcT,GAArB,IAAA7C,EAAAN,KACIG,EAAA1D,UAAMkH,OAAMhH,KAAAqD,KAAC4D,EAAQT,GACJnD,KAAKa,OAElBb,KAAKsB,QAAQiC,QAAQ,SAAAC,GAAU,OAAAA,EAAOK,QAAQvD,EAAKiB,QAEvDvB,KAAKuB,MAAQ,GAGjBrB,EAAAzD,UAAAiF,MAAA,aAEAxB,EAAAzD,UAAAqH,gBAAA,SAAgBC,GACZ,OAAOA,EAAOC,SAElB9D,EAAAzD,UAAAwH,QAAA,SAAQF,GACJ/D,KAAKF,IAAMiE,EAAOC,SAGtB9D,EAAAzD,UAAAyH,eAAA,aAEAhE,EAAAzD,UAAA0H,YAAA,SAAYC,GAAiB,UAE7BlE,EAAAzD,UAAA4H,MAAA,WACI,UAGJnE,EAAAzD,UAAA6H,MAAA,WACI,IAAI/D,EAAIP,KAAKF,IAAIS,EAAIP,KAAKuE,WAAW,EACjC/D,EAAIR,KAAKF,IAAIU,EAAIR,KAAKwE,YAC1B,OACI,IAAIjF,EAAAkC,OAAOgD,KAAKC,MAAMnE,GAAIkE,KAAKC,MAAMlE,GAAG,KAIhDN,EAAAzD,UAAAkI,aAAA,WACI,UAIJzE,EAAAzD,UAAAmI,MAAA,SAAMC,kBAAA,IAAgCnF,EAAAoF,OAKlC,IAJA,IAAIC,EAAIF,EAEJP,EAAQtE,KAAKsE,QACbU,EAAWD,EAAEE,aAAaX,EAAM,GAAI7E,EAAAyF,iBACtBC,EAAA,EAAAC,EAAApF,KAAKoB,kBAAL+D,EAAAC,EAAA/I,OAAA8I,IAAwB,CAArC,IAAIE,EAAKD,EAAAD,GACNG,EAAOP,EAAEE,aAAaI,EAAME,WAAWzF,IAAKL,EAAAyF,iBAChDH,EAAES,KAAKR,EAAUM,GAEjB,IAAIG,EAAYV,EAAEE,aAAaI,EAAMf,QAAQ,GAAI7E,EAAAyF,iBACjDH,EAAES,KAAKF,EAAMG,GAEbJ,EAAMT,MAAMG,GAEhB,OAAOA,GAIJ7E,EAAAzD,UAAAiJ,OAAP,SAAcC,GACV3F,KAAKK,OAAOuF,OAAOD,IAGhBzF,EAAAzD,UAAAoJ,SAAP,SAAgB/F,GACZE,KAAKK,OAAOwF,SAAS/F,IAIfI,EAAAzD,UAAA4G,KAAV,WACI,OACI9C,EAAGP,KAAKF,IAAIS,EACZC,EAAGR,KAAKF,IAAIU,EACZC,MAAOT,KAAKuE,WACZ7D,OAAQV,KAAKwE,cAIXtE,EAAAzD,UAAAqJ,SAAV,SAAmBC,GACf,IAAIC,EAAQhG,KAAKqD,OAAQ4C,EAAQF,EAAM1C,OAOvC,SALI2C,EAAMzF,EAAI0F,EAAM1F,EAAI0F,EAAMxF,OAC1BuF,EAAMzF,EAAIyF,EAAMvF,MAAQwF,EAAM1F,GAC9ByF,EAAMxF,EAAIyF,EAAMzF,EAAIyF,EAAMvF,QAC1BsF,EAAMxF,EAAIwF,EAAMtF,OAASuF,EAAMzF,IAKhCN,EAAAzD,UAAAyJ,YAAP,eAAA5F,EAAAN,KACI,QAASA,KAAKK,OAAO8F,OAAOC,UAAUC,KAAK,SAAAC,GAAQ,OAAAA,IAAShG,GAAQA,EAAKwF,SAASQ,MAG5EpG,EAAAzD,UAAA8J,UAAV,WAEI,OADWvG,KAAKsD,iBAAiBkD,QAAQ,MAInCtG,EAAAzD,UAAAgK,UAAV,WAEI,OADWzG,KAAKsD,iBAAiBT,OAAO,MAIlC3C,EAAAzD,UAAAiK,UAAV,WACI,OAAO1G,KAAKW,OAGNT,EAAAzD,UAAA6G,eAAV,WACI,IAAIqD,EAAM3G,KAAK0G,YAAY1C,QAM3B,OALKhE,KAAKa,QACFb,KAAKkG,gBAAiBS,EAAMpH,EAAAkD,MAAMmE,KACtCD,EAAIE,EAAI,IAER7G,KAAKc,QAAS6F,EAAIE,EAAI,IACnBF,GAGXnK,OAAA6B,eAAI6B,EAAAzD,UAAA,eAAA+B,IAAJ,WACI,OAAOwB,KAAKI,UAAU0G,6CAIhB5G,EAAAzD,UAAAsK,SAAV,SACIjH,EACAkH,GAFJ,IAAA1G,EAAAN,cAEIgH,MAAmEhH,KAAK8G,aAGpE,IADJ,IAAIG,gBACSC,GACL,IAAMC,EAAkBH,EAAiBE,GACrCE,EAAU5H,EAAA6H,KAAKH,GACDC,EAAgBG,IAAI,SAAAlH,GAClC,OAAAE,EAAKD,OAAOkH,sBAAsBzH,GAAMM,MAElCmD,QAAQ,SAAApB,GACVA,GACoBA,EAASkC,QACfzC,OAAO,SAAA0D,GAAQ,OAAAA,EAAKtE,SAAWoG,IAC5C7D,QAAQ,SAAAiE,GACLP,EAAS1K,KAAKiL,QAXdrC,EAAA,EAAAsC,EAAAjI,EAAAkI,QAAAvC,EAAAsC,EAAApL,OAAA8I,IAAOhJ,EAAXsL,EAAAtC,IAiBhB,GAAI8B,EAAS5K,OAAS,EAClB,OAAOoD,EAAAkI,QAAQ7H,EAAKmH,EAAU,SAAC3B,GAAS,OAAAA,EAAKxF,MAE7CmC,QAAQ2F,KAAK,kCAIX1H,EAAAzD,UAAAoL,YAAV,SACI9D,EACAiD,kBAAmEhH,KAAK8G,aAExE,IAAIgB,EAAU9H,KAAK+G,SAAShD,EAAQiD,GACpC,GAAIc,EAAS,CACT,IAAIN,EAAexH,KAAKqE,QACnBgC,KAAK,SAAA5I,GAAK,OAAAA,EAAEuD,QAAUxB,EAAA6H,KAAKS,EAAQ9G,UACxC,GAAIwG,EAAc,CACd,IAAIO,EAASD,EAAQhI,IAAIkI,IAAIR,EAAa1H,KAI1C,OAHAE,KAAKF,IAAImI,SAASF,GAElB/H,KAAKuF,WAAauC,EACXA,KAKT5H,EAAAzD,UAAAyL,UAAV,SAAoB3H,EAAWC,EAAWQ,GACtC,gBADsCA,MAAsBxB,EAAAyB,YAAYC,QAEpEpB,IAAK,IAAIP,EAAAkC,OAAOlB,EAAEC,GAClBQ,OAAMA,EACNmH,OAAQnI,OAITE,EAAAzD,UAAA2L,UAAP,SAAiB5E,GACbA,EAAO6E,WACH7E,EAAOrB,WAAanC,OACpBwD,EAAOrB,SAAWnC,MAEtBA,KAAKsB,QAAQ/E,KAAKiH,GAClBxD,KAAKsI,cAGFpI,EAAAzD,UAAA8L,kBAAP,WACI,OAAOvI,KAAKsB,QAAQjF,OAAS2D,KAAK2E,eAAetI,QAG9C6D,EAAAzD,UAAA+L,gBAAP,WAEI,OAAOxI,KAAK2E,eACR3E,KAAKsB,QAAQjF,SAId6D,EAAAzD,UAAAgM,WAAP,WACI,OAAOzI,KAAKsB,SAGRpB,EAAAzD,UAAA6L,WAAR,eAAAhI,EAAAN,KACQ0I,EAAK/I,EAAAgJ,kBAAkBtC,KAAK,SAAAuC,GAC5B,IAAIC,KACAC,EAAgBxI,EAAKgB,QAAQhC,QAMjC,OALAsJ,EAAQG,SAASxF,QAAQ,SAAAyF,GACrB,IAAIC,EAAiBH,EAAczC,KAAK,SAAApI,GAAK,OAAAA,EAAE+K,mBAAmBA,IAC7DC,IAAkBJ,MACvBC,EAAgBrJ,EAAAyJ,cAAcJ,EAAeG,KAE1CJ,IAEPH,IACA1I,KAAKuC,UAAUS,KAAO0F,EAAGS,QAGrCjJ,EAxUA,CAA8BX,EAAA6J,OAAjBxL,EAAAsC,0FCrBb,IAGYmJ,EAHZC,EAAA9L,EAAA,GACM+L,EAAAD,EAAAE,MAAAD,MAAOD,EAAAE,MAAAC,MAEb,SAAYJ,GACRA,IAAAK,MAAA,WACAL,IAAAM,OAAA,YACAN,IAAAO,MAAA,WACAP,IAAAQ,KAAA,UAJJ,CAAYR,EAAAzL,EAAAyL,aAAAzL,EAAAyL,gBAQZzL,EAAAqC,qBAAA,SAAqCF,GACjC,IAAI+J,EAAK,GACT,OAAQ/J,GACJ,KAAKsJ,EAAWK,MAAOI,EAAKP,EAAMQ,MAAO,MACzC,KAAKV,EAAWM,OAAQG,EAAKP,EAAMS,MAAO,MAC1C,KAAKX,EAAWO,MAAOE,EAAK,EAAIP,EAAMU,OAAQ,MAC9C,KAAKZ,EAAWQ,KAAMC,EAAK,EAAIP,EAAMU,OAEzC,OAAOH,kFCnBX,IAAAI,EAAA1M,EAAA,GAgBII,EAAAsC,SAhBKgK,EAAAhK,SAET,IAAAiK,EAAA3M,EAAA,IAgBII,EAAAwM,aAhBKD,EAAAC,aACT,IAAAC,EAAA7M,EAAA,IAgBII,EAAA0M,eAhBKD,EAAAC,eACT,IAAAC,EAAA/M,EAAA,IAgBII,EAAA4M,SAhBKD,EAAAC,SACT,IAAAC,EAAAjN,EAAA,IAgBII,EAAA8M,mBAhBKD,EAAAC,mBACT,IAAAC,EAAAnN,EAAA,IAgBII,EAAAgN,WAhBKD,EAAAC,WACT,IAAAC,EAAArN,EAAA,IAgBII,EAAAkN,aAhBKD,EAAAC,aACT,IAAAC,EAAAvN,EAAA,IAgBII,EAAAoN,WAhBKD,EAAAC,WACT,IAAAC,EAAAzN,EAAA,IAgBII,EAAAsN,SAhBKD,EAAAC,SACT,IAAAC,EAAA3N,EAAA,IAgBII,EAAAwN,gBAhBKD,EAAAC,+FCVT,IAAA7L,EAAA/B,EAAA,GAGM6N,EAAa,SAACC,EAAKC,EAAOC,GAC9B,OAAOF,EAAIG,OAAO,SAASC,EAAMC,GAC/B,IAAIC,GAASL,EAAMI,GAAOA,GAC1B,OAAKD,GAEMF,EAASxO,MAAM,MAAQ0O,EAAK,GAAIE,EAAK,MAASF,EAAK,GACpDA,EAFAE,GAMV,MAAM,IAgCV,SAASC,EAAUhF,EAAG1K,EAAGwC,GAEvB,IADA,IAAIF,KACKpB,EAAI,EAAGA,EAAIsB,EAAGtB,IACrBoB,EAAElC,KAAKsK,EAAE1K,EAAIkB,IAEf,OAAOoB,EAlCIb,EAAAkO,MAAQ,SAACR,EAAK5C,GAAO,OAAA2C,EAAWC,EAAK5C,EAAIjE,KAAKsH,MAC9CnO,EAAAoO,MAAQ,SAACV,EAAK5C,GAAO,OAAA2C,EAAWC,EAAK5C,EAAIjE,KAAKwH,MAG9CrO,EAAAsO,OAAS,SAACZ,GAAQ,OAAAA,EAAI7G,KAAKC,MAAMD,KAAK0H,SAAWb,EAAIjP,UAErDuB,EAAAwO,MAAQ,SAACzN,GAAM,OAAA0N,MAAM1N,GAAG2N,KAAK,GAAGhF,IAAI,SAACiF,EAAKC,GAAQ,OAAAA,KAE/D5O,EAAA+J,QAAA,SAA2B5D,EAAgBuH,EAAemB,EAA0BC,GACjF,IAAIC,EAAqBrB,EAEzB,GADIoB,IAAapB,EAAMA,EAAI1J,OAAO8K,IAC9BC,EAED,OAAO/O,EAAAkO,MAAMa,EADU,SAACC,GAAY,OAAA7I,EAAO8I,SAASJ,EAAUG,OAKvDhP,EAAAkP,WAAa,SAAAxB,GAAO,SAAGyB,OAAM/P,SAAIsO,IAEjC1N,EAAAsL,cAAgB,SAACoC,EAAKsB,GAAS,OAAAtB,EAAI1J,OAAO,SAAAoL,GAAK,OAAAA,IAAMJ,KAElEhP,EAAAqP,SAAA,SAAyBpG,EAAGlI,GAE1B,IADA,IAAIF,KACKtC,EAAI,EAAGA,EAAI0K,EAAExK,OAASsC,EAAI,EAAGxC,IACpCsC,EAAElC,KAAKsP,EAAShF,EAAG1K,EAAGwC,IAExB,OAAOF,GAWIb,EAAAsH,gBAAkB,SAAC2B,EAAWqG,GAAc,OAAArG,EAAEgG,SAASK,IAIpEtP,EAAAuP,SAAA,SAAyBjK,EAA+B2D,EAAWqG,EAAWlP,EAAwBoP,YAAxBpP,MAAWuB,EAAAkD,MAAMC,gBAAO0K,MAAA,GACpGpP,EAAE6I,EAAI,GACN3D,EAAImK,YACJnK,EAAIoK,OAAOzG,EAAEtG,EAAGsG,EAAErG,GAClB0C,EAAIqK,OAAOL,EAAE3M,EAAG2M,EAAE1M,GAClB0C,EAAIsK,YAAcxP,EAAEyP,SACpBvK,EAAIkK,UAAYA,EAChBlK,EAAIwK,UAGN9P,EAAAwF,SAAA,SACEF,EACAyK,EACA/M,EACAD,EACAiN,YAFAhN,MAAA,YACAD,MAAepB,EAAAkD,MAAMC,gBACrBkL,UAEM,IAAArN,EAAAoN,EAAApN,EAAGC,EAAAmN,EAAAnN,EAAGC,EAAAkN,EAAAlN,MAAOC,EAAAiN,EAAAjN,OAQnB,GAAIkN,EAAQ,CACV,IAAIC,EAAOlN,EACXuC,EAAI4K,UAAYD,EAAKJ,SACrBvK,EAAI6K,SACFxN,EACAC,EACAC,EACAC,GAIJ,GAAIE,EAAY,EAAG,CACjB,IAAI4E,EAAOjG,EAAAkD,MAAMC,MACjBQ,EAAIsK,YAAiB5M,EAAS,YAAY4E,EAAKiI,SAE/CvK,EAAI8K,WACFzN,EAAGC,EAAGC,EAAOC,mCCjGnB,IAAYO,mDAAZ,SAAYA,GAAcA,IAAAgN,KAAA,UAAMhN,IAAAiN,GAAA,QAAIjN,IAAAC,MAAA,WAAOD,IAAAkN,KAAA,UAA3C,CAAYlN,EAAArD,EAAAqD,cAAArD,EAAAqD,iBAECrD,EAAA8J,SACTzG,EAAYgN,KACZhN,EAAYC,MACZD,EAAYiN,GACZjN,EAAYkN,MAIhBvQ,EAAAyJ,KAAA,SAAqB+G,GACjB,OAAQA,GACJ,KAAKnN,EAAYgN,KAAM,OAAOhN,EAAYC,MAC1C,KAAKD,EAAYC,MAAO,OAAOD,EAAYgN,KAC3C,KAAKhN,EAAYiN,GAAI,OAAOjN,EAAYkN,KACxC,KAAKlN,EAAYkN,KAAM,OAAOlN,EAAYiN,GAE9C,MAAM,IAAIG,MAAM,0BAA2BD,maClB/C,IA8BYE,EA9BZC,EAAA/Q,EAAA,GAEA+B,EAAA/B,EAAA,GACAoC,EAAApC,EAAA,GAaMgR,GACFC,UAXiBjR,EAAQ,IAYzBkR,IAXWlR,EAAQ,IAYnBmR,MAXgBnR,EAAQ,IAYxBoR,MAXUpR,EAAQ,IAYlBqR,MAXUrR,EAAQ,IAYlBsR,KAXStR,EAAQ,IAYjBuR,IAXQvR,EAAQ,IAYhBwR,OAXWxR,EAAQ,IAYnByR,OAXWzR,EAAQ,KAcfoJ,EAAArH,EAAAkD,MAAAmE,IAAKsI,EAAA3P,EAAAkD,MAAAyM,MAAOC,EAAA5P,EAAAkD,MAAA0M,KAAMC,EAAA7P,EAAAkD,MAAA2M,OAAQC,EAAA9P,EAAAkD,MAAA4M,OAAQC,EAAA/P,EAAAkD,MAAA6M,QAE1C,SAAYhB,GAERA,IAAAiB,KAAA,UAEAjB,IAAAkB,aAAA,kBACAlB,IAAAmB,gBAAA,qBACAnB,IAAAoB,aAAA,kBACApB,IAAAqB,YAAA,iBAPJ,CAAYrB,EAAA1Q,EAAA0Q,mBAAA1Q,EAAA0Q,sBAUZ,IAAAsB,EAAA,WACI5P,KAAA9B,KAAe,iBACf8B,KAAA6P,YAAsB,wBACtB7P,KAAAW,MAAepB,EAAAkD,MAAMqN,UAErB9P,KAAAD,KAAmBH,EAAAyJ,WAAWK,MAE9B1J,KAAA+P,SAA0B,KAC1B/P,KAAAgQ,SAA0B,KAI1BhQ,KAAAiQ,eAAyB,IACzBjQ,KAAAkQ,SAAmB,IACnBlQ,KAAAmQ,SAAmB,EAEnBnQ,KAAAoQ,SAA6B9B,EAAiBiB,KAE9CvP,KAAAqQ,MAAQ7B,EAAOE,IAEf1O,KAAAsQ,YApBS1S,EAAAgS,UAwBb,IAAAW,EAAA,SAAApQ,GAAA,SAAAoQ,IAAA,IAAAjQ,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,UACPoC,EAAAuP,YAAc,sBACdvP,EAAA8P,SAAW9B,EAAiBmB,gBAC5BnP,EAAA+P,MAAQ7B,EAAOG,MAEfrO,EAAAP,KAAOH,EAAAyJ,WAAWM,SACtB,OAPmC7G,EAAAyN,EAAApQ,GAOnCoQ,EAPA,CAAmCX,GAAtBhS,EAAA2S,gBAYb,IAAAE,EAAA,SAAAtQ,GAAA,SAAAsQ,IAAA,IAAAnQ,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,eACPoC,EAAAuP,YAAc,eACdvP,EAAA+P,MAAQ7B,EAAOE,IACfpO,EAAAgQ,SAAYI,EAAwBC,KACxC,OALqC7N,EAAA2N,EAAAtQ,GAKrCsQ,EALA,CAAqCb,GAAxBhS,EAAA6S,kBAOb,IAAAE,EAAA,SAAAxQ,GAAA,SAAAwQ,IAAA,IAAArQ,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,aACPoC,EAAAuP,YAAc,kBAAA7C,EAClB,OAH+BlK,EAAA6N,EAAAxQ,GAG/BwQ,EAHA,CAA+Bf,GAAlBhS,EAAA+S,YAKb,IAAAD,EAAA,SAAAvQ,GAAA,SAAAuQ,IAAA,IAAApQ,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,gBACPoC,EAAAgQ,SAAYK,KAChB,OAH4C7N,EAAA4N,EAAAvQ,GAG5CuQ,EAHA,CAA4Cd,GAA/BhS,EAAA8S,yBAMb,IAAAE,EAAA,SAAAzQ,GAAA,SAAAyQ,IAAA,IAAAtQ,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAAyP,SAAWxB,EAAAsC,cAAcC,WACzBxQ,EAAA0P,SAAWzB,EAAAsC,cAAcE,OAC7B,OAHkCjO,EAAA8N,EAAAzQ,GAGlCyQ,EAHA,CAAkChB,GAArBhS,EAAAgT,eAKb,IAAAI,EAAA,SAAA7Q,GAAA,SAAA6Q,IAAA,IAAA1Q,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,OACPoC,EAAA+P,MAAQ7B,EAAOG,MACfrO,EAAAgQ,SAAYG,KAEhB,OAL0B3N,EAAAkO,EAAA7Q,GAK1B6Q,EALA,CAA0BJ,GAAbhT,EAAAoT,OAOb,IAAAC,EAAA,SAAA9Q,GAAA,SAAA8Q,IAAA,IAAA3Q,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,cACPoC,EAAAgQ,SAAYY,GACZ5Q,EAAAK,MAAQwO,IACZ,OAJiCrM,EAAAmO,EAAA9Q,GAIjC8Q,EAJA,CAAiCL,GAApBhT,EAAAqT,cAQb,IAAAC,EAAA,SAAA/Q,GAAA,SAAA+Q,IAAA,IAAA5Q,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,QACPoC,EAAAuP,YAAc,aACdvP,EAAA0P,SAAWzB,EAAAsC,cAAcC,WACzBxQ,EAAA+P,MAAQ7B,EAAOC,UACfnO,EAAAgQ,SAAYG,EAAiBO,GAC7B1Q,EAAAK,MAAQwO,IACZ,OAP+BrM,EAAAoO,EAAA/Q,GAO/B+Q,EAPA,CAA+BtB,GAAlBhS,EAAAsT,YAUb,IAAAC,EAAA,SAAAhR,GAAA,SAAAgR,IAAA,IAAA7Q,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,SACPoC,EAAAuP,YAAc,cACdvP,EAAA8P,SAAW9B,EAAiBoB,aAC5BpP,EAAA+P,MAAQ7B,EAAOQ,OACf1O,EAAAgQ,SAAWY,GACX5Q,EAAAK,MAAQ2O,IACZ,OAP4BxM,EAAAqO,EAAAhR,GAO5BgR,EAPA,CAA4BvB,GAAfhS,EAAAuT,SASb,IAAAC,EAAA,SAAAjR,GAAA,SAAAiR,IAAA,IAAA9Q,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,QACPoC,EAAAuP,YAAc,cACdvP,EAAAyP,SAAWxB,EAAAsC,cAAcQ,KACzB/Q,EAAA0P,SAAWzB,EAAAsC,cAAcS,KACzBhR,EAAA+P,MAAQ7B,EAAOI,MAEftO,EAAAgQ,SAAWY,EAAWC,GACtB7Q,EAAAK,MAAQ2O,IACZ,OAT2BxM,EAAAsO,EAAAjR,GAS3BiR,EATA,CAA2BxB,GAAdhS,EAAAwT,QAWb,IAAAG,EAAA,SAAApR,GAAA,SAAAoR,IAAA,IAAAjR,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,MACPoC,EAAA+P,MAAQ7B,EAAOO,IACfzO,EAAAgQ,SAAYG,GACZnQ,EAAAK,MAAQyO,IACZ,OALyBtM,EAAAyO,EAAApR,GAKzBoR,EALA,CAAyB3B,GAAZhS,EAAA2T,MAMb,IAAAC,EAAA,SAAArR,GAAA,SAAAqR,IAAA,IAAAlR,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,cACPoC,EAAAgQ,SAAYiB,GACZjR,EAAA0P,SAAWzB,EAAAsC,cAAcQ,KACzB/Q,EAAA6P,SAAW,EACX7P,EAAAK,MAAQuO,IACZ,OANgCpM,EAAA0O,EAAArR,GAMhCqR,EANA,CAAgC5B,GAAnBhS,EAAA4T,aAWb,IAAAC,EAAA,SAAAtR,GAAA,SAAAsR,IAAA,IAAAnR,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,kBACPoC,EAAAuP,YAAc,YACdvP,EAAA0P,SAAWzB,EAAAsC,cAAcC,WACzBxQ,EAAA8P,SAAW9B,EAAiBqB,YAC5BrP,EAAA+P,MAAQ7B,EAAOS,OACf3O,EAAAgQ,SAAWY,GACX5Q,EAAAP,KAAOH,EAAAyJ,WAAWM,OAClBrJ,EAAAK,MAAQwO,IACZ,OAToCrM,EAAA2O,EAAAtR,GASpCsR,EATA,CAAoC7B,GAAvBhS,EAAA6T,iBAWb,IAAAC,EAAA,SAAAvR,GAAA,SAAAuR,IAAA,IAAApR,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACGM,EAAApC,KAAO,UACPoC,EAAAuP,YAAc,iBACdvP,EAAA0P,SAAWzB,EAAAsC,cAAcQ,KACzB/Q,EAAAP,KAAOH,EAAAyJ,WAAWM,OAClBrJ,EAAAgQ,SAAWqB,GACXrR,EAAAK,MAAQuO,IACX,OAP6BpM,EAAA4O,EAAAvR,GAO7BuR,EAPA,CAA6B9B,GAAhBhS,EAAA8T,UASb,IAAAE,EAAA,SAAAzR,GAAA,SAAAyR,IAAA,IAAAtR,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACGM,EAAApC,KAAO,QACPoC,EAAAyP,SAAWxB,EAAAsC,cAAcQ,KACzB/Q,EAAA0P,SAAWzB,EAAAsC,cAAcS,KACzBhR,EAAA+P,MAAQ7B,EAAOK,MACfvO,EAAAgQ,SAAWoB,GACXpR,EAAAP,KAAOH,EAAAyJ,WAAWM,OAClBrJ,EAAAK,MAAQyO,IACX,OAR2BtM,EAAA8O,EAAAzR,GAQ3ByR,EARA,CAA2BhC,GAAdhS,EAAAgU,QAUb,IAAAC,EAAA,SAAA1R,GAAA,SAAA0R,IAAA,IAAAvR,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,QACPoC,EAAA0P,SAAWzB,EAAAsC,cAAcQ,KACzB/Q,EAAAgQ,SAAWoB,GACXpR,EAAAP,KAAOH,EAAAyJ,WAAWM,OAClBrJ,EAAAK,MAAQuO,IACZ,OAN2BpM,EAAA+O,EAAA1R,GAM3B0R,EANA,CAA2BjC,GAAdhS,EAAAiU,QAQb,IAAAF,EAAA,SAAAxR,GAAA,SAAAwR,IAAA,IAAArR,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,YACPoC,EAAA0P,SAAWzB,EAAAsC,cAAcQ,KACzB/Q,EAAAgQ,SAAYG,EAAiBS,EAAWC,GACxC7Q,EAAAP,KAAOH,EAAAyJ,WAAWM,OAClBrJ,EAAAK,MAAQ0O,IACZ,OAN8BvM,EAAA6O,EAAAxR,GAM9BwR,EANA,CAA8B/B,GAAjBhS,EAAA+T,WAQb,IAAAG,EAAA,SAAA3R,GAAA,SAAA2R,IAAA,IAAAxR,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,cACPoC,EAAAuP,YAAc,yBACdvP,EAAA8P,SAAW9B,EAAiBkB,aAC5BlP,EAAAyR,eAAiB,KACjBzR,EAAA+P,MAAQ7B,EAAOE,IACfpO,EAAAgQ,SAAWqB,GACXrR,EAAAP,KAAOH,EAAAyJ,WAAWM,OAClBrJ,EAAAK,MAAQ0O,IACZ,OATgCvM,EAAAgP,EAAA3R,GAShC2R,EATA,CAAgClC,GAAnBhS,EAAAkU,aAYb,IAAAE,EAAA,SAAA7R,GAAA,SAAA6R,IAAA,IAAA1R,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,aACPoC,EAAAyP,SAAWxB,EAAAsC,cAAcoB,IACzB3R,EAAA0P,SAAWzB,EAAAsC,cAAcqB,QACzB5R,EAAAP,KAAOH,EAAAyJ,WAAWM,OAClBrJ,EAAAK,MAAQiG,IAEZ,OAPgC9D,EAAAkP,EAAA7R,GAOhC6R,EAPA,CAAgCpC,GAAnBhS,EAAAoU,aAiBb,IAAAG,EAAA,SAAAhS,GAAA,SAAAgS,IAAA,IAAA7R,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,eACPoC,EAAAP,KAAOH,EAAAyJ,WAAWO,MAClBtJ,EAAAgQ,SAAY0B,GACZ1R,EAAA0P,SAAWzB,EAAAsC,cAAcoB,MAE7B,OANiCnP,EAAAqP,EAAAhS,GAMjCgS,EANA,CAAiCvC,GAApBhS,EAAAuU,cAQb,IAAAC,EAAA,SAAAjS,GAAA,SAAAiS,IAAA,IAAA9R,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,kBACPoC,EAAAP,KAAOH,EAAAyJ,WAAWO,MAClBtJ,EAAAgQ,SAAY0B,GACZ1R,EAAAK,MAAQiG,IACZ,OALoC9D,EAAAsP,EAAAjS,GAKpCiS,EALA,CAAoCxC,GAAvBhS,EAAAwU,iBAOb,IAAAC,EAAA,SAAAlS,GAAA,SAAAkS,IAAA,IAAA/R,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,WACPoC,EAAAP,KAAOH,EAAAyJ,WAAWO,MAClBtJ,EAAAgQ,SAAYuB,GACZvR,EAAAK,MAAQuO,IACZ,OAL8BpM,EAAAuP,EAAAlS,GAK9BkS,EALA,CAA8BzC,GAAjBhS,EAAAyU,WASb,IAAAC,EAAA,SAAAnS,GAAA,SAAAmS,IAAA,IAAAhS,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,YACPoC,EAAAP,KAAOH,EAAAyJ,WAAWQ,KAClBvJ,EAAAgQ,SAAY8B,GACZ9R,EAAAK,MAAQyO,IACZ,OAL+BtM,EAAAwP,EAAAnS,GAK/BmS,EALA,CAA+B1C,GAAlBhS,EAAA0U,YAOb,IAAAC,EAAA,SAAApS,GAAA,SAAAoS,IAAA,IAAAjS,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,gBACPoC,EAAAP,KAAOH,EAAAyJ,WAAWQ,KAClBvJ,EAAAgQ,SAAY8B,GACZ9R,EAAAK,MAAQwO,IACZ,OALkCrM,EAAAyP,EAAApS,GAKlCoS,EALA,CAAkC3C,GAArBhS,EAAA2U,eASA3U,EAAA4U,aACTb,EACAE,EACAN,EACAL,EACAU,EACAE,EACAd,EACAgB,EACAb,EACAK,EACAY,EACAD,EACAT,EACAjB,EACA4B,EACAZ,EACAd,EACAS,EACAV,EACAO,EACAqB,EACAC,kFC1SJ,IAAAhT,EAAA/B,EAAA,IAGA,SAAYiV,GACRA,EAAAC,MAAA,QACAD,EAAAE,KAAA,OACAF,EAAAG,QAAA,UACAH,EAAAI,OAAA,SAJJ,CAAYjV,EAAA6U,YAAA7U,EAAA6U,eAYC7U,EAAAkV,aACTJ,OACIK,OAAQ,EACRC,OAAQ,GAEZL,MACII,OAAQ,EACRC,OAAQ,GAEZJ,SACIG,OAAQ,EACRC,OAAQ,GAEZH,QACIE,OAAQ,EACRC,OAAQ,IAIhB,SAAYnC,GAERA,EAAAQ,KAAA,OACAR,EAAAoB,IAAA,MACApB,EAAAE,KAAA,OAEAF,EAAAS,KAAA,OACAT,EAAAC,WAAA,aACAD,EAAAqB,QAAA,UACArB,EAAAoC,MAAA,QATJ,CAAYrV,EAAAiT,gBAAAjT,EAAAiT,mBAYZ,IAAMqC,GACF7B,KAAM9R,EAAAkD,MAAMyM,MACZ6B,KAAMxR,EAAAkD,MAAM0M,KACZ+C,QAAS3S,EAAAkD,MAAMmE,IAEf0K,KAAM/R,EAAAkD,MAAM6M,OAAOzM,OAAO,IAC1BiO,WAAYvR,EAAAkD,MAAM4M,OAAOxM,OAAO,IAChCoP,IAAK1S,EAAAkD,MAAMmE,IAAI/D,OAAO,IAEtBoQ,MAAO1T,EAAAkD,MAAMqN,UAAUjN,OAAO,KAGlCjF,EAAAuV,WAAA,SAA2BC,GASvB,OARgBF,EAAYE,GAQXC,WAAW,KAAM7M,QAAQ,iBAAA8M,EAAAtG,EAAArO,GAAA,iBAAAF,EAAAtC,EAAA6D,WAAA8C,YAAArE,EAAA,SAAA6U,EAAAtG,GAAA,OAAAvO,EAAAjC,OAAA+W,iBAAAC,wBAAAnH,OAAA,SAAAiH,EAAAtG,GAAAsG,EAAAE,UAAAxG,IAAA,SAAAsG,EAAAtG,GAAA,QAAArO,KAAAqO,IAAAtQ,eAAAiC,KAAA2U,EAAA3U,GAAAqO,EAAArO,MAAA2U,EAAAtG,IAAA,SAAAsG,EAAAtG,GAAA,SAAArO,IAAAqB,KAAAyT,YAAAH,EAAA7U,EAAA6U,EAAAtG,GAAAsG,EAAA7W,UAAA,OAAAuQ,EAAAxQ,OAAAkX,OAAA1G,IAAArO,EAAAlC,UAAAuQ,EAAAvQ,UAAA,IAAAkC,KAAAnC,OAAA6B,eAAA2O,EAAA,cAAAtO,OAAA,ICnE9C,IAAAa,EAAA/B,EAAA,GAEA8L,EAAA9L,EAAA,GACAgC,EAAAhC,EAAA,GACAmW,EAAAnW,EAAA,GAGQ+L,EAAAD,EAAAE,MAAAD,MAAOE,EAAAH,EAAAE,MAAAC,MAEfmK,EAAA,eAAAN,EACItT,KAAA9B,KAAe,mBACf8B,KAAA6P,YAAsB,0BACtB7P,KAAA6T,KAAe,0BACf7T,KAAAS,MAAgB,GAChBT,KAAAU,OAAiB,GACjBV,KAAA8T,KAAe,EACf9T,KAAA+T,cAAuBxU,EAAAkD,MAAMuR,KAE7BhU,KAAA+P,SAA0B,KAC1B/P,KAAAgQ,SAA0B,KAC1BhQ,KAAA+R,eAAyB,IAIzB/R,KAAA8G,cAAW1B,MACN5F,EAAAyB,YAAYgN,OAASgG,GACtB7O,EAAC5F,EAAAyB,YAAYC,QAAU+S,GACvB7O,EAAC5F,EAAAyB,YAAYiN,KAAOgG,GACpB9O,EAAC5F,EAAAyB,YAAYkN,OAAS+F,MAG1BlU,KAAA+I,YAEA/I,KAAAsQ,YAxBS1S,EAAAgW,YA8Bb,IAAAO,EAAA,SAAAhU,GAAA,SAAAgU,UAAA7T,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAe,cACfoC,EAAAuP,YAAsB,YACtBvP,EAAAuT,KAAe,aACfvT,EAAAG,MAAgB8I,EAAM6K,OACtB9T,EAAAI,OAAiB6I,EAAMU,OACvB3J,EAAAwT,KAAO,IACPxT,EAAAwG,cAAW1B,MACN5F,EAAAyB,YAAYgN,OAASgG,GACtB7O,EAAC5F,EAAAyB,YAAYC,QAAU+S,GACvB7O,EAAC5F,EAAAyB,YAAYiN,KAAOmG,GACpBjP,EAAC5F,EAAAyB,YAAYkN,cAErB,OAbgCrL,EAAAqR,EAAAhU,GAahCgU,EAbA,CAAgCP,GAAnBhW,EAAAuW,aAgBb,IAAAG,EAAA,SAAAnU,GAAA,SAAAmU,UAAAhU,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAe,OACfoC,EAAAuP,YAAsB,gBACtBvP,EAAAuT,KAAe,kBACfvT,EAAAG,MAAgBgJ,EAAM8K,MACtBjU,EAAAI,OAAiB+I,EAAM+K,MACvBlU,EAAAwG,cAAW1B,MACN5F,EAAAyB,YAAYgN,OAASwG,EAAMJ,GAC5BjP,EAAC5F,EAAAyB,YAAYC,QAAWuT,EAAMJ,GAC9BjP,EAAC5F,EAAAyB,YAAYiN,OACb9I,EAAC5F,EAAAyB,YAAYkN,cAErB,OAZiCrL,EAAAwR,EAAAnU,GAYjCmU,EAZA,CAAiCV,GAApBhW,EAAA0W,cAcb,IAAAL,EAAA,SAAA9T,GAAA,SAAA8T,UAAA3T,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAe,WACfoC,EAAAuP,YAAsB,iBACtBvP,EAAAuT,KAAe,eACfvT,EAAAG,MAAgBgJ,EAAM8K,MACtBjU,EAAAI,OAAiB+I,EAAMM,MACvBzJ,EAAAwT,KAAO,GACPxT,EAAAwG,cAAW1B,MACN5F,EAAAyB,YAAYgN,OACTkG,EACAO,GAEJtP,EAAC5F,EAAAyB,YAAYC,QACTiT,EACAO,GAEJtP,EAAC5F,EAAAyB,YAAYiN,OACb9I,EAAC5F,EAAAyB,YAAYkN,YAEjB7N,EAAAgQ,SAAWgE,KACf,OApB8BxR,EAAAmR,EAAA9T,GAoB9B8T,EApBA,CAA8BL,GAAjBhW,EAAAqW,WAsBb,IAAAC,EAAA,SAAA/T,GAAA,SAAA+T,UAAA5T,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,SACPoC,EAAAuP,YAAc,qBACdvP,EAAAuT,KAAO,aACPvT,EAAAG,MAAQgJ,EAAMM,MACdzJ,EAAAI,OAAS,IAAM6I,EAAMQ,MACrBzJ,EAAAwT,KAAO,GACPxT,EAAAwG,cAAW1B,MACN5F,EAAAyB,YAAYiN,KAAOwG,GACpBtP,EAAC5F,EAAAyB,YAAYkN,OAASuG,GACtBtP,EAAC5F,EAAAyB,YAAYgN,SACb7I,EAAC5F,EAAAyB,YAAYC,aAEjBZ,EAAAgQ,SAAW2D,EAAUU,KACzB,OAd4B7R,EAAAoR,EAAA/T,GAc5B+T,EAdA,CAA4BN,GAAfhW,EAAAsW,SAkBb,IAAAO,EAAA,SAAAtU,GAAA,SAAAsU,UAAAnU,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YAEIM,EAAAuP,YAAsB,oBAGtBvP,EAAAuT,KAAe,WACfvT,EAAAG,MAAiB,EAAI8I,EAAMU,OAC3B3J,EAAAI,OAAiB6I,EAAMU,OACvB3J,EAAAwT,KAAO,GACPxT,EAAAwG,cAAW1B,MACN5F,EAAAyB,YAAYgN,OAASqG,GACtBlP,EAAC5F,EAAAyB,YAAYC,QAAUoT,GACvBlP,EAAC5F,EAAAyB,YAAYiN,OACb9I,EAAC5F,EAAAyB,YAAYkN,YAGjB7N,EAAAyI,UACI4K,EAAAhD,UACAgD,EAAAlD,gBAAiBkD,EAAAjD,0BAGzB,OArBmB5N,EAAA2R,EAAAtU,GAqBnBsU,EArBA,CAAmBb,GAwBnBc,EAAA,SAAAvU,GAAA,SAAAuU,UAAApU,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAe,UACfoC,EAAAuP,YAAsB,cACtBvP,EAAAuT,KAAe,iBACfvT,EAAAG,MAAgB8I,EAAMU,OACtB3J,EAAAI,OAAiB6I,EAAMgL,MAEvBjU,EAAAwG,cAAW1B,MACN5F,EAAAyB,YAAYgN,OACTgG,EAAUS,GAEdtP,EAAC5F,EAAAyB,YAAYC,QACT+S,EACAS,GAEJtP,EAAC5F,EAAAyB,YAAYiN,KAAOgG,GACpB9O,EAAC5F,EAAAyB,YAAYkN,OAAS+F,MAG1B5T,EAAAyI,UACI4K,EAAAvC,MACAuC,EAAApC,IACAoC,EAAA3C,KACA2C,EAAAzC,UACAyC,EAAAxC,OACAwC,EAAA1C,YACA0C,EAAAnC,YAGJlR,EAAAgQ,aAGJ,OAhCyBxN,EAAA4R,EAAAvU,GAgCzBuU,EAhCA,CAAyBd,GAkCzBgB,EAAA,SAAAzU,GAAA,SAAAyU,IAAA,IAAAtU,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,eACPoC,EAAAG,MAAQ8I,EAAMU,OACd3J,EAAAgQ,SAAYuE,KAEhB,OALkC/R,EAAA8R,EAAAzU,GAKlCyU,EALA,CAAkCF,GAArB9W,EAAAgX,eAOb,IAAAD,EAAA,SAAAxU,GAAA,SAAAwU,IAAA,IAAArU,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,eACPoC,EAAAgQ,SAAWsE,GACXtU,EAAAuT,KAAO,qBACPvT,EAAAG,MAAQ,EAAI8I,EAAMU,SACtB,OALoCnH,EAAA6R,EAAAxU,GAKpCwU,EALA,CAAoCD,GAAvB9W,EAAA+W,iBAOb,IAAAG,EAAA,SAAA3U,GAAA,SAAA2U,IAAA,IAAAxU,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,WACPoC,EAAAgQ,SAAYqE,GACZrU,EAAAuT,KAAO,iBACPvT,EAAAG,MAAQ,EAAI8I,EAAMU,OAClB3J,EAAAI,OAAS,EAAI6I,EAAMQ,MAEnBzJ,EAAAyI,UACI4K,EAAAlC,eACAkC,EAAAhC,SACAgC,EAAA7B,WACA6B,EAAA3B,cAER,OAbgClP,EAAAgS,EAAA3U,GAahC2U,EAbA,CAAgCJ,GAAnB9W,EAAAkX,aAeb,IAAAC,EAAA,SAAA5U,GAAA,SAAA4U,IAAA,IAAAzU,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,WACPoC,EAAAuT,KAAO,gBACPvT,EAAAgQ,SAAYwE,GACZxU,EAAAG,MAAQ,EAAI8I,EAAMU,OAClB3J,EAAAI,OAAS,EAAI6I,EAAMgL,MAGnBjU,EAAAyI,UACI4K,EAAAxB,YACAwB,EAAAvB,kBAGR,OAb+BtP,EAAAiS,EAAA5U,GAa/B4U,EAbA,CAA+BL,GAAlB9W,EAAAmX,YAeb,IAAAC,EAAA,SAAA7U,GAAA,SAAA6U,IAAA,IAAA1U,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,YACPoC,EAAAuT,KAAO,eACPvT,EAAAG,MAAQ,GAAK8I,EAAMU,OACnB3J,EAAAI,OAAS,EAAI6I,EAAMU,OAEnB3J,EAAAgQ,SAAWyE,GACXzU,EAAAyI,UAAa4K,EAAApB,gBACjB,OAR8BzP,EAAAkS,EAAA7U,GAQ9B6U,EARA,CAA8BN,GAAjB9W,EAAAoX,WAYb,IAAAH,EAAA,SAAA1U,GAAA,SAAA0U,IAAA,IAAAvU,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,WACPoC,EAAAG,MAAQ,EAAI8I,EAAMU,OAClB3J,EAAAI,OAAS,EAAI6I,EAAMU,SACvB,OAJ+BnH,EAAA+R,EAAA1U,GAI/B0U,EAJA,CAA+BJ,GAAlB7W,EAAAiX,YAMb,IAAAI,EAAA,SAAA9U,GAAA,SAAA8U,IAAA,IAAA3U,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,WACPoC,EAAAuT,KAAO,cACPvT,EAAAG,MAAQ,EAAI8I,EAAMU,OAClB3J,EAAAI,OAAS,EAAI6I,EAAMU,OACnB3J,EAAAgQ,SAAYuE,EAAWC,GACvBxU,EAAAyI,UACI4K,EAAA/B,MACA+B,EAAAjC,QACAiC,EAAA9B,SAGR,OAZ6B/O,EAAAmS,EAAA9U,GAY7B8U,EAZA,CAA6BR,GAAhB7W,EAAAqX,UAcb,IAAAC,EAAA,SAAA/U,GAAA,SAAA+U,IAAA,IAAA5U,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,WACPoC,EAAAuT,KAAO,cACPvT,EAAAG,MAAQ,EAAI8I,EAAMU,OAClB3J,EAAAI,OAAS,EAAI6I,EAAMU,OACnB3J,EAAAgQ,SAAW2E,EAASF,GACpBzU,EAAAyI,UACI4K,EAAAtB,YAER,OAT+BvP,EAAAoS,EAAA/U,GAS/B+U,EATA,CAA+BT,GAAlB7W,EAAAsX,YAWb,IAAAC,EAAA,SAAAhV,GAAA,SAAAgV,IAAA,IAAA7U,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAO,WACPoC,EAAAuT,KAAO,eACPvT,EAAAG,MAAQ,GAAK8I,EAAMU,OACnB3J,EAAAI,OAAS,GAAK6I,EAAMU,OACpB3J,EAAAgQ,SAAW4E,EAAWF,GACtB1U,EAAAyI,UACI4K,EAAArB,aAER,OAT8BxP,EAAAqS,EAAAhV,GAS9BgV,EATA,CAA8BV,GAAjB7W,EAAAuX,WAab,IAAAd,EAAA,SAAAlU,GAAA,SAAAkU,UAAA/T,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAApC,KAAe,kBACfoC,EAAAuP,YAAsB,8BACtBvP,EAAAuT,KAAe,qBACfvT,EAAAG,MAAgB,EAAI8I,EAAMU,OAC1B3J,EAAAI,OAAiB,EAAI6I,EAAMS,MAC3B1J,EAAAwT,KAAO,GACPxT,EAAAwG,cAAW1B,MACN5F,EAAAyB,YAAYgN,OAASqG,GACtBlP,EAAC5F,EAAAyB,YAAYC,QAAUoT,GACvBlP,EAAC5F,EAAAyB,YAAYiN,KAAOiG,GACpB/O,EAAC5F,EAAAyB,YAAYkN,OAASgG,MAG1B7T,EAAAyI,UAAa4K,EAAApD,iBACjB,OAfoCzN,EAAAuR,EAAAlU,GAepCkU,EAfA,CAAoCT,GAAvBhW,EAAAyW,iBAiBAzW,EAAAwX,eAELP,EACAI,EACAC,EACAC,EAEAP,EACAD,EACAG,EACAC,EACAC,kFC9QKpX,EAAA4L,OACTD,OAtBAiL,MAJc,GAKdJ,OAAQiB,GACRtL,MAAOsL,GACPC,OAAQD,GACRd,MAAOc,GACPrL,MAAOqL,GACPE,QAASF,IACTpL,OAAQoL,KAgBR5L,OAZA+K,MAdc,EAedJ,OAASoB,EACTzL,MAASyL,GACTF,OAASE,GACTjB,MAASiB,GACTxL,MAASwL,GACTD,QAASC,GACTvL,OAASuL,MAKFC,8ZC3BX,IAEArK,EAAA,SAAAjL,GAAA,SAAAiL,mDAIA,OAJqCtI,EAAAsI,EAAAjL,GAEjCiL,EAAA3O,UAAAiK,UAAA,WAAc,OAAO1G,KAAKW,MAAM6F,QAAQ,KAE5C4E,EAJA,CAFA5N,EAAA,GAEqC4M,cAAxBxM,EAAAwN,2wDCFb,IAAA7L,EAAA/B,EAAA,GACAmW,EAAAnW,EAAA,GAEA+Q,EAAA/Q,EAAA,GAGAkY,EAAAlY,EAAA,GACAoC,EAAApC,EAAA,GAEAmY,EAAA,SAAAxV,GAaI,SAAAwV,EAEW3M,EACC4M,GAHZ,IAAAtV,EAKIH,EAAAxD,KAAAqD,KACI4V,EAAWrV,EACXqV,EAAWpV,EACXZ,EAAAK,qBAAqB+I,EAAQjJ,MAC7BH,EAAAK,qBAAqB+I,EAAQjJ,MAE7BiJ,EAAQrI,QACXX,YAVMM,EAAA0I,UACC1I,EAAAsV,aAfZtV,EAAAuV,WAMAvV,EAAAwV,eAIAxV,EAAAyV,SAgBIzV,EAAKiC,UAAY,IAAIhD,EAAAiD,MAAMlC,EAAK0I,QAAQ9K,KAAM,EAAG,EAAG,aACpDoC,EAAKiC,UAAUK,SAAW,EAC1BtC,EAAKiC,UAAU5B,MAAQpB,EAAAkD,MAAMC,MAE7BpC,EAAK+P,MAAQ,IAAI2F,MACjB1V,EAAK+P,MAAM4F,OAAS,WACfjW,KAAK8V,gBAEVxV,EAAK+P,MAAM6F,IAAMlN,EAAQqH,QA8HjC,OAjK4BvN,EAAA6S,EAAAxV,GAsCxBwV,EAAAlZ,UAAAwG,KAAA,SAAKC,EAA+BC,GAEhCD,EAAIiT,UACAnW,KAAKqQ,MACLrQ,KAAKF,IAAIS,EAAIP,KAAKuE,WAAa,EAC/BvE,KAAKF,IAAIU,EAAIR,KAAKwE,YAAc,EAAI,GACpCxE,KAAKuE,WAAYvE,KAAKwE,aAKtBxE,KAAKuC,UAAUzC,IAAME,KAAKyD,YAC1BzD,KAAKuC,UAAUzC,IAAIS,GAAK,GACxBP,KAAKuC,UAAUzC,IAAIU,GAAK,EAAIR,KAAKwE,YAAY,EAC7CxE,KAAKuC,UAAUU,KAAKC,EAAKC,GAG7B,IAAIiT,EAAKpW,KAAKO,EAAIP,KAAKuE,WAAW,EAAI,EAAG8R,EAAKrW,KAAKQ,EAAI,GAEvDR,KAAK6V,QAAQtS,QAAQ,SAAC+S,EAAUC,GAC5BrT,EAAI4K,UAAYS,EAAA4E,WAAWmD,GAAUjD,WAAW,IAAK7M,QAAQ,IAAKiH,SAClEvK,EAAI6K,SAASqI,EAHD,EAGkBG,EAAOF,EAHzB,EAGyCG,EAAaA,MAI1Eha,OAAA6B,eAAIsX,EAAAlZ,UAAA,YAAA+B,IAAJ,WAAuB,OAAOwB,KAAKgJ,QAAQgH,0CAC3CxT,OAAA6B,eAAIsX,EAAAlZ,UAAA,YAAA+B,IAAJ,WAAuB,OAAOwB,KAAKgJ,QAAQ+G,0CAC3CvT,OAAA6B,eAAIsX,EAAAlZ,UAAA,YAAA+B,IAAJ,WAAuB,OAAOwB,KAAKgJ,QAAQkH,0CAC3C1T,OAAA6B,eAAIsX,EAAAlZ,UAAA,kBAAA+B,IAAJ,WAAuB,OAAOwB,KAAKgJ,QAAQiH,gDAE3CzT,OAAA6B,eAAIsX,EAAAlZ,UAAA,YAAA+B,IAAJ,WAAuB,OAAOwB,KAAKgJ,QAAQmH,0CAErCwF,EAAAlZ,UAAAga,SAAN,SAAeC,iGACX,OAAI1W,KAAK+V,OACLW,EAAQC,UAAU3W,OAClB,IAGAA,KAAK6V,QAAQxZ,OAAS,GACtB2D,KAAK6V,QAAQe,MACb5W,KAAK+V,UACL,EAAMW,EAAQG,YAAY,QAH1B,mBAGAzR,EAAA0R,OACA9W,KAAK+V,SACLW,EAAQK,MAAM/W,KAAKgQ,8BAEfhQ,KAAK+P,UAAY2G,EAAQM,WAAahX,KAAK+P,UAC3C/P,KAAK+V,UACL,EAAMW,EAAQG,YAAY7W,KAAKkQ,aAF/B,YAEA9K,EAAA0R,OACAJ,EAAQK,MAAM/W,KAAKgQ,UACnBhQ,KAAK+V,SAAQpX,EAAAwK,MAAA,gBAIjBnJ,KAAKgJ,QAAQoH,WAAauD,EAAArF,iBAAiBiB,OAGpCvP,KAAKgJ,QAAQoH,WAAauD,EAAArF,iBAAiBmB,iBAE9CwH,EAAWP,EAAQQ,SAEnBlX,KAAKmC,SAASuD,OAAOuR,GAElBjX,KAAKgJ,QAAQoH,WAAauD,EAAArF,iBAAiBoB,aAE9CgH,EAAQM,WAAazI,EAAAsC,cAAcS,OAC/B2F,EAAWP,EAAQQ,SAEnBlX,KAAKmC,SAASuD,OAAOuR,GAGtBjX,KAAKgJ,QAAQoH,WAAauD,EAAArF,iBAAiBqB,YAE9C+G,EAAQM,WAAazI,EAAAsC,cAAcE,OAC/BkG,EAAWP,EAAQQ,SAEnBlX,KAAKmC,SAASuD,OAAOuR,GAI7BhV,QAAQ2F,KAAK,mCAAqCpE,OAAQxD,kBAI3D2V,EAAAlZ,UAAAoH,QAAP,SAAetC,GAAf,IAAAjB,EAAAN,KACQuB,EAAOvB,KAAKiQ,gBAAmB,IAC3BjQ,KAAKgJ,QAAQoH,WAAauD,EAAArF,iBAAiBiB,KAEvCvP,KAAKgQ,WAAahQ,KAAK+P,UAAY/P,KAAK6V,QAAQxZ,OAAS2D,KAAKmQ,UAC9DnQ,KAAK6V,QAAQtZ,KAAKyD,KAAKgQ,UAEpBhQ,KAAKgJ,QAAQoH,WAAauD,EAAArF,iBAAiBkB,cAClD2H,WAAW,WAAM,OAAA7W,EAAK6B,SAAS0D,SAASvF,EAAKR,MAAM,OAM/D6V,EAAAlZ,UAAA2a,KAAA,SAAK/W,EAAgBP,GAArB,IAAAQ,EAAAN,cAAqBF,MAAcE,KAAKF,KACpC,IAAIwG,EAAOjG,EAAO8F,OAAOoB,sBAAsBzH,EAE3C4V,EAAAN,cAEA,SAAC9O,GAEG,OADeA,EAAKiC,qBACDjC,EAAKlG,UAAU2I,SAASsO,KAAK,SAAAzH,GAAW,OAAAtP,EAAK0I,mBAAmB4G,MAa3F,OARItJ,IACAtG,KAAKmC,SAAWmE,EAChBtG,KAAKF,IAAME,KAAKmC,SAASqG,kBAAkB8O,YAMtChR,GAGbqP,EAAAlZ,UAAA4L,SAAA,aAGJsN,EAjKA,CAA4BpW,EAAA6J,OAAfxL,EAAA+X,wFCTb,IAAAlW,EAAAjC,EAAA,GAEAsH,EAAA,oBAAAA,IACY9E,KAAAuX,SACDvX,KAAAsE,SACCtE,KAAAwX,SACAxX,KAAAyX,gBA8IZ,OA5IW3S,EAAArI,UAAAib,QAAP,WACI,OAAO1X,KAAKuX,OAGhB/a,OAAA6B,eAAWyG,EAAArI,UAAA,QAAA+B,IAAX,WAAoB,OAAOwB,KAAKsE,MAAMjI,wCAE/ByI,EAAArI,UAAAkb,KAAP,SAAYC,GACR5X,KAAKuX,SACAvX,KAAK6X,SAASD,IACf5X,KAAKsE,MAAM/H,KAAKqb,IAIjB9S,EAAArI,UAAAob,SAAP,SAAgBC,GACZ,OAAO9X,KAAKsE,MAAMyT,SAASD,IAGxBhT,EAAArI,UAAAwI,aAAP,SAAoB6S,EAAaE,EAAiCC,kBAAA,GAC9D,IAAI3T,EAAQtE,KAAKkY,MACbvQ,EAAUlI,EAAAqM,MAAMxH,EAAO,SAACqT,GAAY,OAAAK,EAAQF,EAAUH,KAC1D,OAAIhQ,GAAWqQ,EAAQrQ,EAASmQ,GAAYG,EACjCtQ,EAEJmQ,GAGJhT,EAAArI,UAAA+I,KAAP,SAAY0Q,EAAQiC,GAChBnY,KAAK2X,KAAKzB,GACVlW,KAAK2X,KAAKQ,GAEV,IAAI1a,EAAIuC,KAAKoY,QAAQlC,GAAMjY,EAAI+B,KAAKoY,QAAQD,GAC5CnY,KAAKwX,MAAM/Z,GAAKuC,KAAKwX,MAAM/Z,OAC3BuC,KAAKwX,MAAM/Z,GAAGlB,KAAK0B,GAEnB+B,KAAKyX,aAAaxZ,GAAK+B,KAAKyX,aAAaxZ,OACzC+B,KAAKyX,aAAaxZ,GAAG1B,KAAKkB,IAGvBqH,EAAArI,UAAA4b,MAAP,SAAaC,GAAb,IAAAhY,EAAAN,KACGsY,EAAWC,WAAWhV,QAAQ,SAAC6B,OAACyB,EAAAzB,EAAA,GAAE8H,EAAA9H,EAAA,GAAO,OAAA9E,EAAKkF,KAAKqB,EAAEqG,MAGjDpI,EAAArI,UAAA8b,SAAP,WAEI,IADA,IAAIC,KACarT,EAAA,EAAAC,EAAApF,KAAKsE,MAALa,EAAAC,EAAA/I,OAAA8I,IAAY,CAAxB,IAAIwS,EAAIvS,EAAAD,GACLoR,EAAQvW,KAAKoY,QAAQT,GACzB,GAAI3X,KAAKwX,MAAMjB,GACX,IAAuB,IAAAkC,EAAA,EAAAC,EAAA1Y,KAAKwX,MAAMjB,GAAXkC,EAAAC,EAAArc,OAAAoc,IAAmB,CAArC,IAAIE,EAAUD,EAAAD,GACXG,EAAY5Y,KAAKsE,MAAMqU,GACtBH,EAAST,UAAUa,EAAWjB,KAC/Ba,EAASjc,MAAMob,EAAMiB,KAKrC,OAAOJ,GAGJ1T,EAAArI,UAAAoc,SAAP,SAAgBf,GAAhB,IAAAxX,EAAAN,KACQuW,EAAQvW,KAAKoY,QAAQN,GAEzB,OADa9X,KAAK8Y,gBAAgBvC,GACpBjP,IAAI,SAAC3I,GAAM,OAAA2B,EAAKgE,MAAM3F,MAGhCmG,EAAArI,UAAAqc,gBAAR,SAAwBC,GACpB,IAAIC,EAAKhZ,KAAKwX,MAAMuB,OAChBE,EAAQjZ,KAAKyX,aAAasB,OAE9B,OADiBC,EAAEjM,OAAKkM,IAIrBnU,EAAArI,UAAAyb,IAAP,SAAWgB,EAAaC,GAAxB,IAAA7Y,EAAAN,cAAWkZ,MAAA,eAAaC,UACpB,IAAIC,EAASF,EAAOlZ,KAAKoY,QAAQc,GAAQ,EACzC,OAAOlZ,KAAKqZ,SAASD,GAAQ9R,IAAI,SAAA3I,GAAK,OAAA2B,EAAKgE,MAAM3F,MAG7CmG,EAAArI,UAAA4c,SAAR,SAAiBC,EAAoBH,GAArC,IAAA7Y,EAAAN,KASI,gBATasZ,MAAA,YAAoBH,UACjCA,EAAQ5c,KAAK+c,GACEtZ,KAAK8Y,gBAAgBQ,GAC3B/V,QAAQ,SAACgW,GACTJ,EAAQpB,SAASwB,IAClBjZ,EAAK+Y,SAASE,EAAYJ,KAI3BA,GAGJrU,EAAArI,UAAA+c,IAAP,SAAWN,EAAaO,GAAxB,IAAAnZ,EAAAN,cAAWkZ,MAAA,eAAaO,MAAA,WAAyC,WAC7D,IAAIL,EAASF,EAAOlZ,KAAKoY,QAAQc,GAAQ,EACzC,OAAOlZ,KAAK0Z,SAASN,EAAQK,GAAInS,IAAI,SAAA3I,GAAK,OAAA2B,EAAKgE,MAAM3F,MAGjDmG,EAAArI,UAAAid,SAAR,SAAiBJ,EAAuBG,YAAvBH,MAAA,eAAuBG,MAAA,WAA8C,WAClF,IAAIE,KACAR,KAEJ,IADAA,EAAQ5c,KAAK+c,GACNH,EAAQ9c,OAAS2D,KAAKsE,MAAMjI,QAAQ,CACvC,IAAwB,IAAA8I,EAAA,EAAAyU,EAAAT,EAAAhU,EAAAyU,EAAAvd,OAAA8I,IAAS,CAE7B,IAFC,IAAI0U,EAAWD,EAAAzU,GAESC,EAAA,EAAA0U,EADL9Z,KAAK8Y,gBAAgBe,GAChBzU,EAAA0U,EAAAzd,OAAA+I,IAAK,CAAzB,IAAI2U,EAAYD,EAAA1U,GACjB,IAAK+T,EAAQpB,SAASgC,GAAe,CACjC,IAAKN,EAAGI,EAAaE,GAAe,CAChCJ,KACA,MAEJR,EAAQ5c,KAAKwd,IAGrB,GAAIJ,EAAM,MAEd,GAAIA,EAAM,MAEd,OAAOR,GAGJrU,EAAArI,UAAAud,aAAP,SAAoB9D,EAAQiC,EAAQ8B,GAApC,IAAA3Z,EAAAN,cAAoCia,MAAA,KAChC,IAAIC,KACAC,EAAWna,KAAKoY,QAAQD,GAC5BnY,KAAKwZ,IAAItD,EAAK,SAACkE,EAAMC,GAEjB,OADAH,EAASG,GAAQD,EACVC,IAASF,IAMpB,IAJA,IAAIG,KACAD,EAAOF,EACPI,EAAQ,EACRC,EAAWxa,KAAKoY,QAAQlC,IACpBoE,EAAKvC,SAASyC,IAAaD,EAAQN,GACvCK,EAAK/d,KAAK8d,GACVA,EAAOH,EAASG,GAChBE,GAAS,EAGb,OADgBD,EAAKhT,IAAI,SAAA3I,GAAK,OAAA2B,EAAKgE,MAAM3F,KACxB8b,WAGb3V,EAAArI,UAAA2b,QAAR,SAAgBT,GACZ,OAAO3X,KAAKsE,MAAM8T,QAAQT,IAGlC7S,EAlJA,GAAalH,EAAAkH,uaCFb,IAAAvF,EAAA/B,EAAA,GAEAkd,EAAAld,EAAA,IAEAmd,EAAA,SAAAxa,GAIE,SAAAwa,EAAmBC,GAAnB,IAAAta,EACEH,EAAAxD,KAAAqD,MACES,MAAO,IACPC,OAAQ,IACRma,YAAatb,EAAAub,YAAYC,WACzBC,gBAAiBJ,EAAMK,YACvBjb,YANeM,EAAAsa,UAerB,OAnB0B9X,EAAA6X,EAAAxa,GAYjBwa,EAAAle,UAAAye,MAAP,WACE,IAAIC,EAAS,IAAI5b,EAAA6b,OACjB,IAAK,IAAIC,KAAOX,EAAAY,UACdH,EAAOI,YAAYb,EAAAY,UAAUD,IAE/B,OAAOlb,EAAA1D,UAAMye,MAAKve,KAAAqD,KAACmb,IAfdR,EAAAa,aAAuB,IAiBhCb,EAnBA,CAA0Bpb,EAAAkc,QAAb7d,EAAA+c,saCJb,IAAA/a,EAAApC,EAAA,GACA0M,EAAA1M,EAAA,GACA+B,EAAA/B,EAAA,GAGAke,EAAA,SAAAvb,GAAA,SAAAub,mDAcA,OAdiC5Y,EAAA4Y,EAAAvb,GAE7Bub,EAAAjf,UAAAkI,aAAA,WACI,IAAIgX,EAAI3b,KAAKuE,WAAW,EACpBhE,EAAIP,KAAKF,IAAIS,EAAIob,EACjBnb,EAAIR,KAAKF,IAAIU,EAAIR,KAAKwE,YAAc,GAOxC,OALI,IAAIjF,EAAAkC,OAAOlB,EAAIob,EAAE,EAAGnb,GAEpB,IAAIjB,EAAAkC,OAAOlB,EAAIob,EAAE,EAAGnb,IAGd8G,IAAI,SAAArJ,GAAK,WAAIiM,EAAArK,YAAY5B,EAAG2B,EAAAyJ,WAAWO,UAEzD8R,EAdA,CAFAle,EAAA,GAEiCgN,UAApB5M,EAAA8d,6aCLb,IAAAE,EAAApe,EAAA,GACA+B,EAAA/B,EAAA,GACA0M,EAAA1M,EAAA,GACAoC,EAAApC,EAAA,GAEAqe,EAAA,SAAA1b,GAAA,SAAA0b,mDAcA,OAdkC/Y,EAAA+Y,EAAA1b,GAE9B0b,EAAApf,UAAAkI,aAAA,WACI,IAAIgX,EAAI3b,KAAKuE,WAAW,EACpBhE,EAAIP,KAAKF,IAAIS,EAAIob,EACjBnb,EAAIR,KAAKF,IAAIU,EAAIR,KAAKwE,YAAcxE,KAAK8b,YAAclc,EAAAK,qBAAqBL,EAAAyJ,WAAWQ,MAAM,EAOjG,OALI,IAAItK,EAAAkC,OAAOlB,EAAIob,EAAE,EAAGnb,GAEpB,IAAIjB,EAAAkC,OAAOlB,EAAIob,EAAE,EAAGnb,IAGd8G,IAAI,SAAArJ,GAAK,WAAIiM,EAAArK,YAAY5B,EAAG2B,EAAAyJ,WAAWQ,SAEzDgS,EAdA,CAAkCD,EAAAtR,gBAArB1M,EAAAie,8aCLb,IAAAD,EAAApe,EAAA,GACA+B,EAAA/B,EAAA,GACA0M,EAAA1M,EAAA,GACAoC,EAAApC,EAAA,GAEAue,EAAA,SAAA5b,GAAA,SAAA4b,mDAcA,OAdmCjZ,EAAAiZ,EAAA5b,GAE/B4b,EAAAtf,UAAAkI,aAAA,WACI,IAAIgX,EAAI3b,KAAKuE,WAAW,EACpBhE,EAAIP,KAAKF,IAAIS,EAAIob,EACjBnb,EAAIR,KAAKF,IAAIU,EAAIR,KAAKwE,YAAcxE,KAAK8b,YAAclc,EAAAK,qBAAqBL,EAAAyJ,WAAWO,OAAO,EAOlG,OALI,IAAIrK,EAAAkC,OAAOlB,EAAIob,EAAE,EAAGnb,GAEpB,IAAIjB,EAAAkC,OAAOlB,EAAIob,EAAE,EAAGnb,IAGd8G,IAAI,SAAArJ,GAAK,WAAIiM,EAAArK,YAAY5B,EAAG2B,EAAAyJ,WAAWO,UAEzDmS,EAdA,CAAmCH,EAAAtR,gBAAtB1M,EAAAme,+aCLb,IAAAH,EAAApe,EAAA,GACAoC,EAAApC,EAAA,GACA0M,EAAA1M,EAAA,GACA+B,EAAA/B,EAAA,GAEAwe,EAAA,SAAA7b,GAAA,SAAA6b,mDAcA,OAdoClZ,EAAAkZ,EAAA7b,GAEhC6b,EAAAvf,UAAAkI,aAAA,WACI,IAAIgX,EAAI3b,KAAKuE,WAAW,EACpBhE,EAAIP,KAAKF,IAAIS,EAAIob,EACjBnb,EAAIR,KAAKF,IAAIU,EAAIR,KAAKwE,YAAcxE,KAAK8b,YAAc,GAO3D,OALI,IAAIvc,EAAAkC,OAAOlB,EAAIob,EAAE,EAAGnb,GAEpB,IAAIjB,EAAAkC,OAAOlB,EAAIob,EAAE,EAAGnb,IAGd8G,IAAI,SAAArJ,GAAK,WAAIiM,EAAArK,YAAY5B,EAAG2B,EAAAyJ,WAAWM,WAEzDqS,EAdA,CAAoCJ,EAAAtR,gBAAvB1M,EAAAoe,gbCLb,IAAAJ,EAAApe,EAAA,GACA+B,EAAA/B,EAAA,GACA0M,EAAA1M,EAAA,GACAoC,EAAApC,EAAA,GAEAye,EAAA,SAAA9b,GAAA,SAAA8b,mDAcA,OAdiCnZ,EAAAmZ,EAAA9b,GAE7B8b,EAAAxf,UAAAkI,aAAA,WACI,IAAIgX,EAAI3b,KAAKuE,WAAW,EACpBhE,EAAIP,KAAKF,IAAIS,EAAIob,EACjBnb,EAAIR,KAAKF,IAAIU,EAAIR,KAAKwE,YAAc,GAOxC,OALI,IAAIjF,EAAAkC,OAAOlB,EAAIob,EAAE,EAAGnb,GAEpB,IAAIjB,EAAAkC,OAAOlB,EAAIob,EAAE,EAAGnb,IAGd8G,IAAI,SAAArJ,GAAK,WAAIiM,EAAArK,YAAY5B,EAAG2B,EAAAyJ,WAAWM,WAEzDsS,EAdA,CAAiCL,EAAApR,UAApB5M,EAAAqe,6aCLb,IAAAL,EAAApe,EAAA,GACA+B,EAAA/B,EAAA,GACA0M,EAAA1M,EAAA,GACAoC,EAAApC,EAAA,GAEA0e,EAAA,SAAA/b,GAAA,SAAA+b,mDAaA,OAbwCpZ,EAAAoZ,EAAA/b,GACpC+b,EAAAzf,UAAAkI,aAAA,WACI,IAAIgX,EAAI3b,KAAKuE,WAAW,EACpBhE,EAAIP,KAAKF,IAAIS,EAAIob,EACjBnb,EAAIR,KAAKF,IAAIU,EAAIR,KAAKwE,YAAcxE,KAAK8b,YAAc,GAO3D,OALI,IAAIvc,EAAAkC,OAAOlB,EAAIob,EAAI,EAAGnb,GACtB,IAAIjB,EAAAkC,OAAOlB,EAAGC,GACd,IAAIjB,EAAAkC,OAAOlB,EAAIob,EAAI,EAAGnb,IAGhB8G,IAAI,SAAArJ,GAAK,WAAIiM,EAAArK,YAAY5B,EAAG2B,EAAAyJ,WAAWK,UAEzDwS,EAbA,CAAwCN,EAAAtR,gBAA3B1M,EAAAse,obCLb,IAAA3c,EAAA/B,EAAA,GACA+Q,EAAA/Q,EAAA,GACA2e,EAAA,SAAAhc,GAGI,SAAAgc,EAAY5b,EAAWC,EAAW4b,EAAwC1d,GAA1E,IAAA4B,EACIH,EAAAxD,KAAAqD,KAAMO,EAAGC,EAAG,GAAI,KAAGR,KADmDM,EAAA5B,QAEtE,IAAI2d,EAAO,IAAI9c,EAAA6J,MAAM7I,EAAGC,EAAG,GAAI,GAAI+N,EAAA4E,WAAWiJ,WAC9C9b,EAAKgc,IAAID,GACT/b,EAAKic,MAAQ,IAAIhd,EAAAiD,MAAM,IAAI9D,EAAS6B,EAAI,GAAIC,EAAI,EAAG,aACnDF,EAAKic,MAAM3Z,SAAW,GACtBtC,EAAKic,MAAM5b,MAAQpB,EAAAkD,MAAMC,MACzBpC,EAAKgc,IAAIhc,EAAKic,SAMtB,OAhBuCzZ,EAAAqZ,EAAAhc,GAYnCgc,EAAA1f,UAAA+f,OAAA,SAAOC,GACHzc,KAAKtB,OAAS+d,EACdzc,KAAKuc,MAAMvZ,KAAO,IAAIhD,KAAKtB,OAEnCyd,EAhBA,CAAuC5c,EAAA6J,OAA1BxL,EAAAue,mbCFb,IAAA5c,EAAA/B,EAAA,GACA+Q,EAAA/Q,EAAA,GACAkf,EAAAlf,EAAA,IACAmf,EAAA,SAAAxc,GAkBI,SAAAwc,EAAYpc,EAAWC,SAAvBF,EACIH,EAAAxD,KAAAqD,KAAMO,EAAGC,EAAG,GAAI,GAAIjB,EAAAkD,MAAMma,SAAS/Z,OAAO,MAAK7C,KAJpB,OAd/BM,EAAAuc,UAAOzX,MAIEmJ,EAAAsC,cAAcQ,MAAO,KACtBjM,EAACmJ,EAAAsC,cAAcC,YAAa,KAC5B1L,EAACmJ,EAAAsC,cAAcoB,KAAM,KAGrB7M,EAACmJ,EAAAsC,cAAcS,MAAO,KACtBlM,EAACmJ,EAAAsC,cAAcqB,SAAU,KACzB9M,EAACmJ,EAAAsC,cAAcE,MAAO,KAGtB3L,EAACmJ,EAAAsC,cAAcoC,OAAQ,KAAAxU,IAMV8P,EAAAsC,cAAcS,KAAM/C,EAAAsC,cAAcE,KAAMxC,EAAAsC,cAAcqB,SAC7D3O,QAAQ,SAAC0T,EAAUV,GACzB,IAAcuG,EAAmB,GAARvG,EAHT,GAIZwG,EAAQ,IAAIL,EAAAP,mBAJV,EAIgCW,EAAI7F,EAAU,GACpD3W,EAAKgc,IAAIS,GACTzc,EAAKuc,QAAQ5F,GAAY8F,MAWrC,OArCmCja,EAAA6Z,EAAAxc,GA8B/Bwc,EAAAlgB,UAAAugB,UAAA,SAAU/F,GACNhV,QAAQC,IAAI,aAAe+U,SAAQA,IACnC,IAAItR,EAAM3F,KAAK6c,QAAQ5F,GACnBtR,GACAA,EAAI6W,OAAO,IAGvBG,EArCA,CAAmCpd,EAAA6J,OAAtBxL,EAAA+e,+aCHb,IAAApd,EAAA/B,EAAA,GACAkY,EAAAlY,EAAA,GAGAyf,EAAAzf,EAAA,IACAmW,EAAAnW,EAAA,GACAiC,EAAAjC,EAAA,GAGA0f,EAAA,SAAA/c,GA4BI,SAAA+c,EAAoBC,EAAsBC,EAAmCC,YAAnCD,MAAA,eAAmCC,MAAA,MAA7E,IAAA/c,EACIH,EAAAxD,KAAAqD,KAAM,EAAG,EAAGmd,EAAKG,YAAaH,EAAKI,eAAavd,YADhCM,EAAA6c,OAAsB7c,EAAA8c,mBAAmC9c,EAAA+c,kBA3BrE/c,EAAAkd,wBAmBRld,EAAAmd,0BACAnd,EAAAod,mBAIApd,EAAAqd,wBACArd,EAAAsd,iBAKItd,EAAKud,aAAe,IAAIte,EAAAiD,MAAM,KAAM,GAAI2a,EAAKI,aAAe,GAAI,WAChEjd,EAAKud,aAAajb,SAAW,GAC7BtC,EAAKud,aAAald,MAAQpB,EAAAkD,MAAMC,MAChCpC,EAAKgc,IAAIhc,EAAKud,cAEdvd,EAAKwd,sBAAsBV,GAC3B9c,EAAKyd,oBAAoBV,GAEzB/c,EAAK0d,UAAY,IAAIf,EAAAN,cAAc,GAAI,IACvCrc,EAAKgc,IAAIhc,EAAK0d,aA6JtB,OArMyBlb,EAAAoa,EAAA/c,GA8CrB+c,EAAAzgB,UAAAwhB,WAAA,SAAWjb,GAAgBhD,KAAK6d,aAAa7a,KAAOA,GAEpDka,EAAAzgB,UAAAwG,KAAA,SAAKC,EAA+BC,GAGhC,GAFAhD,EAAA1D,UAAMwG,KAAItG,KAAAqD,KAACkD,EAAKC,GAEZnD,KAAKke,yBAA0B,CAC/B,IAAIC,EAAOjb,EAAIkb,OAAOC,WAClBC,EAAMpb,EAAIkb,OAAOG,UACrBve,KAAKke,yBAAyBM,MAAML,KAAUA,EAAO,GAAE,KACvDne,KAAKke,yBAAyBM,MAAMC,IAASH,EAAM,IAAG,KAE1D,GAAIte,KAAK0e,uBAAwB,CACzBP,EAAOjb,EAAIkb,OAAOC,WAAtB,IACIM,EAAMzb,EAAIkb,OAAOG,UACrBve,KAAK0e,uBAAuBF,MAAML,KAAUA,EAAO,GAAE,KACrDne,KAAK0e,uBAAuBF,MAAMC,IAASE,EAAM,IAAG,OAI5DzB,EAAAzgB,UAAAmiB,iBAAA,SAAiB3H,GACbjX,KAAKge,UAAUhB,UAAU/F,IAI7BiG,EAAAzgB,UAAAoiB,eAAA,SAAe1Y,GACXnG,KAAK8e,sBAAsB3Y,GAC3BnG,KAAK+e,qBAAqB5Y,IAGtB+W,EAAAzgB,UAAAqiB,sBAAR,SAA8B3Y,GAA9B,IAAA7F,EAAAN,KACIA,KAAKyd,uBAAyBP,EAAI8B,qBAC9Bhf,KAAKwd,uBACLxd,KAAK0d,gBACDR,EAAI8B,qBAAqBpd,OAAO,SAACxB,GAAc,OAAA+F,EAAOC,UAAUiR,KAAK,SAAAnK,GAAK,OAAAA,EAAE9M,qBAAqBA,MAErGJ,KAAKyd,uBAAyBzd,KAAKyd,uBAAuB7b,OAAO,SAACxB,GAG9D,WAFYA,GAC0BkQ,QACvB2O,MAAM,SAACC,GAElB,OADY5e,EAAKod,gBAAgBrG,KAAK,SAAC5Z,GAA0B,OAAAA,IAAMyhB,SAQnFlf,KAAKke,yBAAyBiB,cAAcC,YAAYpf,KAAKke,0BAC7Dle,KAAK8d,sBAAsB9d,KAAKod,mBAG5BF,EAAAzgB,UAAAsiB,qBAAR,SAA6B5Y,GAA7B,IAAA7F,EAAAN,KACQqf,EAAQlZ,EAAOC,UACfkZ,EAAoB7f,EAAAqN,WAAWuS,EAAM/X,IAAI,SAAA4F,GAAK,OAAAA,EAAE9M,UAAU2I,YAC1DzH,EAAU6E,EAAOoZ,iBAErBvf,KAAK4d,cAAgBV,EAAIsC,mBAAmB5d,OAAO,SAACoH,GAAY,OAAA1H,EAAQ+V,KAAK,SAAApZ,GAAK,OAAAA,EAAE+K,mBAAmBA,MACvGhJ,KAAK2d,qBAAuBT,EAAIsC,mBAAmB5d,OAAO,SAACoH,GAEvD,OADesW,EAAkBvH,SAAS/O,SAClBA,GAAWsH,QAAQ2O,MAAM,SAACC,GAC9C,OAAO5e,EAAKsd,cAAcvG,KAAK,SAACtZ,GAAwB,OAAAA,IAAMmhB,QAItElf,KAAK0e,uBAAuBS,cAAcC,YAAYpf,KAAK0e,wBAC3D1e,KAAK+d,oBAAoB/d,KAAKqd,kBAIxBH,EAAAzgB,UAAAqhB,sBAAV,SAAgCpV,GAAhC,IAAApI,EAAAN,KACIA,KAAKke,yBAA2BuB,SAASC,cAAc,OACvD1f,KAAKke,yBAAyBM,MAAMlH,SAAW,WAC/CtX,KAAKke,yBAAyBM,MAAMmB,OAAS,kBAC7CF,SAASG,KAAKC,YAAY7f,KAAKke,0BAE/Ble,KAAKyd,uBACJnW,IAAI,SAAAlH,GAAa,WAAIA,IACrBmD,QAAQ,SAACnD,GACN,IAAI+I,EAAQ/I,EAAUlC,KACjBoC,EAAKod,gBAAgBpW,IAAI,SAAA7J,GAAK,WAAIA,GAAIS,OAAM6Z,SAAS3X,EAAUlC,QAChEiL,GAAS,MAEb,IAAIxC,EAAMvG,EAAU2T,cAChB+L,EAAiBxf,EAAKyf,cAAc5W,EAAOxC,GAC/CrG,EAAK4d,yBAAyB2B,YAC1BC,GAEApX,IACAoX,EAAeE,QAAU,WAAQtX,EAAGtI,QAKtC8c,EAAAzgB,UAAAshB,oBAAV,SAA8BrV,GAA9B,IAAApI,EAAAN,KACIA,KAAK0e,uBAAyBe,SAASC,cAAc,OAErD1f,KAAK0e,uBAAuBF,MAAMlH,SAAW,WAC7CtX,KAAK0e,uBAAuBF,MAAMmB,OAAS,kBAC3CF,SAASG,KAAKC,YAAY7f,KAAK0e,wBAG/B1e,KAAK2d,qBACArW,IAAI,SAAAsI,GAAW,WAAIA,IACnBqQ,KAAK,SAACpZ,EAAEqG,GAAM,OAAArG,EAAElG,MAAQuM,EAAEvM,OAAS,EAAI,IACvC4C,QAAQ,SAAAyF,GACL,IAAIG,EAAQH,EAAQ9K,KACfoC,EAAKsd,cAActW,IAAI,SAAAvJ,GAAK,WAAIA,GAAIG,OAAM6Z,SAAS/O,EAAQ9K,QAC5DiL,GAAS,MAEb,IAAIxC,EAAMqC,EAAQrI,MACduf,EAAM5f,EAAKyf,cAAc5W,EAAOxC,GACpCrG,EAAKoe,uBAAuBmB,YAAYK,GACpCxX,IACAwX,EAAIF,QAAU,WAAQtX,EAAGM,QAOjCkU,EAAAzgB,UAAAsjB,cAAR,SAAsB5W,EAAexI,GACjC,IAAIwf,EAAKxf,EAAMkC,OAAO,IAAKwQ,WAAW,IAAKrP,QAC3Cmc,EAAGtZ,EAAI,GACP,IAAIuZ,EAAKzf,EAAM6F,QAAQ,IAAK6M,WAAW,IAAKrP,QACxCqc,EAAgBZ,SAASC,cAAc,UAyB3C,OAvBAW,EAAcC,YAAcnX,EAE5BkX,EAAc7B,MAAM+B,QAAU,QAC9BF,EAAc7B,MAAM5b,SAAW,MAE/Byd,EAAc7B,MAAMgC,WAAa,YACjCH,EAAc7B,MAAMiC,WAAa,MACjCJ,EAAc7B,MAAMkC,QAAU,MAC9BL,EAAc7B,MAAM/d,MAAQ,QAC5B4f,EAAc7B,MAAMmC,cAAgB,YACpCN,EAAc7B,MAAMmB,OAAS,mCAE7BU,EAAc7B,MAAMoC,WAAaT,EAAG1S,SACpC4S,EAAc7B,MAAM7d,MAAQyf,EAAG3S,SAC/B4S,EAAcQ,YAAc,WACxBR,EAAc7B,MAAMoC,WAAaT,EAAGW,SAAS,IAAKta,QAAQ,KAAMiH,SAChE4S,EAAc7B,MAAM7d,MAAQyf,EAAG5Z,QAAQ,IAAKiH,UAEhD4S,EAAcU,aAAe,WACzBV,EAAc7B,MAAMoC,WAAaT,EAAG1S,SACpC4S,EAAc7B,MAAM7d,MAAQyf,EAAG3S,UAG5B4S,GAzLJnD,EAAA8B,sBAEHtJ,EAAApB,YACAoB,EAAAzB,SACAyB,EAAAxB,eAEGwB,EAAAN,eAOA8H,EAAAsC,mBAAqB7L,EAAAnB,YA8KhC0K,EArMA,CAAyB3d,EAAAyhB,SAAZpjB,EAAAsf,qaCTb,IAAAtB,EAAApe,EAAA,GACA+B,EAAA/B,EAAA,GAGA0N,EAAA,SAAA/K,GAAA,SAAA+K,IAAA,IAAA5K,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAAwb,YAAc,IAAA9O,EAWlB,OAZ8BlK,EAAAoI,EAAA/K,GAG1B+K,EAAAzO,UAAA6H,MAAA,WACI,IAAI/D,EAAIP,KAAKF,IAAIS,EAAIP,KAAKuE,WAAW,EACjC/D,EAAIR,KAAKF,IAAIU,EAAIR,KAAKwE,YAAcxE,KAAK8b,YAC7C,OACI,IAAIvc,EAAAkC,OAAOgD,KAAKC,MAAMnE,GAAIkE,KAAKC,MAAMlE,GAAG,KAKpD0K,EAZA,CAA8B0Q,EAAAtR,gBAAjB1M,EAAAsN,0aCJb,IAAA0Q,EAAApe,EAAA,GACAgC,EAAAhC,EAAA,GAIAwN,EAAA,SAAA7K,GAAA,SAAA6K,IAAA,IAAA1K,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YAEIM,EAAA2gB,WAAmB,KAAAjU,EAiCvB,OAnCgClK,EAAAkI,EAAA7K,GAG5B6K,EAAAvO,UAAAqH,gBAAA,SAAgBC,GAMb,OALI/D,KAAKkhB,gBAGLnd,EAAOxD,EAAIP,KAAKF,IAAIS,GAEjBwD,GAGViH,EAAAvO,UAAAwH,QAAA,SAAQF,GACJ,GAAI/D,KAAKkhB,cAAe,CACpB,IAAIpZ,EAAU9H,KAAK6H,YAAY9D,GAC3B+D,IACA9H,KAAKgB,OAAS8G,EAAQ9G,OAElB8G,IACA9H,KAAKihB,WAAanZ,SAI1B,GAAI9H,KAAKgB,SAAWxB,EAAAyB,YAAYiN,GAAI,CAChC,IAAIiT,EAAYnhB,KAAKihB,WAAWnhB,IAAIU,EAAIR,KAAKK,OAAO+gB,SAAW,GAE3DC,EAAI5c,KAAKsH,IAAIoV,EAAW1c,KAAKwH,IAAI,IAAKjM,KAAKihB,WAAWnhB,IAAIU,EAAIuD,EAAOvD,IACzER,KAAKshB,UAAWD,EAAE,GAAI,IACtBrhB,KAAKF,IAAIU,EAAIR,KAAKihB,WAAWnhB,IAAIU,EAAIR,KAAKwE,iBAEtC6c,EAAI5c,KAAKwH,IAAI,IAAKlI,EAAOvD,EAAIR,KAAKihB,WAAWnhB,IAAIU,GACrDR,KAAKshB,UAAWD,EAAE,GAAI,KAItCrW,EAnCA,CAAgC4Q,EAAAhR,YAAnBhN,EAAAoN,4aCLb,IAAA4Q,EAAApe,EAAA,GACA+B,EAAA/B,EAAA,GACA0M,EAAA1M,EAAA,GACAoC,EAAApC,EAAA,GAEAsN,EAAA,SAAA3K,GAAA,SAAA2K,mDAoCA,OApCkChI,EAAAgI,EAAA3K,GAE9B2K,EAAArO,UAAAkI,aAAA,WACI,IAAIgX,EAAI,EAAE3b,KAAKuE,WAAW,EACtBhE,EAAIP,KAAKF,IAAIS,EAAIob,EACjBnb,EAAIR,KAAKF,IAAIU,EAAIR,KAAKwE,YAAY,EAOtC,OALI,IAAIjF,EAAAkC,OAAOlB,EAAGC,EAAE,KAChB,IAAIjB,EAAAkC,OAAOlB,EAAGC,GACd,IAAIjB,EAAAkC,OAAOlB,EAAGC,EAAE,MAGV8G,IAAI,SAAArJ,GAAK,WAAIiM,EAAArK,YAAY5B,EAAG2B,EAAAyJ,WAAWQ,SAGrDiB,EAAArO,UAAAwG,KAAA,SAAKC,EAA+BC,GAGhCnD,KAAKuhB,UAAUre,EAAKlD,KAAKF,IAAIS,EAAGP,KAAKF,IAAIU,GACzCR,KAAKyI,aAAalF,QAAQ,SAAAC,GAAU,OAAAA,EAAOP,KAAKC,EAAKC,MAIzD2H,EAAArO,UAAA8kB,UAAA,SAAUre,EAAKse,EAAMC,GACjB,IAAIJ,EAAIrhB,KAAKwE,YACTmX,EAAI3b,KAAKuE,WACbrB,EAAImK,YACJnK,EAAIoK,OAAO,EAAIkU,EAAMH,EAAII,GAEzBve,EAAIwe,cAAc,EAAIF,EAAMH,EAAI,IAAMI,EAAM,IAAMD,EAAM,GAAKC,EAAM9F,EAAI,GAAK6F,EAAM,EAAIC,GACtFve,EAAIwe,cAAc/F,EAAI,GAAK6F,EAAM,EAAIC,EAAM9F,EAAI,EAAI6F,EAAM,GAAKC,EAAM9F,EAAI,GAAK6F,EAAM,GAAKC,GACxFve,EAAIwe,cAAc/F,EAAI,EAAI6F,EAAM,GAAKC,EAAM9F,EAAI6F,EAAOH,EAAE,GAAMI,EAAM9F,EAAI6F,EAAMH,EAAII,GAClFve,EAAIqK,OAAO,EAAIiU,EAAMH,EAAII,GACzBve,EAAI4K,UAAY9N,KAAKyG,YAAYgH,SACjCvK,EAAIoJ,QAEZxB,EApCA,CAAkC8Q,EAAApR,UAArB5M,EAAAkN,8aCLb,IAAAvL,EAAA/B,EAAA,GACA0M,EAAA1M,EAAA,GAEAiC,EAAAjC,EAAA,GAEAgC,EAAAhC,EAAA,GACAkC,EAAAlC,EAAA,IAEAoN,EAAA,SAAAzK,GAAA,SAAAyK,IAAA,IAAAtK,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAA4gB,iBACA5gB,EAAAa,WAAU6L,EAiJd,OAnJgClK,EAAA8H,EAAAzK,GAK5ByK,EAAAnO,UAAAiK,UAAA,WAAc,OAAO1G,KAAKW,MAAMkC,OAAO,KAEvC+H,EAAAnO,UAAAwG,KAAA,SAAKC,EAAKC,GACN,IAAIwe,EAAO3hB,KAAKqD,OAChB5D,EAAA2D,SAASF,EAAKye,EAAM,EAAG3hB,KAAKW,MAAMkC,OAAO,KAGzC8e,EAAKphB,EAAIohB,EAAKphB,EAAIP,KAAKuE,WADf,EAERod,EAAKlhB,OAAgBT,KAAKuE,WAFlB,EAEM,EACd9E,EAAA2D,SAASF,EAAKye,EAAM,EAAG3hB,KAAKW,MAAMkC,OAAO,KACzC1C,EAAA1D,UAAMwG,KAAItG,KAAAqD,KAACkD,EAAKC,IAGpByH,EAAAnO,UAAA6H,MAAA,WACI,IAAI/D,EAAIP,KAAKF,IAAIS,EAAIP,KAAKuE,WAAW,EACjC/D,EAAIR,KAAKF,IAAIU,EACjB,OACI,IAAIjB,EAAAkC,OAAOgD,KAAKC,MAAMnE,GAAIC,KAIlCoK,EAAAnO,UAAAmI,MAAA,SAAMC,kBAAA,IAAgCnF,EAAAoF,OAClC,IAAIC,EAAIF,EAEJ+c,EAAY5hB,KAAKuE,WAAW,EAC5BhE,EAAIP,KAAKF,IAAIS,EAAIqhB,EAGjB1I,EAAOnU,EAAEE,aAAajF,KAAKsE,QAAQ,GAAI7E,EAAAyF,iBACvCsP,EAAQzP,EAAEE,aAAa,IAAI1F,EAAAkC,OAAOlB,EAAEP,KAAK6hB,cAAc,IAAKpiB,EAAAyF,iBAChEH,EAAES,KAAK0T,EAAK1E,GAEZ,IAAIsN,EAAU9hB,KAAK6hB,cAEnBpiB,EAAAwN,SAAS6U,EAAS,GAAGve,QAAQ,SAAC6B,OAAC2c,EAAA3c,EAAA,GAAG4c,EAAA5c,EAAA,GAC1BqZ,EAAM1Z,EAAEE,aAAa,IAAI1F,EAAAkC,OAAOlB,EAAEwhB,GAAKtiB,EAAAyF,iBACvC+c,EAAMld,EAAEE,aAAa,IAAI1F,EAAAkC,OAAOlB,EAAEyhB,GAAKviB,EAAAyF,iBAC3CH,EAAES,KAAKiZ,EAAKwD,KAGhB,IAAIA,EAAMld,EAAEE,aAAa,IAAI1F,EAAAkC,OAAOlB,EAAGP,KAAKF,IAAIU,EAAIR,KAAKwE,aAAc/E,EAAAyF,iBACnEgd,EAAMnd,EAAEE,aAAa,IAAI1F,EAAAkC,OAAOlB,EAAGuhB,EAAQA,EAAQzlB,OAAO,IAAKoD,EAAAyF,iBACnEH,EAAES,KAAKyc,EAAIC,GAEXJ,EAAQve,QAAQ,SAAAye,GACZ,IAAIC,EAAMld,EAAEE,aAAa,IAAI1F,EAAAkC,OAAOlB,EAAEyhB,GAAKviB,EAAAyF,iBAEvCiZ,EAAOpZ,EAAEE,aAAa,IAAI1F,EAAAkC,OAAOlB,EAAEqhB,EAAUI,GAAKviB,EAAAyF,iBACtDH,EAAES,KAAK2Y,EAAK8D,GAEZ,IAAIE,EAAQpd,EAAEE,aAAa,IAAI1F,EAAAkC,OAAOlB,EAAEqhB,EAAUI,GAAKviB,EAAAyF,iBACvDH,EAAES,KAAKyc,EAAIE,KAGf,IAAkB,IAAAhd,EAAA,EAAAC,EAAApF,KAAKoB,kBAAL+D,EAAAC,EAAA/I,OAAA8I,IAAwB,CAArC,IAAIE,EAAKD,EAAAD,GACNG,EAAOP,EAAEE,aAAaI,EAAME,WAAWzF,IAAKL,EAAAyF,iBAC5CO,EAAYV,EAAEE,aAAaI,EAAMf,QAAQ,GAAI7E,EAAAyF,iBACjDH,EAAES,KAAKC,EAAWH,GAClBP,EAAES,KAAKF,EAAMG,GAEbJ,EAAMT,MAAMG,GAGhB,OAAOA,GAGH6F,EAAAnO,UAAAolB,YAAR,WAII,IAHA,IACIO,EAAY3d,KAAKC,MAAO1E,KAAKwE,YADlB,IAEXsd,KACU3c,EAAA,EAAAC,EAAA3F,EAAA2M,MAAMgW,GAANjd,EAAAC,EAAA/I,OAAA8I,IAAkB,CAA3B,IAAIhJ,EAACiJ,EAAAD,GACN2c,EAAQvlB,KACJ,GAAKyD,KAAKF,IAAIU,EALP,GAKWrE,GAG1B,OAAO2lB,GAGXlX,EAAAnO,UAAA4H,MAAA,WACI,IAAIge,KAEJA,EAAS9lB,KACLyD,KAAKkI,UACDlI,KAAKF,IAAIS,EAAIP,KAAKuE,WAAW,EAC7BvE,KAAKF,IAAIU,EACThB,EAAAyB,YAAYiN,KAIpB,IAAc,IAAA/I,EAAA,EAAAC,EAAApF,KAAK6hB,cAAL1c,EAAAC,EAAA/I,OAAA8I,IAAoB,CAA7B,IAAI3E,EAAC4E,EAAAD,GACNkd,EAAS9lB,KACLyD,KAAKkI,UACDlI,KAAKF,IAAIS,EAAGC,EACZhB,EAAAyB,YAAYgN,OAIpBoU,EAAS9lB,KACLyD,KAAKkI,UACDlI,KAAKF,IAAIS,EAAIP,KAAKuE,WAClB/D,EACAhB,EAAAyB,YAAYC,QAYxB,OAPAmhB,EAAS9lB,KACLyD,KAAKkI,UACDlI,KAAKF,IAAIS,EAAIP,KAAKuE,WAAW,EAC7BvE,KAAKF,IAAIU,EAAIR,KAAKwE,YAClBhF,EAAAyB,YAAYkN,OAGbkU,GAGXzX,EAAAnO,UAAA0H,YAAA,SAAYJ,GACR,OAAI/D,KAAKkhB,gBACLlhB,KAAKkhB,kBAAgB,IAM7BtW,EAAAnO,UAAAqH,gBAAA,SAAgBC,GAOZ,OANI/D,KAAKkhB,cACLlhB,KAAK6H,YAAY9D,GAGjBA,EAAOvD,EAAIiE,KAAKwH,IAAIjM,KAAKK,OAAO+gB,SAAW,IAAKrd,EAAOvD,GAEpDuD,GAIX6G,EAAAnO,UAAAwH,QAAA,SAAQF,GACJ/D,KAAKF,IAAIU,EAAIR,KAAKK,OAAO+gB,SAAW,EAC/BphB,KAAKkhB,eACRlhB,KAAKshB,UAAUvd,EAAOvD,EAAIR,KAAKK,OAAO+gB,WAIhDxW,EAnJA,CAAgCV,EAAAhK,UAAnBtC,EAAAgN,4aCRb,IAAArL,EAAA/B,EAAA,GACA0M,EAAA1M,EAAA,GACAgC,EAAAhC,EAAA,GAEA8kB,EAAA9kB,EAAA,IACAoC,EAAApC,EAAA,GAEAkN,EAAA,SAAAvK,GAAA,SAAAuK,IAAA,IAAApK,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAAa,WAAU6L,EAsFd,OAvFwClK,EAAA4H,EAAAvK,GAGpCuK,EAAAjO,UAAAkI,aAAA,WACI,OAAO3E,KAAKsE,QAAQgD,IAAI,SAAA3I,GAEpB,OADAA,EAAE6B,GAAK,GACA,IAAI0J,EAAArK,YAAYlB,EAAGiB,EAAAyJ,WAAWM,WAI7Ce,EAAAjO,UAAAyH,eAAA,eAAA5D,EAAAN,KAEU+I,EAAA/I,KAAAI,UAAA2I,SACN,GAAIA,GAAYA,EAAS1M,OAAS,EAAG,CACjC,IAAIkmB,EAAU,IAAIxZ,EAAS,GAC3B/I,KAAK2E,eAAepB,QAAQ,SAAAif,GACxB,IAAIC,EAAY,IAAIH,EAAA3M,OAAO4M,EAASC,EAAMlL,UAC1ChX,EAAK8H,UAAUqa,OAS3B/X,EAAAjO,UAAA4H,MAAA,WACI,IAAIge,KACJA,EAAS9lB,KACLyD,KAAKkI,UACDlI,KAAKF,IAAIS,EAAIP,KAAKuE,WAAa,EAC/BvE,KAAKF,IAAIU,EAAIR,KAAKwE,YAClBhF,EAAAyB,YAAYkN,OAIpB,IAAIuU,EAAQ1iB,KAAKwE,YAiBjB,OAhBA6d,EAAS9lB,KACLyD,KAAKkI,UACDlI,KAAKF,IAAIS,EAAGP,KAAKF,IAAIU,EAAIkiB,EACzBljB,EAAAyB,YAAYgN,OAIpBoU,EAAS9lB,KACLyD,KAAKkI,UACDlI,KAAKF,IAAIS,EAAIP,KAAKuE,WAClBvE,KAAKF,IAAIU,EAAIkiB,EACbljB,EAAAyB,YAAYC,QAKbmhB,GAGX3X,EAAAjO,UAAAqH,gBAAA,SAAgBC,GAEZ,OADAA,EAAOvD,EAAIR,KAAKK,OAAO+gB,SAChBrd,GAGX2G,EAAAjO,UAAAwH,QAAA,SAAQF,GACJ/D,KAAKF,IAAMiE,EACX/D,KAAKF,IAAIU,GAAKR,KAAKwE,YAAc,GAMrCkG,EAAAjO,UAAAwG,KAAA,SAAKC,EAA+BC,GAChC,IAAIxC,EAAQX,KAAKyG,YAEjBvD,EAAI4K,UAAYnN,EAAM8M,SAEtBvK,EAAI6K,SAAS/N,KAAKF,IAAIS,EAAGP,KAAKF,IAAIU,EAAGR,KAAKuE,WAAYvE,KAAKwE,aAG3D,IACIme,EAAQ3iB,KAAKF,IAAIS,EAASP,KAAKuE,WAAa,EAAvB,EACrBqe,EAAQ5iB,KAAKF,IAAIU,EAFA,GAGrB0C,EAAI6K,SAAS4U,EAAOC,EAAO,EAHN,IAIrB1f,EAAI6K,SAAS4U,EAAOC,EAAO,GAAI,GAE/BziB,EAAA1D,UAAMwG,KAAItG,KAAAqD,KAACkD,EAAKC,IAGpBuH,EAAAjO,UAAAiK,UAAA,WAAc,OAAOnH,EAAAkD,MAAMC,OAC/BgI,EAvFA,CAAwCR,EAAAhK,UAA3BtC,EAAA8M,obCPb,IAAAnL,EAAA/B,EAAA,GACA0M,EAAA1M,EAAA,GACAgC,EAAAhC,EAAA,GACAoC,EAAApC,EAAA,GAEAgN,EAAA,SAAArK,GAAA,SAAAqK,IAAA,IAAAlK,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAAa,WACAb,EAAAS,aAAYiM,EA8DhB,OAhE8BlK,EAAA0H,EAAArK,GAI1BqK,EAAA/N,UAAA4H,MAAA,WACI,IAAIge,KACAK,EAAQ1iB,KAAKwE,YAkBjB,OAfA6d,EAAS9lB,KACLyD,KAAKkI,UACDlI,KAAKF,IAAIS,EAAGP,KAAKF,IAAIU,EAAIkiB,EACzBljB,EAAAyB,YAAYgN,OAIpBoU,EAAS9lB,KACLyD,KAAKkI,UACDlI,KAAKF,IAAIS,EAAIP,KAAKuE,WAClBvE,KAAKF,IAAIU,EAAIkiB,EACbljB,EAAAyB,YAAYC,QAIbmhB,GAGX7X,EAAA/N,UAAAwH,QAAA,SAAQF,GACJ/D,KAAK6H,YAAY9D,IAGrByG,EAAA/N,UAAAwG,KAAA,SAAKC,EAA+BC,GAChC,IAAIxC,EAAeX,KAAKyG,YAExBvD,EAAImK,YACJnK,EAAI2f,IACA7iB,KAAKF,IAAIS,EAAIP,KAAKuE,WAAW,EAC7BvE,KAAKF,IAAIU,EAAIR,KAAKwE,YAClBxE,KAAKwE,YAAY,IACjB,EACAC,KAAKqe,OAGT5f,EAAI6f,YACJ7f,EAAI4K,UAAYnN,EAAM8M,SACtBvK,EAAIoJ,OAEJnM,EAAA1D,UAAMwG,KAAItG,KAAAqD,KAACkD,EAAKC,IAGpBqH,EAAA/N,UAAAiK,UAAA,WAAc,OAAOnH,EAAAkD,MAAMC,MAAMG,OAAO,MAExC2H,EAAA/N,UAAAkI,aAAA,WACI,IAAIgX,EAAI3b,KAAKuE,WAAW,EACpBhE,EAAIP,KAAKF,IAAIS,EAAIob,EACjBnb,EAAIR,KAAKF,IAAIU,EAAIR,KAAKwE,YAAc,EAOxC,OALI,IAAIjF,EAAAkC,OAAOlB,EAAIob,EAAE,EAAGnb,GAEpB,IAAIjB,EAAAkC,OAAOlB,EAAIob,EAAE,EAAGnb,IAGd8G,IAAI,SAAArJ,GAAK,WAAIiM,EAAArK,YAAY5B,EAAG2B,EAAAyJ,WAAWK,UAEzDc,EAhEA,CAA8BN,EAAAhK,UAAjBtC,EAAA4M,0aCLb,IAAAN,EAAA1M,EAAA,GACAgC,EAAAhC,EAAA,GAEA+B,EAAA/B,EAAA,GACAoC,EAAApC,EAAA,GACAiC,EAAAjC,EAAA,GAEA8M,EAAA,SAAAnK,GAAA,SAAAmK,IAAA,IAAAhK,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAAwb,YAAsB,GACtBxb,EAAAM,UAAoB,GACpBN,EAAAS,aACAT,EAAAa,WAAU6L,EAkFd,OAtFoClK,EAAAwH,EAAAnK,GAOhCmK,EAAA7N,UAAAiK,UAAA,WAAc,OAAO1G,KAAKW,MAAMkC,OAAO,KAEvCyH,EAAA7N,UAAAwG,KAAA,SAAKC,EAA+BC,GAGhC1D,EAAA2D,SAASF,EAAKlD,KAAKqD,OAAQ,KAAOrD,KAAKsD,kBAEvC7D,EAAA2D,SACIF,GACE3C,EAAGP,KAAKO,EAAGC,EAAGR,KAAKQ,EAAIR,KAAKwE,YAAcxE,KAAK8b,YAC/Crb,MAAOT,KAAKuE,WAAY7D,OAAQV,KAAK8b,aACrC,EACA9b,KAAK0G,YAAYF,QAAQ,KAG/BrG,EAAA1D,UAAMwG,KAAItG,KAAAqD,KAACkD,EAAKC,IAGpBmH,EAAA7N,UAAA4H,MAAA,WACI,IAAIge,KACAK,EAAQ1iB,KAAKwE,YAAcxE,KAAK8b,YAChCkH,EAAiBhjB,KAAKkI,UACtBlI,KAAKF,IAAIS,EACTP,KAAKF,IAAIU,EAAIkiB,EACbljB,EAAAyB,YAAYgN,MAEhBoU,EAAS9lB,KAAKymB,GAEd,IAAIC,EAAkBjjB,KAAKkI,UACvBlI,KAAKF,IAAIS,EAAIP,KAAKuE,WAClBvE,KAAKF,IAAIU,EAAIkiB,EACbljB,EAAAyB,YAAYC,OAqBhB,OAnBAmhB,EAAS9lB,KAAK0mB,GAGdZ,EAAS9lB,KACLyD,KAAKkI,UACDlI,KAAKF,IAAIS,EAAIP,KAAKuE,WAAW,EAC7BvE,KAAKF,IAAIU,EACThB,EAAAyB,YAAYiN,KAKpBmU,EAAS9lB,KACLyD,KAAKkI,UACDlI,KAAKF,IAAIS,EAAIP,KAAKuE,WAAW,EAC7BvE,KAAKF,IAAIU,EAAIR,KAAKwE,YAClBhF,EAAAyB,YAAYkN,OAGbkU,GAGX/X,EAAA7N,UAAA6H,MAAA,WACI,IAAI/D,EAAIP,KAAKF,IAAIS,EAAIP,KAAKuE,WAAW,EACjC/D,EAAIR,KAAKF,IAAIU,EAAIR,KAAKwE,YAAYxE,KAAK8b,YAC3C,OACI,IAAIvc,EAAAkC,OAAOgD,KAAKC,MAAMnE,GAAIkE,KAAKC,MAAMlE,MAI7C8J,EAAA7N,UAAAwH,QAAA,SAAQF,GACJ/D,KAAK6H,YAAY9D,IAGrBuG,EAAA7N,UAAAkI,aAAA,WACI,IAAIgX,EAAI3b,KAAKuE,WAAW,EACpBhE,EAAIP,KAAKF,IAAIS,EAAIob,EACjBnb,EAAIR,KAAKF,IAAIU,EAAIR,KAAKwE,YAAcxE,KAAK8b,YAAc,GAO3D,OALI,IAAIvc,EAAAkC,OAAOlB,EAAIob,EAAE,EAAGnb,GAEpB,IAAIjB,EAAAkC,OAAOlB,EAAIob,EAAE,EAAGnb,IAGd8G,IAAI,SAAArJ,GAAK,WAAIiM,EAAArK,YAAY5B,EAAG2B,EAAAyJ,WAAWK,UAEzDY,EAtFA,CAAoCJ,EAAAhK,UAAvBtC,EAAA0M,gbCPb,IAAAJ,EAAA1M,EAAA,GAEAgC,EAAAhC,EAAA,GAGA4M,EAAA,SAAAjK,GAAA,SAAAiK,IAAA,IAAA9J,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAAM,UAAoB,EAEpBN,EAAA4gB,iBACA5gB,EAAAU,OAAsBxB,EAAAyB,YAAYgN,KA+ClC3N,EAAA4iB,QAAkB,EAAAlW,EAsBtB,OAzEkClK,EAAAsH,EAAAjK,GAM9BiK,EAAA3N,UAAAiK,UAAA,WAAc,OAAO1G,KAAKW,MAAMkC,OAAO,KAEvCuH,EAAA3N,UAAA4H,MAAA,WAEI,IAAIge,KACAK,EAAQ1iB,KAAKwE,YAAc,EAiB/B,OAfA6d,EAAS9lB,KACLyD,KAAKkI,UACDlI,KAAKF,IAAIS,EAAGP,KAAKF,IAAIU,EAAIkiB,EACzBljB,EAAAyB,YAAYgN,OAIpBoU,EAAS9lB,KACLyD,KAAKkI,UACDlI,KAAKF,IAAIS,EAAIP,KAAKuE,WAClBvE,KAAKF,IAAIU,EAAIkiB,EACbljB,EAAAyB,YAAYC,QAIbmhB,GAIXjY,EAAA3N,UAAA0H,YAAA,SAAYJ,GACR,OAAI/D,KAAKkhB,gBACLlhB,KAAKkhB,iBACLlhB,KAAKiE,QAAQjE,KAAK8D,gBAAgBC,SAM1CqG,EAAA3N,UAAAqH,gBAAA,SAAgBC,GACZ,IAAIof,EAAYpf,EAAOC,QAMvB,OALIhE,KAAKkhB,gBAELiC,EAAU3iB,EAAIR,KAAKF,IAAIU,GAGpB2iB,GAIX/Y,EAAA3N,UAAAwH,QAAA,SAAQF,GAEJ,GAAI/D,KAAKkhB,cAAe,CACpB,IAAIpZ,EAAU9H,KAAK6H,YAAY9D,GAC3B+D,IACA9H,KAAKgB,OAAS8G,EAAQ9G,OAElB8G,GAAW9H,KAAKgB,SAAWxB,EAAAyB,YAAYgN,OACvCjO,KAAKkjB,QAAUpb,EAAQhI,IAAIS,SAK/BP,KAAKgB,SAAWxB,EAAAyB,YAAYgN,MAC5BjO,KAAKojB,SAAS3e,KAAK4e,IAAIrjB,KAAKkjB,QAAUnf,EAAOxD,IAC7CP,KAAKF,IAAIS,EAAIP,KAAKkjB,QAAUljB,KAAKuE,YAEjCvE,KAAKojB,SAAS3e,KAAK4e,IAAIrjB,KAAKF,IAAIS,EAAIwD,EAAOxD,KAI3D6J,EAzEA,CAAkCF,EAAAhK,UAArBtC,EAAAwM,8aCLb,IAAAuJ,EAAAnW,EAAA,GAEA8lB,EAAA,oBAAAA,KAGA,OAFWA,EAAAna,MAAgB,YAChBma,EAAAva,YACXua,EAHA,GAAa1lB,EAAA0lB,gBAKb,IAAAC,EAAA,SAAApjB,GAAA,SAAAojB,mDAGA,OAH6BzgB,EAAAygB,EAAApjB,GAClBojB,EAAApa,MAAQ,kBACRoa,EAAAxa,UAAa4K,EAAApC,KACxBgS,EAHA,CAA6BD,GAK7BE,EAAA,SAAArjB,GAAA,SAAAqjB,mDAGA,OAHuB1gB,EAAA0gB,EAAArjB,GACZqjB,EAAAra,MAAQ,WACRqa,EAAAza,UAAa4K,EAAApC,IAAKoC,EAAApC,IAAKoC,EAAApC,KAClCiS,EAHA,CAAuBF,GAKvBG,EAAA,SAAAtjB,GAAA,SAAAsjB,mDAGA,OAHsB3gB,EAAA2gB,EAAAtjB,GACXsjB,EAAAta,MAAQ,UACRsa,EAAA1a,UAAa4K,EAAAvC,MAAOuC,EAAAxC,QAC/BsS,EAHA,CAAsBH,GAKtBI,EAAA,SAAAvjB,GAAA,SAAAujB,mDAGA,OAH6B5gB,EAAA4gB,EAAAvjB,GAClBujB,EAAAva,MAAQ,sBACRua,EAAA3a,UAAa4K,EAAAlD,gBAAiBkD,EAAAjD,wBACzCgT,EAHA,CAA6BJ,GAK7BK,EAAA,SAAAxjB,GAAA,SAAAwjB,mDAGA,OAHsB7gB,EAAA6gB,EAAAxjB,GACXwjB,EAAAxa,MAAQ,UACRwa,EAAA5a,UAAa4K,EAAA/B,MAAO+B,EAAA/B,OAC/B+R,EAHA,CAAsBL,GAKtBM,EAAA,SAAAzjB,GAAA,SAAAyjB,mDAGA,OAH0B9gB,EAAA8gB,EAAAzjB,GACfyjB,EAAAza,MAAQ,eACRya,EAAA7a,UAAa4K,EAAA7B,WAAY6B,EAAA7B,YACpC8R,EAHA,CAA0BN,GAK1BO,EAAA,SAAA1jB,GAAA,SAAA0jB,mDAGA,OAH0B/gB,EAAA+gB,EAAA1jB,GACf0jB,EAAA1a,MAAQ,eACR0a,EAAA9a,UAAa4K,EAAAzC,UAAWyC,EAAAzC,WACnC2S,EAHA,CAA0BP,GAK1BQ,EAAA,SAAA3jB,GAAA,SAAA2jB,mDAGA,OAHsBhhB,EAAAghB,EAAA3jB,GACX2jB,EAAA3a,MAAQ,UACR2a,EAAA/a,UAAa4K,EAAAzC,UAAWyC,EAAAzC,UAAWyC,EAAAzC,WAC9C4S,EAHA,CAAsBR,GAKtBS,EAAA,SAAA5jB,GAAA,SAAA4jB,mDAGA,OAHoBjhB,EAAAihB,EAAA5jB,GACT4jB,EAAA5a,MAAQ,QACR4a,EAAAhb,UAAa4K,EAAA/C,aAAc+C,EAAAzC,WACtC6S,EAHA,CAAoBT,GAKpBU,EAAA,SAAA7jB,GAAA,SAAA6jB,mDAGA,OAHkBlhB,EAAAkhB,EAAA7jB,GACP6jB,EAAA7a,MAAQ,MACR6a,EAAAjb,UAAa4K,EAAA1C,YAAa0C,EAAA1C,YAAa0C,EAAA1C,aAClD+S,EAHA,CAAkBV,GAKlBW,EAAA,SAAA9jB,GAAA,SAAA8jB,mDAGA,OAHsBnhB,EAAAmhB,EAAA9jB,GACX8jB,EAAA9a,MAAQ,UACR8a,EAAAlb,UAAa4K,EAAAlC,eAAgBkC,EAAAlC,gBACxCwS,EAHA,CAAsBX,GAKtBY,EAAA,SAAA/jB,GAAA,SAAA+jB,mDAGA,OAHwBphB,EAAAohB,EAAA/jB,GACb+jB,EAAA/a,MAAQ,YACR+a,EAAAnb,UAAa4K,EAAA9B,MAAO8B,EAAA9B,OAC/BqS,EAHA,CAAwBZ,GAKxBa,EAAA,SAAAhkB,GAAA,SAAAgkB,mDAGA,OAHwBrhB,EAAAqhB,EAAAhkB,GACbgkB,EAAAhb,MAAQ,aACRgb,EAAApb,UAAa4K,EAAAhC,SAAUgC,EAAAhC,UAClCwS,EAHA,CAAwBb,GAKxBc,EAAA,SAAAjkB,GAAA,SAAAikB,mDAGA,OAHyBthB,EAAAshB,EAAAjkB,GACdikB,EAAAjb,MAAQ,cACRib,EAAArb,UAAa4K,EAAAhD,UAAWgD,EAAAhD,WACnCyT,EAHA,CAAyBd,GAKzBe,EAAA,SAAAlkB,GAAA,SAAAkkB,mDAGA,OAHuBvhB,EAAAuhB,EAAAlkB,GACZkkB,EAAAlb,MAAQ,WACRkb,EAAAtb,UAAa4K,EAAA3B,WAAY2B,EAAA3B,YACpCqS,EAHA,CAAuBf,GAMvBgB,EAAA,SAAAnkB,GAAA,SAAAmkB,mDAGA,OAHsBxhB,EAAAwhB,EAAAnkB,GACXmkB,EAAAnb,MAAQ,UACRmb,EAAAvb,UAAa4K,EAAAnC,WAAYmC,EAAAnC,WAAYmC,EAAAnC,YAChD8S,EAHA,CAAsBhB,GAKtBiB,EAAA,SAAApkB,GAAA,SAAAokB,mDAGA,OAHmBzhB,EAAAyhB,EAAApkB,GACRokB,EAAApb,MAAQ,OACRob,EAAAxb,UAAa4K,EAAAjC,QAASiC,EAAAjC,SACjC6S,EAHA,CAAmBjB,GAKnBkB,EAAA,SAAArkB,GAAA,SAAAqkB,mDAGA,OAHsB1hB,EAAA0hB,EAAArkB,GACXqkB,EAAArb,MAAQ,UACRqb,EAAAzb,UAAa4K,EAAAvB,eAAgBuB,EAAAvB,gBACxCoS,EAHA,CAAsBlB,GAKT1lB,EAAA+K,mBACTmb,EACAN,EACAE,EACAE,EACAL,EACAE,EACAU,EACAF,EACAC,EACAE,EACAT,EACAI,EACAM,EACAR,EACAS,EACAC,EACAC,EACAR,kaCpHJ,IAAAS,EAAAjnB,EAAA,GAEAknB,EAAA,SAAAvkB,GACE,SAAAukB,IAAA,IAAApkB,EACEH,EAAAxD,KAAAqD,OAAOA,YACPM,EAAK8iB,SAAS,GACd9iB,EAAKghB,UAAU,GACfhhB,EAAKC,EAAI,EACTD,EAAKE,EAAI,EACTF,EAAKK,MAAQ,IAAI8jB,EAAGhiB,MAAM,IAAK,IAAK,KAAAuK,EAExC,OAT4BlK,EAAA4hB,EAAAvkB,GAS5BukB,EATA,CAA4BD,EAAGrb,OAAlBxL,EAAA8mB,kwDCFb,IAAAnlB,EAAA/B,EAAA,GAGA+Q,EAAA/Q,EAAA,GACAmnB,EAAAnnB,EAAA,IAIA8L,GAHA9L,EAAA,GAGAA,EAAA,IACAmW,EAAAnW,EAAA,GAIAonB,EAAA,SAAAzkB,GAWI,SAAAykB,EAAoBphB,EAA0BnD,GAA9C,IAAAC,EACIH,EAAAxD,KAAAqD,KAAMwD,EAAOjD,EAAGiD,EAAOhD,EAAG8I,EAAAE,MAAMC,MAAM+K,MAAOlL,EAAAE,MAAMC,MAAMM,MAAOxK,EAAAkD,MAAMC,QAAM1C,YAD5DM,EAAAkD,SAA0BlD,EAAAD,SAT9CC,EAAAukB,UAAoBF,EAAAhK,KAAKa,aACzBlb,EAAA0W,SAA0B,KAC1B1W,EAAAga,QAEAha,EAAAwkB,kBAOIxkB,EAAKqB,OAASrB,EAAKqB,OAAOC,OAAO,SAAAC,GAAS,QAAEA,aAAiBtC,EAAAuC,OAAOC,sBA4I5E,OAzJ6Be,EAAA8hB,EAAAzkB,GAgBzBykB,EAAAnoB,UAAAkH,OAAA,SAAOC,EAAQT,GAIX,GAHAhD,EAAA1D,UAAMkH,OAAMhH,KAAAqD,KAAC4D,EAAQT,GAGjBnD,KAAK8kB,eAAgB,CACrB,IAAIC,OAAWC,MAAQC,UACvBjlB,KAAKklB,UAAYH,EAAM/kB,KAAKmlB,aAAenlB,KAAKolB,eAIxDR,EAAAnoB,UAAAwG,KAAA,SAAKC,EAA+BC,GAOhC,GANAhD,EAAA1D,UAAMwG,KAAItG,KAAAqD,KAACkD,EAAKC,GACZnD,KAAKgX,WACL9T,EAAI4K,UAAYS,EAAA4E,WAAWnT,KAAKgX,UAAUvJ,SAC1CvK,EAAI6K,SAAS/N,KAAKO,EAAE,EAAGP,KAAKQ,EAAE,EAAG,EAAG,IAGpCR,KAAK8kB,eAAgB,CACrB5hB,EAAIkK,UAAY,EAChB,IACIiY,EAAKrlB,KAAKO,EAAI+kB,EAAMC,EAAKvlB,KAAKQ,EAAI,GAEtC0C,EAAIsK,YAAcjO,EAAAkD,MAAMC,MAAM+K,SAE9BvK,EAAI8K,WAAWqX,EAAIE,EALV,GAAS,GAOlBriB,EAAI4K,UAAYvO,EAAAkD,MAAM4M,OAAOxM,OAAO,IAAK4K,SACzCvK,EAAI6K,SAASsX,EAAIE,EARR,GAAS,GASlBriB,EAAI4K,UAAYvO,EAAAkD,MAAM4M,OAAO5B,SAC7BvK,EAAI6K,SAASsX,EAAIE,EAVR,GAUYvlB,KAAKklB,SAVR,GAYlBllB,KAAKwlB,IAAIjlB,GAAMkE,KAAK0H,SAAU,GAI9BnM,KAAKsa,MAcbsK,EAAAnoB,UAAAsa,MAAA,SAAM/Y,GACFgC,KAAKgX,SAAWhZ,GAGpB4mB,EAAAnoB,UAAAya,KAAA,WACI,GAAIlX,KAAKgX,SAAU,CACf,IAAIhZ,EAAIgC,KAAKgX,SAEb,OADAhX,KAAKgX,SAAW,KACThZ,EAEX,OAAO,MAGX4mB,EAAAnoB,UAAAgpB,QAAA,SAAQ3lB,GACJ,OAAOE,KAAK0lB,QAAQpY,OAAOxN,EAAIS,EAAGT,EAAIU,EAAGR,KAAK6kB,WAAWc,aAGvDf,EAAAnoB,UAAAoa,YAAN,SAAkB+O,2FAKd,OAHA5lB,KAAK8kB,kBACL9kB,KAAKmlB,iBAAmBH,MAAQC,UAChCjlB,KAAKolB,aAAeQ,GACpB,EAAM,IAAIC,QAAQ,SAACC,EAASC,GAAW,OAAA5O,WAAW2O,EAASF,oBAA3DxgB,EAAA0R,OAEA9W,KAAK8kB,mBAAiB,SAGpBF,EAAAnoB,UAAAupB,OAAN,SAAa7jB,+GAGLmY,EAAOta,KAAKK,OAAO4lB,YAAYjmB,KAAKF,IAAIkE,QAAS7B,IAE5C9F,OAAS,GACd2D,KAAKsa,KAAOA,EACZA,EAAK1D,MACL0D,EAAKxd,SACL,EAAM+oB,QAAQK,IACV5L,EAAKhT,IAAI,SAAA/F,GAAQ,OAAAjB,EAAKmlB,QAAQlkB,SALlC,YAIA6D,EAAA0R,OAGA9W,KAAKsa,KAAO,KAAA7b,EAAA0K,MAAA,SAIhB,mBAGJyb,EAAAnoB,UAAAka,UAAA,SAAUnT,GAAV,IAAAlD,EAAAN,KACImX,WAAW,WAAM,OAAA3T,EAAOiT,SAASnW,IAAO,MAGtCskB,EAAAnoB,UAAA0pB,KAAN,kBAAA/nB,EAAA4B,UAAA,wBAAAsT,EAAAtG,EAAArO,EAAAF,EAAAuB,KAAA,OAAAvC,EAAAuC,KAAA,SAAA7D,GAAA,OAAAA,EAAAgN,OAAA,cACQnJ,KAAKgX,UACDoP,EAAsBpmB,KAAKgX,UAC3BqP,EAAermB,KAAKK,OAAOimB,cAActmB,KAAKF,OAE9C,SAAC0D,GACO,OAAAA,EAAOwF,QAAQ+G,WAAaqW,GAC5B5iB,EAAOwF,QAAQoH,WAAauD,EAAArF,iBAAiBmB,iBAC7C2W,IAAS7X,EAAAsC,cAAcS,MAAQ9N,EAAOwF,QAAQoH,WAAauD,EAAArF,iBAAiBoB,cAC5E0W,IAAS7X,EAAAsC,cAAcE,MAAQvN,EAAOwF,QAAQoH,WAAauD,EAAArF,iBAAiBqB,gBAIpF,EAAM3P,KAAKgmB,OAAOK,EAAKlkB,YADvB,OAXJ,YAaI,OADAiD,EAAA0R,QACA,EAAM9W,KAAKylB,QAAQY,EAAKvmB,aACxB,OADAsF,EAAA0R,QACA,EAAMuP,EAAK5P,SAASzW,qBAApBoF,EAAA0R,oBAEA7U,QAAQC,IAAI,wBAAyBlC,KAAKgX,sDAG1CuP,EAAiBvmB,KAAKK,OAAOimB,cAActmB,KAAKF,OAGhD,SAAC7B,GAAM,OAAAA,EAAE4X,QAAQxZ,OAAS,MAI1B,EAAM2D,KAAKgmB,OAAOO,EAAOpkB,YADzB,aAEA,OADAiD,EAAA0R,QACA,EAAM9W,KAAKylB,QAAQc,EAAOzmB,aAC1B,OADAsF,EAAA0R,QACA,EAAMyP,EAAO9P,SAASzW,qBAAtBoF,EAAA0R,sBAGA,OADA7U,QAAQC,IAAI,qDACZ,EAAM,IAAI2jB,QAAQ,SAACC,EAASC,GAAW,OAAA5O,WAAW2O,EAAS,gBAA3D1gB,EAAA0R,iCAIRK,WAAW,WAAM,OAAA7W,EAAK6lB,QAAQ,eAEtCvB,EAzJA,CAA6BrlB,EAAA6J,OAAhBxL,EAAAgnB,yaCbb,IAAArlB,EAAA/B,EAAA,GACAgpB,EAAAhpB,EAAA,IAIAipB,EAAA,SAAAtmB,GAEI,SAAAsmB,EAAoBpmB,GAApB,IAAAC,EACIH,EAAAxD,KAAAqD,KAAM,GAAIK,EAAOmE,YAAc,EAAG,EAAG,IAAExE,YADvBM,EAAAD,SADpBC,EAAAomB,YAGIpmB,EAAKqB,OAASrB,EAAKqB,OAAOC,OAAO,SAAAC,GAAS,QAAEA,aAAiBtC,EAAAuC,OAAOC,sBAS5E,OAbgCe,EAAA2jB,EAAAtmB,GAO5BsmB,EAAAhqB,UAAAkqB,SAAA,SAASC,GACL,IAAIlQ,EAAU,IAAI8P,EAAA5B,QAAQgC,EAAM5mB,KAAKK,QACrCqW,EAAQyP,OACRnmB,KAAK0mB,SAASnqB,KAAKma,GACnB1W,KAAKsc,IAAI5F,IAEjB+P,EAbA,CAAgClnB,EAAA6J,OAAnBxL,EAAA6oB,4FCFb,IAAAhnB,EAAAjC,EAAA,GAEAqpB,EAAA,WAGG,SAAAA,EAAY3N,GACRlZ,KAAK4E,MAAQsU,EAAKtU,QAiBzB,OAdGiiB,EAAApqB,UAAAqqB,SAAA,SAASC,EAAgBC,GACtB,OAAOhnB,KAAK4E,MAAMoV,aAAa+M,EAAQC,IAG1CH,EAAApqB,UAAAwqB,YAAA,SAAYnP,GACR,IAAIxT,EAAQtE,KAAK4E,MAAMsT,MAIvB,OAHczY,EAAAqM,MAAMxH,EAChB,SAACqT,GAAiB,OAAAlT,KAAK4e,IAAIvL,EAASjL,SAAS8K,QAE7ChQ,GAKXkf,EArBA,GAAajpB,EAAAipB,kCCLbhpB,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAAsU,EAAAtG,EAAArO,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAAsU,EAAAtG,EAAArO,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAAsU,EAAAtG,EAAArO,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAAsU,EAAAtG,EAAArO,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAAsU,EAAAtG,EAAArO,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAAsU,EAAAtG,EAAArO,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAAsU,EAAAtG,EAAArO,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAAsU,EAAAtG,EAAArO,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAAsU,EAAAtG,EAAArO,GAAA,iBAAAF,EAAAtC,EAAA6D,WAAA8C,YAAArE,EAAA,SAAA6U,EAAAtG,GAAA,OAAAvO,EAAAjC,OAAA+W,iBAAAC,wBAAAnH,OAAA,SAAAiH,EAAAtG,GAAAsG,EAAAE,UAAAxG,IAAA,SAAAsG,EAAAtG,GAAA,QAAArO,KAAAqO,IAAAtQ,eAAAiC,KAAA2U,EAAA3U,GAAAqO,EAAArO,MAAA2U,EAAAtG,IAAA,SAAAsG,EAAAtG,GAAA,SAAArO,IAAAqB,KAAAyT,YAAAH,EAAA7U,EAAA6U,EAAAtG,GAAAsG,EAAA7W,UAAA,OAAAuQ,EAAAxQ,OAAAkX,OAAA1G,IAAArO,EAAAlC,UAAAuQ,EAAAvQ,UAAA,IAAAkC,KAAAnC,OAAA6B,eAAA2O,EAAA,cAAAtO,OAAA,ICAxC,IAAAa,EAAA/B,EAAA,GAEAiC,EAAAjC,EAAA,GACAkY,EAAAlY,EAAA,GACA0pB,EAAA1pB,EAAA,IAGA2pB,EAAA,SAAAhnB,GAMI,SAAAgnB,EAAY5mB,EAAWC,GAAvB,IAAAF,EACIH,EAAAxD,KAAAqD,KAAMO,EAAGC,EAAG,EAAG,IAAER,YALrBM,EAAA8F,aACA9F,EAAA8mB,sBAA2C,KAC3C9mB,EAAA+mB,OAAiB,EAIb/mB,EAAKqB,OAASrB,EAAKqB,OAAOC,OAAO,SAAAC,GAAS,QAAEA,aAAiBtC,EAAAuC,OAAOC,sBAwF5E,OAhG4Be,EAAAqkB,EAAAhnB,GAWxBgnB,EAAA1qB,UAAAwG,KAAA,SAAKC,EAA+BC,GAChChD,EAAA1D,UAAMwG,KAAItG,KAAAqD,KAACkD,EAAKC,GAGZnD,KAAKsnB,SAqBbH,EAAA1qB,UAAA8qB,cAAA,SAAcplB,GACVA,EAAStB,SACLsB,EAASoD,aACTpD,EAASoD,WAAW4C,OAAO/G,kBAAkB7E,KAAK4F,GAClDnC,KAAKwnB,gBAETxnB,KAAKoG,UAAU7J,KAAK4F,GACpBA,EAAS+B,iBACTlE,KAAKsc,IAAIna,IAGbglB,EAAA1qB,UAAA8K,sBAAA,SAAsBxD,EAAgB0jB,EAA2C/a,YAA3C+a,mBAA2C/a,MAAA,WAAyC,WACtH,IAAIC,EAAW3M,KAAKoG,UACnBxE,OAAO,SAAAO,GACJ,SAACslB,EAAeprB,OAAS,IACvBorB,EAAepQ,KAAK,SAAAqQ,GAAM,OAAAvlB,EAAS/B,qBAAqBsnB,MAEtDhb,EAAUvK,KAGlB,GAAIwK,GAAYA,EAAStQ,OAAS,EAE9B,OAAOoD,EAAAqM,MAAMa,EADU,SAACxK,GAAa,OAAA4B,EAAO8I,SAAS1K,EAASmC,QAAQ,OAK9E6iB,EAAA1qB,UAAAwpB,YAAA,SAAYc,EAAgBY,GACnB3nB,KAAKsnB,SACNtnB,KAAKwnB,eAET,IAAII,EAAU5nB,KAAKsnB,QAAQL,YAAYF,GACnCC,EAAOW,EAAYrjB,QAAQ,GAC3BujB,EAAW7nB,KAAKsnB,QAAQL,YAAYD,GAExC,OADWhnB,KAAKsnB,QAAQR,SAASc,EAASC,IAI9CV,EAAA1qB,UAAAqrB,oBAAA,SAAoB/jB,EAAgBgkB,EAAuCrb,YAAvCqb,mBAAuCrb,MAAA,WAAuC,WAC9G,IAAIpL,EAAUtB,KAAKuf,iBAMnB,IALAje,EAAUA,EAAQM,OAAO,SAAA3D,GACrB,SAAC8pB,EAAa1rB,OAAS,IAAI0rB,EAAa1Q,KAAK,SAAArO,GAAW,OAAA/K,EAAE+K,mBAAmBA,MACzE0D,EAAUzO,OAGHqD,EAAQjF,OAAS,EAE5B,OAAOoD,EAAAqM,MAAMxK,EADG,SAACrD,GAAM,OAAA8F,EAAO8I,SAAS5O,MAKvCkpB,EAAA1qB,UAAA+qB,aAAR,WACI,IAAIQ,EAAOhoB,KAAKoG,UAAUC,KAAK,SAAAlE,GAAY,OAAAA,EAAS/B,qBAAqBsV,EAAArB,iBACrE2T,IACAhoB,KAAKsnB,QAAU,IAAIJ,EAAAL,eAAemB,KAI1Cb,EAAA1qB,UAAA8iB,eAAA,WACI,OAAO9f,EAAAqN,WAAW9M,KAAKoG,UAAUkB,IAAI,SAAA4F,GAAK,OAAAA,EAAEzE,iBAEpD0e,EAhGA,CAA4B5nB,EAAA6J,OAAfxL,EAAAupB,waCPb,IAAA5nB,EAAA/B,EAAA,GACAiC,EAAAjC,EAAA,GAQAyqB,EAAA,SAAA9nB,GAAA,SAAA8nB,IAAA,IAAA3nB,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YACIM,EAAA4nB,WAwDJ,OAzD+BplB,EAAAmlB,EAAA9nB,GAK3B8nB,EAAAxrB,UAAA0rB,aAAA,WAQI,IAPA,IAKIC,EAAOpoB,KAAKuE,WAAa,EACzB8jB,EAAeroB,KAAKuE,WANR,GAOEY,EAAA,EAAAC,EAAA3F,EAAA2M,MAAM,GAANjH,EAAAC,EAAA/I,OAAA8I,IAGd,IAHC,IAAImjB,EAAKljB,EAAAD,GACNojB,EAAc,IAAID,EAClBE,EAAQ,EAAIF,GAASD,EAAe,GAC1B5P,EAAA,EAAAC,EAAAjZ,EAAA2M,MAVF,IAUEqM,EAAAC,EAAArc,OAAAoc,IAAkB,CAA3B,IAAItc,EAACuc,EAAAD,GACNzY,KAAKkoB,MAAM3rB,MACPgE,EAAWpE,EAAIksB,EAAXD,GAA4B3jB,KAAK0H,SAAWqc,EAAUA,EAAQ,GAClE9nB,OAAQ+D,KAAKwH,IAAI,GAAI,IAZhB,IAYwBxH,KAAK0H,UAAyB1H,KAAK0H,SAAWoc,EAAcA,EAAY,QAQrHN,EAAAxrB,UAAAwG,KAAA,SAAKC,EAA+BC,GAChC,IAAIslB,EAAYzoB,KAAKW,MAAM0S,WAAW,KAElCqV,EAAc1oB,KAAKW,MAAMmgB,SAAS,IAAKta,QAAQ,IAEnDtD,EAAI4K,UAAY2a,EAAUhb,SAG1B,IAAIkb,EAAQ3oB,KAAKF,IAAIU,EAAE,EAEvBR,KAAKkoB,MAAM3kB,QAAQ,SAAAqlB,GACf,IAAI7G,EAAK4G,EAAQC,EAAKloB,OAClBmoB,EAAyB,IAAdD,EAAKloB,OACpBwC,EAAImK,YACJnK,EAAIoK,OAAOsb,EAAKroB,EAAGwhB,GACnB7e,EAAIqK,OAAOqb,EAAKroB,EAAIsoB,EAAUF,GAC9BzlB,EAAIqK,OAAOqb,EAAKroB,EAAIsoB,EAAUF,GAE9BzlB,EAAI4K,UAAY2a,EAAUhb,SAC1BvK,EAAIoJ,OAEJpJ,EAAImK,YACJnK,EAAIoK,OAAOsb,EAAKroB,EAAGwhB,GACnB7e,EAAIqK,OAAOqb,EAAKroB,EAAOsoB,EAAS,EAAZ,EAAgBF,GACpCzlB,EAAIqK,OAAOqb,EAAKroB,EAAIsoB,EAAUF,GAC9BzlB,EAAI4K,UAAY4a,EAAYjb,SAC5BvK,EAAIoJ,UAIhB2b,EAzDA,CANA,SAAA9nB,GACI,SAAA2oB,EAAYtoB,EAAWC,EAAeE,UAClCR,EAAAxD,KAAAqD,KAAM,EAAGQ,EAAGC,EAAO,IAAKE,IAAMX,KAEtC,OAJ+B8C,EAAAgmB,EAAA3oB,GAI/B2oB,EAJA,CAA+BvpB,EAAA6J,QAMlBxL,EAAAqqB,2aCTb,IAAAxD,EAAAjnB,EAAA,GACA+B,EAAA/B,EAAA,GAEAiC,EAAAjC,EAAA,GACAurB,EAAAvrB,EAAA,IAIAwrB,EAAAxrB,EAAA,IACAyrB,EAAAzrB,EAAA,IACAmW,EAAAnW,EAAA,GAGA0rB,EAAA,SAAA/oB,GAII,SAAA+oB,EACWC,EACAxoB,EACAF,EACA2oB,YADA3oB,MAAA,cACA2oB,MAAA,KAJX,IAAA9oB,EAMIH,EAAAxD,KAAAqD,KAAM,EAAGopB,EAAM,EAAG3oB,EAAO2oB,EAAOzoB,IAAMX,KAL/BM,EAAA6oB,MACA7oB,EAAAK,QACAL,EAAAG,QACAH,EAAA8oB,QAGP9oB,EAAKqB,OAASrB,EAAKqB,OAAOC,OAAO,SAAAC,GAAS,QAAEA,aAAiB4iB,EAAG3iB,OAAOC,oBAEvE,IAAI4mB,GAASS,EAAM,EAGnB9oB,EAAK+oB,YAAYV,EADC,GACmBroB,EAAKK,MAAM6F,QAAQ,MAKxD,IAFA,IACI8iB,EAAcF,EADD,GAEHjkB,EAAA,EAAAC,EAAA3F,EAAA2M,MAFG,IAEHjH,EAAAC,EAAA/I,OAAA8I,IAAmB,CAA5B,IAAIhJ,EAACiJ,EAAAD,GACN7E,EAAK+oB,YACDV,EARU,GAQaW,EAAY,EAAMA,GAAentB,EAAE,GAC1DmtB,EACAhpB,EAAKK,MAAMkC,OAAO,IAAO,IAAO1G,WAIxCmE,EAAKgc,IAAI,IAAIyM,EAAAd,WAAWmB,EAAM,EAAG9oB,EAAKiE,WAAYjE,EAAKK,MAAM6F,QAAQ,OAErElG,EAAK6F,OAAS,IAAI6iB,EAAA7B,OAAO,GAAGiC,EAAM,GAClC9oB,EAAKgc,IAAIhc,EAAK6F,QAEd7F,EAAKipB,WAAa,IAAIN,EAAAxC,WAAWnmB,GACjCA,EAAKgc,IAAIhc,EAAKipB,cAuDtB,OA1F4BzmB,EAAAomB,EAAA/oB,GAsChB+oB,EAAAzsB,UAAA4sB,YAAR,SAAoB7oB,EAAWT,EAAcY,GACzC,IAAI6oB,EAAW,IAAIjqB,EAAA6J,MAAM,EAAG5I,EAAGR,KAAKuE,WAAYxE,EAAMY,GACtDX,KAAKsc,IAAIkN,IAGbN,EAAAzsB,UAAAwG,KAAA,SAAKC,EAA+BC,GAChChD,EAAA1D,UAAMwG,KAAItG,KAAAqD,KAACkD,EAAKC,GAEZnD,KAAKonB,uBACLpnB,KAAKonB,sBAAsBnkB,KAAKC,EAAKC,IAI7C+lB,EAAAzsB,UAAAkH,OAAA,SAAOC,EAAQT,GACXhD,EAAA1D,UAAMkH,OAAMhH,KAAAqD,KAAC4D,EAAQT,GAErBnD,KAAKmG,OAAOC,UAAU7C,QAAQ,SAAApB,GAAY,OAAAA,EAASwB,OAAOC,EAAQT,KAClEnD,KAAKupB,WAAW7C,SAASnjB,QAAQ,SAAAmT,GAAW,OAAAA,EAAQ/S,OAAOC,EAAQT,MAGvE3G,OAAA6B,eAAI6qB,EAAAzsB,UAAA,yBAAA+B,IAAJ,WACI,OAAOwB,KAAKmG,OAAOihB,uDAGvB8B,EAAAzsB,UAAAmJ,OAAA,SAAOqR,GACHjX,KAAKmpB,IAAIvK,iBAAiB3H,IAG9BiS,EAAAzsB,UAAA8qB,cAAA,SAAcplB,GACVnC,KAAKmG,OAAOohB,cAAcplB,IAG9B+mB,EAAAzsB,UAAAoJ,SAAA,SAAS/F,GAEL,GAAIE,KAAKupB,WAAW7C,SAASrqB,OAAS2D,KAAKmG,OAAOkhB,OAAQ,CAEtD,IAAIT,EAAO5mB,KAAKsmB,cAAcxmB,GAAM6T,EAAA7B,aACpC9R,KAAKupB,WAAW5C,SAASC,KAIjCsC,EAAAzsB,UAAA8K,sBAAA,SAAsBxD,EAAgB0jB,EAAsC/a,GACxE,gBADwEA,MAAA,WAAuC,WACxG1M,KAAKmG,OAAOoB,sBAAsBxD,EAAQ0jB,EAAgB/a,IAGrEwc,EAAAzsB,UAAA6pB,cAAA,SAAcviB,EAAgBgkB,EAAuCrb,GACjE,gBAD0Bqb,mBAAuCrb,MAAA,WAAuC,WACjG1M,KAAKmG,OAAO2hB,oBAAoB/jB,EAAQgkB,EAAcrb,IAGjEwc,EAAAzsB,UAAAwpB,YAAA,SAAYc,EAAgBY,GACxB,OAAO3nB,KAAKmG,OAAO8f,YAAYc,EAAQY,IAE/CuB,EA1FA,CAA4B3pB,EAAA6J,OAAfxL,EAAAsrB,waCbb,IAAA3pB,EAAA/B,EAAA,GAEAisB,EAAAjsB,EAAA,IACAksB,EAAAlsB,EAAA,IACAkY,EAAAlY,EAAA,GACA0M,EAAA1M,EAAA,GACAmsB,EAAAnsB,EAAA,IACA2N,EAAA3N,EAAA,IACA8kB,EAAA9kB,EAAA,IACAmW,EAAAnW,EAAA,GACAosB,EAAApsB,EAAA,IACAqsB,EAAArsB,EAAA,IACAssB,EAAAtsB,EAAA,IACAusB,EAAAvsB,EAAA,IACAwsB,EAAAxsB,EAAA,IACAysB,EAAAzsB,EAAA,IAGA0sB,EAAA,SAAA/pB,GAAA,SAAA+pB,IAAA,IAAA5pB,EAAA,OAAAH,KAAAnD,MAAAgD,KAAAwQ,YAAAxQ,YAMIM,EAAA6pB,YAAoBnd,EAsNxB,OA5N+BlK,EAAAonB,EAAA/pB,GA4CpB+pB,EAAAztB,UAAA0rB,aAAP,SAAoBhL,GAApB,IAAA7c,EAAAN,KACIA,KAAKmd,KAAOA,EAGZnd,KAAKmpB,IAAM,IAAIQ,EAAAzM,IAAIC,EAAM,SAAC/c,GACtBE,EAAK8pB,kBAAkBhqB,IACxB,SAACoD,GACAlD,EAAK8pB,kBAAkB5mB,KAE3BxD,KAAKsc,IAAItc,KAAKmpB,KAEdnpB,KAAKK,OAAS,IAAIopB,EAAAP,OAAOlpB,KAAKmpB,IAAKhM,EAAKvC,MAAMja,OAC9CX,KAAKsc,IAAItc,KAAKK,QAEdL,KAAKqqB,OAAS,IAAIX,EAAAhF,OAClB1kB,KAAKsc,IAAItc,KAAKqqB,QAEdrqB,KAAKsqB,sBACLtqB,KAAKuqB,OAAOzW,KAAK,MACjB9T,KAAKuqB,OAAOzW,KAAK,EAAG,MAGjBoW,EAAAztB,UAAA+tB,WAAP,eAAAlqB,EAAAN,KACIA,KAAKmd,KAAKsN,MAAMC,SAASC,QAAQ3oB,GAAG,OAAQ,SAACgL,GACzC,GAAI1M,EAAK6pB,SACL7pB,EAAKiqB,OAAOzqB,IAAMQ,EAAKiqB,OAAOzqB,IAAIwc,IAC9Bhc,EAAKsqB,WAAW5iB,IAAIgF,EAAElN,UAEvB,CACHQ,EAAK+pB,OAAOvqB,IAAMkN,EAAElN,IAEpB,IAAI+qB,EAAoBvqB,EAAKD,OAAO+mB,sBACpC,GAAIyD,aAA6B3gB,EAAAhK,SAAU,CAEvC,IAAI4qB,EAAcD,EAAkB/mB,gBAAgBxD,EAAK+pB,OAAOvqB,KAChEQ,EAAK+pB,OAAOvqB,IAAMgrB,EAElBD,EAAkB5mB,QAAQ3D,EAAK+pB,OAAOvqB,UAC/B+qB,aAA6BvI,EAAA3M,QAEpCkV,EAAkBzT,KAAK9W,EAAKD,OAAQC,EAAK+pB,OAAOvqB,QAK5DE,KAAKmd,KAAKsN,MAAMC,SAASC,QAAQ3oB,GAAG,KAAM,WAClC1B,EAAK6pB,WAAY7pB,EAAK6pB,eAG9BnqB,KAAKmd,KAAKsN,MAAMC,SAASC,QAAQ3oB,GAAG,OAAQ,SAACgL,GACzC,GAAIA,EAAE+d,QAAUxrB,EAAAyrB,MAAMC,cAAchd,KAAM,CACtC,IAAM4c,EAAoBvqB,EAAKD,OAAO+mB,sBACtC,GAAIyD,EACA,GAAIA,aAA6B3gB,EAAAhK,SAAU,CACvC,IAAIgrB,EAA4BL,EAC5BM,GAAkBD,EAA0BhlB,cAC5CglB,GAA6BC,GAAkBD,EAA0B/mB,YAAY6I,EAAElN,OACvFQ,EAAKD,OAAOknB,cAAc2D,GAC1B5qB,EAAKD,OAAO8F,OAAOihB,sBAAwB,KAC3C9mB,EAAKgqB,oBAAoBtd,EAAElN,KAC3BQ,EAAK6oB,IAAItK,eAAeve,EAAKD,OAAO8F,aAErC,CACH,IAAIilB,EAA0BP,EAC1BO,EAAwBhU,KAAK9W,EAAKD,UACvB+qB,EAAwBjpB,SAE9BiG,UAAUgjB,GAGf9qB,EAAKD,OAAO8F,OAAOihB,sBAAwB,KAC3C9mB,EAAK6oB,IAAItK,eAAeve,EAAKD,OAAO8F,eAIzC6G,EAAE+d,SAAWxrB,EAAAyrB,MAAMC,cAAcI,SACxC/qB,EAAK6pB,YACL7pB,EAAKsqB,WAAa5d,EAAElN,OAI5BE,KAAKmd,KAAKsN,MAAMC,SAASC,QAAQ3oB,GAAG,QAAS,SAACgL,GAC1C,IAAIse,EAAIhrB,EAAKiqB,OAAOgB,UAGhBve,EAAEwe,OAAS,EACXlrB,EAAKiqB,OAAOzW,KAAKrP,KAAKsH,IAAIuf,EAHnB,IACW,IAGXte,EAAEwe,OAAS,GAClBlrB,EAAKiqB,OAAOzW,KAAKrP,KAAKwH,IAAIqf,EALnB,IACD,QAQdtrB,KAAKmd,KAAKsN,MAAMgB,SAASzpB,GAAG,QAAS,SAACgL,GAC9BA,EAAEqO,MAAQ9b,EAAAyrB,MAAMU,KAAKC,EACjBrrB,EAAK8F,WAAa9F,EAAK8F,UAAU,KACjC9F,EAAKiqB,OAAOqB,KAAKtrB,EAAK8F,UAAU,GAAGtG,IAAK,KACxCQ,EAAKiqB,OAAOzW,KAAK,GAAK,MAEnB9G,EAAEqO,MAAQ9b,EAAAyrB,MAAMU,KAAKG,MAE5BvrB,EAAKD,OAAO8F,OAAOihB,sBAAwB,SAKhD8C,EAAAztB,UAAAqvB,aAAP,WACI9rB,KAAKmd,KAAKsN,MAAMC,SAASC,QAAQoB,IAAI,QACrC/rB,KAAKmd,KAAKsN,MAAMC,SAASC,QAAQoB,IAAI,QACrC/rB,KAAKmd,KAAKsN,MAAMC,SAASC,QAAQoB,IAAI,MACrC/rB,KAAKmd,KAAKsN,MAAMC,SAASC,QAAQoB,IAAI,UAIzCvvB,OAAA6B,eAAI6rB,EAAAztB,UAAA,aAAA+B,IAAJ,WAAkB,OAAOwB,KAAKK,OAAO8F,OAAOC,2CAGpC8jB,EAAAztB,UAAAuvB,6BAAR,WACI,IAAIC,EAAkC/B,EAAUgC,sBAAsB5kB,IAAI,SAAA7J,GAAK,WAAIA,IAC/E0uB,EAAiCnsB,KAAKoG,UAAUkB,IAAI,SAAAnF,GAAY,OAAAA,EAAS/B,UAAUlC,OAEvF,OAAO+tB,EAAmB5lB,KAAK,SAAAjG,GAAa,OAAC+rB,EAAqBpU,SAAS3X,EAAUlC,SAG/EgsB,EAAAztB,UAAA6tB,oBAAV,SAA8BxqB,kBAAA,IAAkBP,EAAAkC,OAAO,EAAE,IACrD,IAAIrB,EAAY,KACZgsB,EAAcpsB,KAAKgsB,+BACnBI,IAAehsB,EAAYgsB,GAC3BhsB,EACAJ,KAAKoqB,kBAAkBhqB,EAAWN,GAElCE,KAAKmpB,IAAIlL,WAAW,uBAI5BiM,EAAAztB,UAAA2tB,kBAAA,SAAkBiC,EAAyCvsB,kBAAA,IAAkBP,EAAAkC,OAAO,EAAG,IACnF,IAAI6qB,EAAa,KACjB,GAAID,aAA8B3W,EAAA9B,UAAW,CACzC,IAAIxT,EAAYisB,EAEhBrsB,KAAKmpB,IAAIlL,WAAW,SAAS7d,EAAUlC,MACvCouB,EAAatsB,KAAKusB,cAAcnsB,EAAWN,GAC3CE,KAAKuqB,OAAOzW,KAAK1T,EAAU0T,KAAM,UAC9B,GAAIuY,aAA8B1Y,EAAA/D,QAAS,CAE9C,IAAI5G,EAAUqjB,EAGdC,EAAatsB,KAAKwsB,YAAYxjB,EAASlJ,GACvCE,KAAKuqB,OAAOzW,KAAK,IAAK,KAG1B9T,KAAKK,OAAO8F,OAAOihB,sBAAwBkF,EACvCA,IACArqB,QAAQ2F,KAAK,4BAA8B0kB,WAAUA,IACrDtsB,KAAKuqB,OAAOzqB,IAAMwsB,EAAWxsB,MAI3BoqB,EAAAztB,UAAA+vB,YAAV,SAAsBxjB,EAAkBlJ,GAEpC,IAAI0D,EAAS,IAAI8e,EAAA3M,OAAO3M,EAASlJ,GAEjC,OADA0D,EAAO4T,KAAKpX,KAAKK,QACVmD,GAGD0mB,EAAAztB,UAAA8vB,cAAV,SAAwBnsB,EAAsBN,GAC1C,IAAI2sB,EAAkBzsB,KAAK0sB,8BAA8BtsB,EAAWN,GAEpE,OADA2sB,EAAgBxoB,QAAQwoB,EAAgB3oB,gBAAgB2oB,EAAgB3sB,MACjE2sB,GAGHvC,EAAAztB,UAAAiwB,8BAAR,SAAsCtsB,EAAsBN,GAGxD,OADe,MADJoqB,EAAUyC,eAAevsB,EAAUyT,OACtB/T,EAAKM,EAAWJ,KAAKK,SAhN1C6pB,EAAAyC,gBACHviB,aAAYF,EAAAE,aACZY,WAAUd,EAAAc,WACVJ,WAAUV,EAAAU,WACVQ,gBAAeD,EAAAC,gBAEfZ,SAAQN,EAAAM,SACRyR,YAAW4N,EAAA5N,YACXP,YAAWuO,EAAAvO,YAEXhR,mBAAkBR,EAAAQ,mBAElBwR,mBAAkB0N,EAAA1N,mBAElB5R,eAAcJ,EAAAI,eACd0R,eAAc8N,EAAA9N,eACdD,cAAagO,EAAAhO,cACbF,aAAYmO,EAAAnO,aAEZ/Q,aAAYZ,EAAAY,cAGTof,EAAAgC,uBACHxW,EAAArB,eAEAqB,EAAApB,YAGAoB,EAAAvB,WACAuB,EAAAzB,UAsLRiW,EA5NA,CAA+B3qB,EAAAqtB,OAAlBhvB,EAAAssB,2FClBb,IAAA3qB,EAAA/B,EAAA,GAEAiC,EAAAjC,EAAA,GAIAqvB,EAAA,oBAAAA,IAGE7sB,KAAAW,MAAelB,EAAAyM,OAAO2gB,EAAMC,QACxBjqB,OAAO,IACPwQ,WAAW,IACfrT,KAAAib,SAAkBxb,EAAAyM,QAAS3M,EAAAkD,MAAMsqB,KAAMxtB,EAAAkD,MAAMuqB,aACvCxmB,QAAQ,KACR6M,WAAW,KAInB,OAXSwZ,EAAAC,QAAUvtB,EAAAkD,MAAMmE,IAAKrH,EAAAkD,MAAM0M,KAAM5P,EAAAkD,MAAMyM,OAWhD2d,EAZA,GAAajvB,EAAAivB,yBCNbhvB,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAAsU,EAAAtG,EAAArO,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAAsU,EAAAtG,EAAArO,GAAA,aAAAnC,OAAA6B,eAAA2O,EAAA,cAAAtO,OAAA,ICAxC,IAAA+lB,EAAAjnB,EAAA,GACMyvB,EAAQzvB,EAAQ,IAChBiR,EAAYjR,EAAQ,IAGtB8d,GACA4R,MAAO,IAAIzI,EAAG0I,QAAQF,GAEtB/b,UAAW,IAAIuT,EAAG0I,QAAQ1e,IAKrB7Q,EAAA0d,2FCbT,IAAAqJ,EAAAnnB,EAAA,IACA4vB,EAAA5vB,EAAA,IACA6vB,EAAA7vB,EAAA,IAEM8vB,EAAW,IAAIF,EAAAP,MACf1P,EAAO,IAAIwH,EAAAhK,KAAK2S,GAGhBC,EAAY,IAAIF,EAAAnD,UAAU/M,GAChCA,EAAKb,IAAI,YAAaiR,GAEtBpQ,EAAKjC,QAAQsS,KAAK,WAChBrQ,EAAKsQ,UAAU","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([53,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, drawRect, deleteByValue } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0 //.1\r\n\r\n    nameLabel: Label\r\n    levelLabel: Label\r\n\r\n    built: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    level: number = 1\r\n\r\n    private devices: Device[] = []\r\n\r\n    constructor(pos: Vector, public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            console.log(\"HOVER ON\", { building: this })\r\n        })\r\n\r\n        // this.on('pointerdown', () => {\r\n        //     console.log(\"CLICKED BUILDING\", { building: this })\r\n        //     this.levelUp();\r\n        // })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        // this.nameLabel.fontSize = 11\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.levelLabel = new Label(`Lvl. ${this.level}`, 0, 0, 'Helvetica')\r\n        this.levelLabel.fontSize = 6\r\n        this.levelLabel.color = Color.White.darken(0.2)\r\n    }\r\n\r\n    levelUp() {\r\n        this.level += 1\r\n        this.levelLabel.text = `Lvl. ${this.level}`\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        this.devices.forEach(device => device.draw(ctx, delta))\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n            // this.levelLabel.text = `Lvl. ${this.level}`\r\n            // this.levelLabel.pos = this.getCenter()\r\n            // this.levelLabel.pos.y += 10\r\n            // this.levelLabel.pos.x -= ctx.measureText(this.structure.name).width / 4\r\n            // this.levelLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let debug = false;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = false\r\n        if (showDevicePlaces && this.devicePlaces().length > 0) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    1,\r\n                    Color.White,\r\n                    false\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n        let tryProduce = this.built;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.produce(this.step));\r\n        }\r\n        this.step += 1\r\n    }\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public populate(pos: Vector) {\r\n        this.planet.populate(pos) //this.pos)\r\n    }\r\n\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        this.updateName()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices\r\n    }\r\n\r\n    private updateName() {\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let matched = true;\r\n            let unseenDevices = this.devices.slice() // clone?\r\n            spaceFn.machines.forEach(machine => {\r\n                let matchingDevice = unseenDevices.find(d => d.machine instanceof machine)\r\n                if (!matchingDevice) { matched = false; }\r\n                unseenDevices = deleteByValue(unseenDevices, matchingDevice)\r\n            })\r\n            return matched;\r\n        })\r\n        if (fn) {\r\n            this.nameLabel.text = fn.label\r\n        }\r\n    }\r\n}","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.sixth; break;\r\n        case DeviceSize.Large: sz = 2 * major.eighth; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { MissionControlView } from './MissionControlView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { MineView } from './MineView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\n\r\n\r\n// import { LivingQuartersView } from './LivingQuartersView';\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView, // as AccessTunnelView,\r\n    CommonAreaView,\r\n    DomeView,\r\n    MissionControlView,\r\n    TunnelView,\r\n    ArcologyView,\r\n    LadderView,\r\n    MineView,\r\n    SurfaceRoadView,\r\n\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  // if (edgeWidth > 0) {\r\n  //   let edge = Color.White;\r\n  //   ctx.fillStyle = edge.toRGBA();\r\n  //   ctx.fillRect(x, y, width, height)\r\n  // }\r\n\r\n  if (filled) {\r\n    let main = color;\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x, //+ edgeWidth,\r\n      y, //+ edgeWidth,\r\n      width, // - edgeWidth * 2,\r\n      height // - edgeWidth * 2\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White;\r\n    ctx.strokeStyle = `${edgeWidth}px solid ${edge.toRGBA()}`;\r\n    // ctx.strokeStyle = Stroke.So\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { ResourceBlock } from \"./Economy\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { Color, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\n\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n}\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nexport enum MachineOperation {\r\n    // generic functioning: consuming a block to produce a new block\r\n    Work,\r\n    // more interesting functions\r\n    SpawnCitizen,\r\n    CollectResource,\r\n    CollectMeals,\r\n    CollectData\r\n}\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n\r\n    size: DeviceSize = DeviceSize.Small\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n\r\n    // need to stop using this both for work time and 'generation' time\r\n    // productionTime: number = 500\r\n    generationTime: number = 3000\r\n    workTime: number = 10000\r\n    capacity: number = 2\r\n\r\n    behavior: MachineOperation = MachineOperation.Work\r\n\r\n    image = images.vat\r\n\r\n    prereqs: (typeof Machine)[] = []\r\n\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command'\r\n    description = 'gather resources...'\r\n    behavior = MachineOperation.CollectResource\r\n    image = images.bench\r\n\r\n    size = DeviceSize.Medium\r\n}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n}\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H20 Condenser'\r\n    prereqs = [ SolarCell ]\r\n}\r\n\r\n/// small subsurface\r\nexport class StudyMachine extends Machine {\r\n    consumes = ResourceBlock.Hypothesis\r\n    produces = ResourceBlock.Data\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n    // color = Blue\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    prereqs = [ Bookshelf ]\r\n    color = Blue\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    produces = ResourceBlock.Hypothesis\r\n    image = images.bookshelf\r\n    prereqs = [ OxygenExtractor, Desk ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    behavior = MachineOperation.CollectMeals\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    consumes = ResourceBlock.Food\r\n    produces = ResourceBlock.Meal\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n}\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    prereqs = [ Bed ]\r\n    produces = ResourceBlock.Food\r\n    capacity = 1\r\n    color = Green\r\n}\r\n\r\n// medium\r\n\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    produces = ResourceBlock.Hypothesis\r\n    behavior = MachineOperation.CollectData\r\n    image = images.server\r\n    prereqs = [Bookshelf]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   produces = ResourceBlock.Food\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   consumes = ResourceBlock.Food\r\n   produces = ResourceBlock.Meal\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    produces = ResourceBlock.Food\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    produces = ResourceBlock.Food\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'grow some replacements'\r\n    behavior = MachineOperation.SpawnCitizen \r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    consumes = ResourceBlock.Ore\r\n    produces = ResourceBlock.Mineral\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    // ...\r\n}\r\n\r\n//export class HoloProjector extends Machine {\r\n//    name = 'Holo Projector'\r\n//    size = DeviceSize.Medium\r\n//    color = Violet\r\n//}\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    produces = ResourceBlock.Ore\r\n//\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n}\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n]","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Hope = 'Hope',\r\n    Shelter = 'Shelter',\r\n    Oxygen = 'Oxygen',\r\n}\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport const emptyMarket : Economy = {\r\n    Power: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n    Hope: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n    Shelter: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n    Oxygen: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Food = 'Food',\r\n    Ore = 'Ore',\r\n    Data = 'Data',\r\n    // derived\r\n    Meal = 'Meal',\r\n    Hypothesis = 'Hypothesis',\r\n    Mineral = 'Mineral',\r\n    Alloy = \"Alloy\"\r\n}\r\n\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Food: Color.Green,\r\n    Data: Color.Blue,\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(0.2),\r\n    Hypothesis: Color.Violet.darken(0.4),\r\n    Ore: Color.Red.darken(0.5),\r\n\r\n    Alloy: Color.LightGray.darken(0.2),\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    //Color.Violet\r\n    //switch(block) {\r\n    //    case ResourceBlock.Food: baseColor = Color.Green; break\r\n    //    case ResourceBlock.Ore:  baseColor = Color.Red; break\r\n    //    case ResourceBlock.Data: baseColor = Color.Blue; break\r\n    //    case ResourceBlock.Meal: baseColor = Color.Yellow; break\r\n    //}\r\n    return baseColor.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\n\r\nconst { major, minor } = Scale\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    dominantColor: Color = Color.Gray\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n    productionTime: number = 500\r\n\r\n    // constructor(public origin: Vector = new Vector(0, 0)) { }\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n    // slotSize\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MissionControl ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MissionControl ],\r\n        [Orientation.Right]: [  Dome, MissionControl ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    // name: string = 'Biodome';\r\n    description: string = 'Biome sweet biome';\r\n    // dominantColor = Color.Green\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.eighth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n        // Cabin, CookingFire\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = [\r\n        Stove,\r\n        Bed,\r\n        Desk,\r\n        Bookshelf,\r\n        Fridge,\r\n        Workstation,\r\n        Houseplant,\r\n    ]\r\n\r\n    prereqs = [\r\n        // Dome \r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    prereqs = [ SmallDome ]\r\n    // two small slots\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.third\r\n    // two medium slots...\r\n    machines = [\r\n        ResearchServer,\r\n        AlgaeVat,\r\n        CloningVat,\r\n        Fabricator,\r\n    ]\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 6 * major.eighth\r\n    height = 4 * major.fifth\r\n\r\n    // two big slots?\r\n    machines = [\r\n        MiningDrill,\r\n        Megafabricator,\r\n        // Preserve,\r\n    ]\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = [ LogicCrystal ] // ultrafab...\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.eighth\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = [\r\n        Cabin,\r\n        Orchard,\r\n        Arbor,\r\n        // Campfir\r\n    ]\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 8 * major.eighth\r\n    height = 6 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = [\r\n        Preserve\r\n    ]\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = [\r\n        Microcity\r\n    ]\r\n}\r\n\r\n//////\r\n\r\nexport class MissionControl extends Structure {\r\n    name: string = 'Mission Control';\r\n    description: string = 'Keeping everything on track';\r\n    view: string = 'MissionControlView';\r\n    width: number = 6 * major.eighth\r\n    height: number = 1 * major.sixth\r\n    zoom = 0.1\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = [ CommandCenter ]\r\n}\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0 //.5\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine, MachineOperation } from \"../models/Machine\";\r\nimport { Building, CommonAreaView } from \"./Building\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { SmallRoomThree, SmallRoomTwo, MediumRoom, SmallDome, MidDome, LargeRoom, allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\n\r\nexport class Device extends Actor {\r\n    product: ResourceBlock[] = []\r\n    // capacity: number = 4\r\n\r\n    nameLabel: Label\r\n\r\n    image: any\r\n    imageLoaded: boolean = false\r\n\r\n    building: Building // set once built?\r\n\r\n    inUse: boolean = false\r\n\r\n    constructor(\r\n        // public building: Building,\r\n        public machine: Machine,\r\n        private initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            // machine.height,\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = function () {\r\n             this.imageLoaded = true\r\n        }\r\n        this.image.src = machine.image\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        // super.draw(ctx, delta)\r\n        ctx.drawImage(\r\n            this.image,\r\n            this.pos.x - this.getWidth() / 2,\r\n            this.pos.y - this.getHeight() / 2 - 10,\r\n            this.getWidth(), this.getHeight()\r\n        )\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= 10 //ctx.measureText(this.machine.name).width / 2\r\n            this.nameLabel.pos.y += 8 + this.getHeight()/2\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let bx = this.x - this.getWidth()/2 + 5, by = this.y - 23\r\n        let blockSize = 5\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).desaturate(0.3).lighten(0.2).toRGBA();\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get produces()       { return this.machine.produces }\r\n    get consumes()       { return this.machine.consumes }\r\n    get workTime()       { return this.machine.workTime }\r\n    get generationTime() { return this.machine.generationTime }\r\n    // get productionTime() { return this.machine.productionTime }\r\n    get capacity()       { return this.machine.capacity }\r\n\r\n    async interact(citizen: Citizen) {\r\n        if (this.inUse) {\r\n            citizen.waitToUse(this)\r\n            return\r\n        }\r\n\r\n        if (this.product.length > 0) {\r\n            this.product.pop()\r\n            this.inUse = true\r\n            await citizen.progressBar(500) //this.productionTime)\r\n            this.inUse = false\r\n            citizen.carry(this.produces)\r\n        } else {\r\n            if (this.consumes && citizen.carrying === this.consumes) {\r\n                this.inUse = true\r\n                await citizen.progressBar(this.workTime)\r\n                citizen.carry(this.produces)\r\n                this.inUse = false\r\n            }\r\n        }\r\n\r\n        if (this.machine.behavior === MachineOperation.Work) {\r\n            // ...\r\n\r\n        } else if (this.machine.behavior === MachineOperation.CollectResource) {\r\n            // generic redeem..\r\n            let resource = citizen.drop()\r\n            if (resource) {\r\n                this.building.redeem(resource)\r\n            }\r\n        } else if (this.machine.behavior === MachineOperation.CollectMeals) {\r\n            // store a meal...\r\n            if (citizen.carrying === ResourceBlock.Meal) {\r\n                let resource = citizen.drop()\r\n                if (resource) {\r\n                    this.building.redeem(resource)\r\n                }\r\n            }\r\n        } else if (this.machine.behavior === MachineOperation.CollectData) {\r\n            // store research\r\n            if (citizen.carrying === ResourceBlock.Data) {\r\n                let resource = citizen.drop()\r\n                if (resource) {\r\n                    this.building.redeem(resource)\r\n                }\r\n            }\r\n        } else {\r\n            console.warn(\"no handler for this interaction\", { device: this })\r\n        }\r\n    }\r\n\r\n    public produce(step: number) {\r\n        if (step % this.generationTime === 0) {\r\n            if (this.machine.behavior === MachineOperation.Work) {\r\n\r\n                if (this.produces && !this.consumes && this.product.length < this.capacity) {\r\n                    this.product.push(this.produces)\r\n                }\r\n            } else if (this.machine.behavior === MachineOperation.SpawnCitizen) {\r\n                setTimeout(() => this.building.populate(this.pos), 100)\r\n            }\r\n        }\r\n    }\r\n\r\n    // todo only snap when close enough? try to prevent some mis-clicks?\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            // hmmm\r\n            allStructures,\r\n            // machines count < device slots count\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        if (bldg) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n            //devicePlaces()[\r\n            //    this.building.devices.length\r\n            //]\r\n        }\r\n\r\n        return !!bldg;\r\n    }\r\n\r\n    finalize() {\r\n        // this.building.devices.push(this)\r\n    }\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 100\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() { //loader: ex.Loader) {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    // device nodes are huge sized...\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    // device nodes are large sized...\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    // device nodes are medium sized...\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 20 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n        let ds = [\r\n            new Vector(x - w / 2, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w / 2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 8, 'Helvetica');\r\n        this.count.fontSize = 12;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            // non-accruable\r\n            [ResourceBlock.Food]: null,\r\n            [ResourceBlock.Hypothesis]: null,\r\n            [ResourceBlock.Ore]: null,\r\n\r\n            // displayed/accruable\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n\r\n            // derived/accurable\r\n            [ResourceBlock.Alloy]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 60, 60, Color.DarkGray.darken(0.8));\r\n        let rx0 = -8, ry0 = -10;\r\n        let resources = [ResourceBlock.Meal, ResourceBlock.Data, ResourceBlock.Mineral];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0, ry = ry0 + index * 10;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        console.log(\"INCREMENT\", { resource })\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n}\r\n","import { Label, UIActor, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, SmallRoomThree, SmallRoomTwo, MediumRoom, MidDome, SmallDome, LargeRoom, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { Desk, Bookshelf, Machine, CloningVat, WaterCondensingMachine, OxygenExtractor, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Cabin, Orchard, SolarCell, Megafabricator, Arbor, Fabricator, MiningDrill, Preserve, Workstation, Houseplant, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\n\r\nexport class Hud extends UIActor {\r\n    private restrictConstruction: boolean = false\r\n    private messageLabel: Label\r\n\r\n\r\n    private resources: ResourcesList\r\n\r\n    private _structurePaletteElement: HTMLDivElement\r\n    private _machinePaletteElement: HTMLDivElement\r\n\r\n    static structuresForPalette = [\r\n        // infra\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n\r\n        ...allStructures\r\n\r\n    ];\r\n\r\n    comprehendedStructures: (typeof Structure)[] = []\r\n    builtStructures: (typeof Structure)[] = []\r\n\r\n    static machinesForPalette = allMachines\r\n\r\n    comprehendedMachines: (typeof Machine)[] = []\r\n    builtMachines: (typeof Machine)[] = []\r\n\r\n    constructor(private game: Game, protected onBuildingSelect = null, protected onMachineSelect = null) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.messageLabel = new Label('hi', 20, game.canvasHeight - 64, 'Verdana')\r\n        this.messageLabel.fontSize = 24\r\n        this.messageLabel.color = Color.White\r\n        this.add(this.messageLabel)\r\n\r\n        this._makeStructurePalette(onBuildingSelect)\r\n        this._makeMachinePalette(onMachineSelect)\r\n\r\n        this.resources = new ResourcesList(50, 40)\r\n        this.add(this.resources)\r\n\r\n        // this.add(this.status)\r\n\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this._structurePaletteElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._structurePaletteElement.style.left = `${left + 20}px`;\r\n            this._structurePaletteElement.style.top = `${top + 100}px`;\r\n        }\r\n        if (this._machinePaletteElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._machinePaletteElement.style.left = `${left + 20}px`;\r\n            this._machinePaletteElement.style.top = `${top + 380}px`;\r\n        }\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.resources.increment(resource)\r\n\r\n    }\r\n\r\n    updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        this.comprehendedStructures = Hud.structuresForPalette\r\n        if (this.restrictConstruction) {\r\n            this.builtStructures =\r\n                Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n\r\n            this.comprehendedStructures = this.comprehendedStructures.filter((structure: typeof Structure) => {\r\n                let s = new structure()\r\n                let prereqs: (typeof Structure)[] = s.prereqs\r\n                return prereqs.every((prereq: (typeof Structure)) => {\r\n                    let built = this.builtStructures.some((s: (typeof Structure)) => s === prereq)\r\n                    return built\r\n                })\r\n            })\r\n        }\r\n\r\n        // console.log(\"Built\", { built: this.builtStructures, comprehended: this.comprehendedStructures })\r\n\r\n        this._structurePaletteElement.parentElement.removeChild(this._structurePaletteElement)\r\n        this._makeStructurePalette(this.onBuildingSelect)\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let bldgs = colony.buildings\r\n        let availableMachines = flatSingle(bldgs.map(b => b.structure.machines))\r\n        let devices = colony.findAllDevices()\r\n\r\n        this.builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine))\r\n        this.comprehendedMachines = Hud.machinesForPalette.filter((machine: typeof Machine) => {\r\n            let canBuild = availableMachines.includes(machine);\r\n            return canBuild && (new machine()).prereqs.every((prereq: (typeof Machine)) => {\r\n                return this.builtMachines.some((m: (typeof Machine)) => m === prereq)\r\n            })\r\n\r\n        })\r\n        this._machinePaletteElement.parentElement.removeChild(this._machinePaletteElement)\r\n        this._makeMachinePalette(this.onMachineSelect)\r\n    }\r\n\r\n\r\n    protected _makeStructurePalette(fn: (Structure) => any) {\r\n        this._structurePaletteElement = document.createElement('div') \r\n        this._structurePaletteElement.style.position = 'absolute'\r\n        this._structurePaletteElement.style.border = '1px solid white'\r\n        document.body.appendChild(this._structurePaletteElement)\r\n\r\n        this.comprehendedStructures\r\n        .map(structure => new structure())\r\n        .forEach((structure: Structure) => {\r\n            let label = structure.name\r\n            if (!this.builtStructures.map(s => new s().name).includes(structure.name)) {\r\n                label += ' *';\r\n            }\r\n            let clr = structure.dominantColor\r\n            let _paletteButton = this.buttonFactory(label, clr); //structure);\r\n            this._structurePaletteElement.appendChild(\r\n                _paletteButton\r\n            )\r\n            if (fn) {\r\n                _paletteButton.onclick = () => { fn(structure) }\r\n            }\r\n        });\r\n    }\r\n\r\n    protected _makeMachinePalette(fn: (Machine) => any) {\r\n        this._machinePaletteElement = document.createElement('div')\r\n        // this._machinePaletteElement.id =\r\n        this._machinePaletteElement.style.position = 'absolute'\r\n        this._machinePaletteElement.style.border = '1px solid white'\r\n        document.body.appendChild(this._machinePaletteElement)\r\n\r\n        // Hud.machinesForPalette\r\n        this.comprehendedMachines\r\n            .map(Machine => new Machine())\r\n            .sort((a,b) => a.color > b.color ? -1 : 1)\r\n            .forEach(machine => {\r\n                let label = machine.name\r\n                if (!this.builtMachines.map(m => new m().name).includes(machine.name)) {\r\n                    label += ' *'\r\n                }\r\n                let clr = machine.color\r\n                let btn = this.buttonFactory(label, clr)\r\n                this._machinePaletteElement.appendChild(btn)\r\n                if (fn) {\r\n                    btn.onclick = () => { fn(machine) }\r\n                }\r\n            })\r\n        // this.machin\r\n\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) { //s: Structure) {\r\n        let bg = color.darken(0.6).desaturate(0.5).clone()\r\n        bg.a = 0.8\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone()\r\n        let paletteButton = document.createElement('button');\r\n\r\n        paletteButton.textContent = label; // `${s.name}`;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '9pt';\r\n\r\n        paletteButton.style.fontFamily = 'Helvetica';\r\n        paletteButton.style.fontWeight = '600';\r\n        paletteButton.style.padding = '3px';\r\n        paletteButton.style.width = '180px';\r\n        paletteButton.style.textTransform = 'uppercase'\r\n        paletteButton.style.border = '1px solid rgba(255,255,255,0.08)'\r\n\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA()\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA()\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA()\r\n        }\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA()\r\n            paletteButton.style.color = fg.toRGBA()\r\n        }\r\n\r\n        return paletteButton;\r\n    }\r\n}","import { CommonAreaView } from '.'\r\nimport { Vector } from 'excalibur';\r\n// import { Corridor, Refinery, Mine } from '../../models/Structure';\r\n\r\nexport class MineView extends CommonAreaView {\r\n    floorHeight = 150\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    // validConnectingStructures() { return [ Corridor, Mine, Refinery ]}\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    // edgeWidth = 1\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2 // - 20\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        // super.draw(ctx, delta)\r\n\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        // ctx.bezierCurveTo(-3 + xoff, 514 + yoff, 1 + xoff, 406 + yoff, 1 + xoff, 391 + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { MissionControl } from \"../../models/Structure\";\r\nimport { range, eachCons, measureDistance, drawRect } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n    // edgeWidth = 0.2\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y) //, Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        // connect node to first slot...\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            // we're determining depth of tunnel\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MissionControlView extends Building {\r\n    hideBox = true\r\n\r\n    devicePlaces() {\r\n        return this.nodes().map(n => {\r\n            n.y -= 20\r\n            return new DevicePlace(n, DeviceSize.Medium)\r\n        }) \r\n    }\r\n\r\n    afterConstruct() {\r\n        // build devices?\r\n        let { machines } = this.structure;\r\n        if (machines && machines.length > 0) {\r\n            let machine = new machines[0]();\r\n            this.devicePlaces().forEach(place => {\r\n                let theDevice = new Device(machine, place.position)\r\n                this.addDevice(theDevice)\r\n                // this.devices.push(theDevice)\r\n                // theDevice.building = this;\r\n                // this.add(theDevice)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2 // + 1\r\n    }\r\n\r\n    //async interact(citizen: Citizen) {\r\n    //}\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor();\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n        // y is going to be surface height\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        // could draw a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawRect } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 10\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n    // maybe you can set height AND width of common area view??\r\n    // maybe just width...\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n\r\n        drawRect(ctx, this.aabb(), 0.125, this.processedColor())\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight,\r\n              width: this.getWidth(), height: this.floorHeight },\r\n              0,\r\n              this.colorBase().lighten(0.7)\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        // top slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        // bottom slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)) //-16)\r\n        ];\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 10 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine } from './Machine';\r\n\r\nexport class SpaceFunction {\r\n    static label: string = '(generic)';\r\n    static machines: (typeof Machine)[] = [];\r\n}\r\n\r\nclass LivingQuarters extends SpaceFunction {\r\n    static label = 'Living Quarters'\r\n    static machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n    static label = 'Barracks'\r\n    static machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nclass Kitchen extends SpaceFunction {\r\n    static label = 'Kitchen'\r\n    static machines = [ Stove, Fridge ]\r\n}\r\n\r\nclass LifeSupportPod extends SpaceFunction {\r\n    static label = 'Life Support Module'\r\n    static machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n    static label = 'Retreat'\r\n    static machines = [ Cabin, Cabin ]\r\n}\r\n\r\nclass CloneMatrix extends SpaceFunction {\r\n    static label = 'Clone Matrix'\r\n    static machines = [ CloningVat, CloningVat ] //\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n    static label = 'Reading Room'\r\n    static machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nclass Library extends SpaceFunction {\r\n    static label = 'Library'\r\n    static machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n}\r\n\r\nclass Study extends SpaceFunction {\r\n    static label = 'Study'\r\n    static machines = [ StudyMachine, Bookshelf ]\r\n}\r\n\r\nclass Lab extends SpaceFunction {\r\n    static label = 'Lab'\r\n    static machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nclass Archive extends SpaceFunction {\r\n    static label = 'Archive'\r\n    static machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n    static label = 'Arboretum'\r\n    static machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n    static label = 'Algae Farm'\r\n    static machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nclass SolarArray extends SpaceFunction {\r\n    static label = 'Solar Array'\r\n    static machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nclass Workshop extends SpaceFunction {\r\n    static label = 'Workshop'\r\n    static machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\n// 3 house plants => nursery?\r\nclass Nursery extends SpaceFunction {\r\n    static label = 'Nursery'\r\n    static machines = [ Houseplant, Houseplant, Houseplant ]\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n    static label = 'Farm'\r\n    static machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n    static label = 'Factory'\r\n    static machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    Lab,\r\n]","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons } from \"../Util\";\r\n// import { Machine, Stove, ExperimentBench, MineralProcessor, CommandCenter, Orchard, MiningDrill, Bookshelf, CookingFire, Cabin } from \"../models/Machine\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { MachineOperation } from \"../models/Machine\";\r\nimport { worker } from \"cluster\";\r\n// import { Machine, Stove, CommandCenter } from \"../models/Machine\";\r\n\r\nexport class Citizen extends Actor {\r\n\r\n    walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock = null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    constructor(private device: Device, protected planet: Planet) {\r\n        super(device.x, device.y, Scale.minor.first, Scale.minor.third, Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = (now - this.workStarted) / this.workDuration //0.5\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            ctx.fillStyle = blockColor(this.carrying).toRGBA()\r\n            ctx.fillRect(this.x+4, this.y-3, 5, 5)\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            // draw progress bar?\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            // ctx.stroke(20)\r\n            ctx.strokeRect(px, py, pw, ph)\r\n\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n\r\n            this.vel.x += (Math.random())-0.5 // * 10.0)\r\n        }\r\n\r\n        let debugPath = false\r\n        if (this.path && debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 10\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    carry(c: ResourceBlock) { //c: Color) {\r\n        this.carrying = c;\r\n    }\r\n\r\n    drop(): ResourceBlock {\r\n        if (this.carrying) {\r\n            let c = this.carrying; //.clone();\r\n            this.carrying = null;\r\n            return c\r\n        }\r\n        return null\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        // console.log(\"PROGRESS BAR\")\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        // console.log(\"PROGRESS BAR DONE!\")\r\n        this.workInProgress = false\r\n    }\r\n\r\n    async pathTo(building: Building) { //}, onArrival: (Building) => any) {\r\n        // let building = this.planet.closestBuildingByType(this.pos, structure)\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            path.pop()\r\n            path.shift()\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = null\r\n            // onArrival(building);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    waitToUse(device) {\r\n        setTimeout(() => device.interact(this), 250)\r\n    }\r\n\r\n    async work() {\r\n        if (this.carrying) {\r\n            let item: ResourceBlock = this.carrying;\r\n            let sink: Device = this.planet.closestDevice(this.pos,\r\n                [],\r\n                (device) => \r\n                        device.machine.consumes === item ||\r\n                        device.machine.behavior === MachineOperation.CollectResource ||\r\n                        item === ResourceBlock.Meal && device.machine.behavior === MachineOperation.CollectMeals ||\r\n                        item === ResourceBlock.Data && device.machine.behavior === MachineOperation.CollectData\r\n            )\r\n\r\n            if (sink) {\r\n                await this.pathTo(sink.building)\r\n                await this.glideTo(sink.pos)\r\n                await sink.interact(this)\r\n            } else {\r\n                console.log(\"nowhere to deliver it\", this.carrying)\r\n            }\r\n        } else {\r\n            let source: Device = this.planet.closestDevice(this.pos,\r\n                [],\r\n                // [ Cabin, Orchard, MiningDrill, Bookshelf ],\r\n                (d) => d.product.length > 0\r\n            )\r\n\r\n            if (source) {\r\n                await this.pathTo(source.building)\r\n                await this.glideTo(source.pos)\r\n                await source.interact(this)\r\n            } else {\r\n                console.log(\"i guess i can try again? (sleep for a bit first)\")\r\n                await new Promise((resolve, reject) => setTimeout(resolve, 150));\r\n            }\r\n        }\r\n\r\n        setTimeout(() => this.work(), 100)\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(home: Device) {\r\n        let citizen = new Citizen(home, this.planet);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","module.exports = __webpack_public_path__ + \"cffe40698a3b47b52ca0ff90a2c86ddf.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"86e09b7a9e4997af44c45206eb8694ad.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure, MissionControl } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n    maxPop: number = 8\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = false\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findAllDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d)\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices() {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\n\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n\r\n    constructor(\r\n        public hud: Hud,\r\n        public color: Color,\r\n        public width: number = 2000000,\r\n        public depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, width, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2\r\n        // crust\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector) {\r\n        // we could have a colony pop limit for now?\r\n        if (this.population.citizens.length < this.colony.maxPop) {\r\n            // let home = this.closestBuildingByType(pos, [CloneMatrix])\r\n            let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(home)\r\n        }\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n}","import { Scene, Input, Vector } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MissionControl, MainTunnel, Corridor, SurfaceRoad } from \"../models/Structure\";\r\nimport { Building, DomeView, CorridorView, CommonAreaView, TunnelView, MissionControlView, LadderView, ArcologyView, } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { SurfaceRoadView } from \"../actors/Building/SurfaceRoadView\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { SmallRoomThreeView } from \"../actors/Building/SmallRoomThreeView\";\r\nimport { MidDomeView } from \"../actors/Building/MidDomeView\";\r\nimport { MediumRoomView } from \"../actors/Building/MediumRoomView\";\r\nimport { LargeRoomView } from \"../actors/Building/LargeRoomView\";\r\nimport { HugeRoomView } from \"../actors/Building/HugeRoomView\";\r\nimport { BigDomeView } from \"../actors/Building/BigDomeView\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    static structureViews: { [key: string]: typeof Building } = {\r\n        CorridorView,\r\n        LadderView,\r\n        TunnelView,\r\n        SurfaceRoadView,\r\n\r\n        DomeView,\r\n        MidDomeView,\r\n        BigDomeView,\r\n\r\n        MissionControlView,\r\n        // SmallRoomTwoView, [ none, same as common area? ]\r\n        SmallRoomThreeView,\r\n\r\n        CommonAreaView,\r\n        MediumRoomView,\r\n        LargeRoomView,\r\n        HugeRoomView,\r\n\r\n        ArcologyView,\r\n    }\r\n    ////\r\n    static requiredStructureList: Array<typeof Structure> = [\r\n        MissionControl,\r\n\r\n        SurfaceRoad,\r\n        // OxygenAccumulator,\r\n        // Dome,\r\n        MainTunnel,\r\n        Corridor,\r\n        // Kitchen,\r\n        // Study,\r\n        // CloneMatrix,\r\n    ]\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n\r\n        this.hud = new Hud(game, (structure) => {\r\n            this.startConstructing(structure)\r\n        }, (device) => {\r\n            this.startConstructing(device)\r\n        });\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(this.hud, game.world.color);\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(2, 10000)\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    // console.warn(\"would snap device in place!\")\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            this.hud.updatePalettes(this.planet.colony)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n\r\n                            // deviceUnderConstruction.finalize()\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.updatePalettes(this.planet.colony)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                // cancel building in progress?\r\n                this.planet.colony.currentlyConstructing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingRequiredStructure(): Structure {\r\n        let requiredStructures: Structure[] = Construct.requiredStructureList.map(s => new s())\r\n        let actualStructureNames: string[] = this.buildings.map(building => building.structure.name)\r\n\r\n        return requiredStructures.find(structure => !actualStructureNames.includes(structure.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.setMessage(`Welcome to OSIRIS!`)\r\n        }\r\n    }\r\n\r\n    startConstructing(structureOrMachine: Structure | Machine, pos: Vector = new Vector(0, 0)) {\r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            // structure.origin = pos // thread this out somehow??\r\n            this.hud.setMessage(`Place ${structure.name}`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            this.camera.zoom(structure.zoom, 250)\r\n        } else if (structureOrMachine instanceof Machine) {\r\n            // setup machine?\r\n            let machine = structureOrMachine\r\n            // machine.origin = pos\r\n\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            this.camera.zoom(1.5, 250)\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = theNextOne\r\n        if (theNextOne) {\r\n            console.warn(\"would start constructing\", { theNextOne })\r\n            this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        // let bldg = this.planet.closestBuildingByType(pos, [ CommonArea, Biodome ])\r\n        let device = new Device(machine, pos)\r\n        device.snap(this.planet)\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(anotherBuilding.pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = Construct.structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Red, Color.Blue, Color.Green] // Color.Viridian, Color.Magenta, Color.Chartreuse];\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ). // Color.Rose //World.colors).\r\n        lighten(0.15).\r\n        desaturate(0.65) // sample([Color.Blue, Color.Rose,Color.Blue]).lighten(0.1).desaturate(0.8)\r\n//   colony: Colony = new Colony()\r\n\r\n  \r\n}","module.exports = __webpack_public_path__ + \"0f6ac78b40c6bc151aee01b517f49ca1.png\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\nconst bookshelf = require('./images/bookshelf.png');\r\n// const bookshelfSvg = require('./images/bookshelf-plain.svg');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword),\r\n\r\n    Bookshelf: new ex.Texture(bookshelf),\r\n\r\n    // BookshelfSVG: new ex.Texture(bookshelfSvg)\r\n}\r\n\r\nexport { Resources }\r\n","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\n// scenes\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}