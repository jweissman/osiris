{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/models/Structure.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/Util.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Economy.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Building/PowerPlantView.ts","webpack:///./src/actors/Building/KitchenView.ts","webpack:///./src/actors/Building/MessView.ts","webpack:///./src/actors/Building/MineView.ts","webpack:///./src/actors/Building/LabView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Hud.ts","webpack:///./src/actors/Building/LivingQuartersView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/MissionControlView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/AccessTunnelView.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/values/Scale.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","Economy_1","Scale_1","Scale","minor","first","major","Structure","[object Object]","origin","Vector","this","description","view","width","height","zoom","consumes","produces","productionTime","MissionControl","third","MainTunnel","second","eighth","Dome","ResourceBlock","Food","sixth","AccessTunnel","fifth","CommonArea","LivingQuarters","SurfaceRoad","Laboratory","Data","Kitchen","Meal","fourth","Mess","Mine","Ore","PowerPlant","Building_1","Building","AccessTunnelView_1","AccessTunnelView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","MissionControlView_1","MissionControlView","TunnelView_1","TunnelView","LivingQuartersView_1","LivingQuartersView","Orientation","Left","Up","Right","Down","flip","orientation","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","distanceToCursor","elem","distance","flatSingle","concat","deleteByValue","e","eachCons","measureDistance","b","ex","Orientation_1","Util_1","Graph_1","Actor","structure","planet","super","x","y","color","built","hover","showLabel","facing","edgeWidth","hideBox","childrenBuildings","product","capacity","step","anchor","setup","traits","trait","Traits","OffscreenCulling","on","collisionType","CollisionType","PreventCollision","label","Label","Color","White","ctx","delta","drawRect","aabb","forEach","produced","index","fillStyle","blockColor","desaturate","lighten","toRGBA","fillRect","pos","getCenter","measureText","draw","engine","update","produce","clone","getWidth","getHeight","supergraph","Graph","g","nodes","rootNode","findOrCreate","child","slot","parentSlot","edge","childNode","graph","citizen","carry","pop","carrying","progressBar","console","log","rectangle","edgeColor","main","mainColor","other","rect1","rect2","buildings","find","bldg","overlaps","processedColor","darken","clr","colorBase","overlapsAny","Red","validConnectingStructures","closestBuildingByType","slotList","building","slots","validConnectingDirections","includes","some","ourSlot","theSlot","findSlot","matchingSlot","offset","sub","addEqual","parent","block","baseColor","Violet","Green","Blue","Yellow","t","empty","edges","edgesInverse","size","newNode","contains","testNode","measure","tolerance","dfs","node","src","dst","indexOf","otherGraph","edgeList","theEdges","otherIndex","otherNode","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","cb","bfsIndex","halt","visitedNode","adj","adjacentNode","maxStep","prevStep","dstIndex","bfs","prev","curr","path","steps","srcIndex","reverse","Resources_1","Game","Engine","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","loader","Loader","key","Resources","addResource","start","citizenSpeed","_1","Structure_1","PowerPlantView","theSlots","slotY","leftSlot","buildSlot","rightSlot","alignToSlot","KitchenView","MessView","MineView","floorHeight","LabView","SurfaceRoadView","Hud","UIActor","message","onBuildingSelect","fontSize","add","_makePalette","text","_paletteElement","left","canvas","offsetLeft","top","offsetTop","style","document","createElement","position","body","appendChild","structuresForPalette","_paletteButton","buttonFactory","onclick","paletteButton","textContent","display","fontFamily","padding","background","Black","setTimeout","populate","pickingOrigin","halfWidth","slotHeights","y0","y1","btm","right","slotCount","heights","getTop","setHeight","__awaiter","Promise","h","throw","done","then","resource","drop","flagX","flagY","beginPath","arc","PI","closePath","originX","reshape","constrainCursor","newCursor","setWidth","abs","Player","NavigationTree","dest","shortestPath","Mountains","peaks","xOff","peakDistance","times","heightRange","drift","brightColor","saturate","yBase","peak","mtnWidth","moveTo","lineTo","majorUnit","seventh","minorUnit","minorScale","Game_1","Citizen","walkSpeed","workInProgress","now","Date","getTime","progress","workStarted","workDuration","pw","ph","px","py","strokeStyle","strokeRect","vel","actions","asPromise","duration","resolve","reject","pathBetween","all","glideTo","item","sinks","theSink","walkTo","interact","source","work","Citizen_1","PlanetBackground_1","NavigationTree_1","Planet","depth","citizens","currentlyConstructing","createLayer","layerHeight","theLayer","buildNavTree","afterConstruct","home","structureTypes","structureType","destination","navTree","srcNode","closestNode","destNode","seekPath","ctrl","Planet_1","player_1","Hud_1","SurfaceRoadView_1","LabView_1","MineView_1","MessView_1","KitchenView_1","PowerPlantView_1","Construct","Scene","dragging","game","player","hud","startConstructing","prepareNextBuilding","camera","input","pointers","primary","dragOrigin","currentBuilding","constrained","button","Input","PointerButton","placementValid","handleClick","placeBuilding","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","off","requiredStructures","requiredStructureList","actualStructureNames","nextMissing","nextMissingRequiredStructure","theNextOne","spawnBuilding","anotherBuilding","assembleBuildingFromStructure","structureViews","Colony","structures","World","colors","Cyan","Vermillion","colony","sword","Sword","Texture","World_1","Construct_1","theWorld","construct","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([32,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Vector } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\n\r\n// let sizeFactor = 0.85\r\n\r\nlet minorUnit = Scale.minor.first  //* sizeFactor\r\nlet majorUnit = Scale.major.first //* sizeFactor\r\n\r\n// let megaUnit = 16 * majorUnit\r\nconst { major, minor } = Scale\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10 //* sizeFactor\r\n    height: number = 10 //* sizeFactor\r\n    zoom: number = 1 // 0.1 //.25\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n    productionTime: number = 100\r\n\r\n    constructor(public origin: Vector = new Vector(0, 0)) { }\r\n}\r\n\r\nexport class MissionControl extends Structure {\r\n    name: string = 'Mission Control';\r\n    description: string = 'Keeping everything on track';\r\n    view: string = 'MissionControlView';\r\n    width: number = major.third // 10 * majorUnit\r\n    height: number = minor.third //3 * majorUnit\r\n    zoom = 0.1\r\n}\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second // 2 * majorUnit\r\n    height: number = major.eighth // 10 * majorUnit //150 // * sizeFactor\r\n    zoom = 0.25\r\n}\r\n\r\nexport class Dome extends Structure {\r\n    name: string = 'Biodome';\r\n    description: string = 'Biome sweet biome';\r\n    produces = ResourceBlock.Food\r\n\r\n    view: string = 'DomeView';\r\n    width: number = major.sixth // 10 * majorUnit\r\n    height: number = major.third //8 * majorUnit\r\n    zoom = 0.2\r\n}\r\n\r\nexport class AccessTunnel extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'AccessTunnelView'\r\n    width: number = minor.fifth // 10 * minorUnit\r\n    height: number = minor.first //1 * minorUnit\r\n    zoom = 0.5\r\n}\r\n\r\nexport class CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth //8 * majorUnit\r\n    height: number = major.fifth //5 * majorUnit\r\n\r\n}\r\n\r\nexport class LivingQuarters extends Structure {\r\n    name: string = 'Quarters'\r\n    description: string = 'sleepy time'\r\n    view: string = 'LivingQuartersView'\r\n    width: number = major.third //minor.seventh // 3 * majorUnit\r\n    height: number = major.fifth //5 * majorUnit\r\n}\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth // 5 * minorUnit\r\n    height: number = minor.first // 1 * minorUnit\r\n}\r\n\r\nexport class Laboratory extends Structure {\r\n    name: string = 'Lab'\r\n    description: string = 'learn some things'\r\n    produces = ResourceBlock.Data\r\n    view: string = 'LabView'\r\n    width: number = major.sixth // 11 * majorUnit\r\n    height: number = major.fifth // 5 * majorUnit\r\n}\r\n\r\n\r\nexport class Kitchen extends Structure {\r\n    name: string = 'Kitchen'\r\n    description: string = 'veg -> meals'\r\n    consumes = ResourceBlock.Food\r\n    produces = ResourceBlock.Meal\r\n    view: string = 'KitchenView'\r\n    width: number = major.fourth // 4 * majorUnit\r\n    height: number = major.fifth //5 * majorUnit\r\n}\r\n\r\nexport class Mess extends Structure {\r\n    name: string = 'Mess'\r\n    description: string = 'consume meals'\r\n    view: string = 'MessView'\r\n    width: number = major.sixth //6 * majorUnit\r\n    height: number = major.fifth //5 * majorUnit\r\n}\r\n\r\n// a mine is maybe a wide structure that you\r\n// can gradually dig deeper??\r\nexport class Mine extends Structure {\r\n    name: string = 'Mine'\r\n    description: string = 'ore else'\r\n    produces = ResourceBlock.Ore\r\n    view: string = 'MineView'\r\n    width: number = major.eighth // 20 * majorUnit\r\n    height: number = 3 * major.sixth //20 * majorUnit\r\n}\r\n//export class Workshop extends Structure {\r\n//    name: string = 'Workshop'\r\n//    description: string = 'manual'\r\n//    view: string = 'WorkshopView'\r\n//    width: number = 120 * sizeFactor\r\n//    height: number = 80 * sizeFactor\r\n//}\r\n//\r\n//export class Factory extends Structure {\r\n//    name: string = 'Factory'\r\n//    description: string = 'assembly'\r\n//    view: string = 'FactoryView'\r\n//}\r\n\r\n// lab, mine, warehouse/storage, kitchen, workshop, factory\r\n\r\n// huge octagonal generating station with four 'slots'\r\n// for sub-structures (add-ons) which auto-generate data/ore\r\n// for the central 'power' slot ...\r\n// ...you can build either...\r\n// ...a mini black hole or mini sun\r\n// (the sun takes ore and the hole takes data?)\r\nexport class PowerPlant extends Structure {\r\n    name: string = 'Power Plant'\r\n    description: string = 'sunny day'\r\n    view: string = 'PowerPlantView'\r\n    width: number = major.eighth //30 * majorUnit\r\n    height: number = major.eighth // 30 * majorUnit\r\n}","import { Building } from './Building';\r\n\r\nimport { AccessTunnelView } from './AccessTunnelView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { MissionControlView } from './MissionControlView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { LivingQuartersView } from './LivingQuartersView';\r\n\r\nexport {\r\n    Building,\r\n\r\n    AccessTunnelView,\r\n    CommonAreaView,\r\n    DomeView,\r\n    MissionControlView,\r\n    TunnelView,\r\n    LivingQuartersView,\r\n}","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem)) //vec) => cursor.distance(vec)\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)","import { Actor, Vector, CollisionType, Color, Label } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport * as ex from 'excalibur';\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, flatSingle, measureDistance } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\n\r\nexport class Building extends Actor {\r\n    label: Label\r\n    built: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    edgeWidth: number = 4\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n    product: ResourceBlock[] = []\r\n    capacity: number = 4\r\n\r\n    constructor(public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          structure.origin.x,\r\n          structure.origin.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new ex.Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.label = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        this.label.color = Color.White\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            this.drawRect(ctx, this.aabb(), this.edgeWidth)\r\n        }\r\n\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).desaturate(0.3).lighten(0.2).toRGBA();\r\n            ctx.fillRect(this.x + 20 * index, this.y - 20, 18, 18)\r\n        })\r\n\r\n        if (this.showLabel) {\r\n            this.label.pos = this.getCenter()\r\n            this.label.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.label.draw(ctx, delta)\r\n        }\r\n\r\n        let debug = false;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    this.drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n            if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    this.drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n        if (this.step % 10 === 0) {\r\n            let tryProduce = this.built && this.produces && this.product.length < this.capacity;\r\n            if (tryProduce) {\r\n                this.produce(this.step);\r\n            }\r\n        }\r\n        this.step += 1\r\n    }\r\n\r\n    setup(): void {}\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    } \r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(cursor: Vector): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    get produces() { return this.structure.produces }\r\n    get consumes() { return this.structure.consumes }\r\n    get productionTime() { return this.structure.productionTime }\r\n\r\n    async interact(citizen: Citizen) {\r\n        if (this.product.length > 0) {\r\n            citizen.carry(this.produces)\r\n            this.product.pop()\r\n        } else {\r\n            if (this.consumes && citizen.carrying === this.consumes) {\r\n                await citizen.progressBar(this.productionTime)\r\n                citizen.carry(this.produces)\r\n            }\r\n        }\r\n    }\r\n\r\n    protected produce(step: number) {\r\n        if (this.produces && !this.consumes && step % this.productionTime === 0) {\r\n            let shouldProduce = true;\r\n            if (shouldProduce) {\r\n                this.product.push(this.produces)\r\n                console.log(\"PRODUCE\", { produces: this.produces, product: this.product })\r\n            }\r\n        }\r\n    }\r\n\r\n    protected drawRect(ctx: CanvasRenderingContext2D, rectangle: Rectangle, edgeWidth: number = 5, color: Color = null) {\r\n        let { x, y, width, height } = rectangle;\r\n\r\n        let edge = color || this.edgeColor();\r\n        ctx.fillStyle = edge.toRGBA();\r\n        ctx.fillRect(x, y, width, height)\r\n\r\n        let main = color || this.mainColor();\r\n        ctx.fillStyle = main.toRGBA();\r\n        ctx.fillRect(\r\n            x + edgeWidth,\r\n            y + edgeWidth,\r\n            width - edgeWidth*2,\r\n            height - edgeWidth*2\r\n        )\r\n    }\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    protected validConnectingStructures(): (typeof Structure)[] {\r\n        return [ ];\r\n    }\r\n\r\n    protected validConnectingDirections(): Orientation[] {\r\n        return [\r\n            Orientation.Up,\r\n            Orientation.Down,\r\n            Orientation.Left,\r\n            Orientation.Right\r\n        ]\r\n    }\r\n\r\n    protected findSlot(pos: Vector): Slot {\r\n        let buildings = this.validConnectingStructures().map(structure =>\r\n            this.planet.closestBuildingByType(pos, [structure])\r\n        )\r\n        let slotList = flatSingle(buildings.map(building => building ? building.slots() : []))\r\n\r\n\r\n        // select slots that COULD match one of our faces (and do so 'legally'...)\r\n        slotList = slotList.filter((slot: Slot) => \r\n            this.validConnectingDirections().includes(slot.facing) &&\r\n              this.slots().some((ourSlot: Slot) => slot.facing === flip(ourSlot.facing))\r\n        )\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(cursor: Vector) {\r\n        let theSlot = this.findSlot(cursor)\r\n        if (theSlot) {\r\n            // position us so our slot lines up\r\n            let matchingSlot = this.slots().find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n}","import { Color } from \"excalibur\";\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Food = 'Food',\r\n    Ore = 'Ore',\r\n    Data = 'Data',\r\n\r\n    // derived\r\n    Meal = 'Meal',\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = Color.Violet\r\n    switch(block) {\r\n        case ResourceBlock.Food: baseColor = Color.Green; break\r\n        case ResourceBlock.Ore:  baseColor = Color.Red; break\r\n        case ResourceBlock.Data: baseColor = Color.Blue; break\r\n        case ResourceBlock.Meal: baseColor = Color.Yellow; break\r\n    }\r\n    return baseColor.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 100\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() { //loader: ex.Loader) {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { Building } from \".\";\r\nimport { AccessTunnel } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class PowerPlantView extends Building {\r\n    showLabel = true\r\n\r\n    validConnectingStructures() { return [ AccessTunnel ]}\r\n\r\n    draw(ctx, delta) {\r\n        // octagon...\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() / 2\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n        return theSlots;\r\n    }\r\n\r\n   nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()/2 //-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)) //-16)\r\n        ];\r\n    }\r\n\r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n\r\n}","import { CommonAreaView } from \".\";\r\nimport { Color } from \"excalibur\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\n\r\nexport class KitchenView extends CommonAreaView {\r\n}","import { Building, CommonAreaView } from \".\";\r\n\r\nexport class MessView extends CommonAreaView {\r\n\r\n}","import { CommonAreaView } from '.'\r\nimport { Color, Vector } from 'excalibur';\r\nimport { ResourceBlock } from '../../models/Economy';\r\nimport { AccessTunnel } from '../../models/Structure';\r\n\r\nexport class MineView extends CommonAreaView {\r\n    floorHeight = 150\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    validConnectingStructures() { return [ AccessTunnel ]}\r\n}","import { CommonAreaView } from \".\";\r\nimport { Color } from \"excalibur\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\n\r\nexport class LabView extends CommonAreaView {\r\n}","import { AccessTunnelView } from \".\";\r\nimport { MissionControl, Dome } from \"../../models/Structure\";\r\n\r\nexport class SurfaceRoadView extends AccessTunnelView {\r\n    edgeWidth: 0\r\n    // pickingOrigin: boolean = true\r\n    validConnectingStructures() {\r\n        return [ MissionControl, Dome ];\r\n    }\r\n}","import { Label, UIActor, Color } from \"excalibur\";\r\nimport { Dome, Structure, AccessTunnel, CommonArea, LivingQuarters, SurfaceRoad, Mine, Laboratory, Kitchen, Mess, PowerPlant } from \"../models/Structure\";\r\n\r\nexport class Hud extends UIActor {\r\n    label: Label\r\n    protected _paletteElement: HTMLDivElement\r\n    static structuresForPalette = [\r\n        Dome, AccessTunnel, CommonArea,\r\n        LivingQuarters, SurfaceRoad,\r\n        Laboratory, Mine,\r\n        Kitchen, Mess,\r\n        PowerPlant\r\n    ];\r\n    constructor(message = 'welcome to osiris', protected onBuildingSelect = null) {\r\n        super(0, 0);\r\n        this.label = new Label(message, 10, 32, 'Helvetica')\r\n        this.label.fontSize = 32\r\n        this.label.color = Color.White\r\n        this.add(this.label)\r\n\r\n        this._makePalette(onBuildingSelect)\r\n    }\r\n\r\n\r\n    message(text: string) { this.label.text = text }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this._paletteElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._paletteElement.style.left = `${left + 20}px`;\r\n            this._paletteElement.style.top = `${top + 100}px`;\r\n        }\r\n    }\r\n\r\n    protected _makePalette(fn: (Structure) => any) {\r\n        this._paletteElement = document.createElement('div') \r\n        this._paletteElement.style.position = 'absolute'\r\n        document.body.appendChild(this._paletteElement)\r\n\r\n        Hud.structuresForPalette.forEach((structure: typeof Structure) => {\r\n            let s = new structure()\r\n            let _paletteButton = this.buttonFactory(s);\r\n            this._paletteElement.appendChild(\r\n                _paletteButton\r\n            )\r\n\r\n            _paletteButton.onclick = (e) => {\r\n                fn(s)\r\n                // e.stopPropagation()\r\n            }\r\n        });\r\n    }\r\n\r\n    private buttonFactory(s: Structure) {\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = `${s.name}`;\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '13pt';\r\n        paletteButton.style.fontFamily = 'Helvetica';\r\n        paletteButton.style.padding = '8px';\r\n        paletteButton.style.width = '100px';\r\n        paletteButton.style.background = Color.White.darken(0.08).toRGBA();\r\n        paletteButton.style.color = Color.Black.lighten(0.16).toRGBA();\r\n        return paletteButton;\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\n\r\nexport class LivingQuartersView extends CommonAreaView {\r\n    // edgeWidth: number = 2\r\n    afterConstruct() {\r\n        console.log(\"AFTER CONSTRUCT LIVING QUARTERS\")\r\n        setTimeout(() => this.planet.populate(this.pos), 100)\r\n    }\r\n\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { MissionControl } from \"../../models/Structure\";\r\nimport { range, eachCons, measureDistance } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    edgeWidth = 2\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y) //, Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        // connect node to first slot...\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        eachCons(this.slotHeights(), 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n        this.slotHeights().forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 40\r\n        let slotCount = Math.floor((this.getHeight()-60) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                100 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n        return theSlots;\r\n    } \r\n\r\n    validConnectingStructures() { return [ MissionControl ] }\r\n    validConnectingDirections() { return [ Orientation.Down ] }\r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            // we're determining depth of tunnel\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n}","import { Actor, Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { SSL_OP_TLS_BLOCK_PADDING_BUG } from \"constants\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class MissionControlView extends Building {\r\n    hideBox = true\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n           \r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        // cursor.x = this.x //.getTop()\r\n        cursor.y = this.planet.getTop(); //Math.max(planet.getTop() + 100, cursor.y)\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor // x = cursor.x\r\n        this.pos.y -= this.getHeight() - 2 // + 1\r\n    }\r\n\r\n    async interact(citizen: Citizen) {\r\n        let resource = citizen.drop()\r\n        console.log(\"citizen gathered resource\", { resource })\r\n        // citizen.work()\r\n\r\n        // return true\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        let color = this.mainColor(); //Color.White //.darken(0.3)\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n        // y is going to be surface height\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        // could draw a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3*(this.getWidth()/4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n        // shadow?\r\n        //ctx.fillStyle = this.color.darken(0.2).toRGBA()\r\n        //ctx.fillRect(this.x, this.y, this.getHeight())\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Citizen } from \"../Citizen\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { SurfaceRoad } from \"../../models/Structure\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\n\r\n// we're constrained to the surface, so...\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots = [];\r\n        let slotY = this.getHeight(); // / 2;\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5, // / 2,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } // this.baseColor; }\r\n\r\n    validConnectingStructures() { return [ SurfaceRoad ]; }\r\n}","import { Building } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { AccessTunnel, Structure, CommonArea, Laboratory, LivingQuarters, Mine, Kitchen, Mess } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 8\r\n    edgeWidth: number = 1\r\n    showLabel = true\r\n    // maybe you can set height AND width of common area view??\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)) //-16)\r\n        ];\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    protected validConnectingStructures(): (typeof Structure)[] {\r\n        return [ AccessTunnel, CommonArea, Laboratory, LivingQuarters, Mess, Kitchen ];\r\n    }\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { MainTunnel, CommonArea, LivingQuarters, Laboratory, Mine, PowerPlant } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class AccessTunnelView extends Building {\r\n    edgeWidth: number = 0.4\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // picking a depth for a tunnel first?\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            this.facing = theSlot.facing\r\n\r\n            if (theSlot && this.facing === Orientation.Left) {\r\n               this.originX = theSlot.pos.x\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n               this.setWidth(Math.abs(this.originX - cursor.x))\r\n               this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n\r\n    validConnectingStructures() {\r\n        return [\r\n            MainTunnel,\r\n            CommonArea,\r\n            LivingQuarters,\r\n            Laboratory,\r\n            Mine,\r\n            PowerPlant\r\n        ];\r\n    }\r\n\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 30; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 1000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(10)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, peakHeight + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { Structure, MissionControl, Laboratory, Mine, Dome, Kitchen } from \"../models/Structure\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\n\r\nexport class Citizen extends Actor {\r\n    walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock = null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    constructor(building: Building, protected planet: Planet) {\r\n        super(building.nodes()[0].x,building.nodes()[0].y,4,10,Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = (now - this.workStarted) / this.workDuration //0.5\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            ctx.fillStyle = blockColor(this.carrying).toRGBA()\r\n            ctx.fillRect(this.x+4, this.y-3, 5, 5)\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            // draw progress bar?\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            // ctx.stroke(20)\r\n            ctx.strokeRect(px, py, pw, ph)\r\n\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n\r\n            this.vel.x += (Math.random())-0.5 // * 10.0)\r\n        }\r\n    }\r\n\r\n    carry(c: ResourceBlock) { //c: Color) {\r\n        this.carrying = c;\r\n    }\r\n\r\n    drop() {\r\n        if (this.carrying) {\r\n            let c = this.carrying; //.clone();\r\n            this.carrying = null;\r\n            return c\r\n        }\r\n        return true\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        console.log(\"PROGRESS BAR\")\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        console.log(\"PROGRESS BAR DONE!\")\r\n        this.workInProgress = false\r\n    }\r\n\r\n    async walkTo(building: Building) { //}, onArrival: (Building) => any) {\r\n        // let building = this.planet.closestBuildingByType(this.pos, structure)\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = null\r\n            // onArrival(building);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    async work() {\r\n        if (this.carrying) {\r\n            console.log(\"carrying\", this.carrying)\r\n            let item: ResourceBlock = this.carrying;\r\n            let sinks = []\r\n            if (ResourceBlock[item] === 'Food') {\r\n                sinks = [Kitchen]\r\n            } else {\r\n                sinks = [MissionControl]\r\n            }\r\n\r\n            if (sinks.length > 0) {\r\n                let theSink = this.planet.closestBuildingByType(this.pos, sinks)\r\n                if (theSink) {\r\n                    await this.walkTo(theSink) //, async (b) => await b.interact(this))\r\n                    await theSink.interact(this)\r\n                    console.log(\"delivered to sink!\")\r\n                }\r\n            } else {\r\n                console.log(\"nowhere to deliver it\", this.carrying)\r\n            }\r\n        } else {\r\n            let source = this.planet.closestBuildingByType(this.pos,\r\n                [Dome, Mine, Laboratory],\r\n                (building) => building.product.length > 0\r\n            )\r\n\r\n            if (source) {\r\n                await this.walkTo(source) //, async (b) => await b.interact(this))\r\n                await source.interact(this)\r\n                console.log(\"gathered from source!!\")\r\n            } else {\r\n                console.log(\"i guess i can try again? (sleep for a bit first)\")\r\n        await new Promise((resolve, reject) => setTimeout(resolve, 3000));\r\n                //etTimeout(() => this.work(), 500)\r\n            }\r\n        }\r\n\r\n        // console.log(\"DONE WORK\")\r\n        // this.work()\r\n        setTimeout(() => this.work(), 100)\r\n        // await new Promise((resolve, reject) => setTimeout(resolve, 500));\r\n        // await this.work()\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, range } from '../../Util';\r\nimport { Citizen } from '../Citizen';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure, MissionControl, LivingQuarters } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\n\r\nexport class Planet extends Actor {\r\n    buildings: Building[] = []\r\n    citizens: Citizen[] = []\r\n    navTree: NavigationTree\r\n    currentlyConstructing: Building = null\r\n\r\n    constructor(\r\n        // public effectiveY: number,\r\n        public color: Color,\r\n        public width: number = 2000000,\r\n        public depth: number = 1000000,\r\n        ) {\r\n        super(0, depth/2, width, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2 // effectiveY + size/2\r\n        // crust\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n       if (this.currentlyConstructing) {\r\n           this.currentlyConstructing.draw(ctx, delta)\r\n       }\r\n        this.buildings.forEach(building => building.draw(ctx, delta))\r\n\r\n        this.citizens.forEach(citizen => citizen.draw(ctx, delta))\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.buildings.forEach(building => building.update(engine, delta))\r\n        this.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true\r\n        // whew\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building)\r\n            // rebuild nav?\r\n            this.buildNavTree()\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct()\r\n    }\r\n\r\n    populate(pos: Vector) {\r\n        let home = this.closestBuildingByType(pos, [LivingQuarters])\r\n        console.log(\"populating\", { home })\r\n        let citizen = new Citizen(home, this)\r\n        citizen.work()\r\n        this.citizens.push(citizen)\r\n    }\r\n\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        let matching = this.buildings.filter(building => \r\n            structureTypes.some(structureType => (building.structure instanceof structureType)) &&\r\n              predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0])\r\n            return minBy(matching, distanceToCursor)\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) { this.buildNavTree() }\r\n        let srcNode = this.navTree.closestNode(origin)\r\n        let dest = destination.nodes()[0]\r\n        let destNode = this.navTree.closestNode(dest)\r\n        let path = this.navTree.seekPath(srcNode, destNode)\r\n        return path\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl)\r\n        }\r\n    }\r\n\r\n}","import { Scene, Input, UIActor, Label, Vector, LockCameraToActorStrategy } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MissionControl, MainTunnel, Dome, AccessTunnel, CommonArea, LivingQuarters, SurfaceRoad, Kitchen, Mess } from \"../models/Structure\";\r\nimport { Building, DomeView, AccessTunnelView, CommonAreaView, TunnelView, MissionControlView, LivingQuartersView } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud\";\r\nimport { SurfaceRoadView } from \"../actors/Building/SurfaceRoadView\";\r\nimport { LabView } from \"../actors/Building/LabView\";\r\nimport { MineView } from \"../actors/Building/MineView\";\r\nimport { MessView } from \"../actors/Building/MessView\";\r\nimport { KitchenView } from \"../actors/Building/KitchenView\";\r\nimport { PowerPlantView } from \"../actors/Building/PowerPlantView\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n    // buildings: Building[] = []\r\n    // people: Citizen[] = []\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    // currentlyBuilding?: Building\r\n\r\n    static structureViews: { [key: string]: typeof Building } = {\r\n        TunnelView,\r\n        MissionControlView, //: new MissionControlView()\r\n        DomeView,\r\n        AccessTunnelView,\r\n        CommonAreaView,\r\n        LivingQuartersView,\r\n        SurfaceRoadView,\r\n        LabView,\r\n        MineView,\r\n        KitchenView,\r\n        MessView,\r\n        PowerPlantView\r\n    }\r\n    ////\r\n    static requiredStructureList: Array<typeof Structure> = [\r\n        MissionControl,\r\n\r\n        SurfaceRoad,\r\n        Dome,\r\n        MainTunnel,\r\n        AccessTunnel,\r\n        Kitchen,\r\n        Mess,\r\n        LivingQuarters,\r\n        \r\n        //CommonArea,\r\n    ]\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        this.planet = new Planet(game.world.color);\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.hud = new Hud('hi', (structure) => {\r\n            //if (this.currentlyBuilding) {\r\n            //    this.remove(this.currentlyBuilding)\r\n            //}\r\n            this.startConstructing(structure)\r\n        });\r\n        this.add(this.hud)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(2, 10000)\r\n        // this.camera.y = 0 //-this.planet.depth/2\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentBuilding = this.planet.currentlyConstructing\r\n                if (currentBuilding) {\r\n                    // constrain...\r\n                    let constrained = currentBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentBuilding.reshape(this.player.pos)\r\n                } else {\r\n                    // show pluses where you could expand?\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', (e: Input.PointerUpEvent) => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentBuilding: Building = this.planet.currentlyConstructing\r\n                if (currentBuilding) {\r\n                    let placementValid = !currentBuilding.overlapsAny()\r\n                    // console.log(\"placement valid?\", { placementValid, currentBuilding })\r\n                    if (currentBuilding && placementValid && currentBuilding.handleClick(e.pos)) {\r\n                        // console.log(\"placed!\")\r\n                        this.planet.placeBuilding(currentBuilding)\r\n                        this.planet.currentlyConstructing = null\r\n                        this.prepareNextBuilding(e.pos)\r\n                    } else {\r\n                        // console.log(\"couldn't place?\")\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n\r\n    get buildings() { return this.planet.buildings }\r\n\r\n\r\n    private nextMissingRequiredStructure(): Structure {\r\n        let requiredStructures: Structure[] = Construct.requiredStructureList.map(s => new s())\r\n        let actualStructureNames: string[] = this.buildings.map(building => building.structure.name)\r\n\r\n        // console.log({ actualStructureNames, requiredNames: requiredStructures.map(s => s.name) })\r\n        return requiredStructures.find(structure => !actualStructureNames.includes(structure.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        // let structure = Construct.structureList[this.currentBuildingListIndex % Construct.structureList.length]; \r\n        let structure = null;\r\n        let nextMissing = this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        // else { this.currentBuildingListIndex += 1 }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.message(`Welcome to OSIRIS`)\r\n        }\r\n    }\r\n\r\n    startConstructing(structure: Structure, pos: Vector = new Vector(0, 0)) {\r\n        structure.origin = pos\r\n        this.hud.message(`Place ${structure.name}`)\r\n        let theNextOne = this.spawnBuilding(structure)\r\n        this.planet.currentlyConstructing = theNextOne\r\n        this.camera.pos = theNextOne.pos\r\n        this.camera.zoom(structure.zoom, 250)\r\n\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(anotherBuilding.pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure): Building {\r\n        let View = Construct.structureViews[structure.view]\r\n        let building = new View(structure, this.planet)\r\n        return building;\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\n\r\nexport class Colony {\r\n    // origin: Vector\r\n    structures: Structure[] = []\r\n    // build(structure) ...\r\n}\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Red, Color.Blue, Color.Green] // Color.Viridian, Color.Magenta, Color.Chartreuse];\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ). // Color.Rose //World.colors).\r\n        lighten(0.15).\r\n        desaturate(0.65) // sample([Color.Blue, Color.Rose,Color.Blue]).lighten(0.1).desaturate(0.8)\r\n  colony: Colony = new Colony()\r\n}","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword)\r\n}\r\n\r\nexport { Resources }\r\n","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\n// scenes\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}