{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/values/DeviceSize.ts","webpack:///./src/Util.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Economy.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/models/Machine.ts","webpack:///./src/Painting.ts","webpack:///./src/models/Structure.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/actors/Device.ts","webpack:///./src/actors/Building/BackgroundPatterns.ts","webpack:///./src/values/Scale.ts","webpack:///./src/Game.ts","webpack:///./src/strategies/Strategy.ts","webpack:///./src/values/Graph.ts","webpack:///./src/actors/Hud/Palette.ts","webpack:///./src/actors/Hud/CardBody.ts","webpack:///./src/actors/Hud/CardTitle.ts","webpack:///./src/actors/Hud/Card.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/player.ts","webpack:///./src/strategies/ConstructionStrategy.ts","webpack:///./src/strategies/ProximityBasedConstruction.ts","webpack:///./src/values/InteractionRequest.ts","webpack:///./src/strategies/ProductionStrategy.ts","webpack:///./src/strategies/CapacityBasedProduction.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Building/MediumSurfaceRoomView.ts","webpack:///./src/actors/Building/MediumRoomThreeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/images/window-bg.png","webpack:///./src/images/beige-bg.png","webpack:///./src/images/checker-bg.png","webpack:///./src/images/tech-bg.png","webpack:///./src/images/poster-wall-bg.png","webpack:///./src/images/books-bg.png","webpack:///./src/images/leafy-bg.png","webpack:///./src/images/raised-square-bg.png","webpack:///./src/images/fabricator-plain.svg","webpack:///./src/images/mega-console-plain.svg","webpack:///./src/images/console-red-plain.svg","webpack:///./src/images/console-green-plain.svg","webpack:///./src/images/console-purple-plain.svg","webpack:///./src/images/console-plain.svg","webpack:///./src/images/workstation-plain.svg","webpack:///./src/images/houseplant-plain.svg","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/models/MechanicalOperation.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","fifth","eighth","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","deleteByValueOnce","index","indexOf","eachCons","measureDistance","b","sleep","ms","Promise","resolve","setTimeout","shuffle","sort","zip","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","SurfaceRoadView_1","SurfaceRoadView","SmallDomeThreeView_1","SmallDomeThreeView","MidDomeView_1","MidDomeView","BigDomeView_1","BigDomeView","SmallRoomThreeView_1","SmallRoomThreeView","MediumRoomView_1","MediumRoomView","LargeRoomView_1","LargeRoomView","HugeRoomView_1","HugeRoomView","MediumRoomThreeView_1","MediumRoomThreeView","MediumSurfaceRoomView_1","MediumSurfaceRoomView","structureViews","excalibur_1","Orientation_1","Game_1","Util_1","Graph_1","Economy_1","SpaceFunction_1","DeviceSize_1","BackgroundPatterns_1","Painting_1","DevicePlace","pos","this","_super","structure","planet","_this","x","y","width","height","infra","color","darken","Color","Transparent","edgeWidth","placed","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","devices","active","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","some","currentlyViewing","console","log","building","toggleActive","collisionType","CollisionType","PreventCollision","nameLabel","Label","White","__extends","draw","ctx","delta","drawRect","aabb","processedColor","getCenter","measureText","Game","debugPath","slots","forEach","slot","rect","Gray","lighten","nodes","node","Yellow","devicePlaces","place","position","visibleSize","update","engine","device","produce","spaceFunction","description","economy","emptyUnlessActive","isActive","emptyMarket","machineEconomies","buildingEconomy","__assign","Oxygen","demand","supply","sumMarkets","inUse","equilibrium","agg","constrainCursor","clone","reshape","afterConstruct","handleClick","_pos","getWidth","getHeight","graph","supergraph","Graph","g","rootNode","findOrCreate","_i","_a","child","parentSlot","edge","childNode","redeem","res","gather","populate","elite","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","find","bldg","edgeColor","mainColor","colorBase","clr","Red","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","closestBuildingByType","matchingSlot","compass_1","compass","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","subEqual","add","updateFunction","machine","onPlacement","hasPlaceForDevice","nextDevicePlace","getDevices","allSpaceFunctions","spaceFn","matched","unseenDevices","machines","matchingDevice","sf","text","warn","background","BackgroundPattern","Grid","Actor","PureValue","availableCapacity","market","Power","Water","Shelter","Hope","Joy","Wisdom","Wealth","Beauty","Wonder","allValues","ea","eb","newMarket","sa","da","_b","every","ResourceBlock","Biomass","Ore","Idea","Meal","Data","Mineral","Bioplasma","Alloy","Algorithm","Argent","Aurum","Omnium","blockColors","Green","Blue","cStep","Viridian","DarkGray","Orange","blockColor","block","desaturate","t","Left","Up","Down","orientation","Error","MechanicalOperation_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","plant","workstation","consolePurple","consoleGreen","consoleRed","megaconsole","fabricator","Violet","store","mechanicalOperations","generate","recipe","spawn","accelerateTime","Machine","LightGray","cost","operation","type","image","prereqs","forDome","hide","concretize","CommandCenter","arguments","built","product","MissionLog","OxygenExtractor","WaterCondensingMachine","SolarCell","StudyMachine","Workstation","Desk","Bookshelf","Fridge","Stove","Bed","Houseplant","PersonnelRegistry","CloningVat","OrientationConsole","productionTime","AlgaeVat","DissolutionVat","PlasmaBank","Fabricator","MetalStorage","ResearchServer","Orchard","Cabin","Arbor","Botany","OreRefinery","ThinkingPool","MolecularEngine","fromHex","SilverForest","Megafabricator","TimeCrystal","MiningDrill","Mainframe","Preserve","Microcity","LogicCrystal","allMachines","drawLine","lineWidth","beginPath","moveTo","lineTo","strokeStyle","toRGBA","stroke","drawPatternedRect","pattern","gridPattern","getBackgroundPattern","fillStyle","fillRect","setLineDash","strokeRect","rectangle","filled","dashed","main","drawStar","cx","cy","outerRadius","innerRadius","spikes","rot","PI","cos","sin","closePath","Machine_1","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","Structure","view","zoom","Corridor","Ladder","MainTunnel","second","MediumSurfaceRoom","SurfaceRoad","first","Dome","CommonArea","SmallRoomThree","sixth","SmallRoomTwo","SmallDome","MediumRoom","MediumRoomThree","LargeRoom","HugeRoom","seventh","SmallDomeThree","MidDome","LargeDome","Arcology","allStructures","Structure_1","SpaceFunction","Beige","bonuses","capacity","workSpeed","MissionControl","Window","LivingQuarters","Barracks","Kitchen","Checker","LifeSupportPod","Retreat","CloneMatrix","CloneReception","ReadingRoom","Library","Books","Study","ComputerLab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Leafy","Farm","Factory","ComputerCore","Tech","LifeSciencesLab","Device","initialPos","imageLoaded","fontSize","Image","onload","src","globalAlpha","drawImage","imageX","imageY","iv","bx","by","yOff","produced","blockSize","assemble","citizen","isCarryingUnique","progressBar","sent","drop","label","interact","request","worked","op","recipe_1","carrying","it","consumes","includes","consumed","workTime","getEffectiveWorkTime","carry","produces","requires","has","store_1","dispense","stores","getEffectiveOperationalCapacity","res_1","stored","bonus","round","resource","generationTime","generates","snap","snapped","raisedSquare","leafy","bookish","posters","tech","checker","beige","loadBg","path","loading","Poster","backgroundPatterns","bg","createPattern","majorUnit","fourth","minorUnit","minorScale","Resources_1","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","start","loader","Loader","key","Resources","addResource","citizenSpeed","Engine","InteractionRequest_1","Strategy","pawn","sleepInterval","currentPlanet","findPoweredDevices","recipes","operations","attempt","pause","gatherBlock","gathered","generatesDesiredBlock","gen","closestDeviceByType","storesDesiredBlock","visitDevice","retrieveResource","workRecipe","pathTo","target","glideTo","gatherIngredients","knowsRecipe","maker","performRecipeTask","blocks","blocks_1","ingredient","empty","edges","edgesInverse","isEmpty","newNode","contains","testNode","measure","tolerance","dfs","dst","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","steps","srcIndex","reverse","Palette","all","onButtonClick","onButtonEnter","comprehend","comprehended","makePalette","_element","left","canvas","offsetLeft","top_1","offsetTop","style","top","updateBuilt","prereq","parentElement","removeChild","document","createElement","border","body","appendChild","title","textContent","fontFamily","fontWeight","padding","margin","btn","buttonFactory","onmouseenter","onclick","fg","paletteButton","display","textTransform","onmouseover","saturate","onmouseleave","Device_1","CardBody","entity","values","notes","fontStyle","FontStyle","Italic","show","describeEconomy","join","bonusMessages","econ","CardTitle","Black","announce","CardTitle_1","CardBody_1","Card","x0","cardBody","y0","ix","iy","present","EconomicValue","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","allValues_1","updateView","updatedEconomy","allValues_2","ResourceListEntry","resourceBlock","icon","credit","amt","ResourceListEntry_1","ResourcesList","entries","rx","ry","entry","increment","ResourcesList_1","EconomyView_1","StatusAnalysisView","w","h","brand","ty","version","resources","popLabel","messageLabel","incrementResource","setMessage","showEconomy","showPopCap","cap","StatusAnalysisView_1","Card_1","Palette_1","Hud","game","onBuildingSelect","onMachineSelect","onFunctionSelect","canvasWidth","canvasHeight","hidePalettes","status","displayInfo","showCard","structurePalette","structuresForPalette","machinePalette","functionPalette","functionsForPalette","card","showPalettes","resourceGathered","updateDetails","rebuildPalettes","updatePalettes","updateEconomy","updateMaxPop","maxPop","updateBuildingPalette","updateMachinePalette","updateFunctionPalette","builtStructures","findAllDevices","builtMachines","machinesForPalette","builtReifiedFunctions","builtFunctions","rf","UIActor","ex","Player","setWidth","setHeight","ConstructionStrategy","canApply","unbuiltDevice","ProxmityBasedConstruction","constructDevice","ProductionStrategy","storeBlock","openStore","CapacityBasedProduction","storeWithCapacity","storage_1","recipeForStoredResource","CapacityBasedProduction_1","ProximityBasedConstruction_1","Citizen","home","workInProgress","productionStrategy","constructionStrategy","isWorking","timeFactor","work","now","Date","getTime","progress","workStarted","workDuration","carried","px","pw","py","c_1","isCarrying","carryingCopy","missingItem_1","resToFind","actions","walkSpeed","asPromise","duration","reject","pathBetween","pop","Citizen_1","Population","citizens","increase","NavigationTree","seekPath","origin","dest","closestNode","abs","NavigationTree_1","Colony","currentlyConstructing","navTree","placeBuilding","buildNavTree","structureTypes","st","destination","srcNode","destNode","machineTypes","ctrl","activeBuildings","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","yBase","peak","mtnWidth","PlanetBackground","devicePlaceSize","devicePlaceCount","sg","leftSlot","rightSlot","right","theSlots","slotY","getTop","backgroundPattern","flagX","flagY","_1","floorHeight","originSlot","pickingOrigin","maxHeight","drawShape","xoff","yoff","bezierCurveTo","halfWidth","slotHeights","heights","y1","btm","lst","slotCount","arc","floorColor","originX","newCursor","input","output","factor","setPrototypeOf","__proto__","constructor","create","PlanetBackground_1","Colony_1","Population_1","Planet","hud","onBuildingHover","onDeviceHover","depth","createLayer","layerHeight","population","set","buildingOrDevice","theLayer","theEconomy","popularDemand","theEconomyWithoutPeople","val","closestDevice","acc","Planet_1","player_1","Hud_1","Construct","dragging","defaultMessage","placingFunction","firstBuilding","buildIt","startConstructing","player","prepareNextBuilding","camera","onActivate","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction_1","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","Esc","onDeactivate","off","nextMissingStructureOrFunction","reqs","requiredStructuresAndFunctions","req","actualStructureNames","actualFunctionNames","actualNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","spawnFunction","anotherBuilding","assembleBuildingFromStructure","theStructure","Scene","World","colors","Cyan","Vermillion","bestowName","sword","Sword","Texture","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([85,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.fifth; break;\r\n        case DeviceSize.Large: sz = major.eighth + major.third; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { getBackgroundPattern, BackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport const deleteByValueOnce = (arr, elem) => {\r\n  let index = arr.indexOf(elem);\r\n  if (index !== -1) arr.splice(index, 1);\r\n}\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function shuffle(arr) {\r\n   return arr.sort(() => Math.random() > 0.5 ? 1 : -1) \r\n}\r\n\r\nexport const zip = (a, b) => a.map((e,i) => [e, b[i]])","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\nimport { SmallDomeThreeView } from './SmallDomeThreeView';\r\nimport { MidDomeView } from './MidDomeView';\r\nimport { BigDomeView } from './BigDomeView';\r\nimport { SmallRoomThreeView } from './SmallRoomThreeView';\r\nimport { MediumRoomView } from './MediumRoomView';\r\nimport { LargeRoomView } from './LargeRoomView';\r\nimport { HugeRoomView } from './HugeRoomView';\r\nimport { MediumRoomThreeView } from './MediumRoomThreeView';\r\nimport { MediumSurfaceRoomView } from './MediumSurfaceRoomView';\r\n\r\n\r\nconst structureViews: { [key: string]: typeof Building } = {\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n    MediumSurfaceRoomView,\r\n}\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n\r\n    MediumSurfaceRoomView,\r\n\r\n\r\n    structureViews\r\n\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, deleteByValue } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock, emptyMarket, Economy, sumMarkets, equilibrium } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { World } from \"../../models/World\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { EconomicValue } from \"../Hud/EconomicValue\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0\r\n\r\n    nameLabel: Label\r\n\r\n    placed: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    spaceFunction: SpaceFunction\r\n\r\n    private devices: Device[] = []\r\n    givenName: string\r\n\r\n    private active: boolean = true\r\n    // private built: boolean = false\r\n\r\n    constructor(pos: Vector, public structure: Structure, public planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          structure.infra ? planet.color.darken(0.3) : Color.Transparent\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            if (!this.devices.some(d => d.hover)) {\r\n                this.planet.currentlyViewing = this\r\n            }\r\n        })\r\n\r\n\r\n        this.on('pointerdown', () => {\r\n            console.log(\"CLICKED BUILDING\", { building: this })\r\n            this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.color = Color.White\r\n\r\n        if (this.structure.infra) { this.active = true }\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        // this.devices.forEach(device => device.draw(ctx, delta))\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n        }\r\n\r\n        // let debug = true;\r\n        if (Game.debugPath) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = true\r\n        if (showDevicePlaces && this.devicePlaces().length > 0) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    0.1,\r\n                    Color.White,\r\n                    false,\r\n                    true\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n\r\n        let tryProduce = this.placed;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.produce(this.step));\r\n        }\r\n\r\n        // this.devices.forEach(d => d.update(engine, delta))\r\n\r\n        this.step += 1\r\n    }\r\n\r\n    get name() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.name\r\n        } else {\r\n            return this.structure.name\r\n        }\r\n    }\r\n\r\n    get description() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.description\r\n        } else {\r\n            return this.structure.description\r\n        }\r\n    }\r\n\r\n    economy(emptyUnlessActive: boolean = true): Economy {\r\n        if (emptyUnlessActive && !this.isActive) {\r\n            return emptyMarket()\r\n        } else {\r\n            let machineEconomies = this.devices.map(d => d.economy)\r\n            //machine.economy)\r\n\r\n            let buildingEconomy = {\r\n                ...emptyMarket(),\r\n                Oxygen: { demand: 0.1, supply: 0 }, // structural demand\r\n                // Water: { demand: 0.1, supply: 0 },\r\n            }\r\n\r\n            let aggregate = [...machineEconomies, buildingEconomy]\r\n                .reduce(sumMarkets, emptyMarket())\r\n\r\n            return aggregate\r\n        }\r\n    }\r\n\r\n    private toggleActive() {\r\n        if (!this.structure.infra) {\r\n            if (this.active) {\r\n                if (this.devices.some(d => d.inUse)) { return }\r\n                this.active = false\r\n                if (!equilibrium(this.planet.economy)) {\r\n                    this.active = true\r\n                }\r\n            } else { // this.active is false now\r\n                let agg = [\r\n                    this.planet.economy,\r\n                    this.economy(false)\r\n                ].reduce(sumMarkets, emptyMarket())\r\n\r\n                if (equilibrium(agg)) {\r\n                    this.active = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get isActive() { return !!this.active }\r\n\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public populate(pos: Vector, elite: boolean = false) {\r\n        console.log(\"(bldg) ATTEMPT TO POP\")\r\n        this.planet.populate(pos, elite) //this.pos)\r\n    }\r\n\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.placed)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (!this.active) {\r\n            clr = clr.darken(0.8)\r\n        }\r\n\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        // device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        device.pos.subEqual(this.pos) // = this.devicePlaces()[0].position\r\n        // console.log(\"DEVICE IS AT\", { pos: device.pos })\r\n        this.add(device)\r\n        this.updateFunction()\r\n        device.machine.onPlacement(device)\r\n        this.toggleActive()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices //.filter(d => d.built)\r\n    }\r\n\r\n    private updateFunction() {\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let matched = true;\r\n            let unseenDevices = this.devices.slice()\r\n            let sf = new spaceFn()\r\n            sf.machines.forEach((machine: typeof Machine) => {\r\n                let matchingDevice = unseenDevices.find(d => d.machine instanceof machine)\r\n                if (!matchingDevice) { matched = false; }\r\n                unseenDevices = deleteByValue(unseenDevices, matchingDevice)\r\n            })\r\n            return matched;\r\n        })\r\n        if (fn) {\r\n            console.log(\"Determined building function\", { fn })\r\n            let sf = new fn()\r\n            this.spaceFunction = sf\r\n            this.nameLabel.text = sf.name\r\n        } else {\r\n            console.warn(\"Could not identify function!\")\r\n        }\r\n    }\r\n\r\n    get backgroundPattern() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.background\r\n        } else {\r\n            return BackgroundPattern.Grid\r\n        }\r\n    }\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport const allValues: PureValue[] = [\r\n    PureValue.Power,\r\n    PureValue.Oxygen,\r\n    PureValue.Water,\r\n    PureValue.Shelter,\r\n    PureValue.Hope,\r\n    PureValue.Wisdom,\r\n    PureValue.Wealth,\r\n    PureValue.Beauty,\r\n    PureValue.Wonder\r\n]\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return Math.floor(market[value].supply - market[value].demand)\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply,\r\n            demand,\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport const equilibrium: (e: Economy) => boolean = (e) => {\r\n    return allValues.every(value => availableCapacity(e, value) >= 0)\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Biomass = 'Biomass',\r\n    Ore = 'Ore',\r\n    Idea = 'Idea',\r\n\r\n    // derived\r\n    Meal = 'Meal',\r\n    Data = 'Data',\r\n    Mineral = 'Mineral',\r\n    Bioplasma = 'Bioplasma',\r\n\r\n    // higher-order\r\n    Alloy = \"Alloy\",\r\n    Algorithm = \"Algorithm\",\r\n\r\n    // superb\r\n    Argent = \"Argent\",\r\n    Aurum = \"Aurum\",\r\n\r\n    // hyperbolic\r\n    Omnium = \"Omnium\",\r\n}\r\n\r\nlet cStep = 0.3\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Biomass: Color.Green,\r\n    Data: Color.Blue.lighten(cStep),\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(cStep),\r\n    Idea: Color.Blue.lighten(cStep*2), //.desaturate(cStep),\r\n    Ore: Color.Red.darken(cStep),\r\n\r\n    Bioplasma: Color.Viridian,\r\n\r\n    Alloy: Color.DarkGray.darken(cStep), //(cStep),\r\n    Algorithm: Color.Blue.darken(cStep), //.desaturate(cStep),\r\n\r\n    Argent: Color.Gray.lighten(cStep),\r\n    Aurum: Color.Orange.lighten(cStep),\r\n\r\n    Omnium: Color.White,\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    return baseColor.desaturate(0.1) //.lighten(0.1) //.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Color, FontStyle, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { MechanicalOperation, mechanicalOperations } from \"./MechanicalOperation\";\r\nimport { shuffle, range } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\nconst plant = require('../images/houseplant-plain.svg')\r\nconst workstation = require('../images/workstation-plain.svg')\r\n\r\nconst console = require('../images/console-plain.svg')\r\nconst consolePurple = require('../images/console-purple-plain.svg')\r\nconst consoleGreen = require('../images/console-green-plain.svg')\r\nconst consoleRed = require('../images/console-red-plain.svg')\r\nconst megaconsole = require('../images/mega-console-plain.svg')\r\n\r\nconst fabricator = require('../images/fabricator-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n    plant,\r\n    workstation,\r\n\r\n    console,\r\n    consolePurple,\r\n    consoleGreen,\r\n    consoleRed,\r\n    megaconsole,\r\n\r\n    fabricator,\r\n}\r\n\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nlet { store, generate, recipe, spawn, accelerateTime } = mechanicalOperations\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n\r\n    cost: ResourceBlock[] = [ResourceBlock.Mineral]\r\n\r\n    size: DeviceSize = DeviceSize.Small\r\n    operation: MechanicalOperation = { type: 'noop' }\r\n    image = images.vat\r\n    prereqs: (typeof Machine)[] = []\r\n    economy: Economy = emptyMarket()\r\n    forDome: boolean = false\r\n    hide: boolean = false\r\n\r\n    capacity: boolean\r\n\r\n\r\n    concretize(): Machine { return this; } \r\n\r\n    onPlacement(device: Device) {\r\n        // ...whatever we need to script here?\r\n    }\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command Console'\r\n    description = 'commander, we need your help'\r\n    operation = store(\r\n        [ResourceBlock.Mineral],\r\n        12\r\n    )\r\n    image = images.consoleGreen\r\n    size = DeviceSize.Medium\r\n    // infra = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 5, demand: 0 },\r\n        Oxygen: { supply: 2, demand: 0 },\r\n        Water: { supply: 2, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 },\r\n        Shelter: { supply: 1, demand: 0}\r\n    }\r\n\r\n    onPlacement(device: Device) {\r\n        // autobuild this machine...?\r\n        device.built = true\r\n        // go ahead and populate minerals?\r\n        for (let i in range(12)) {\r\n            device.product.push(ResourceBlock.Mineral)\r\n        }\r\n        // build an elite citizen?\r\n        let { building } = device //.building\r\n        building.populate(device.pos.add(device.building.pos), true)\r\n    }\r\n}\r\n\r\nexport class MissionLog extends Machine {\r\n    name = 'Mission Log'\r\n    description = 'gather data'\r\n    operation = store(\r\n        [ResourceBlock.Data],\r\n        8\r\n    )\r\n    image = images.consolePurple\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n//export class Energon extends Machine {\r\n//    name = 'Energon'\r\n//    description = 'food paste'\r\n//}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 3, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 5, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H20 Condenser'\r\n    description = 'have a drink'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 4, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n/// small subsurface\r\n\r\nexport class StudyMachine extends Machine {\r\n    operation = recipe(\r\n        [ ResourceBlock.Idea, ResourceBlock.Idea, ResourceBlock.Idea ],\r\n        ResourceBlock.Data\r\n    )\r\n    color = Blue\r\n    concretize(): Machine { return new (shuffle([Workstation, Desk])[0])() }\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    description = 'get to work'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    description = 'hackety hack'\r\n    prereqs = [ Bookshelf ]\r\n    image = images.workstation\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n    concretize() { return this }\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    operation = generate(ResourceBlock.Idea)\r\n    image = images.bookshelf\r\n    prereqs = [ OxygenExtractor, Desk ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    operation = store([ResourceBlock.Meal], 6)\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    operation = recipe(\r\n        [ResourceBlock.Biomass, ResourceBlock.Biomass],\r\n        ResourceBlock.Meal\r\n    )\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    description = 'sweet dreams'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    description = 'so nice'\r\n    prereqs = [ Bed ]\r\n    // produces = ResourceBlock.Food\r\n    operation = generate(ResourceBlock.Biomass, 1)\r\n    color = Green\r\n    image = images.plant\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Water: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\nexport class PersonnelRegistry extends Machine {\r\n    name = 'Personnel Registry'\r\n    description = 'track everybody'\r\n    prereqs = [ CloningVat ]\r\n    operation = store([ResourceBlock.Data], 4)\r\n    color = Yellow\r\n    image = images.console\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Wisdom: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class OrientationConsole extends Machine {\r\n    name = 'Orientation Console'\r\n    description = 'welcome to the colony'\r\n    prereqs = [CloningVat]\r\n    operation = generate(ResourceBlock.Data, 1)\r\n    image = images.consoleRed\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'we all grow'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = spawn()\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class DissolutionVat extends Machine {\r\n    name = 'Dissolution Vat'\r\n    description = 'back to basics'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = recipe(\r\n        [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n        ResourceBlock.Bioplasma\r\n    )\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [PlasmaBank]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class PlasmaBank extends Machine {\r\n    name = 'Bioplasm Bank'\r\n    description = 'hold on'\r\n    operation = store([ ResourceBlock.Bioplasma ])\r\n    prereqs = [AlgaeVat]\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    description = 'you made that'\r\n    operation = recipe(\r\n        [ResourceBlock.Mineral, ResourceBlock.Mineral],\r\n         ResourceBlock.Alloy\r\n    )\r\n    size = DeviceSize.Small\r\n    color = Red\r\n    prereqs = [Workstation]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n    image = images.fabricator\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    description = 'where there is a will'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n// medium\r\n\r\nexport class MetalStorage extends Machine {\r\n    name = 'Metal Storage'\r\n    description = 'contain minerals and alloys?'\r\n    operation = store([ResourceBlock.Mineral, ResourceBlock.Alloy], 8)\r\n    prereqs = [Bookshelf]\r\n    color = Red\r\n    size = DeviceSize.Medium\r\n}\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    operation = store([ResourceBlock.Data, ResourceBlock.Algorithm], 10)\r\n    image = images.server\r\n    prereqs = [Bookshelf]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   operation = generate(ResourceBlock.Biomass)\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Oxygen: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   description = 'home on the plains'\r\n   operation = recipe(\r\n       [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n       ResourceBlock.Meal\r\n   )\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    description = 'arbor around the clock'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    description = 'plant lab'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n\r\nexport class OreRefinery extends Machine {\r\n    name = 'Refinery'\r\n    description = 'wheat from the chaff'\r\n    operation = recipe(\r\n        [ResourceBlock.Ore, ResourceBlock.Ore, ResourceBlock.Ore],\r\n         ResourceBlock.Mineral\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation, Fabricator]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class ThinkingPool extends Machine {\r\n    name = 'Thinking Pool'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = store([ResourceBlock.Aurum], 8)\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class SilverForest extends Machine {\r\n    name = 'Silver Forest'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Megafabricator ]\r\n    color = Color.fromHex('c0c0c0')\r\n    operation = store([ResourceBlock.Argent], 12)\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Beauty: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n    forDome = true\r\n}\r\n\r\nexport class TimeCrystal extends Machine {\r\n    name = 'Time Crystal'\r\n    size = DeviceSize.Medium\r\n    color = Color.fromHex('e5e4e2')\r\n    operation = accelerateTime()\r\n    prereqs = []\r\n    // onPlacement(device: Device) {\r\n        // device.building.planet.updateSpeeds()\r\n    // }\r\n}\r\n\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    description = 'ore away'\r\n    operation = generate(ResourceBlock.Ore)\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    operation = recipe(\r\n        [ResourceBlock.Alloy, ResourceBlock.Algorithm],\r\n        ResourceBlock.Argent\r\n    )\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class MolecularEngine extends Machine {\r\n    name = 'Molecular Engine'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Megafabricator ]\r\n    color = Violet\r\n    operation = recipe(\r\n        [ResourceBlock.Bioplasma, ResourceBlock.Algorithm],\r\n        ResourceBlock.Aurum\r\n    )\r\n    image = images.megaconsole\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n        Water: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Mainframe extends Machine {\r\n    name = 'Mainframe'\r\n    size = DeviceSize.Large\r\n    color = Blue\r\n    prereqs = [ResearchServer]\r\n    operation = recipe(\r\n        [ ResourceBlock.Data, ResourceBlock.Data ],\r\n        ResourceBlock.Algorithm\r\n    )\r\n    image = images.server\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 6 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    // operation = generate()\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n        Oxygen: { supply: 12, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n\r\n    OreRefinery,\r\n    PlasmaBank,\r\n    DissolutionVat,\r\n    MetalStorage,\r\n    Mainframe,\r\n\r\n    PersonnelRegistry,\r\n    MolecularEngine,\r\n    ThinkingPool,\r\n    SilverForest,\r\n\r\n    OrientationConsole,\r\n    TimeCrystal,\r\n\r\n]","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { BackgroundPattern, getBackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\n// let gridPattern;\r\n// let loadingPattern  = false\r\nexport function drawPatternedRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern) // BackgroundPattern.Grid)\r\n  if (gridPattern) {\r\n    let { x, y, width, height } = rect;\r\n    ctx.fillStyle = gridPattern\r\n    ctx.fillRect(x,y,width,height)\r\n\r\n    ctx.lineWidth = 2\r\n    ctx.setLineDash([])\r\n    ctx.strokeStyle = Color.White.toRGBA()\r\n    ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true,\r\n  dashed: boolean = false\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  // if (edgeWidth > 0) {\r\n  //   let edge = Color.White;\r\n  //   ctx.fillStyle = edge.toRGBA();\r\n  //   ctx.fillRect(x, y, width, height)\r\n  // }\r\n\r\n  if (filled) {\r\n    let main = color;\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x, //+ edgeWidth,\r\n      y, //+ edgeWidth,\r\n      width, // - edgeWidth * 2,\r\n      height // - edgeWidth * 2\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White;\r\n    ctx.strokeStyle = edge.toRGBA();\r\n    ctx.lineWidth=edgeWidth\r\n    if (dashed) { ctx.setLineDash([5, 10]) } //ctx.lineDashOffset = 5 }\r\n    else { ctx.setLineDash([]) }\r\n    // ctx.strokeStyle = Stroke.So\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}\r\n\r\nexport function drawStar(ctx, cx, cy, outerRadius=3.6, innerRadius=1.4, spikes=5, ) {\r\n  // console.warn(\"DRAW STAR\")\r\n    var rot = Math.PI / 2 * 3;\r\n    var x = cx;\r\n    var y = cy;\r\n    var step = Math.PI / spikes;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(cx, cy - outerRadius)\r\n    for (let i = 0; i < spikes; i++) {\r\n        x = cx + Math.cos(rot) * outerRadius;\r\n        y = cy + Math.sin(rot) * outerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n\r\n        x = cx + Math.cos(rot) * innerRadius;\r\n        y = cy + Math.sin(rot) * innerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n    }\r\n    ctx.lineTo(cx, cy - outerRadius);\r\n    ctx.closePath();\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = 'yellow';\r\n    ctx.stroke();\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.fill();\r\n}","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    color: Color = Color.Gray\r\n    infra: boolean = false\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n\r\n    hide: boolean = false\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MediumSurfaceRoom ],\r\n        [Orientation.Right]: [  Dome, MediumSurfaceRoom ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n    infra = true\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n    infra = true\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    description: string = 'Biome sweet biome';\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.sixth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n\r\n    prereqs = [\r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n    // two small slots\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 2 * major.eighth\r\n    height = 2 * major.third\r\n    // two medium slots...\r\n    \r\n    machines = midBelow\r\n}\r\n\r\nexport class MediumRoomThree extends CommonArea {\r\n    name = 'Mid Room (3)'\r\n    prereqs = [ MediumRoom ]\r\n    view = 'MediumRoomThreeView'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.third\r\n\r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 4 * major.eighth\r\n    height = 3 * major.fifth\r\n\r\n    // two big slots?\r\n    machines = largeBelow\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class MediumSurfaceRoom extends Dome {\r\n    name = 'Mid Surf Bldg'\r\n    description = 'home away from home';\r\n\r\n    view: string = 'MediumSurfaceRoomView';\r\n\r\n    width: number = 6 * major.eighth\r\n    height: number = 1 * major.sixth\r\n\r\n    zoom = 0.1\r\n\r\n    prereqs = [ SmallDome ]\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = midBelow\r\n\r\n    hide = true // need another one which cares about connecting to roads\r\n}\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = 2 * major.seventh\r\n    height = major.seventh\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 3 * major.fifth\r\n    height = 2 * major.fifth\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 3 * major.seventh\r\n    height = 2 * major.seventh\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n\r\n}\r\n\r\n//////\r\n\r\n// export class MissionControl extends Structure {\r\n//     name: string = 'Mission Control';\r\n//     description: string = 'Keeping everything on track';\r\n//     view: string = 'MissionControlView';\r\n//     width: number = 6 * major.eighth\r\n//     height: number = 1 * major.sixth\r\n//     zoom = 0.1\r\n//     connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n//         [Orientation.Left]: [ SurfaceRoad ],\r\n//         [Orientation.Right]: [ SurfaceRoad ],\r\n//         [Orientation.Up]: [ MainTunnel ],\r\n//         [Orientation.Down]: [ MainTunnel ],\r\n//     }\r\n\r\n//     machines = [ CommandCenter ]\r\n// }\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n        MediumSurfaceRoom,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        MediumRoomThree,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine, Mainframe, CommandCenter, MissionLog, Botany, OrientationConsole, PersonnelRegistry } from './Machine';\r\nimport { Color } from 'excalibur';\r\nimport { Structure, MediumSurfaceRoom } from './Structure';\r\nimport { BackgroundPattern } from '../actors/Building/BackgroundPatterns';\r\n\r\nexport class SpaceFunction {\r\n     name: string = '(generic)'\r\n     description: string = '(generic description)'\r\n     machines: (typeof Machine)[] = []\r\n     color: Color = Color.Gray\r\n\r\n     prereqs: (typeof SpaceFunction)[] =  [] \r\n\r\n     structure: typeof Structure = null\r\n     hide: boolean = false\r\n     background: BackgroundPattern = BackgroundPattern.Beige\r\n\r\n     bonuses: {\r\n          capacity: number, // every store/generator gets this??\r\n          workSpeed: number, // 2 should double work speed (dur *= 1/multiplier)\r\n     } = {\r\n          capacity: 0, // boost cap by one\r\n          workSpeed: 1.00 // 20% bonus to work speed\r\n     }\r\n}\r\n\r\nexport class MissionControl extends SpaceFunction {\r\n     hide = true\r\n     name = 'Mission Control'\r\n     description = 'keeping everything on track'\r\n     structure = MediumSurfaceRoom\r\n     prereqs = [] //ComputerCore, Factory, Farm ]\r\n     machines = [ CommandCenter, MissionLog ]\r\n     background = BackgroundPattern.Window\r\n}\r\n\r\n\r\nexport class LivingQuarters extends SpaceFunction {\r\n     name = 'Living Quarters'\r\n     description = 'good night'\r\n     machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n     name = 'Barracks'\r\n     description = 'sleep tight'\r\n     machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nexport class Kitchen extends SpaceFunction {\r\n     name = 'Kitchen'\r\n     description = 'stay together'\r\n     machines = [ Stove, Fridge ]\r\n     bonuses = {\r\n          capacity: 2,\r\n          workSpeed: 1.1\r\n     }\r\n     background = BackgroundPattern.Checker\r\n}\r\n\r\nexport class LifeSupportPod extends SpaceFunction {\r\n     name = 'Life Support'\r\n     description = 'keep it going'\r\n     machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n     name = 'Retreat'\r\n     description = 'take it easy'\r\n     machines = [ Cabin, Cabin ]\r\n}\r\n\r\nexport class CloneMatrix extends SpaceFunction {\r\n     name = 'Clone Matrix'\r\n     description = 'clone home'\r\n     machines = [ CloningVat, CloningVat ]\r\n}\r\n\r\nexport class CloneReception extends SpaceFunction {\r\n     name = 'Clone Reception'\r\n     description = 'welcome clone'\r\n     machines = [ CloningVat, OrientationConsole, PersonnelRegistry ]\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n     name = 'Reading Room'\r\n     description = 'butterflies in the sky'\r\n     machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nexport class Library extends SpaceFunction {\r\n     name = 'Library'\r\n     description = 'take a look'\r\n     machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n     background = BackgroundPattern.Books\r\n}\r\n\r\nclass Study extends SpaceFunction {\r\n     name = 'Study'\r\n     description = 'plan it out'\r\n     machines = [ StudyMachine, Bookshelf ]\r\n}\r\n\r\nclass ComputerLab extends SpaceFunction {\r\n     name = 'Computer Lab'\r\n     description = 'make it happen'\r\n     machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nexport class Archive extends SpaceFunction {\r\n     name = 'Archive'\r\n     description = 'write it down'\r\n     machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n     name = 'Arboretum'\r\n     description = 'walk it out'\r\n     machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n     name = 'Algae Farm'\r\n     description = 'make do'\r\n     machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nexport class SolarArray extends SpaceFunction {\r\n     name = 'Solar Array'\r\n     description = 'warm up'\r\n     machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nclass Workshop extends SpaceFunction {\r\n     name = 'Workshop'\r\n     description = 'take form'\r\n     machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\nclass Nursery extends SpaceFunction {\r\n     name = 'Nursery'\r\n     description = 'quiet please'\r\n     machines = [ Houseplant, Houseplant, Houseplant ]\r\n     background = BackgroundPattern.Leafy\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n     name = 'Farm'\r\n     description = 'food for the masses'\r\n     machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n     name = 'Factory'\r\n     description = 'production lines'\r\n     machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\n\r\nexport class ComputerCore extends SpaceFunction {\r\n     name = 'Computer Core'\r\n     description = 'let us calculate'\r\n     machines = [ Mainframe, Mainframe ]\r\n     background = BackgroundPattern.Tech\r\n}\r\n\r\nexport class LifeSciencesLab extends SpaceFunction {\r\n     name = 'Life Sciences Lab'\r\n     description = 'where do i come from'\r\n     machines = [ Botany, Botany ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    ComputerLab,\r\n\r\n    ComputerCore,\r\n\r\n    MissionControl,\r\n    LifeSciencesLab,\r\n\r\n    CloneReception,\r\n]","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor, emptyMarket } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\nimport { Recipe, ResourceStorage, MechanicalOperation, ResourceGenerator } from \"../models/MechanicalOperation\";\r\nimport { range, deleteByValueOnce } from \"../Util\";\r\nimport { drawRect } from \"../Painting\";\r\nimport { InteractionRequest } from \"../values/InteractionRequest\";\r\n\r\nexport class Device extends Actor {\r\n    // constructionMaterials: ResourceBlock[] = []\r\n\r\n    // could also use for storage?\r\n    product: ResourceBlock[] = []\r\n    nameLabel: Label\r\n    image: any\r\n    building: Building\r\n    inUse: boolean = false\r\n    hover: boolean = false\r\n\r\n    imageLoaded: boolean = false\r\n\r\n    built: boolean = false\r\n\r\n    constructor(\r\n        public machine: Machine,\r\n        initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = () => { this.imageLoaded = true }\r\n        this.image.src = machine.image\r\n\r\n        this.on('pointerenter', () => {\r\n            console.log(\"HOVER ON\", { device: this })\r\n            this.hover = true\r\n            if (this.building) {\r\n                // setInterval(() => {\r\n                this.building.planet.currentlyViewing = this\r\n                // }, 75)\r\n            }\r\n        })\r\n\r\n        this.on('pointerdown', () => {\r\n            console.log(\"CLICKED DEVICE\", { device: this })\r\n            // this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n            if (this.building) {\r\n                this.building.planet.currentlyViewing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    get imageX() { return this.pos.x - this.getWidth() / 2 }\r\n    get imageY() { return this.pos.y - this.getHeight() / 2 - 10 }\r\n\r\n    get economy() { return this.built ? this.machine.economy : emptyMarket() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (this.imageLoaded) {\r\n            if (!this.built) { ctx.globalAlpha = 0.5 }\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.imageX,\r\n                this.imageY,\r\n\r\n                this.getWidth(),\r\n                this.getHeight()\r\n            )\r\n            if (!this.built) { ctx.globalAlpha = 1.0 }\r\n\r\n            if (this.hover) {\r\n                let c = Color.White\r\n                c.a = 0.6\r\n                drawRect(\r\n                    ctx,\r\n                    { x: this.imageX, y: this.imageY, width: this.getWidth(), height: this.getHeight() },\r\n                    0,\r\n                    c\r\n                )\r\n            }\r\n        }\r\n\r\n        let iv = new Vector(this.imageX, this.imageY)\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = iv\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let { x: bx, y: by } = iv\r\n        let blockSize = 5\r\n        let yOff = this.nameLabel.fontSize\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).toRGBA()\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize + yOff, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get name() { return this.machine.name }\r\n    get description() { return this.machine.description }\r\n    get size() { return this.machine.size }\r\n    get operation() { return this.machine.operation }\r\n\r\n    async assemble(citizen: Citizen) {\r\n        if (citizen.isCarryingUnique(this.machine.cost)) {\r\n            for (let res of this.machine.cost) {\r\n                await citizen.progressBar(1000)\r\n                citizen.drop(res)\r\n            }\r\n            this.built = true\r\n        }\r\n    }\r\n\r\n    async interact(citizen: Citizen, request: InteractionRequest): Promise<boolean> {\r\n        if (this.inUse || !this.built) {\r\n            return false\r\n        }\r\n\r\n        let worked = false\r\n        let op = this.operation\r\n        if (op.type === 'recipe' && request.type === 'work') {\r\n            let recipe: Recipe = op\r\n            // do we have all the things?\r\n            if (citizen.carrying.some(it => recipe.consumes.includes(it))) {\r\n                this.inUse = true\r\n                if (citizen.isCarryingUnique(recipe.consumes)) {\r\n                    recipe.consumes.forEach(consumed => citizen.drop(consumed))\r\n                    let workTime = this.getEffectiveWorkTime(recipe)\r\n                    await citizen.progressBar(workTime) // recipe.workTime)\r\n                    citizen.carry(recipe.produces)\r\n\r\n                    worked = true\r\n                } else {\r\n                    console.warn(\"not carrying all requirements?\", { requires: recipe.consumes, has: citizen.carrying })\r\n                }\r\n                this.inUse = false\r\n            }\r\n        } else if (op.type === 'store') {\r\n            // accept it! (whatever you have that matches...?)\r\n            let store: ResourceStorage = op\r\n            if (request && request.type === 'retrieve') { // assume dispense request for now?\r\n                this.inUse = true\r\n                worked = this.dispense(citizen, request)\r\n                if (worked) {\r\n                    await citizen.progressBar(500)\r\n                }\r\n                this.inUse = false\r\n            } else if (request && request.type === 'store' &&\r\n                citizen.carrying.some(it => store.stores.includes(it))) { // maybe trying to store?\r\n                if (this.product.length < this.getEffectiveOperationalCapacity(store)) { // store.capacity) {\r\n                    let res = null\r\n                    if (store.stores.some(stored => { res = citizen.drop(stored); return res })) {\r\n                        if (res) {\r\n                            this.product.push(res)\r\n                            this.building.redeem(res)\r\n                            worked = true\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.warn(\"no capacity in this store!!\")\r\n                    worked = false\r\n                }\r\n            }\r\n        } else if (op.type === 'generator') {\r\n            this.inUse = true\r\n            worked = this.dispense(citizen, request)\r\n            if (worked) {\r\n                await citizen.progressBar(500)\r\n            }\r\n            this.inUse = false\r\n        }\r\n\r\n        return worked\r\n    }\r\n\r\n    getEffectiveOperationalCapacity(op: ResourceGenerator | ResourceStorage) {\r\n        let bonus = this.building.spaceFunction\r\n        ? this.building.spaceFunction.bonuses.capacity \r\n        : 0\r\n        return op.capacity + bonus\r\n    }\r\n\r\n    getEffectiveWorkTime(op: Recipe) {\r\n        let bonus = this.building.spaceFunction \r\n         ? this.building.spaceFunction.bonuses.workSpeed\r\n         : 1\r\n\r\n        return Math.round(op.workTime * (1/bonus))\r\n    } \r\n\r\n\r\n    private dispense(citizen: Citizen, request: InteractionRequest) {\r\n        if (request && request.type === 'retrieve') {\r\n            let canFulfill = this.product.find(p => p === request.resource)\r\n            if (canFulfill) {\r\n                deleteByValueOnce(this.product, request.resource)\r\n                citizen.carry(request.resource)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    public produce(step: number) {\r\n        if (this.building.isActive && this.built) {\r\n            if (this.machine.operation.type === 'generator') {\r\n                if (step % this.machine.operation.generationTime === 0) {\r\n                    if (this.product.length < this.machine.operation.capacity) {\r\n                        this.product.push(this.machine.operation.generates)\r\n                    }\r\n                }\r\n\r\n            } else if (this.machine.operation.type === 'spawn') {\r\n                if (step % 1000 == 0) {\r\n                    console.log(\"WOULD SPAWN\")\r\n                    setTimeout(() => this.building.populate(this.pos.add(this.building.pos)), 100)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            allStructures,\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        let snapped = false\r\n        if (bldg) {\r\n            let spot = bldg.nextDevicePlace().position\r\n            let d = spot.distance(pos)\r\n            snapped = d < 150\r\n        }\r\n\r\n        if (snapped) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n        } else {\r\n            this.pos = pos\r\n        }\r\n\r\n        return snapped\r\n    }\r\n}","const raisedSquare = require('../../images/raised-square-bg.png')\r\nconst leafy = require('../../images/leafy-bg.png')\r\nconst bookish = require('../../images/books-bg.png')\r\nconst posters = require('../../images/poster-wall-bg.png')\r\nconst tech = require('../../images/tech-bg.png')\r\nconst checker = require('../../images/checker-bg.png')\r\nconst beige = require('../../images/beige-bg.png')\r\nconst window = require('../../images/window-bg.png')\r\n\r\ninterface Background {\r\n    image: HTMLImageElement\r\n    pattern: CanvasPattern\r\n    loading: boolean\r\n}\r\n\r\nconst loadBg = (path) => {\r\n    let background: Background = { image: null, pattern: null, loading: true }\r\n    background.image = new Image();\r\n    background.image.src = path\r\n    background.image.onload = function () {\r\n      background.loading = false\r\n    }\r\n    return background\r\n}\r\n\r\nexport enum BackgroundPattern {\r\n    Leafy = 'Leafy',\r\n    Grid = 'Grid',\r\n    Books = 'Books',\r\n    Poster = 'Poster',\r\n    Tech = 'Tech',\r\n    Checker = 'Checker',\r\n    Beige = 'Beige',\r\n    Window = 'Window',\r\n}\r\n\r\nconst backgroundPatterns: { [ key in BackgroundPattern ]: Background } = {\r\n    Leafy: loadBg(leafy),\r\n    Grid: loadBg(raisedSquare),\r\n    Books: loadBg(bookish),\r\n    Poster: loadBg(posters),\r\n    Tech: loadBg(tech),\r\n    Checker: loadBg(checker),\r\n    Beige: loadBg(beige),\r\n    Window: loadBg(window)\r\n}\r\n\r\nexport const getBackgroundPattern = (ctx, pattern: BackgroundPattern) => {\r\n    let bg = backgroundPatterns[pattern]\r\n    if (!bg.loading) {\r\n        if (!bg.pattern) {\r\n            // bg.image.\r\n            bg.pattern = ctx.createPattern(bg.image, 'repeat');\r\n        }\r\n        return bg.pattern\r\n    }\r\n}","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 100\r\n    static debugPath: boolean = false\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { Citizen } from \"../actors/Citizen\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { sleep } from \"../Util\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Recipe, MechanicalOperation } from \"../models/MechanicalOperation\";\r\n\r\nexport abstract class Strategy {\r\n    private sleepInterval: number = 1250\r\n    protected isActive: boolean = false;\r\n    constructor(protected pawn: Citizen) { }\r\n    protected abstract async apply();\r\n    protected get planet(): Planet { return this.pawn.currentPlanet; }\r\n    protected get devices(): Device[] { return this.planet.colony.findPoweredDevices(); }\r\n    protected get operations(): MechanicalOperation[] { return this.devices.map(d => d.operation); }\r\n    protected get recipes(): Recipe[] {\r\n        let recipes: Recipe[] = [];\r\n        this.operations.forEach(op => {\r\n            if (op.type === 'recipe') {\r\n                recipes.push(op);\r\n            }\r\n        });\r\n        return recipes;\r\n    }\r\n\r\n\r\n    async attempt(): Promise<void> {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n        if (!this.isActive) {\r\n            this.isActive = true\r\n            // note apply will need to set this.isActive around its critical section\r\n            await this.apply();\r\n            this.isActive = false\r\n        }\r\n\r\n        await this.pause()\r\n        // setInterval(() => { this.attempt() }, this.sleepInterval)\r\n    }\r\n\r\n    protected async pause() {\r\n        await sleep(this.sleepInterval)\r\n    }\r\n\r\n    protected async gatherBlock(res: ResourceBlock) {\r\n        console.log(\"GATHER\", { res })\r\n        let gathered = false\r\n        let generatesDesiredBlock = (d: Device) => (d.operation.type === 'generator') &&\r\n            d.product.some(stored => res === stored)\r\n        let gen: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], generatesDesiredBlock)\r\n\r\n        let storesDesiredBlock = (d: Device) => (d.operation.type === 'store') &&\r\n              d.product.some(stored => res === stored)\r\n        let store: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n\r\n        let device: Device = gen || store\r\n\r\n        if (device) {\r\n            console.log(\"FOUND DEVICE WHICH GENS OR STORES\", { device, pos: device.pos })\r\n            await this.visitDevice(device)\r\n            if (await device.interact(this.pawn, retrieveResource(res))) {\r\n                gathered = true\r\n            }\r\n        } else {\r\n            let recipe = this.recipes.find(recipe => recipe.produces === res);\r\n            if (recipe) {\r\n                await this.workRecipe(recipe);\r\n                gathered = true\r\n            }\r\n        }\r\n\r\n        if (!gathered) {\r\n            await this.pause() // sleep(1000)\r\n            await this.gatherBlock(res)\r\n        }\r\n    }\r\n\r\n    protected async visitDevice(device: Device) {\r\n        // console.log(\"VISIT DEVICE!!!\", { device, building: device.building })\r\n        await this.pawn.pathTo(device.building) //pos) //building)\r\n\r\n        let target = device.pos.add(device.building.pos)\r\n        // console.log(\"VISIT DEVICE AT\", { target })\r\n        await this.pawn.glideTo(target)\r\n    }\r\n\r\n\r\n    protected async workRecipe(recipe: Recipe) {\r\n        await this.gatherIngredients(recipe.consumes)\r\n\r\n        let knowsRecipe = (d: Device) => d.operation === recipe\r\n        let maker = this.planet.colony.closestDeviceByType(this.pawn.pos, [], knowsRecipe)\r\n        if (maker) {\r\n            await this.visitDevice(maker)\r\n            await this.performRecipeTask(maker, recipe)\r\n        } else {\r\n            await this.pause()\r\n            await this.workRecipe(recipe);\r\n        }\r\n    }\r\n\r\n    protected async gatherIngredients(blocks: ResourceBlock[]) { //recipe: Recipe) {\r\n        if (!this.pawn.isCarryingUnique(blocks)) { //recipe.consumes)) {\r\n            for (let ingredient of blocks) { //recipe.consumes) {\r\n                await this.gatherBlock(ingredient);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async performRecipeTask(maker: Device, recipe: Recipe) {\r\n        let worked = await maker.interact(this.pawn, { type: 'work', recipe })\r\n        if (!worked) {\r\n            await this.pause()\r\n            console.warn(\"waiting for machine to become available...\")\r\n            await this.performRecipeTask(maker, recipe)\r\n        }\r\n    }\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Color } from \"excalibur\";\r\nimport { EntityKind } from \"../../values/Entity\";\r\n\r\nexport class Palette {\r\n    private _element: HTMLDivElement;\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(\r\n        private name: string,\r\n        private x: number,\r\n        private y: number,\r\n        private all: EntityKind[],\r\n        private onButtonClick: (EntityKind) => any = null,\r\n        private onButtonEnter: (EntityKind) => any = null,\r\n        private comprehend = true \r\n    ) {\r\n        this.makePalette();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    updateBuilt(built: (EntityKind)[]) {\r\n        this.built = built;\r\n        if (this.comprehend) {\r\n            this.comprehended = this.all.filter((e: EntityKind) => {\r\n                let s = new e();\r\n                let prereqs: (EntityKind)[] = s.prereqs;\r\n                return prereqs.every((prereq: EntityKind) => {\r\n                    let built = this.built.some((s: EntityKind) => s === prereq);\r\n                    return built;\r\n                });\r\n            });\r\n        } else {\r\n            this.comprehended = this.built\r\n        }\r\n        this.makePalette();\r\n    }\r\n\r\n    private makePalette() {\r\n        if (this._element) {\r\n            this._element.parentElement.removeChild(this._element);\r\n        }\r\n        if (!(this.comprehended.length > 0)) { return }\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.border = 'none'; //1px solid black'; //0.5px solid white';\r\n        document.body.appendChild(this._element);\r\n\r\n        if (this.name) {\r\n            let title = document.createElement('h2')\r\n            title.textContent = this.name\r\n            title.style.fontFamily = 'Verdana'\r\n            title.style.fontSize = '7pt'\r\n            title.style.fontWeight = '400'\r\n            title.style.color = Color.White.toRGBA()\r\n            title.style.backgroundColor = Color.Violet.darken(0.92).toRGBA()\r\n            title.style.padding = '4px'\r\n            title.style.margin = '0px'\r\n            this._element.appendChild(\r\n                title\r\n            )\r\n        }\r\n\r\n        this.comprehended\r\n            .map((elem: EntityKind) => new elem())\r\n            .sort((a, b) => a.color > b.color ? -1 : 1)\r\n            .forEach(elem => {\r\n                if (elem.hide) { return }\r\n                let label = elem.name;\r\n                if (!this.built.map(m => new m().name).includes(elem.name)) {\r\n                    label += ' *';\r\n                }\r\n                let clr = elem.color;\r\n                let btn = this.buttonFactory(label, clr);\r\n                this._element.appendChild(btn);\r\n                if (this.onButtonEnter) {\r\n                    btn.onmouseenter = () => { this.onButtonEnter(elem); };\r\n                }\r\n                if (this.onButtonClick) {\r\n                    btn.onclick = () => { this.onButtonClick(elem); };\r\n                }\r\n            });\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.5).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = label;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '7pt';\r\n        paletteButton.style.fontFamily = 'Verdana';\r\n        paletteButton.style.fontWeight = '500';\r\n        paletteButton.style.padding = '3px';\r\n        paletteButton.style.width = '124px';\r\n        paletteButton.style.textTransform = 'uppercase';\r\n        paletteButton.style.border = 'none' //1px solid rgba(255,255,255,0.08)';\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA();\r\n            paletteButton.style.color = fg.toRGBA();\r\n        };\r\n        return paletteButton;\r\n    }\r\n}\r\n","import { Label, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { PureValue, Economy } from \"../../models/Economy\";\r\nimport { SmallDomeThreeView } from \"../Building/SmallDomeThreeView\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\n\r\nexport class CardBody extends Actor {\r\n    description: Label\r\n    values: Label\r\n    notes: Label\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 0, 0)\r\n        // resources / recipes\r\n\r\n        this.values = new Label('')\r\n        this.values.fontSize = 10\r\n        this.add(this.values)\r\n\r\n        this.notes = new Label('behavioral notes', 0, 30)\r\n        this.notes.fontSize = 11\r\n        this.add(this.notes)\r\n\r\n        this.description = new Label('description', 0, 60)\r\n        this.description.fontSize = 12\r\n        this.description.fontStyle = FontStyle.Italic\r\n        this.add(this.description)\r\n\r\n        this.show(entity)\r\n    }\r\n\r\n\r\n    show(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        if (entity) {\r\n            this.description.text = entity.description;\r\n\r\n            if (entity instanceof Machine || entity instanceof Device) {\r\n                this.values.text =  this.describeEconomy(entity.economy)\r\n                this.notes.text = ''\r\n                let op = entity.operation\r\n                if (op) {\r\n                    if (op.type === 'recipe') {\r\n                        this.notes.text = `Turns ${op.consumes.join(' + ')} -> ${op.produces}.`\r\n                    } else if (op.type === 'generator') {\r\n                        this.notes.text = `Generates ${op.generates}.`\r\n                    } else if (op.type === 'store') {\r\n                        this.notes.text = `Stores ${op.stores.join(' + ')}`\r\n                    } else if (op.type === 'spawn') {\r\n                        this.notes.text = 'Decants clones.'\r\n                    }\r\n                }\r\n            } else if (entity instanceof SpaceFunction) {\r\n                let { capacity, workSpeed } = entity.bonuses\r\n                let bonusMessages = [];\r\n                if (capacity > 0) {\r\n                    bonusMessages.push(`+${capacity} cap`)\r\n                }\r\n                if (workSpeed > 1.0) {\r\n                    bonusMessages.push(`+${Math.floor((workSpeed*100)-100)}% efficiency` )\r\n                }\r\n                this.values.text = bonusMessages.join('; ') //; \r\n                this.notes.text = entity.machines.map(m => (new m()).name).join(' + ')\r\n            } else if (entity instanceof Building) {\r\n                this.values.text =  this.describeEconomy(entity.economy(false)) //values.join(' | ')\r\n                this.notes.text = entity.getDevices().map(d => d.machine.name).join(' + ')\r\n            } else {\r\n                this.values.text = ''\r\n                this.notes.text = ''\r\n            }\r\n\r\n        }\r\n        // other bonuses? behaviors?\r\n    }\r\n\r\n    private describeEconomy(e: Economy): string {\r\n        let values = []\r\n        let econ = e // entity.economy\r\n        for (let value in PureValue) {\r\n            let { supply, demand } = econ[value]\r\n            let delta = supply - demand\r\n            if (delta > 0) {\r\n                values.push(`+${delta} ${value}`)\r\n            } else if (delta < 0) {\r\n                values.push(`${delta} ${value}`)\r\n            }\r\n        }\r\n        return values.join(' | ')\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nexport class CardTitle extends Actor {\r\n    \r\n    name: Label;\r\n    type: Label;\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 14, 32, entity && entity.color || Color.Gray);\r\n        this.name = new Label(entity && entity.name || '..', 20, 16)\r\n        this.name.fontSize = 28\r\n        this.name.color = Color.Black\r\n        this.add(this.name)\r\n\r\n        this.type = new Label('..', 232, 16)\r\n        this.type.fontSize = 10\r\n        this.type.color = Color.Gray\r\n        this.type.fontStyle = FontStyle.Italic\r\n        this.add(this.type)\r\n\r\n        if (entity) {\r\n            this.announce(entity)\r\n        }\r\n    }\r\n\r\n    announce(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.name.text = entity.name\r\n        this.color = entity.color.desaturate(0.5).darken(0.2)\r\n        if (entity instanceof Machine) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n        if (entity instanceof Structure) { this.type.text = 'Structure' }\r\n        if (entity instanceof SpaceFunction) { this.type.text = 'Function' }\r\n        if (entity instanceof Building) { this.type.text = 'Building' }\r\n        if (entity instanceof Device) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { CardTitle } from \"./CardTitle\";\r\nimport { CardBody } from \"./CardBody\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\n\r\nexport class Card extends Actor {\r\n    title: CardTitle\r\n    cardBody: CardBody\r\n    image: any\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x + 160, y + 90, 320, 180, Color.White);\r\n        let x0 = -150, y0 = -50;\r\n        this.title = new CardTitle(entity, x0 - 3, y0); //x, y)\r\n        this.add(this.title);\r\n        this.cardBody = new CardBody(entity, x0 + 14, y0 + 40)\r\n        this.add(this.cardBody)\r\n\r\n        this.image = new Image();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        if (this.entity) {\r\n            if (this.entity instanceof Machine) {\r\n                let ix = this.pos.x + 48, iy = this.pos.y - 16\r\n                let isz = 92\r\n                ctx.drawImage(this.image, ix, iy, isz, isz)\r\n            }\r\n        }\r\n    }\r\n\r\n    present(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.title.announce(entity)\r\n        this.cardBody.show(entity)\r\n\r\n        this.entity = entity\r\n        if (this.entity instanceof Machine) {\r\n            this.image.src = this.entity.image\r\n        }\r\n    }\r\n\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor } from \"excalibur\";\r\nimport { Economy, PureValue, availableCapacity, allValues } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n\r\n        let index = 0\r\n        for (let value of allValues) {\r\n            let valueLabel: EconomicValue =  new EconomicValue(value, (index++ * 34), 0)\r\n            this.valueLabels[value] = valueLabel\r\n            this.add(valueLabel)\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value of allValues) {\r\n            this.valueLabels[value].setCount(\r\n                availableCapacity(market, value)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 6, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            [ResourceBlock.Biomass]: null,\r\n            [ResourceBlock.Idea]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n            [ResourceBlock.Alloy]: null,\r\n            [ResourceBlock.Bioplasma]: null,\r\n            [ResourceBlock.Algorithm]: null,\r\n            [ResourceBlock.Argent]: null,\r\n            [ResourceBlock.Aurum]: null,\r\n            [ResourceBlock.Omnium]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0, Color.DarkGray.darken(0.8));\r\n        let rx0 = 0, ry0 = -2.5;\r\n        let resources = [\r\n            ResourceBlock.Meal,\r\n            ResourceBlock.Data,\r\n            ResourceBlock.Mineral,\r\n\r\n            ResourceBlock.Bioplasma,\r\n            ResourceBlock.Alloy,\r\n            ResourceBlock.Algorithm,\r\n\r\n            ResourceBlock.Argent,\r\n            ResourceBlock.Aurum,\r\n        ];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0 + index * 18, ry = ry0 + index * 0;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n\r\n    constructor(market: Economy, w: number = 10000, h: number = 36) {\r\n        super(0,0, w, h, Color.DarkGray.darken(0.8));\r\n\r\n        let ty = 14\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+2)\r\n        brand.fontSize = 12\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.0.1\", 48, ty + 2)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(80, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 400, ty)\r\n        this.add(this.economy)\r\n\r\n        this.popLabel = new Label(\"\", 1000, ty, 'Helvetica')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 1080, ty, 'Helvetica')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.messageLabel.fontStyle = FontStyle.Italic\r\n        this.add(this.messageLabel)\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n    \r\n}\r\n","import { UIActor, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, SmallRoomThree, SmallRoomTwo, MediumRoom, MidDome, SmallDome, LargeRoom, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, sumMarkets, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { Desk, Bookshelf, Machine, CloningVat, WaterCondensingMachine, OxygenExtractor, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Cabin, Orchard, SolarCell, Megafabricator, Arbor, Fabricator, MiningDrill, Preserve, Workstation, Houseplant, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Card } from \"./Card\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Palette } from \"./Palette\";\r\nimport { Building } from \"../Building\";\r\n\r\nexport class Hud extends UIActor {\r\n    private hidePalettes: boolean = true\r\n    private structurePalette: Palette //<Structure> \r\n    private machinePalette: Palette //<Machine>\r\n    private functionPalette: Palette\r\n    private card: Card\r\n\r\n    private status: StatusAnalysisView\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n    static machinesForPalette = allMachines\r\n    static functionsForPalette = allSpaceFunctions\r\n\r\n\r\n\r\n    constructor(\r\n        private game: Game,\r\n        protected onBuildingSelect = null,\r\n        protected onMachineSelect = null,\r\n        protected onFunctionSelect = null\r\n    ) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.status = new StatusAnalysisView(emptyMarket());\r\n        this.add(this.status)\r\n\r\n        let displayInfo = (e) => this.showCard(e)\r\n        this.structurePalette = new Palette('Structure', 20, 35, Hud.structuresForPalette, onBuildingSelect, displayInfo)\r\n        this.machinePalette = new Palette('Machine', 20, 300, allMachines, onMachineSelect, displayInfo) // (e) => this.showCard(e))\r\n        this.functionPalette = new Palette('Function', 220, 35, Hud.functionsForPalette, onFunctionSelect, displayInfo, false)\r\n\r\n        this.card = new Card(null, 20, 800) // game.canvasHeight - 200)\r\n        this.add(this.card)\r\n    }\r\n\r\n    showPalettes() {\r\n        this.hidePalettes = false\r\n    }\r\n\r\n    setMessage(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (!this.hidePalettes) {\r\n            this.structurePalette.draw(ctx)\r\n            this.machinePalette.draw(ctx)\r\n            this.functionPalette.draw(ctx)\r\n        }\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true) {\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n    }\r\n\r\n    showCard(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        this.card.present(entity)\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n        this.updateFunctionPalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        let builtStructures =\r\n            Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n\r\n        this.structurePalette.updateBuilt(builtStructures)\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let devices = colony.findAllDevices()\r\n        let builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine))\r\n        this.machinePalette.updateBuilt(builtMachines)\r\n    }\r\n\r\n    private updateFunctionPalette(colony: Colony) {\r\n        let builtReifiedFunctions = flatSingle(colony.buildings.map(b => b.spaceFunction))\r\n        let builtFunctions = Hud.functionsForPalette.filter((fn) => builtReifiedFunctions.some(rf => rf instanceof fn))\r\n        this.functionPalette.updateBuilt(builtFunctions)\r\n    }\r\n\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Strategy } from \"./Strategy\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nexport abstract class ConstructionStrategy extends Strategy {\r\n    canApply(): boolean {\r\n        return !!this.unbuiltDevice\r\n    }\r\n\r\n    get unbuiltDevice() {\r\n        const isUnbuilt = (d: Device) => !d.built && !d.inUse && d.building.isActive\r\n        return this.planet.colony.findAllDevices().find(isUnbuilt)\r\n    }\r\n}","import { ConstructionStrategy } from \"./ConstructionStrategy\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nexport class ProxmityBasedConstruction extends ConstructionStrategy {\r\n\r\n\r\n    async apply() {\r\n        // if (this.isActive) { return }\r\n        // this.isActive = true\r\n\r\n        console.warn(\"APPLY PROXIMITY BASED CONSTRUCTION!!\")\r\n\r\n        // await this.pause()\r\n        // await this.pause()\r\n        // await this.pause()\r\n\r\n        // throw new Error(\"Method not implemented.\");\r\n        // const isUnbuilt = (d: Device) => !d.built && !d.inUse && d.building.isActive\r\n        // let unbuiltDevice = this.planet.colony.findAllDevices().find(isUnbuilt)\r\n\r\n        // find cost items\r\n        if (this.unbuiltDevice && this.unbuiltDevice.building) { //} && unbuiltDevice.building) {\r\n            await this.constructDevice(this.unbuiltDevice)\r\n        }\r\n        await this.pause()\r\n\r\n        // this.isActive = false\r\n    }\r\n\r\n    private async constructDevice(device: Device) {\r\n        console.log(\"CONSTRUCT DEVICE\", { device, building: device.building })\r\n        device.inUse = true\r\n        let resources = device.machine.cost\r\n        console.log(\"gather ingredients...\")\r\n        await this.gatherIngredients(resources)\r\n        console.log(\"visit!!\")\r\n        await this.visitDevice(device)\r\n        await device.assemble(this.pawn)\r\n        device.inUse = false\r\n    }\r\n}","import { ResourceBlock } from \"../models/Economy\";\r\n\r\nimport { Recipe } from \"../models/MechanicalOperation\";\r\n\r\nexport interface RetrieveResource {\r\n    type: 'retrieve'\r\n    resource: ResourceBlock\r\n    // count: number\r\n}\r\n\r\nexport interface WorkRecipe {\r\n    type: 'work'\r\n    recipe: Recipe\r\n}\r\n\r\nexport interface StoreResource {\r\n    type: 'store'\r\n    resource: ResourceBlock\r\n}\r\n\r\nexport function retrieveResource(res: ResourceBlock): RetrieveResource {\r\n    return {\r\n        type: 'retrieve',\r\n        resource: res,\r\n        // count: 1\r\n    }\r\n}\r\n\r\n\r\nexport type InteractionRequest = StoreResource | RetrieveResource | WorkRecipe; // | ...\r\n\r\n","import { Device } from \"../actors/Device\";\r\nimport { MechanicalOperation, Recipe } from \"../models/MechanicalOperation\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class ProductionStrategy extends Strategy {\r\n\r\n\r\n    protected async storeBlock(res: ResourceBlock) {\r\n        let storesDesiredBlock = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) && //operation.capacity &&\r\n            d.operation.stores.includes(res)\r\n        let openStore = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n        let stored = false\r\n        if (openStore) {\r\n            await this.visitDevice(openStore)\r\n            if (await openStore.interact(this.pawn, { type: 'store', resource: res })) {\r\n                stored = true\r\n            }\r\n        }\r\n\r\n        if (!stored) {\r\n            await this.pause()\r\n            await this.storeBlock(res)\r\n        }\r\n    }\r\n\r\n}\r\n","import { shuffle } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Recipe, ResourceStorage } from \"../models/MechanicalOperation\";\r\nimport { ProductionStrategy } from \"./ProductionStrategy\";\r\n\r\nexport class CapacityBasedProduction extends ProductionStrategy {\r\n    async apply() {\r\n        console.warn(\"APPLY CAPACITY BASED PRODUCTION!!\")\r\n        // if (this.isActive) { return; }\r\n        // this.isActive = true\r\n        const storeWithCapacity = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) //operation.capacity\r\n        const store: Device = shuffle(this.devices).find(storeWithCapacity)\r\n        if (store && store.operation.type === 'store') {\r\n            const storage: ResourceStorage = store.operation\r\n            const recipeForStoredResource = (r: Recipe) => storage.stores.some(stored => r.produces === stored)\r\n            let recipe = shuffle(this.recipes).find(recipeForStoredResource)\r\n            if (recipe) {\r\n                await this.workRecipe(recipe)\r\n                await this.storeBlock(recipe.produces)\r\n            }\r\n        }\r\n        await this.pause()\r\n        // this.isActive = false\r\n    }\r\n\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons, deleteByValueOnce, sleep } from \"../Util\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { ProductionStrategy } from \"../strategies/ProductionStrategy\";\r\nimport { CapacityBasedProduction } from \"../strategies/CapacityBasedProduction\";\r\nimport { drawStar } from \"../Painting\";\r\nimport { ConstructionStrategy } from \"../strategies/ConstructionStrategy\";\r\nimport { ProxmityBasedConstruction } from \"../strategies/ProximityBasedConstruction\";\r\n\r\nexport class Citizen extends Actor {\r\n\r\n    // walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock[] = [] // null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    private productionStrategy: ProductionStrategy\r\n    private constructionStrategy: ConstructionStrategy\r\n\r\n    constructor(private home: Vector, protected planet: Planet, private elite: boolean = false) {\r\n        super(home.x, home.y, Scale.minor.first, Scale.minor.fourth, Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.productionStrategy = new CapacityBasedProduction(this)\r\n        this.constructionStrategy = new ProxmityBasedConstruction(this)\r\n    }\r\n\r\n    get isWorking() { return this.isWorking }\r\n    get currentPlanet() { return this.planet }\r\n\r\n    get walkSpeed() {\r\n        return this.planet.timeFactor * Game.citizenSpeed\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // make sure we are busy!\r\n        this.work()\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = \r\n              Math.min(\r\n                  (now - this.workStarted) / this.workDuration,\r\n                  1\r\n              )\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.elite) {\r\n            // draw a little star?\r\n            drawStar(ctx, this.pos.x + 6, this.pos.y - 9)\r\n        }\r\n\r\n        if (this.carrying) {\r\n            this.carrying.forEach((carried, idx) => {\r\n                ctx.fillStyle = blockColor(carried).toRGBA()\r\n                ctx.fillRect(this.x + 4, this.y - 3 * idx, 5, 5)\r\n            })\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            ctx.strokeRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n        }\r\n\r\n        // let debugPath = true\r\n        if (this.path && Game.debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 4\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    carry(c: ResourceBlock) {\r\n        this.carrying.push(c);\r\n    }\r\n\r\n    isCarryingUnique(resources: ResourceBlock[]): boolean {\r\n        let isCarrying = false\r\n        let carryingCopy = this.carrying.slice()\r\n        if (this.carrying.length > 0) {\r\n            let missingItem = false\r\n            resources.forEach(resToFind => {\r\n                if (carryingCopy.find(res => res === resToFind)) {\r\n                    deleteByValueOnce(carryingCopy, resToFind)\r\n                } else {\r\n                    missingItem = true;\r\n                }\r\n            })\r\n            isCarrying = !missingItem\r\n        }\r\n        // console.log(\"IS CARRYING\", { resources, carrying: this.carrying, result: isCarrying })\r\n        return isCarrying\r\n    }\r\n\r\n    drop(res: ResourceBlock): ResourceBlock {\r\n        if (this.carrying.length > 0) {\r\n            if (this.carrying.find(r => r === res)) {\r\n                deleteByValueOnce(this.carrying, res)\r\n                return res\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        if (pos) {\r\n            return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n        }\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        this.workInProgress = false\r\n    }\r\n\r\n    // currentBuilding: Building\r\n    async pathTo(building: Building) {\r\n        if (this.path.length > 0) {\r\n            throw new Error(\"Already pathing!!\")\r\n        }\r\n        // console.log(\"PATH TO\", { building, pos: this.pos })\r\n        let path = //this.currentBuilding\r\n            // ? this.planet.pathBetween(this.currentBuilding.pos.clone(), building)\r\n            this.planet.pathBetween(this.pos.clone(), building) //pos) //building)\r\n\r\n        // console.log(\"FOUND PATH\", { path })\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            path.pop()\r\n            path.shift()\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = []\r\n        }\r\n        // this.currentBuilding = building\r\n        return true;\r\n    }\r\n\r\n    async work() {\r\n        if (this.constructionStrategy.canApply()) {\r\n            await this.constructionStrategy.attempt()\r\n        } else {\r\n            await this.productionStrategy.attempt()\r\n        }\r\n    }\r\n\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(pos, elite: boolean = false) {\r\n        let citizen = new Citizen(pos, this.planet, elite);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\n\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = false\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.placed = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findPoweredDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d.pos.add(d.building.pos))\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings[0] //.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices(): Device[] {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n\r\n    findPoweredDevices(): Device[] {\r\n        return flatSingle(this.activeBuildings.map(b => b.getDevices()))\r\n            .filter(d => d.built) /// ....\r\n    }\r\n\r\n    protected get activeBuildings() {\r\n        return this.buildings.filter(b => b.isActive)\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawPatternedRect, drawRect } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n// import { drawPatternedRect, drawRect } from \"../../Util\";\r\n\r\nexport class MediumSurfaceRoomView extends Building {\r\n    hideBox = true\r\n\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() //- this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        // draw from left slot to each device place to right slot?\r\n        let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length-1])\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        g.edge(devices[1], find(slots[1]))\r\n\r\n        return g\r\n    }\r\n  \r\n    // afterConstruct() {\r\n    //     let { machines } = this.structure;\r\n    //     if (machines && machines.length > 0) {\r\n    //         let machine = new machines[0]();\r\n    //         this.devicePlaces().forEach(place => {\r\n    //             let theDevice = new Device(machine, place.position)\r\n    //             this.addDevice(theDevice)\r\n    //         })\r\n    //     }\r\n\r\n    // }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor()\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n\r\n        // ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n        // let rect = \r\n            // { x: this.pos.x, y: this.pos.y, width: this.getWidth(), height: this.getHeight() };\r\n        drawPatternedRect(\r\n            ctx,\r\n            this.aabb(),\r\n            this.backgroundPattern\r\n        )\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black\r\n            c.a = 0.6\r\n            drawRect(ctx, this.aabb(), 0, c)\r\n        }\r\n\r\n        // a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomThreeView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Huge\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Large\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 2\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaceCount = 3\r\n    //devicePlaces() {\r\n    //    let w = this.getWidth()/2\r\n    //    let x = this.pos.x + w;\r\n    //    let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n    //    let ds = [\r\n    //        new Vector(x - w / 2, y),\r\n    //        new Vector(x, y),\r\n    //        new Vector(x + w / 2, y),\r\n    //    ]\r\n\r\n    //    return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    //}\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { range, eachCons, measureDistance } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.planet.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector, Color } from \"excalibur\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n// import { drawRect, drawPatternedRect } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { drawPatternedRect, drawRect } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 12\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        // let wallColor = this.processedColor() //.darken(0.4)\r\n        let floorColor = this.planet.color.darken(0.6) //Color.Violet.darken(0.92)\r\n\r\n        // drawRect(ctx, this.aabb(), 0.5, wallColor)\r\n        drawPatternedRect(ctx, this.aabb(), this.backgroundPattern)\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black\r\n            c.a = 0.6\r\n            drawRect(ctx, this.aabb(), 0, c)\r\n        }\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight,\r\n              width: this.getWidth(), height: this.floorHeight },\r\n              0.2,\r\n              floorColor\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let slots: Slot[] = this.slots()\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        // draw from left slot to each device place to right slot?\r\n        let leftSlot = find(slots[0].pos), rightSlot = find(slots[slots.length-1].pos)\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n        return g\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    devicePlaceSize: DeviceSize = DeviceSize.Small\r\n    devicePlaceCount: number = 2\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"98240dde9344ac8d071d076ac951e15d.png\";","module.exports = __webpack_public_path__ + \"da31cf43235263c1c3e0ad45a46360a1.png\";","module.exports = __webpack_public_path__ + \"a6a38278ac501400c6199e0df9e1bf84.png\";","module.exports = __webpack_public_path__ + \"ece1d5d5858bc048d2d949ecc3f5e9bc.png\";","module.exports = __webpack_public_path__ + \"3654f0489813e0668743efde017c9653.png\";","module.exports = __webpack_public_path__ + \"3abbdabf07943966f102ac7345a59986.png\";","module.exports = __webpack_public_path__ + \"d1b4690b9f5fa4957f98602afc8cfdb6.png\";","module.exports = __webpack_public_path__ + \"0eb7a15ea04678b14a2b88b5965aabeb.png\";","module.exports = __webpack_public_path__ + \"29c5f1be64c99bbc14d5063eea2f0953.svg\";","module.exports = __webpack_public_path__ + \"502f86b65239e20806bbae8bc77a6116.svg\";","module.exports = __webpack_public_path__ + \"5289b20985e3c3a98081267a2da1772e.svg\";","module.exports = __webpack_public_path__ + \"1d893905e4eea3bbc48b0e129e318ea6.svg\";","module.exports = __webpack_public_path__ + \"bd556d00e484db4e52d198d0bf39d0f2.svg\";","module.exports = __webpack_public_path__ + \"650cd431226df0755357c71d61bef1f2.svg\";","module.exports = __webpack_public_path__ + \"f12c591f538ab3026bf13e93f3fa9485.svg\";","module.exports = __webpack_public_path__ + \"3aeb9dd24809ba3fbd4eeb31a28c3b19.svg\";","module.exports = __webpack_public_path__ + \"6cc6f6773bb6eb26fcef87b9629f7b87.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"24611230ec712ba7ee38b99561aedd87.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { ResourceBlock } from \"./Economy\";\r\n\r\nexport type MechanicalOperation =\r\n    Recipe |\r\n    ResourceGenerator |\r\n    ResourceStorage |\r\n    SpawnClone |\r\n    AccelerateTime |\r\n    Noop\r\n\r\nexport interface Noop {\r\n    type: 'noop'\r\n}\r\n\r\nexport interface Recipe {\r\n    type: 'recipe'\r\n    consumes: ResourceBlock[]\r\n    produces: ResourceBlock\r\n    workTime: number\r\n}\r\n\r\nexport interface ResourceGenerator {\r\n    type: 'generator'\r\n    generates: ResourceBlock\r\n    generationTime: number\r\n    capacity: number\r\n}\r\n\r\nexport interface ResourceStorage {\r\n    type: 'store'\r\n    stores: ResourceBlock[]\r\n    capacity: number\r\n}\r\n\r\nexport interface SpawnClone {\r\n    type: 'spawn'\r\n}\r\n\r\nexport interface AccelerateTime {\r\n    type: 'accelerate'\r\n    factor: number\r\n}\r\n\r\nfunction store(res: ResourceBlock[], capacity: number = 10): ResourceStorage {\r\n    return {\r\n        type: 'store',\r\n        stores: res,\r\n        capacity\r\n    }\r\n}\r\n\r\nfunction generate(res: ResourceBlock, cap: number = 4): ResourceGenerator {\r\n    return {\r\n        type: 'generator',\r\n        generates: res,\r\n        generationTime: 1000,\r\n        capacity: cap\r\n    }\r\n}\r\n\r\nfunction recipe(input: ResourceBlock[], output: ResourceBlock): Recipe {\r\n    return {\r\n        type: 'recipe',\r\n        consumes: input,\r\n        produces: output,\r\n        workTime: 1000,\r\n    }\r\n}\r\n\r\nfunction spawn(): SpawnClone {\r\n    return {\r\n        type: 'spawn',\r\n    }\r\n}\r\n\r\nfunction accelerateTime(): AccelerateTime {\r\n    return {\r\n        type: 'accelerate',\r\n        factor: 2\r\n    }\r\n}\r\n\r\nexport const mechanicalOperations = {\r\n    store,\r\n    generate,\r\n    recipe,\r\n    spawn,\r\n    accelerateTime,\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { AccelerateTime, MechanicalOperation } from '../../models/MechanicalOperation';\r\n\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n\r\n    constructor(\r\n        public hud: Hud,\r\n        public color: Color,\r\n        private onBuildingHover: (b: Building) => any,\r\n        private onDeviceHover: (d: Device) => any,\r\n        private w: number = 2000000,\r\n        private depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, w, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n    }\r\n\r\n    set currentlyViewing(buildingOrDevice: Building | Device) {\r\n        if (buildingOrDevice instanceof Building) {\r\n            let b: Building = buildingOrDevice\r\n            this.onBuildingHover(b)\r\n        } else if (buildingOrDevice instanceof Device) {\r\n            let d: Device = buildingOrDevice\r\n            this.onDeviceHover(d)\r\n        }\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        // let devices = this.colony.findPoweredDevices()\r\n        // let economies = devices.map((d: Device) => d.machine.economy)\r\n\r\n        let buildings = this.colony.buildings\r\n        let economies = buildings.map(b => b.economy())\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector, elite: boolean = false) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            console.log(\"POPULATIN'!\")\r\n            // let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(pos, elite) //home)\r\n        } else {\r\n            console.warn(\"too many citizens already to populate more!\")\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [ PureValue.Shelter, PureValue.Water, PureValue.Oxygen ]\r\n        return Math.max(0, Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        ))\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n\r\n    get timeFactor() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let ops: MechanicalOperation[] = devices.map(d => d.operation) //.filter(op => op.type === 'accelerate')\r\n        return ops\r\n            .map(op => op.type === 'accelerate' ? op.factor : 1)\r\n            .reduce((acc, val) => val * acc, 1.0)\r\n    }\r\n}","import { Scene, Input, Vector } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MainTunnel, Corridor, SurfaceRoad, SmallDome, SmallRoomThree, MediumRoomThree, LargeRoom, HugeRoom } from \"../models/Structure\";\r\nimport { Building, structureViews, } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { SpaceFunction, CloneMatrix, Kitchen, LivingQuarters, LifeSupportPod, Library, Archive, ComputerCore, MissionControl, SolarArray, CloneReception } from \"../models/SpaceFunction\";\r\nimport { flatSingle, zip } from \"../Util\";\r\nimport { DevicePlace } from \"../actors/Building/Building\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    placingFunction: SpaceFunction = null\r\n\r\n\r\n    static requiredStructuresAndFunctions: (typeof SpaceFunction | typeof Structure)[] = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        SolarArray,\r\n        // LifeSupportPod,\r\n        MainTunnel,\r\n        Corridor,\r\n        LivingQuarters,\r\n        // CloneMatrix,\r\n        // CloneReception,\r\n        // Kitchen,\r\n        // Library,\r\n        // Archive,\r\n        // ComputerCore,\r\n        \r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, false)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        let buildIt = (e) => this.startConstructing(e)\r\n\r\n        this.hud = new Hud(game, buildIt, buildIt, buildIt)\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(\r\n            this.hud,\r\n            game.world.color,\r\n            (b) => this.hud.showCard(b),\r\n            (d) => this.hud.showCard(d)\r\n        )\r\n\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(1.5, 10000)\r\n        // this.camera.pos.y = this.planet.getTop()\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n\r\n                            if (this.placingFunction) {\r\n                                let fn = this.placingFunction\r\n                                console.log({ fn, bldg: buildingUnderConstruction })\r\n                                zip(fn.machines, buildingUnderConstruction.devicePlaces()).forEach(([machine, place]: [typeof Machine, DevicePlace]) => {\r\n                                    console.log(\"would add machine\", { machine, place })\r\n                                    let m = (new machine()).concretize()\r\n                                    let device = new Device(m, place.position)\r\n                                    buildingUnderConstruction.addDevice(device)\r\n                                })\r\n                                this.placingFunction = null\r\n                            }\r\n\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                this.planet.colony.currentlyConstructing = null\r\n                this.placingFunction = null\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingStructureOrFunction(): Structure | SpaceFunction {\r\n        let reqs = Construct.requiredStructuresAndFunctions.map(req => new req())\r\n\r\n        let actualStructureNames = this.buildings.map(building => building.structure.name)\r\n        let actualFunctionNames = flatSingle(\r\n            this.buildings.map(building => building.spaceFunction && building.spaceFunction.name)\r\n        )\r\n        let actualNames = [...actualStructureNames, ...actualFunctionNames]\r\n        return reqs.find(req => !actualNames.includes(req.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingStructureOrFunction() //this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.showPalettes()\r\n        }\r\n    }\r\n\r\n    firstBuilding: boolean = true\r\n    startConstructing(structureOrMachine: Structure | Machine | SpaceFunction, pos: Vector = new Vector(0, 0)) {\r\n        this.hud.showCard(structureOrMachine)\r\n        \r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            this.hud.setMessage(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            if (this.firstBuilding) {\r\n                this.camera.zoom(structure.zoom, 250)\r\n                this.camera.pos = theNextOne.pos\r\n                this.firstBuilding = false\r\n            } \r\n        } else if (structureOrMachine instanceof Machine) {\r\n            let machine = structureOrMachine\r\n            this.hud.setMessage(`Install ${machine.name} (${machine.description})`)\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            // this.camera.zoom(1.5, 250)\r\n        } else if (structureOrMachine instanceof SpaceFunction) {\r\n            let fn: SpaceFunction = structureOrMachine\r\n            this.hud.setMessage(`Place ${fn.name} (${fn.description})`)\r\n            theNextOne = this.spawnFunction(fn, pos)\r\n            this.placingFunction = fn\r\n\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        if (device.snap(this.planet)) {\r\n            this.camera.pos = device.pos\r\n \r\n        }\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n\r\n    protected spawnFunction(fn: SpaceFunction, pos: Vector): Building {\r\n        let theStructure: Structure = (fn.structure && new fn.structure()) // || new SmallRoomThree()\r\n        if (!theStructure) {\r\n            theStructure = new SmallRoomThree()\r\n            let machines = fn.machines.map(m => new m())\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Medium)) {\r\n                theStructure = new MediumRoomThree()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Large)) {\r\n                theStructure = new LargeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Huge)) {\r\n                theStructure = new HugeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.forDome)) {\r\n                theStructure = new SmallDome()\r\n            }\r\n        }\r\n\r\n        console.log(\"SPAWN FUNCTION\", { fn, structure: theStructure })\r\n        let building = this.assembleBuildingFromStructure(theStructure, pos)\r\n        building.reshape(building.constrainCursor(building.pos))\r\n        return building\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Orange] //Red, Color.Blue, Color.Green]\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ).\r\n        lighten(0.15).\r\n        desaturate(0.65)\r\n\r\n  \r\n    static bestowName(): any {\r\n        let nameList = [\r\n            'Aragorn',\r\n            'Anodyne',\r\n            'Carolyn',\r\n            'Exeter',\r\n            'Colwreath',\r\n            'India',\r\n            'Comma',\r\n            'Terabithia'\r\n        ]\r\n        return sample(nameList)\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword),\r\n\r\n}\r\n\r\nexport { Resources }\r\n","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}