{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Util.ts","webpack:///./src/values/DeviceSize.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Machine.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/Painting.ts","webpack:///./src/actors/Device.ts","webpack:///./src/models/Structure.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/Game.ts","webpack:///./src/strategies/Strategy.ts","webpack:///./src/actors/Building/BackgroundPatterns.ts","webpack:///./src/values/Scale.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Resources.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/SkyLayer.ts","webpack:///./src/actors/Planet/SkyLayers.ts","webpack:///./src/strategies/EatingStrategy.ts","webpack:///./src/strategies/WhenHungryEatingStrategy.ts","webpack:///./src/strategies/SleepingStrategy.ts","webpack:///./src/strategies/AnyBedSleepingStrategy.ts","webpack:///./src/strategies/ConstructionStrategy.ts","webpack:///./src/strategies/ProximityBasedConstruction.ts","webpack:///./src/values/InteractionRequest.ts","webpack:///./src/strategies/ProductionStrategy.ts","webpack:///./src/strategies/CapacityBasedProduction.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/actors/Hud/Palette.ts","webpack:///./src/actors/Hud/CardBody.ts","webpack:///./src/actors/Hud/CardTitle.ts","webpack:///./src/actors/Hud/Card.ts","webpack:///./src/actors/Hud/MusicPlayer.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MediumSurfaceRoomView.ts","webpack:///./src/actors/Building/MediumRoomThreeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/images/wood-panel-bg.png","webpack:///./src/images/ussf.png","webpack:///./src/images/window-bg.png","webpack:///./src/images/beige-bg.png","webpack:///./src/images/checker-bg.png","webpack:///./src/images/tech-bg.png","webpack:///./src/images/poster-wall-bg.png","webpack:///./src/images/books-bg.png","webpack:///./src/images/leafy-bg.png","webpack:///./src/images/raised-square-bg.png","webpack:///./src/images/codex-plain.svg","webpack:///./src/images/statue-plain.svg","webpack:///./src/images/miner-plain.svg","webpack:///./src/images/solar-collector-plain.svg","webpack:///./src/images/couch-plain.svg","webpack:///./src/images/fabricator-plain.svg","webpack:///./src/images/mega-console-plain.svg","webpack:///./src/images/console-red-plain.svg","webpack:///./src/images/console-green-plain.svg","webpack:///./src/images/console-purple-plain.svg","webpack:///./src/images/console-plain.svg","webpack:///./src/images/workstation-plain.svg","webpack:///./src/images/houseplant-plain.svg","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/models/MechanicalOperation.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/sounds/future tense.mp3","webpack:///./src/sounds/understanding.mp3","webpack:///./src/sounds/indivision.mp3","webpack:///./src/sounds/assembler.mp3","webpack:///./src/sounds/crater-rock.mp3","webpack:///./src/images/sword.png","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","deleteByValueOnce","index","indexOf","eachCons","eachChunk","array","measureDistance","b","sleep","ms","Promise","resolve","setTimeout","shuffle","sort","zip","countOccurrences","counts","forEach","containsUniq","testElems","doesContain","arrCopy","missingItem_1","testElem","find","mixColors","factor","aFactor","bFactor","Color","g","t","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","fourth","eighth","second","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","SurfaceRoadView_1","SurfaceRoadView","SmallDomeThreeView_1","SmallDomeThreeView","MidDomeView_1","MidDomeView","BigDomeView_1","BigDomeView","SmallRoomThreeView_1","SmallRoomThreeView","MediumRoomView_1","MediumRoomView","LargeRoomView_1","LargeRoomView","HugeRoomView_1","HugeRoomView","MediumRoomThreeView_1","MediumRoomThreeView","MediumSurfaceRoomView_1","MediumSurfaceRoomView","structureViews","Orientation_1","Game_1","Util_1","Graph_1","Economy_1","SpaceFunction_1","DeviceSize_1","Machine_1","BackgroundPatterns_1","Painting_1","DevicePlace","pos","this","_super","structure","planet","_this","x","y","width","height","infra","color","darken","Transparent","edgeWidth","placed","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","devices","active","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","some","currentlyViewing","toggleActive","collisionType","CollisionType","PreventCollision","nameLabel","Label","fontSize","fontStyle","FontStyle","Italic","White","__extends","poly","aabbPoly","draw","ctx","delta","drawRect","aabb","processedColor","spaceFunction","add","Game","debugPath","slots","slot","rect","Gray","lighten","nodes","node","Yellow","devicePlaces","place","position","visibleSize","update","engine","device","tryProduce","description","economy","emptyUnlessActive","isActive","emptyMarket","machineEconomies","buildingEconomy","__assign","Oxygen","demand","supply","sumMarkets","inUse","wasEquil","equilibrium","_i","allValues_1","allValues","localCap","availableCapacity","globalCap","agg","constrainCursor","clone","reshape","afterConstruct","handleClick","_pos","getWidth","getHeight","graph","supergraph","Graph","rootNode","findOrCreate","_a","child","parentSlot","edge","childNode","redeem","res","gather","debit","spend","populate","elite","pathFromRect","angledRoofPoly","angleStartY","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","bldg","edgeColor","mainColor","colorBase","clr","Red","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","closestBuildingByType","building","matchingSlot","compass_1","compass","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","subEqual","updateFunction","machine","onPlacement","hasPlaceForDevice","nextDevicePlace","getDevices","allTheMachines","StudyMachine","allMachines","CommandCenter","MissionLog","machines","console","log","allSpaceFunctions","spaceFn","sf","text","background","BackgroundPattern","Grid","Actor","PureValue","market","Power","Water","Shelter","Hope","Joy","Wisdom","Wealth","Beauty","Wonder","ea","eb","newMarket","sa","da","_b","every","ResourceBlock","Biomass","Ore","Idea","Meal","Data","Mineral","Bioplasma","Alloy","Algorithm","Argent","Aurum","Omnium","blockColors","Green","Blue","cStep","Viridian","DarkGray","Orange","blockColor","block","desaturate","setPrototypeOf","__proto__","constructor","create","assign","arguments","MechanicalOperation_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","plant","workstation","consolePurple","consoleGreen","consoleRed","megaconsole","fabricator","couch","solar","miner","statue","codex","Violet","store","mechanicalOperations","generate","recipe","spawn","accelerateTime","Machine","LightGray","cost","operation","type","image","prereqs","forDome","hide","concretize","built","produceResource","OxygenExtractor","WaterCondensingMachine","SolarCell","Statue","Workstation","Desk","Codex","Bookshelf","Couch","Fridge","Stove","Bed","Houseplant","PersonnelRegistry","CloningVat","OrientationConsole","productionTime","AlgaeVat","DissolutionVat","PlasmaBank","Fabricator","LifeSciencesConsole","Botany","MetalStorage","ResearchServer","Orchard","Cabin","Arbor","MineralProcessor","ThinkingFountain","Mainframe","Megafabricator","MolecularEngine","fromHex","SilverForest","TimeCrystal","HoloProjector","SacredGrove","AtomicCompiler","MiningDrill","Preserve","LogicPool","Cathedral","Microcity","LogicCrystal","Left","Up","Down","orientation","Error","drawPatternedPoly","path","pattern","Black","gridPattern","getBackgroundPattern","save","translate","beginPath","moveTo","pt","lineTo","closePath","fillStyle","strokeStyle","stroke","restore","drawLine","lineWidth","toRGBA","drawPatternedRect","rectangle","filled","dashed","main","fillRect","setLineDash","strokeRect","drawPoly","drawStar","cx","cy","outerRadius","innerRadius","spikes","rot","PI","cos","sin","Structure_1","Device","initialPos","product","imageLoaded","reserved","Image","onload","src","globalAlpha","drawImage","imageX","imageY","iv","bx","by","yOff","produced","blockSize","assemble","citizen","isCarryingUnique","progressBar","sent","drop","label","interact","request","worked","op","recipe_1","carrying","it","consumes","includes","consumed","workTime","getEffectiveWorkTime","carry","produces","warn","requires","has","store_1","dispense","stores","getEffectiveOperationalCapacity","res_1","stored","bonus","bonuses","capacity","workSpeed","round","resource","generationTime","generates","snap","allStructures","snapped","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","Structure","view","zoom","Corridor","Ladder","MainTunnel","fifth","MediumSurfaceRoom","SurfaceRoad","first","Dome","seventh","CommonArea","sixth","SmallRoomThree","SmallRoomTwo","SmallDome","MediumRoom","MediumRoomThree","LargeRoom","HugeRoom","SmallDomeThree","MidDome","LargeDome","Arcology","SpaceFunction","Beige","MissionControl","Window","LivingQuarters","Barracks","Kitchen","Checker","LifeSupportPod","Retreat","CloneMatrix","CloneReception","ReadingRoom","Library","Books","Study","Wood","ComputerLab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Leafy","Farm","Factory","ComputerCore","Tech","LifeSciencesLab","Refinery","Mine","HoloMatrix","TimeChamber","LivingRoom","Statuary","Resources_1","world","displayMode","DisplayMode","FullScreen","backgroundColor","start","loader","Loader","key","Resources","addResource","then","citizenSpeed","startHour","minuteTickMillis","Engine","InteractionRequest_1","Strategy","pawn","sleepInterval","currentPlanet","findPoweredDevices","recipes","operations","attempt","pause","gatherBlock","debug","gathered","generatesDesiredBlock","gen","closestDeviceByType","storesDesiredBlock","visitDevice","waitTimes","retrieveResource","visit","workRecipe","knowsRecipe","maker","made","gatherIngredients","performRecipeTask","blocks","blocks_1","ingredient","tries","timesToAttempt","raisedSquare","leafy","bookish","posters","tech","checker","beige","ussf","wood","loadBg","scale","loading","Poster","USSF","backgroundPatterns","bg","matrix","DOMMatrix","createPattern","setTransform","majorUnit","minorUnit","minorScale","empty","edges","edgesInverse","isEmpty","newNode","contains","testNode","measure","tolerance","dfs","dst","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","steps","srcIndex","reverse","sword","craterRock","assembler","indivision","understanding","futureTense","Sword","Texture","CraterRock","Sound","Assembler","Indivision","Understanding","FutureTense","ex","Player","setWidth","setHeight","PlanetBackground","MountainLayers","layers","skyColor","layerHeight","layerCount","peakCount","onInitialize","layerIndex","unshift","baseY","deltas","genPeaks","wc","sc","ndx","ls_1","layer","drawLayer","ox","oy","peakWidth","dMax","last","maxDiff","times","pick","Mountains","peaks","xOff","peakDistance","drift","baseColor","brightColor","yBase","peak","y0","mtnWidth","PlanetBackground_1","SkyLayer","lo","hi","mid","backMountainLayers","mountains","mountainLayers","setLoHi","SkyLayer_1","SkyLayers","c0","c1","setHi","EatingStrategy","EatingStrategy_1","WhenHungryEatingStrategy","canApply","isHungry","storedResources","desk","eat","SleepingStrategy","SleepingStrategy_1","AnyBedSleepingStrategy","isTired","hour","takeRest","Strategy_1","ConstructionStrategy","unbuiltDevice","findAllDevices","ProxmityBasedConstruction","constructDevice","resources","ProductionStrategy","storeBlock","openStore","CapacityBasedProduction","findStore","storage_1","recipeForStoredResource","CapacityBasedProduction_1","ProximityBasedConstruction_1","AnyBedSleepingStrategy_1","WhenHungryEatingStrategy_1","Citizen","home","isPlanning","workInProgress","sleeping","hunger","energy","currentBuilding","productionStrategy","constructionStrategy","sleepingStrategy","eatingStrategy","speedMultiplier","timeFactor","work","now","Date","getTime","progress","workStarted","workDuration","rotate","carried","saturate","px","pw","py","c_1","duration","reject","pathBetweenPoints","followPath","target","glideTo","actions","walkSpeed","asPromise","all","choice","strategies","strat","thirtyMinuteTimer","Citizen_1","Population","citizens","increase","NavigationTree","seekPath","origin","dest","closestNode","abs","NavigationTree_1","Colony","currentlyConstructing","debugTree","navTree","gradient","createLinearGradient","addColorStop","placeBuilding","buildNavTree","structureTypes","st","pathBetween","destination","srcNode","destNode","machineTypes","ctrl","activeBuildings","Colony_1","Population_1","Device_1","SkyLayers_1","Planet","hud","onBuildingHover","onDeviceHover","w","depth","sky","createLayer","skyLayers","population","currentHour","setTime","time","nextHour","inc","oldC","skyColorForHour","newC","mixC","assignColors","colorMap","night","dawn","morning","afternoon","evening","set","buildingOrDevice","theLayer","theEconomy","popularDemand","resourceGathered","resourceExpended","maxPop","theEconomyWithoutPeople","values","val","closestDevice","acc","Palette","onButtonClick","onButtonEnter","comprehend","comprehended","dragging","makePalette","_element","left","canvas","offsetLeft","top_1","offsetTop","style","top","updateBuilt","prereq","parentElement","removeChild","document","createElement","display","flexWrap","border","addEventListener","clientX","clientY","body","appendChild","title","textContent","fontFamily","fontWeight","padding","margin","btn","buttonFactory","onmouseenter","onclick","fg","paletteButton","textTransform","onmouseover","onmouseleave","CardBody","entity","describeResources","freqs","keys","join","notes","footer","show","describeEconomy","resourceDescription","domeStatus","bonusMessages","econ","CardTitle","announce","CardTitle_1","CardBody_1","Card","x0","cardBody","ix","iy","present","MusicPlayer","playlist","paused","makePlayer","startMusic","_titleElem","currentTrack","play","advancePlaylist","_wrapper","textAlign","inlineBlock","iconFactory","handleAction","action","song","stop","trackNames","append","iconContent","icon","innerHTML","EconomicValue","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","val1","val2","addValue","updateView","updatedEconomy","Tooltip","message","messageLabel","ResourceListEntry","resourceBlock","hovering","tooltip","visible","credit","amt","UIActor","ResourceListEntry_1","ResourcesList","entries","res1","res2","rx","ry","addEntry","entry","increment","decrement","ResourcesList_1","EconomyView_1","MusicPlayer_1","StatusAnalysisView","h","brand","ty","version","clock","popLabel","musicPlayer","Crater Rock","Future Tense","incrementResource","decrementResource","setMessage","showEconomy","showPopCap","cap","setClock","days","toString","hh","hours","minutes","ampm","padStart","StatusAnalysisView_1","Card_1","Palette_1","Hud","Tabs","tabs","_rootElement","makeRootElement","addTab","element","game","onBuildingSelect","onMachineSelect","onFunctionSelect","canvasWidth","canvasHeight","hidePalettes","status","displayInfo","showCard","machinePalette","structurePalette","structuresForPalette","functionPalette","functionsForPalette","card","showPalettes","updateDetails","rebuildPalettes","updatePalettes","updateEconomy","updateMaxPop","updateBuildingPalette","updateMachinePalette","updateFunctionPalette","builtStructures","builtMachines","machinesForPalette","builtReifiedFunctions","builtFunctions","rf","devicePlaceSize","devicePlaceCount","floorHeight","sg","right","isGroundFloor","leftSlot","rightSlot","topSlot","theSlots","slotY","getTop","backgroundPattern","floorColor","floorEdgeHeight","flagX","flagY","flagpoleHeight","_1","originSlot","minHeight","pickingOrigin","maxHeight","drawShape","xoff","yoff","bezierCurveTo","halfWidth","slotHeights","heights","y1","btm","lst","slotCount","arc","originX","newCursor","input","output","Hud_1","Planet_1","player_1","Construct","defaultMessage","placingFunction","timeStepIntervalMillis","firstBuilding","buildIt","startConstructing","player","prepareNextBuilding","camera","addTimer","Timer","stepTime","onActivate","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction_1","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","moveCam","direction","camMoveSpeed","dv","move","keyboard","Keys","H","Esc","W","A","S","D","onDeactivate","off","nextMissingStructureOrFunction","reqs","requiredStructuresAndFunctions","req","actualStructureNames","actualFunctionNames","actualNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","spawnFunction","anotherBuilding","assembleBuildingFromStructure","theStructure","Scene","World","colors","Cyan","Vermillion","Chartreuse","Rose","World_1","Construct_1","theWorld","construct","goToScene"],"mappings":"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AiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxCd,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA4C,EAAAiC,EAAAlF,GCAxC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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([104,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { getBackgroundPattern, BackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport const deleteByValueOnce = (arr, elem) => {\r\n  let index = arr.indexOf(elem);\r\n  if (index !== -1) arr.splice(index, 1);\r\n}\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport function eachChunk(a, n) {\r\n  return a.reduce(function (result, value, index, array) {\r\n    if (index % n === 0)\r\n      result.push(array.slice(index, index + n));\r\n    return result;\r\n  }, []);\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function shuffle(arr) {\r\n  return arr.sort(() => Math.random() > 0.5 ? 1 : -1)\r\n}\r\n\r\nexport const zip = (a, b) => a.map((e, i) => [e, b[i]])\r\n\r\nexport const countOccurrences = (arr) => {\r\n  let counts = {}\r\n  arr.forEach((elem) => {\r\n    counts[elem] = counts[elem] || 0\r\n    counts[elem] += 1\r\n  })\r\n  return counts\r\n}\r\n\r\nexport function containsUniq<T>(arr: T[], testElems: T[]) {\r\n  let doesContain = false\r\n  let arrCopy = arr.slice()\r\n  if (arr.length > 0) {\r\n    let missingItem = false\r\n    testElems.forEach(testElem => {\r\n      if (arrCopy.find(e => e === testElem)) {\r\n        deleteByValueOnce(arrCopy, testElem)\r\n      } else {\r\n        missingItem = true\r\n      }\r\n    })\r\n    doesContain = !missingItem\r\n  }\r\n  return doesContain\r\n}\r\n\r\n\r\nexport function mixColors(a: Color, b: Color, factor: number = 0.5): Color {\r\n  let aFactor = factor, bFactor = (1-factor)\r\n  return new Color(\r\n    (a.r * aFactor) + (b.r * bFactor),\r\n    (a.g * aFactor) + (b.g * bFactor),\r\n    (a.b * aFactor) + (b.b * bFactor),\r\n    1\r\n  )\r\n}","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.fourth; break;\r\n        case DeviceSize.Large: sz = major.eighth + major.second; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\nimport { SmallDomeThreeView } from './SmallDomeThreeView';\r\nimport { MidDomeView } from './MidDomeView';\r\nimport { BigDomeView } from './BigDomeView';\r\nimport { SmallRoomThreeView } from './SmallRoomThreeView';\r\nimport { MediumRoomView } from './MediumRoomView';\r\nimport { LargeRoomView } from './LargeRoomView';\r\nimport { HugeRoomView } from './HugeRoomView';\r\nimport { MediumRoomThreeView } from './MediumRoomThreeView';\r\nimport { MediumSurfaceRoomView } from './MediumSurfaceRoomView';\r\n\r\n\r\nconst structureViews: { [key: string]: typeof Building } = {\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n    MediumSurfaceRoomView,\r\n}\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n\r\n    MediumSurfaceRoomView,\r\n\r\n\r\n    structureViews\r\n\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits, FontStyle } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, deleteByValue, containsUniq } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock, emptyMarket, Economy, sumMarkets, equilibrium, allValues, availableCapacity } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { World } from \"../../models/World\";\r\nimport { Machine, allMachines, CommandCenter, MissionLog, StudyMachine } from \"../../models/Machine\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { EconomicValue } from \"../Hud/EconomicValue\";\r\nimport { drawRect, pathFromRect } from \"../../Painting\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0\r\n\r\n    nameLabel: Label\r\n\r\n    placed: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    spaceFunction: SpaceFunction\r\n\r\n    private devices: Device[] = []\r\n    givenName: string\r\n\r\n    private active: boolean = true\r\n    // private built: boolean = false\r\n\r\n    constructor(pos: Vector, public structure: Structure, public planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          structure.infra ? planet.color.darken(0.3) : Color.Transparent\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            if (!this.devices.some(d => d.hover)) {\r\n                this.planet.currentlyViewing = this\r\n            }\r\n        })\r\n\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED BUILDING\", { building: this })\r\n            this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 14\r\n        this.nameLabel.fontStyle = FontStyle.Italic\r\n        this.nameLabel.color = Color.White\r\n\r\n        if (this.structure.infra) { this.active = true }\r\n    }\r\n\r\n    poly() { return this.aabbPoly() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        // this.devices.forEach(device => device.draw(ctx, delta))\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.showLabel && this.spaceFunction) {\r\n            this.nameLabel.pos = this.pos.add(new Vector(32, 24)) //get getCenter().\r\n            // this.nameLabel.pos.x = this.getCenter().x //ctx.measureText(this.structure.name).width / 2\r\n            // this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n        }\r\n\r\n        // let debug = true;\r\n        if (Game.debugPath) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = true\r\n        if (showDevicePlaces && this.devicePlaces().length > 0 && this.devices.length < this.devicePlaces().length) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    0.1,\r\n                    Color.White,\r\n                    false,\r\n                    true\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n\r\n        let tryProduce = this.placed;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.tryProduce(this.step));\r\n        }\r\n\r\n        // this.devices.forEach(d => d.update(engine, delta))\r\n\r\n        this.step += 1\r\n    }\r\n\r\n    get name() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.name\r\n        } else {\r\n            return this.structure.name\r\n        }\r\n    }\r\n\r\n    get description() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.description\r\n        } else {\r\n            return this.structure.description\r\n        }\r\n    }\r\n\r\n    economy(emptyUnlessActive: boolean = true): Economy {\r\n        if (emptyUnlessActive && !this.isActive) {\r\n            return emptyMarket()\r\n        } else {\r\n            let machineEconomies = this.devices.map(d => d.economy)\r\n            //machine.economy)\r\n\r\n            let buildingEconomy = {\r\n                ...emptyMarket(),\r\n                Oxygen: { demand: 1, supply: 0 }, // structural demand\r\n                // Water: { demand: 0.1, supply: 0 },\r\n            }\r\n\r\n            let aggregate = [...machineEconomies, buildingEconomy]\r\n                .reduce(sumMarkets, emptyMarket())\r\n\r\n            return aggregate\r\n        }\r\n    }\r\n\r\n    private toggleActive() {\r\n        if (!this.structure.infra) {\r\n            if (this.active) {\r\n                if (this.devices.some(d => d.inUse)) { return }\r\n                let wasEquil = equilibrium(this.planet.economy)\r\n                this.active = false\r\n                if (wasEquil) {\r\n                    if (!equilibrium(this.planet.economy)) {\r\n                        this.active = true\r\n                        // return\r\n                    }\r\n                    // this.active = true\r\n                } else {\r\n                    // we weren't at equilibrium previously\r\n                    // permit it, if we don't have any supply that would go negative without us?\r\n                    // console.log(\"can we toggle?\")\r\n                    for (let value of allValues) {\r\n                        let localCap = availableCapacity(this.economy(false), value)\r\n                        let globalCap = availableCapacity(this.planet.economy, value)\r\n                        // console.log(\"value\", { value, localCap, globalCap})\r\n                        if (localCap > 0 && globalCap < 0) {\r\n                            // don't permit it to be turned off\r\n                            this.active = true\r\n                        }\r\n                    }\r\n                }\r\n            } else { // this.active is false now\r\n                let agg = [\r\n                    this.planet.economy,\r\n                    this.economy(false)\r\n                ].reduce(sumMarkets, emptyMarket())\r\n\r\n                if (equilibrium(agg)) {\r\n                    this.active = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get isActive() { return !!this.active }\r\n\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public debit(res: ResourceBlock) {\r\n        this.planet.spend(res)\r\n    }\r\n\r\n    public populate(pos: Vector, elite: boolean = false) {\r\n        this.planet.populate(pos, elite) //this.pos)\r\n    }\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected aabbPoly(): {x:number,y:number}[] {\r\n        return pathFromRect(this.aabb());\r\n        //return [\r\n        //    // bottom-left\r\n        //    { x: this.pos.x, y: this.pos.y + this.getHeight() },\r\n\r\n        //    // upper-left\r\n        //    { x: this.pos.x, y: this.pos.y },\r\n\r\n        //    // upper-right\r\n        //    { x: this.pos.x + this.getWidth(), y: this.pos.y },\r\n\r\n        //    // bottom-right\r\n        //    { x: this.pos.x + this.getWidth(), y: this.pos.y + this.getHeight() },\r\n        //];\r\n    }\r\n\r\n    protected angledRoofPoly(): {x: number, y: number}[] {\r\n        let angleStartY = 1 * (this.getHeight() / 3) - 3\r\n        let angleStartX = 20 // 1 * (this.getWidth() / 10)\r\n        return [\r\n            // bottom-left\r\n            { x: this.pos.x, y: this.pos.y + this.getHeight() },\r\n\r\n            // upper-left\r\n            { x: this.pos.x, y: this.pos.y + angleStartY },\r\n            { x: this.pos.x + angleStartX, y: this.pos.y },\r\n\r\n            // upper-right\r\n            { x: this.pos.x + this.getWidth() - angleStartX, y: this.pos.y },\r\n            { x: this.pos.x + this.getWidth(), y: this.pos.y + angleStartY },\r\n\r\n            // bottom-right\r\n            { x: this.pos.x + this.getWidth(), y: this.pos.y + this.getHeight() },\r\n        ]\r\n            \r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.placed)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (!this.active) {\r\n            clr = clr.darken(0.8)\r\n        }\r\n\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        // device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        device.pos.subEqual(this.pos) // = this.devicePlaces()[0].position\r\n        // console.log(\"DEVICE IS AT\", { pos: device.pos })\r\n        this.add(device)\r\n        this.updateFunction()\r\n        device.machine.onPlacement(device)\r\n        this.toggleActive()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices //.filter(d => d.built)\r\n    }\r\n\r\n    public updateFunction() {\r\n        let allTheMachines = [ StudyMachine, ...allMachines, CommandCenter, MissionLog ]\r\n        let machines = this.devices.map(\r\n            d => allTheMachines.find((m: typeof Machine) => d.machine instanceof m) // && d.built) //this.devices.some(d => d.machine instanceof m))\r\n        ) //\r\n        // debugger\r\n        console.log(\"MY MACHINES\", { machines })\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let sf = new spaceFn()\r\n\r\n            return containsUniq(\r\n              machines,\r\n              sf.machines\r\n            );\r\n        })\r\n        if (fn) {\r\n            // console.log(\"Determined building function\", { fn })\r\n            let sf = new fn()\r\n            this.spaceFunction = sf\r\n            this.nameLabel.text = sf.name\r\n        } else {\r\n            // console.warn(\"Could not identify function!\")\r\n        }\r\n    }\r\n\r\n    get backgroundPattern() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.background\r\n        } else {\r\n            return BackgroundPattern.Grid\r\n        }\r\n    }\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport const allValues: PureValue[] = [\r\n    PureValue.Power,\r\n    PureValue.Oxygen,\r\n    PureValue.Water,\r\n    PureValue.Shelter,\r\n    PureValue.Hope,\r\n    PureValue.Joy,\r\n    PureValue.Wisdom,\r\n    PureValue.Wealth,\r\n    PureValue.Beauty,\r\n    PureValue.Wonder\r\n]\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return Math.floor(market[value].supply - market[value].demand)\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply,\r\n            demand,\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport const equilibrium: (e: Economy) => boolean = (e) => {\r\n    return allValues.every(value => availableCapacity(e, value) >= 0)\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Biomass = 'Biomass',\r\n    Ore = 'Ore',\r\n    Idea = 'Idea',\r\n\r\n    // derived\r\n    Meal = 'Meal',\r\n    Data = 'Data',\r\n    Mineral = 'Mineral',\r\n    Bioplasma = 'Bioplasma',\r\n\r\n    // higher-order\r\n    Alloy = \"Alloy\",\r\n    Algorithm = \"Algorithm\",\r\n\r\n    // superb\r\n    Argent = \"Argent\",\r\n    Aurum = \"Aurum\",\r\n\r\n    // hyperbolic\r\n    Omnium = \"Omnium\",\r\n}\r\n\r\nlet cStep = 0.3\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Biomass: Color.Green,\r\n    Data: Color.Blue.lighten(cStep),\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(cStep),\r\n    Idea: Color.Blue.lighten(cStep*2), //.desaturate(cStep),\r\n    Ore: Color.Red.darken(cStep),\r\n\r\n    Bioplasma: Color.Viridian,\r\n\r\n    Alloy: Color.DarkGray.darken(cStep), //(cStep),\r\n    Algorithm: Color.Blue.darken(cStep), //.desaturate(cStep),\r\n\r\n    Argent: Color.Gray.lighten(cStep),\r\n    Aurum: Color.Orange.lighten(cStep),\r\n\r\n    Omnium: Color.White,\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    return baseColor.desaturate(0.1) //.lighten(0.1) //.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Color, FontStyle, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { MechanicalOperation, mechanicalOperations } from \"./MechanicalOperation\";\r\nimport { shuffle, range, sample } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\nconst plant = require('../images/houseplant-plain.svg')\r\nconst workstation = require('../images/workstation-plain.svg')\r\n\r\nconst console = require('../images/console-plain.svg')\r\nconst consolePurple = require('../images/console-purple-plain.svg')\r\nconst consoleGreen = require('../images/console-green-plain.svg')\r\nconst consoleRed = require('../images/console-red-plain.svg')\r\nconst megaconsole = require('../images/mega-console-plain.svg')\r\n\r\nconst fabricator = require('../images/fabricator-plain.svg')\r\n\r\nconst couch = require('../images/couch-plain.svg')\r\nconst solar = require('../images/solar-collector-plain.svg')\r\nconst miner = require('../images/miner-plain.svg')\r\n\r\nconst statue = require('../images/statue-plain.svg')\r\nconst codex = require('../images/codex-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n    plant,\r\n    workstation,\r\n\r\n    console,\r\n    consolePurple,\r\n    consoleGreen,\r\n    consoleRed,\r\n    megaconsole,\r\n\r\n    fabricator,\r\n\r\n    couch,\r\n    solar,\r\n    miner,\r\n    statue,\r\n\r\n    codex,\r\n}\r\n\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nlet { store, generate, recipe, spawn, accelerateTime } = mechanicalOperations\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n\r\n    cost: ResourceBlock[] = [ResourceBlock.Mineral]\r\n\r\n    size: DeviceSize = DeviceSize.Small\r\n    operation: MechanicalOperation = { type: 'noop' }\r\n    image = images.vat\r\n    prereqs: (typeof Machine)[] = []\r\n    economy: Economy = emptyMarket()\r\n    forDome: boolean = false\r\n    hide: boolean = false\r\n\r\n    capacity: boolean\r\n\r\n\r\n    concretize(): Machine { return this; } \r\n\r\n    onPlacement(device: Device) {\r\n        // ...whatever we need to script here?\r\n    }\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command Console'\r\n    description = 'commander, we need your help'\r\n    operation = store(\r\n        [ResourceBlock.Mineral], //,ResourceBlock.Biomass],\r\n        24\r\n    )\r\n    image = images.megaconsole\r\n    size = DeviceSize.Medium\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 6, demand: 0 },\r\n        Oxygen: { supply: 16, demand: 0 },\r\n        Water: { supply: 1, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 },\r\n        Shelter: { supply: 1, demand: 0}\r\n    }\r\n\r\n    onPlacement(device: Device) {\r\n        device.built = true\r\n        for (let i in range(20)) {\r\n            device.produceResource(ResourceBlock.Mineral)\r\n        }\r\n        let { building } = device\r\n        building.populate(device.pos.add(building.pos), true)\r\n\r\n        // building.updateFunction()\r\n    }\r\n}\r\n\r\nexport class MissionLog extends Machine {\r\n    name = 'Mission Log'\r\n    description = 'gather data'\r\n    operation = store(\r\n        [ResourceBlock.Data],\r\n        8\r\n    )\r\n    image = images.consolePurple\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n//export class Energon extends Machine {\r\n//    name = 'Energon'\r\n//    description = 'food paste'\r\n//}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 6, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n    image = images.solar\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 10, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H2O Condenser'\r\n    description = 'have a drink'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 5, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n/// small subsurface\r\n\r\nexport class Statue extends Machine {\r\n    name = 'Statue'\r\n    description = 'for honor'\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Hope: { supply: 0.1, demand: 0 },\r\n        Beauty: { supply: 0.1, demand: 0 },\r\n    }\r\n    image = images.statue\r\n}\r\n\r\nexport class StudyMachine extends Machine {\r\n    operation = recipe(\r\n        [ ResourceBlock.Idea, ResourceBlock.Idea, ResourceBlock.Idea ],\r\n        ResourceBlock.Data\r\n    )\r\n    color = Blue\r\n    concretize(): Machine { return new (sample([Workstation, Desk]))() }\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    description = 'get to work'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Codex extends Machine {\r\n    name = 'Codex'\r\n    description = 'read it closely'\r\n    image = images.codex\r\n    prereqs = [ Bookshelf ]\r\n    operation = store([ResourceBlock.Data], 3)\r\n    color = Blue\r\n    // concretize() { return this }\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    description = 'hackety hack'\r\n    prereqs = [ Bookshelf ]\r\n    image = images.workstation\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Couch extends Machine {\r\n    name = 'Couch'\r\n    description = 'take it easy'\r\n    prereqs = []\r\n    image = images.couch\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Joy: { supply: 0.1, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    operation = generate(ResourceBlock.Idea)\r\n    image = images.bookshelf\r\n    prereqs = [ ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    operation = store([ResourceBlock.Meal], 6)\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    operation = recipe(\r\n        [ResourceBlock.Biomass, ResourceBlock.Biomass],\r\n        ResourceBlock.Meal\r\n    )\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    description = 'sweet dreams'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    description = 'so nice'\r\n    prereqs = [ Bed ]\r\n    // produces = ResourceBlock.Food\r\n    cost = [ ResourceBlock.Biomass ]\r\n    operation = generate(ResourceBlock.Biomass, 1)\r\n    color = Green\r\n    image = images.plant\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Water: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\nexport class PersonnelRegistry extends Machine {\r\n    name = 'Personnel Registry'\r\n    description = 'track everybody'\r\n    prereqs = [ CloningVat ]\r\n    operation = store([ResourceBlock.Data], 4)\r\n    color = Yellow\r\n    image = images.console\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Wisdom: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class OrientationConsole extends Machine {\r\n    name = 'Orientation Console'\r\n    description = 'welcome to the colony'\r\n    prereqs = [CloningVat]\r\n    operation = generate(ResourceBlock.Data, 1)\r\n    image = images.consoleRed\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'we all grow'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = spawn()\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class DissolutionVat extends Machine {\r\n    name = 'Dissolution Vat'\r\n    description = 'back to basics'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = recipe(\r\n        [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n        ResourceBlock.Bioplasma\r\n    )\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [PlasmaBank]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class PlasmaBank extends Machine {\r\n    name = 'Bioplasm Bank'\r\n    description = 'hold on'\r\n    operation = store([ ResourceBlock.Bioplasma ])\r\n    prereqs = [AlgaeVat]\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    description = 'you made that'\r\n    operation = recipe(\r\n        [ResourceBlock.Mineral, ResourceBlock.Mineral],\r\n         ResourceBlock.Alloy\r\n    )\r\n    size = DeviceSize.Small\r\n    color = Red\r\n    prereqs = [Workstation]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n    image = images.fabricator\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    description = 'where there is a will'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class LifeSciencesConsole extends Machine {\r\n    name = 'Life Sciences Console'\r\n    description = 'mind and body together'\r\n    operation = store([ResourceBlock.Biomass, ResourceBlock.Data], 5)\r\n    prereqs = [Houseplant, Botany]\r\n    color = Green\r\n    image = images.consoleGreen\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.2 },\r\n    }\r\n}\r\n\r\n// medium\r\n\r\nexport class MetalStorage extends Machine {\r\n    name = 'Metal Storage'\r\n    description = 'contain minerals and alloys?'\r\n    operation = store([ResourceBlock.Mineral, ResourceBlock.Alloy], 8)\r\n    prereqs = [Bookshelf]\r\n    color = Red\r\n    size = DeviceSize.Medium\r\n}\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    operation = store([ResourceBlock.Data, ResourceBlock.Algorithm], 10)\r\n    image = images.server\r\n    prereqs = [Bookshelf, Workstation]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   operation = generate(ResourceBlock.Biomass)\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Oxygen: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   description = 'home on the plains'\r\n   operation = recipe(\r\n       [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n       ResourceBlock.Meal\r\n   )\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    description = 'arbor around the clock'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    description = 'plant lab'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n\r\nexport class MineralProcessor extends Machine {\r\n    name = 'Mineral Processor'\r\n    description = 'wheat from the chaff'\r\n    operation = recipe(\r\n        [ResourceBlock.Ore, ResourceBlock.Ore, ResourceBlock.Ore],\r\n         ResourceBlock.Mineral\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation, Fabricator]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class ThinkingFountain extends Machine {\r\n    name = 'Thinking Fountain'\r\n    description = 'slowly growing'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Mainframe, Megafabricator, MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = generate(ResourceBlock.Aurum, 8)\r\n    cost = [ResourceBlock.Aurum]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class SilverForest extends Machine {\r\n    name = 'Silver Forest'\r\n    description = 'immense serenity'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Megafabricator, Mainframe ]\r\n    color = Color.fromHex('c0c0c0')\r\n    operation = store([ResourceBlock.Argent], 12)\r\n    cost = [ResourceBlock.Alloy, ResourceBlock.Algorithm]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Beauty: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n    forDome = true\r\n}\r\n\r\nexport class TimeCrystal extends Machine {\r\n    name = 'Time Crystal'\r\n    description = 'xlr8'\r\n    size = DeviceSize.Medium\r\n    color = Color.fromHex('e5e4e2')\r\n    operation = accelerateTime()\r\n    cost = [ResourceBlock.Omnium]\r\n    prereqs = [ Megafabricator, SilverForest ]\r\n}\r\n\r\nexport class HoloProjector extends Machine {\r\n    name = 'Holo Projector'\r\n    description = 'whatever your heart desires'\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    operation = generate(ResourceBlock.Data, 3)\r\n    cost = [ResourceBlock.Algorithm, ResourceBlock.Mineral]\r\n    prereqs = [ Mainframe ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 3, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class SacredGrove extends Machine {\r\n    name = 'Sacred Grove'\r\n    description = 'where the furies play'\r\n    size = DeviceSize.Medium\r\n    forDome = true\r\n    cost = [ ResourceBlock.Omnium ]\r\n    prereqs = [ AtomicCompiler ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 4, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class AtomicCompiler extends Machine {\r\n    name = 'Atomic Compiler'\r\n    description = 'super position'\r\n    operation = recipe(\r\n        [ ResourceBlock.Aurum, ResourceBlock.Argent ],\r\n        ResourceBlock.Omnium\r\n    )\r\n    cost = [ ResourceBlock.Argent, ResourceBlock.Algorithm ]\r\n    prereqs = [ ThinkingFountain, SilverForest ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n}\r\n\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    description = 'ore away'\r\n    operation = generate(ResourceBlock.Ore)\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    image = images.miner\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    operation = recipe(\r\n        [ResourceBlock.Alloy, ResourceBlock.Algorithm],\r\n        ResourceBlock.Argent\r\n    )\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class MolecularEngine extends Machine {\r\n    name = 'Molecular Engine'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Megafabricator ]\r\n    color = Violet\r\n    operation = recipe(\r\n        [ResourceBlock.Bioplasma, ResourceBlock.Algorithm],\r\n        ResourceBlock.Aurum\r\n    )\r\n    image = images.megaconsole\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n        Water: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Mainframe extends Machine {\r\n    name = 'Mainframe'\r\n    size = DeviceSize.Large\r\n    color = Blue\r\n    prereqs = [ResearchServer]\r\n    cost = [ ResourceBlock.Mineral, ResourceBlock.Mineral ]\r\n    operation = recipe(\r\n        [ ResourceBlock.Data, ResourceBlock.Data ],\r\n        ResourceBlock.Algorithm\r\n    )\r\n    image = images.server\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 6 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Nature Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    operation = generate(ResourceBlock.Biomass, 12)\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n        Oxygen: { supply: 12, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicPool extends Machine {\r\n    name = 'Logic Pool'\r\n    size = DeviceSize.Large\r\n    prereqs = [ MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = store([ResourceBlock.Aurum], 12)\r\n    cost = [ResourceBlock.Algorithm, ResourceBlock.Bioplasma]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\nexport class Cathedral extends Machine {\r\n    name = 'Cathedral'\r\n    description = 'first ultrahumanist'\r\n    size = DeviceSize.Large\r\n    prereqs = [ SacredGrove ]\r\n}\r\n\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n\r\n    MineralProcessor,\r\n    PlasmaBank,\r\n    DissolutionVat,\r\n    MetalStorage,\r\n    Mainframe,\r\n\r\n    PersonnelRegistry,\r\n    MolecularEngine,\r\n    ThinkingFountain,\r\n    SilverForest,\r\n\r\n    OrientationConsole,\r\n    LifeSciencesConsole,\r\n\r\n    TimeCrystal,\r\n    LogicPool,\r\n    HoloProjector,\r\n    Cathedral,\r\n    SacredGrove,\r\n    AtomicCompiler,\r\n\r\n    Couch,\r\n    Statue,\r\n    Codex,\r\n]","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { BackgroundPattern, getBackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\ntype PaintingPath = { x: number, y: number }[]\r\n\r\nexport function pathFromRect(rect: Rectangle): PaintingPath {\r\n  let pos = { x: rect.x, y: rect.y }\r\n  let path = [\r\n            // bottom-left\r\n            { x: pos.x, y: pos.y + rect.height }, // this.getHeight() },\r\n\r\n            // upper-left\r\n            { x: pos.x, y: pos.y },\r\n\r\n            // upper-right\r\n            { x: pos.x + rect.width, y: pos.y },\r\n\r\n            // bottom-right\r\n            { x: pos.x + rect.width, y: pos.y + rect.height },\r\n        ];\r\n\r\n  return path\r\n}\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, clr: Color = Color.White, lineWidth: number = 1) {\r\n  let c = clr.clone()\r\n  // c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawPatternedRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  if (gridPattern) {\r\n    drawPatternedPoly(ctx, pathFromRect(rect), pattern)\r\n    // let { x, y, width, height } = rect;\r\n    // ctx.fillStyle = gridPattern\r\n    // ctx.fillRect(x,y,width,height)\r\n\r\n    //ctx.lineWidth = 0\r\n    //ctx.setLineDash([])\r\n    //ctx.strokeStyle = Color.White.toRGBA()\r\n    //ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawPatternedPoly(\r\n  ctx: CanvasRenderingContext2D,\r\n  path: {x:number, y:number}[],\r\n  // rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid,\r\n  edgeColor: Color = Color.Black\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  if (gridPattern) {\r\n    ctx.save()\r\n    ctx.translate(path[0].x, path[0].y)\r\n    // ctx.moveTo(0, 0)\r\n    ctx.beginPath()\r\n    ctx.moveTo(0,0) //path[0].x, path[0].y)\r\n    path.forEach(pt => ctx.lineTo(pt.x - path[0].x, pt.y-path[0].y))\r\n    ctx.lineTo(0,0) // path[0].x, path[0].y)\r\n    ctx.closePath()\r\n    // let { x, y, width, height } = rect;\r\n    ctx.fillStyle = gridPattern\r\n    ctx.fill()\r\n\r\n\r\n    ctx.strokeStyle = edgeColor.fillStyle()\r\n    ctx.stroke()\r\n    ctx.restore()\r\n    // ctx.fillRect(x,y,width,height)\r\n\r\n    // ctx.lineWidth = 2\r\n    // ctx.setLineDash([])\r\n    // ctx.strokeStyle = Color.White.toRGBA()\r\n    // ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true,\r\n  dashed: boolean = false\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  if (filled) {\r\n    let main = color.clone();\r\n    // main.a = 1\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White.clone();\r\n    ctx.strokeStyle = edge.toRGBA();\r\n    ctx.lineWidth=edgeWidth\r\n    if (dashed) { ctx.setLineDash([5, 10]) }\r\n    else { ctx.setLineDash([]) }\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}\r\n\r\nexport function drawPoly(\r\n  ctx: CanvasRenderingContext2D,\r\n  path: {x:number, y:number}[],\r\n  color: Color\r\n  // rect: Rectangle,\r\n  // pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  // const gridPattern = getBackgroundPattern(ctx, pattern)\r\n  // if (gridPattern) {\r\n    ctx.beginPath()\r\n    ctx.moveTo(path[0].x, path[0].y)\r\n    path.forEach(pt => ctx.lineTo(pt.x, pt.y))\r\n    ctx.lineTo(path[0].x, path[0].y)\r\n    ctx.closePath()\r\n    // let { x, y, width, height } = rect;\r\n    ctx.fillStyle = color.fillStyle()\r\n    ctx.fill()\r\n    // ctx.fillRect(x,y,width,height)\r\n\r\n    // ctx.lineWidth = 2\r\n    // ctx.setLineDash([])\r\n    // ctx.strokeStyle = Color.White.toRGBA()\r\n    // ctx.strokeRect(x,y,width,height)\r\n  // }\r\n}\r\n\r\nexport function drawStar(ctx, cx, cy, outerRadius=3.6, innerRadius=1.4, spikes=5, ) {\r\n    var rot = Math.PI / 2 * 3;\r\n    var x = cx;\r\n    var y = cy;\r\n    var step = Math.PI / spikes;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(cx, cy - outerRadius)\r\n    for (let i = 0; i < spikes; i++) {\r\n        x = cx + Math.cos(rot) * outerRadius;\r\n        y = cy + Math.sin(rot) * outerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n\r\n        x = cx + Math.cos(rot) * innerRadius;\r\n        y = cy + Math.sin(rot) * innerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n    }\r\n    ctx.lineTo(cx, cy - outerRadius);\r\n    ctx.closePath();\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = 'yellow';\r\n    ctx.stroke();\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.fill();\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor, emptyMarket } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\nimport { Recipe, ResourceStorage, MechanicalOperation, ResourceGenerator } from \"../models/MechanicalOperation\";\r\nimport { range, deleteByValueOnce } from \"../Util\";\r\nimport { drawRect } from \"../Painting\";\r\nimport { InteractionRequest } from \"../values/InteractionRequest\";\r\n\r\nexport class Device extends Actor {\r\n    // constructionMaterials: ResourceBlock[] = []\r\n\r\n    // could also use for storage?\r\n    product: ResourceBlock[] = []\r\n    nameLabel: Label\r\n    image: HTMLImageElement\r\n    building: Building\r\n    inUse: boolean = false\r\n    hover: boolean = false\r\n\r\n    imageLoaded: boolean = false\r\n\r\n    built: boolean = false\r\n    reserved: boolean = false\r\n\r\n    constructor(\r\n        public machine: Machine,\r\n        initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = () => { this.imageLoaded = true }\r\n        this.image.src = machine.image\r\n\r\n        this.on('pointerenter', () => {\r\n            // console.log(\"HOVER ON\", { device: this })\r\n            this.hover = true\r\n            if (this.building) {\r\n                // setInterval(() => {\r\n                this.building.planet.currentlyViewing = this\r\n                // }, 75)\r\n            }\r\n        })\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED DEVICE\", { device: this })\r\n            // this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n            if (this.building) {\r\n                this.building.planet.currentlyViewing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    get imageX() { return this.pos.x - this.getWidth() / 2 }\r\n    get imageY() { return this.pos.y - this.getHeight() / 2 - 10 }\r\n\r\n    get economy() { return this.built ? this.machine.economy : emptyMarket() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (this.imageLoaded) {\r\n            if (!this.built) { ctx.globalAlpha = 0.5 }\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.imageX,\r\n                this.imageY,\r\n\r\n                this.getWidth(),\r\n                this.getHeight()\r\n            )\r\n            if (!this.built) { ctx.globalAlpha = 1.0 }\r\n\r\n            if (this.hover) {\r\n                let c = Color.White.clone()\r\n                c.a = 0.6\r\n                drawRect(\r\n                    ctx,\r\n                    { x: this.imageX, y: this.imageY, width: this.getWidth(), height: this.getHeight() },\r\n                    0,\r\n                    c\r\n                )\r\n            }\r\n        }\r\n\r\n        let iv = new Vector(this.imageX, this.imageY)\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = iv\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let { x: bx, y: by } = iv\r\n        let blockSize = 5\r\n        let yOff = this.nameLabel.fontSize\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).toRGBA()\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize + yOff, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get name() { return this.machine.name }\r\n    get description() { return this.machine.description }\r\n    get size() { return this.machine.size }\r\n    get operation() { return this.machine.operation }\r\n\r\n    async assemble(citizen: Citizen) {\r\n        if (citizen.isCarryingUnique(this.machine.cost)) {\r\n            for (let res of this.machine.cost) {\r\n                await citizen.progressBar(1000)\r\n                citizen.drop(res)\r\n            }\r\n            this.built = true\r\n            // this.building.updateFunction()\r\n            // this.building.planet.upd\r\n        }\r\n    }\r\n\r\n    async interact(citizen: Citizen, request: InteractionRequest): Promise<boolean> {\r\n        if (this.inUse || !this.built) {\r\n            return false\r\n        }\r\n\r\n        let worked = false\r\n        let op = this.operation\r\n        if (op.type === 'recipe' && request.type === 'work') {\r\n            let recipe: Recipe = op\r\n            // do we have all the things?\r\n            if (citizen.carrying.some(it => recipe.consumes.includes(it))) {\r\n                this.inUse = true\r\n                if (citizen.isCarryingUnique(recipe.consumes)) {\r\n                    recipe.consumes.forEach(consumed => citizen.drop(consumed))\r\n                    let workTime = this.getEffectiveWorkTime(recipe)\r\n                    await citizen.progressBar(workTime) // recipe.workTime)\r\n                    citizen.carry(recipe.produces)\r\n\r\n                    worked = true\r\n                } else {\r\n                    console.warn(\"not carrying all requirements?\", { requires: recipe.consumes, has: citizen.carrying })\r\n                }\r\n                this.inUse = false\r\n            }\r\n        } else if (op.type === 'store') {\r\n            // accept it! (whatever you have that matches...?)\r\n            let store: ResourceStorage = op\r\n            if (request && request.type === 'retrieve') { // assume dispense request for now?\r\n                this.inUse = true\r\n                worked = this.dispense(citizen, request)\r\n                if (worked) {\r\n                    await citizen.progressBar(500)\r\n                }\r\n                this.inUse = false\r\n            } else if (request && request.type === 'store' &&\r\n                citizen.carrying.some(it => store.stores.includes(it))) { // maybe trying to store?\r\n                if (this.product.length < this.getEffectiveOperationalCapacity(store)) { // store.capacity) {\r\n                    let res = null\r\n                    if (store.stores.some(stored => { res = citizen.drop(stored); return res })) {\r\n                        if (res) {\r\n                            this.produceResource(res)\r\n                            // this.product.push(res)\r\n                            // this.building.redeem(res)\r\n                            worked = true\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.warn(\"no capacity in this store!!\")\r\n                    worked = false\r\n                }\r\n            }\r\n        } else if (op.type === 'generator') {\r\n            this.inUse = true\r\n            worked = this.dispense(citizen, request)\r\n            if (worked) {\r\n                await citizen.progressBar(500)\r\n            }\r\n            this.inUse = false\r\n        }\r\n\r\n        return worked\r\n    }\r\n\r\n    getEffectiveOperationalCapacity(op: ResourceGenerator | ResourceStorage) {\r\n        let bonus = this.building.spaceFunction\r\n        ? this.building.spaceFunction.bonuses.capacity \r\n        : 0\r\n        return op.capacity + bonus\r\n    }\r\n\r\n    getEffectiveWorkTime(op: Recipe) {\r\n        let bonus = this.building.spaceFunction \r\n         ? this.building.spaceFunction.bonuses.workSpeed\r\n         : 1\r\n\r\n        return Math.round(op.workTime * (1/bonus))\r\n    } \r\n\r\n\r\n    private dispense(citizen: Citizen, request: InteractionRequest) {\r\n        if (request && request.type === 'retrieve') {\r\n            let canFulfill = this.product.find(p => p === request.resource)\r\n            if (canFulfill) {\r\n                deleteByValueOnce(this.product, request.resource)\r\n                citizen.carry(request.resource)\r\n                this.building.debit(request.resource)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    public tryProduce(step: number) {\r\n        if (this.building.isActive && this.built) {\r\n            if (this.machine.operation.type === 'generator') {\r\n                if (step % this.machine.operation.generationTime === 0) {\r\n                    if (this.product.length < this.machine.operation.capacity) {\r\n                        this.produceResource(this.machine.operation.generates)\r\n                    }\r\n                }\r\n\r\n            } else if (this.machine.operation.type === 'spawn') {\r\n                if (step % 1000 == 0) {\r\n                    // console.log(\"WOULD SPAWN\")\r\n                    setTimeout(() => this.building.populate(this.pos.add(this.building.pos)), 100)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public produceResource(res: ResourceBlock) {\r\n        this.product.push(res)\r\n        this.building.redeem(res)\r\n    }\r\n\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            allStructures,\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        let snapped = false\r\n        if (bldg) {\r\n            let spot = bldg.nextDevicePlace().position\r\n            let d = spot.distance(pos)\r\n            snapped = d < 150\r\n        }\r\n\r\n        if (snapped) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n        } else {\r\n            this.pos = pos\r\n        }\r\n\r\n        return snapped\r\n    }\r\n}","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    color: Color = Color.Gray\r\n    infra: boolean = false\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n\r\n    hide: boolean = false\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.fifth\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MediumSurfaceRoom ],\r\n        [Orientation.Right]: [  Dome, MediumSurfaceRoom ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.seventh\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea,\r\n            Ladder,\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea,\r\n            Ladder,\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n    infra = true\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.sixth\r\n    height = 20 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n    infra = true\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    description: string = 'Biome sweet biome';\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.sixth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n\r\n    prereqs = [\r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    height = major.fifth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    height = major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 2 * major.eighth\r\n    machines = midBelow\r\n}\r\n\r\nexport class MediumRoomThree extends CommonArea {\r\n    name = 'Mid Room (3)'\r\n    prereqs = [ MediumRoom ]\r\n    view = 'MediumRoomThreeView'\r\n    width = 3 * major.eighth\r\n    height = major.eighth\r\n\r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 4 * major.eighth\r\n    height = 2*major.eighth\r\n    machines = largeBelow\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class MediumSurfaceRoom extends Dome {\r\n    name = 'Mid Surf Bldg'\r\n    description = 'home away from home';\r\n\r\n    view: string = 'MediumSurfaceRoomView';\r\n\r\n    width: number = 4 * major.eighth\r\n    height: number = major.seventh\r\n\r\n    zoom = 0.1\r\n\r\n    prereqs = [ SmallDome ]\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel, MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ MainTunnel, MediumSurfaceRoom ],\r\n    }\r\n\r\n    machines = midBelow\r\n\r\n    // hide = false // need another one which cares about connecting to roads...\r\n}\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = major.eighth\r\n    height = major.fifth\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 3 * major.fifth\r\n    height = 2*major.fifth\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 3 * major.seventh\r\n    height = 2 * major.seventh\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n\r\n}\r\n\r\n//////\r\n\r\n// export class MissionControl extends Structure {\r\n//     name: string = 'Mission Control';\r\n//     description: string = 'Keeping everything on track';\r\n//     view: string = 'MissionControlView';\r\n//     width: number = 6 * major.eighth\r\n//     height: number = 1 * major.sixth\r\n//     zoom = 0.1\r\n//     connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n//         [Orientation.Left]: [ SurfaceRoad ],\r\n//         [Orientation.Right]: [ SurfaceRoad ],\r\n//         [Orientation.Up]: [ MainTunnel ],\r\n//         [Orientation.Down]: [ MainTunnel ],\r\n//     }\r\n\r\n//     machines = [ CommandCenter ]\r\n// }\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n        MediumSurfaceRoom,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        MediumRoomThree,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine, Mainframe, CommandCenter, MissionLog, Botany, OrientationConsole, PersonnelRegistry, MineralProcessor, MiningDrill, HoloProjector, TimeCrystal, Couch, Statue } from './Machine';\r\nimport { Color } from 'excalibur';\r\nimport { Structure, MediumSurfaceRoom } from './Structure';\r\nimport { BackgroundPattern } from '../actors/Building/BackgroundPatterns';\r\n\r\nexport class SpaceFunction {\r\n     name: string = '(generic)'\r\n     description: string = '(generic description)'\r\n     machines: (typeof Machine)[] = []\r\n     color: Color = Color.Gray\r\n\r\n     prereqs: (typeof SpaceFunction)[] =  [] \r\n\r\n     structure: typeof Structure = null\r\n     hide: boolean = false\r\n     background: BackgroundPattern = BackgroundPattern.Beige\r\n\r\n     bonuses: {\r\n          capacity: number, // every store/generator gets this??\r\n          workSpeed: number, // 2 should double work speed (dur *= 1/multiplier)\r\n     } = {\r\n          capacity: 0, // boost cap by one\r\n          workSpeed: 1.00 // 20% bonus to work speed\r\n     }\r\n}\r\n\r\nexport class MissionControl extends SpaceFunction {\r\n     hide = true\r\n     name = 'Mission Control'\r\n     description = 'keeping everything on track'\r\n     structure = MediumSurfaceRoom\r\n     prereqs = [] //ComputerCore, Factory, Farm ]\r\n     machines = [ CommandCenter, MissionLog ]\r\n     background = BackgroundPattern.Window\r\n}\r\n\r\nexport class LivingQuarters extends SpaceFunction {\r\n     name = 'Living Quarters'\r\n     description = 'good night'\r\n     machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n     name = 'Barracks'\r\n     description = 'sleep tight'\r\n     machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nexport class Kitchen extends SpaceFunction {\r\n     name = 'Kitchen'\r\n     description = 'stay together'\r\n     machines = [ Stove, Fridge ]\r\n     bonuses = {\r\n          capacity: 2,\r\n          workSpeed: 1.1\r\n     }\r\n     background = BackgroundPattern.Checker\r\n}\r\n\r\nexport class LifeSupportPod extends SpaceFunction {\r\n     name = 'Life Support'\r\n     description = 'keep it going'\r\n     machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n     name = 'Retreat'\r\n     description = 'take it easy'\r\n     machines = [ Cabin, Cabin ]\r\n}\r\n\r\nexport class CloneMatrix extends SpaceFunction {\r\n     name = 'Clone Matrix'\r\n     description = 'clone home'\r\n     machines = [ CloningVat, CloningVat ]\r\n}\r\n\r\nexport class CloneReception extends SpaceFunction {\r\n     name = 'Clone Reception'\r\n     description = 'welcome clone'\r\n     machines = [ CloningVat, OrientationConsole, PersonnelRegistry ]\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n     name = 'Reading Room'\r\n     description = 'butterflies in the sky'\r\n     machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nexport class Library extends SpaceFunction {\r\n     name = 'Library'\r\n     description = 'take a look'\r\n     machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n     background = BackgroundPattern.Books\r\n}\r\n\r\nexport class Study extends SpaceFunction {\r\n     name = 'Study'\r\n     description = 'plan it out'\r\n     machines = [ StudyMachine, Bookshelf ]\r\n     background = BackgroundPattern.Wood\r\n}\r\n\r\nclass ComputerLab extends SpaceFunction {\r\n     name = 'Computer Lab'\r\n     description = 'make it happen'\r\n     machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nexport class Archive extends SpaceFunction {\r\n     name = 'Archive'\r\n     description = 'write it down'\r\n     machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n     name = 'Arboretum'\r\n     description = 'walk it out'\r\n     machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n     name = 'Algae Farm'\r\n     description = 'make do'\r\n     machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nexport class SolarArray extends SpaceFunction {\r\n     name = 'Solar Array'\r\n     description = 'warm up'\r\n     machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nexport class Workshop extends SpaceFunction {\r\n     name = 'Workshop'\r\n     description = 'take form'\r\n     machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\nclass Nursery extends SpaceFunction {\r\n     name = 'Nursery'\r\n     description = 'quiet please'\r\n     machines = [ Houseplant, Houseplant, Houseplant ]\r\n     background = BackgroundPattern.Leafy\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n     name = 'Farm'\r\n     description = 'food for the masses'\r\n     machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n     name = 'Factory'\r\n     description = 'production lines'\r\n     machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\n\r\nexport class ComputerCore extends SpaceFunction {\r\n     name = 'Computer Core'\r\n     description = 'let us calculate'\r\n     machines = [ Mainframe, Mainframe ]\r\n     background = BackgroundPattern.Tech\r\n}\r\n\r\nexport class LifeSciencesLab extends SpaceFunction {\r\n     name = 'Life Sciences Lab'\r\n     description = 'where do i come from'\r\n     machines = [ Botany, Botany ]\r\n}\r\n\r\nexport class Refinery extends SpaceFunction {\r\n     name = 'Refinery'\r\n     description = 'separation'\r\n     machines = [ MineralProcessor ]\r\n}\r\n\r\nexport class Mine extends SpaceFunction {\r\n     name = 'Mine'\r\n     description = 'ore from the stone'\r\n     machines = [ MiningDrill ]\r\n}\r\n\r\nexport class HoloMatrix extends SpaceFunction {\r\n     name = 'Hologram Matrix'\r\n     description = 'dream it'\r\n     machines = [ HoloProjector, HoloProjector ]\r\n}\r\n\r\nexport class TimeChamber extends SpaceFunction {\r\n     name = 'Time Chamber'\r\n     description = 'believe it'\r\n     machines = [ TimeCrystal, TimeCrystal ]\r\n}\r\n\r\n// export class DreamMatrix extends \r\n\r\nexport class LivingRoom extends SpaceFunction {\r\n     name = 'Living Room'\r\n     description = 'just relax'\r\n     machines = [ Couch, Couch ]\r\n}\r\n\r\nexport class Statuary extends SpaceFunction {\r\n     name = 'Statuary'\r\n     description = 'to remember'\r\n     machines = [ Statue, Statue, Statue ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    ComputerLab,\r\n\r\n    ComputerCore,\r\n\r\n    MissionControl,\r\n    LifeSciencesLab,\r\n\r\n    CloneReception,\r\n    \r\n    Refinery,\r\n    Mine,\r\n    HoloMatrix,\r\n    TimeChamber,\r\n\r\n    LivingRoom,\r\n    Statuary,\r\n]","import { Engine, DisplayMode, Loader, Timer, Color } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n  static citizenSpeed: number = 70\r\n  static debugPath: boolean = false\r\n  static startHour: number = 8\r\n\r\n  static minuteTickMillis: number = 800\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: Color.Black //world.skyColor\r\n    });\r\n  }\r\n\r\n  public start() {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n\r\n    return super.start(loader).then(() => {\r\n      console.log(\"Osiris running.\")\r\n    });\r\n  }\r\n}","import { Citizen } from \"../actors/Citizen\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { sleep } from \"../Util\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Recipe, MechanicalOperation } from \"../models/MechanicalOperation\";\r\n\r\nexport abstract class Strategy {\r\n    private sleepInterval: number = 250\r\n    protected isActive: boolean = false;\r\n    constructor(protected pawn: Citizen) { }\r\n\r\n    protected abstract async apply();\r\n    abstract canApply(): boolean;\r\n\r\n    protected get planet(): Planet { return this.pawn.currentPlanet; }\r\n    protected get devices(): Device[] { return this.planet.colony.findPoweredDevices(); }\r\n    protected get operations(): MechanicalOperation[] { return this.devices.map(d => d.operation); }\r\n    protected get recipes(): Recipe[] {\r\n        let recipes: Recipe[] = [];\r\n        this.operations.forEach(op => {\r\n            if (op.type === 'recipe') {\r\n                recipes.push(op);\r\n            }\r\n        });\r\n        return recipes;\r\n    }\r\n\r\n\r\n    async attempt(): Promise<void> {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n        if (!this.isActive) {\r\n            this.isActive = true\r\n            // note apply will need to set this.isActive around its critical section\r\n            await this.apply();\r\n            this.isActive = false\r\n        }\r\n\r\n        await this.pause()\r\n        // setInterval(() => { this.attempt() }, this.sleepInterval)\r\n    }\r\n\r\n    protected async pause() {\r\n        await sleep(this.sleepInterval)\r\n    }\r\n\r\n    protected async gatherBlock(res: ResourceBlock): Promise<boolean> {\r\n        console.debug(\"GATHER BLOCK\", { res })\r\n        let gathered = false\r\n        let generatesDesiredBlock = (d: Device) => (d.operation.type === 'generator') &&\r\n            d.product.some(stored => res === stored) //&& !d.inUse\r\n        let gen: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], generatesDesiredBlock)\r\n\r\n        let storesDesiredBlock = (d: Device) => (d.operation.type === 'store') &&\r\n              d.product.some(stored => res === stored) //&& !d.inUse\r\n        let store: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n\r\n        let device: Device = gen || store\r\n\r\n        if (device) {\r\n            // device.inUse = true\r\n            console.debug(\"Found device to gather, visting...\")\r\n            await this.visitDevice(device)\r\n\r\n            if (device.inUse) {\r\n                // at least wait a bit and try again?\r\n                let waitTimes = 0\r\n                while (device.inUse) {\r\n                    console.warn(\"waiting for device to be ready!\")\r\n                    await sleep(5000) //this.pause()\r\n                    if (waitTimes++ > 10) {\r\n                        return false \r\n                    }\r\n                }\r\n            }\r\n\r\n            console.debug(\"Attempt to interact with device...\")\r\n            if (await device.interact(this.pawn, retrieveResource(res))) {\r\n                console.debug(\"Interacted successfully!\")\r\n                gathered = true\r\n            }\r\n        } else {\r\n            console.warn(\"Didn't gather...\")\r\n            // don't work sub-recipes??\r\n            // let recipe = this.recipes.find(recipe => recipe.produces === res);\r\n            // if (recipe) {\r\n                // gathered = await this.workRecipe(recipe);\r\n                // gathered = true\r\n            // }\r\n        }\r\n\r\n        return gathered\r\n    }\r\n\r\n    protected async visitDevice(device: Device) {\r\n        await this.pawn.visit(device)\r\n    }\r\n\r\n\r\n    protected async workRecipe(recipe: Recipe): Promise<boolean> {\r\n        console.debug(\"Working recipe\", { product: recipe.produces })\r\n        let knowsRecipe = (d: Device) => d.operation === recipe && !d.reserved\r\n        let maker = this.planet.colony.closestDeviceByType(this.pawn.pos, [], knowsRecipe)\r\n        let made = false\r\n        if (maker) {\r\n            maker.reserved = true\r\n            // maker.inUse = true\r\n            if (await this.gatherIngredients(recipe.consumes)) {\r\n                await this.visitDevice(maker)\r\n                if (await this.performRecipeTask(maker, recipe)) {\r\n                    made = true\r\n                }\r\n            }\r\n            maker.reserved = false\r\n            // maker.inUse = false\r\n        }\r\n        // await this.pause()\r\n        // await this.workRecipe(recipe);\r\n        return made\r\n    }\r\n\r\n    protected async gatherIngredients(blocks: ResourceBlock[]): Promise<boolean> {\r\n        if (!this.pawn.isCarryingUnique(blocks)) {\r\n            console.debug(\"Gathering blocks...\")\r\n            for (let ingredient of blocks) {\r\n                console.debug(\"attempting to gather\", { ingredient })\r\n                let tries = 0\r\n                let gathered = false\r\n                while (!gathered && tries < 20) {\r\n                    tries += 1\r\n                    if (await this.gatherBlock(ingredient)) {\r\n                        gathered = true\r\n                    } else {\r\n                        await this.pause()\r\n                    }\r\n                }\r\n\r\n                if (!gathered) {\r\n                    console.warn(\"couldn't gather one of the ingredients!!\")\r\n                    return false\r\n                }\r\n                //else {\r\n                //    console.warn(\"didn't gather it!\")\r\n                //    return false\r\n                //}\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    protected async performRecipeTask(maker: Device, recipe: Recipe, timesToAttempt: number = 5) {\r\n        console.debug(\"Try to perform recipe task...\", { produces: recipe.produces })\r\n        let worked = await maker.interact(this.pawn, { type: 'work', recipe })\r\n        if (!worked) {\r\n            // await this.pause()\r\n            console.warn(\"waiting for machine to become available...\")\r\n            for (let i = 0; i < timesToAttempt; i ++) {\r\n                await this.pause()\r\n                if (await this.performRecipeTask(maker, recipe)) {\r\n                    worked = true\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return worked\r\n    }\r\n}","const raisedSquare = require('../../images/raised-square-bg.png')\r\nconst leafy = require('../../images/leafy-bg.png')\r\nconst bookish = require('../../images/books-bg.png')\r\nconst posters = require('../../images/poster-wall-bg.png')\r\nconst tech = require('../../images/tech-bg.png')\r\nconst checker = require('../../images/checker-bg.png')\r\nconst beige = require('../../images/beige-bg.png')\r\nconst window = require('../../images/window-bg.png')\r\nconst ussf = require('../../images/ussf.png')\r\nconst wood = require('../../images/wood-panel-bg.png')\r\n\r\ninterface Background {\r\n    image: HTMLImageElement\r\n    pattern: CanvasPattern\r\n    loading: boolean\r\n}\r\n\r\nconst loadBg = (path, scale = 1) => {\r\n    let background: Background = { image: null, pattern: null, loading: true }\r\n    background.image = new Image();\r\n    background.image.src = path\r\n    background.image.onload = function () {\r\n      background.loading = false\r\n    }\r\n    return { background, scale }\r\n}\r\n\r\nexport enum BackgroundPattern {\r\n    Leafy = 'Leafy',\r\n    Grid = 'Grid',\r\n    Books = 'Books',\r\n    Poster = 'Poster',\r\n    Tech = 'Tech',\r\n    Checker = 'Checker',\r\n    Beige = 'Beige',\r\n    Window = 'Window',\r\n    USSF = 'USSF',\r\n    Wood = 'Wood',\r\n}\r\n\r\nconst backgroundPatterns: { [ key in BackgroundPattern ]: { background: Background, scale: number } } = {\r\n    Leafy: loadBg(leafy),\r\n    Grid: loadBg(raisedSquare),\r\n    Books: loadBg(bookish),\r\n    Poster: loadBg(posters),\r\n    Tech: loadBg(tech),\r\n    Checker: loadBg(checker),\r\n    Beige: loadBg(beige),\r\n    Window: loadBg(window),\r\n    USSF: loadBg(ussf, 0.5),\r\n    Wood: loadBg(wood),\r\n}\r\n\r\nexport const getBackgroundPattern = (ctx: CanvasRenderingContext2D, p: BackgroundPattern) => {\r\n    let pattern = backgroundPatterns[p]\r\n    let bg = pattern.background\r\n    if (!bg.loading) {\r\n        if (!bg.pattern) {\r\n            let matrix = new DOMMatrix() //bg.pattern.cre //ctx. // new SVGMatrix()\r\n\r\n            // bg.image.scal\r\n            // bg.image.scale\r\n            bg.pattern = ctx.createPattern(bg.image, 'repeat');\r\n            bg.pattern.setTransform(matrix.scale(pattern.scale)) //0.5))\r\n\r\n        }\r\n        return bg.pattern\r\n    }\r\n}","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        let tries = 0\r\n        while (visited.length < this.nodes.length && tries++ < this.nodes.length * 20) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Texture, Sound } from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\nconst craterRock = require('./sounds/crater-rock.mp3')\r\nconst assembler = require('./sounds/assembler.mp3')\r\nconst indivision = require('./sounds/indivision.mp3')\r\nconst understanding = require('./sounds/understanding.mp3')\r\nconst futureTense = require('./sounds/future tense.mp3')\r\n// const isomer = require('./sounds/isomer.mp3')\r\n// const outbound = require('./sounds/outbound.mp3')\r\n\r\nlet Resources = {\r\n    Sword: new Texture(sword),\r\n\r\n    CraterRock: new Sound(craterRock),\r\n    Assembler: new Sound(assembler),\r\n    Indivision: new Sound(indivision),\r\n    Understanding: new Sound(understanding),\r\n    FutureTense: new Sound(futureTense),\r\n    // Isomer: new Sound(isomer),\r\n    // Outbound: new Sound(outbound),\r\n\r\n\r\n}\r\n\r\nexport { Resources }\r\n","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range, mixColors } from '../../Util';\r\nimport { drawRect } from '../../Painting';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 1500, color)\r\n    }\r\n}\r\n\r\nexport class MountainLayers extends PlanetBackground {\r\n    layers: {\r\n        baseY: number,\r\n        // color: Color,\r\n        deltas: number[]\r\n    }[] = []\r\n\r\n    skyColor: Color = Color.Blue.clone()\r\n    layerHeight: number = 200\r\n    layerCount = 1\r\n    peakCount = 400\r\n\r\n    get peakWidth() {\r\n        return Math.floor(this.getWidth() / this.peakCount)\r\n    }\r\n\r\n    onInitialize() {\r\n        let min = -this.layerHeight\r\n        for (let layerIndex of range(this.layerCount)) {\r\n            this.layers.unshift({\r\n                baseY: -this.layerHeight - (10 * layerIndex),\r\n                deltas: this.genPeaks(layerIndex)\r\n            })\r\n        }\r\n    }\r\n\r\n    draw(ctx, delta) {\r\n        let wc = this.color.clone() //.lighten(0.1)\r\n        let sc = this.skyColor.clone() //.lighten(0.1)\r\n\r\n        let ndx = 1\r\n        let ls = this.layers.slice()\r\n        for (let layer of ls) {\r\n            let c = mixColors(wc, sc, (ndx / (this.layers.length)))\r\n            this.drawLayer(ctx, layer, c) //.lighten(0.1))\r\n            ndx += 1\r\n        }\r\n    }\r\n\r\n    private drawLayer(ctx, layer, color) {\r\n        let ox = -this.getWidth()/2, oy = this.pos.y + layer.baseY \r\n        let c = color.clone()\r\n\r\n        ctx.beginPath()\r\n        ctx.moveTo(ox, oy)\r\n        let ndx = 0\r\n        for (let delta of layer.deltas) {\r\n            ctx.lineTo(ox + (ndx * this.peakWidth), oy + delta)\r\n            ndx += 1\r\n        }\r\n        ctx.lineTo(ox + (this.peakCount * this.peakWidth), oy)\r\n        ctx.lineTo(ox + (this.peakCount * this.peakWidth), oy + this.layerHeight)\r\n        ctx.lineTo(ox, oy+this.layerHeight)\r\n        ctx.closePath()\r\n        c.a = 1\r\n        ctx.fillStyle = c.toRGBA()\r\n        ctx.fill()\r\n    }\r\n\r\n    private genPeaks(n) {\r\n        let dMax = 2*(this.layerHeight/3)\r\n        let deltas = []\r\n        let randomDelta = () => (Math.random() * (dMax)) - (dMax/2)\r\n        let last = 0\r\n        let maxDiff = 5 + (n*2)\r\n        for (let times in range(this.peakCount)) {\r\n            let curr = randomDelta()\r\n            let pick = Math.max(\r\n                   last - maxDiff,\r\n                   Math.min(curr, last + maxDiff),\r\n               )\r\n            deltas.push(\r\n               pick\r\n            )\r\n            last = pick\r\n        }\r\n        return deltas\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 3\r\n        let peakHeight = 4800\r\n        let xOff = this.getWidth() / 2\r\n        let peakDistance = this.getWidth() / peakCount\r\n        for (let times of range(2)) {\r\n            let heightRange = 100\r\n            let drift = 3 * (peakDistance / 2)\r\n            for (let i of range(peakCount)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 200 + (Math.random() * peakHeight) + ((Math.random() * heightRange) - (heightRange / 2))) //(Util.randomIntInRange(-160,160))\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.35)\r\n        let brightColor = baseColor.lighten(0.1)\r\n        ctx.fillStyle = baseColor.toRGBA()\r\n        let yBase = this.pos.y-3\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA()\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA()\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import { Actor, Color } from 'excalibur';\r\nimport { mixColors } from '../../Util';\r\nimport { Mountains, MountainLayers } from './PlanetBackground';\r\nexport class SkyLayer extends Actor {\r\n    mountains: Mountains;\r\n    mountainLayers: MountainLayers;\r\n    backMountainLayers: MountainLayers;\r\n    constructor(y: number, width: number, lo: Color, hi: Color) {\r\n        super(0, y, width, 1500); //width,1500) //height)\r\n        let mid = mixColors(lo, hi);\r\n        this.backMountainLayers = new MountainLayers(-50, width, mid);\r\n        this.backMountainLayers.skyColor = hi;\r\n        this.add(this.backMountainLayers);\r\n        this.mountains = new Mountains(0, width, mid);\r\n        this.add(this.mountains);\r\n        this.mountainLayers = new MountainLayers(0, this.getWidth(), lo);\r\n        this.mountainLayers.skyColor = mid;\r\n        this.add(this.mountainLayers);\r\n    }\r\n    setLoHi(lo: Color, hi: Color) {\r\n        let mid = mixColors(lo, hi);\r\n        this.backMountainLayers.color = mid;\r\n        this.backMountainLayers.skyColor = hi;\r\n        this.mountains.color = mid;\r\n        this.mountainLayers.color = lo;\r\n        this.mountainLayers.skyColor = mid;\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range, mixColors } from '../../Util';\r\nimport { SkyLayer } from \"./SkyLayer\";\r\nexport class SkyLayers extends Actor {\r\n    layers: SkyLayer[] = [];\r\n    constructor(y: number, width: number, private lo: Color, hi: Color, private layerCount: number = 5) {\r\n        super(0, y, width, 1500);\r\n        for (let i of range(layerCount)) {\r\n            let c0 = mixColors(lo, hi, (i / (layerCount + 1)));\r\n            let c1 = mixColors(lo, hi, ((i + 1) / (layerCount + 1)));\r\n            let layer = new SkyLayer(-100 * (layerCount - i - 1), this.getWidth(), c1, c0);\r\n            this.layers.push(layer);\r\n            this.add(layer);\r\n        }\r\n    }\r\n    setHi(hi: Color) {\r\n        let lo = this.lo;\r\n        for (let i of range(this.layerCount)) {\r\n            let c0 = mixColors(lo, hi, (i / (this.layerCount + 1)));\r\n            let c1 = mixColors(lo, hi, ((i + 1) / (this.layerCount + 1)));\r\n            this.layers[i].setLoHi(c1, c0);\r\n            // let layer = new SkyLayer(-100 * (layerCount-i-1), this.getWidth(), c1, c0)\r\n        }\r\n    }\r\n}\r\n","import { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class EatingStrategy extends Strategy {}","import { EatingStrategy } from \"./EatingStrategy\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { Fridge, Desk } from \"../models/Machine\";\r\n\r\nexport class WhenHungryEatingStrategy extends EatingStrategy {\r\n    canApply(): boolean {\r\n        return this.pawn.isHungry &&\r\n            this.planet.storedResources.includes(ResourceBlock.Meal)\r\n        // hunger > 0.6\r\n        // throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    protected async apply() {\r\n        // find the store with the food! reserve it maybe?\r\n        let fridge = this.devices.find(d => d.machine.operation.type === 'store' &&\r\n          d.machine.operation.stores.includes(ResourceBlock.Meal) &&\r\n          d.product.includes(ResourceBlock.Meal) &&\r\n          !d.reserved\r\n        )\r\n\r\n        if (fridge) {\r\n            fridge.reserved = true\r\n            // take the meal to a desk? (maybe need table here... or eatingSurface aspect?)\r\n            await this.visitDevice(fridge)\r\n            await fridge.interact(this.pawn, { type: 'retrieve', resource: ResourceBlock.Meal })\r\n            fridge.reserved = false\r\n\r\n            let desk = this.devices.find(d => d.machine instanceof Desk)\r\n            if (desk) {\r\n                await this.visitDevice(desk)\r\n            }\r\n            await this.pawn.eat()\r\n            // fridge.interac\r\n            // this.pawn.interact()\r\n        }\r\n    }\r\n    \r\n    \r\n}","import { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class SleepingStrategy extends Strategy {\r\n\r\n}","import { SleepingStrategy } from \"./SleepingStrategy\";\r\nimport { Bed } from \"../models/Machine\";\r\nimport { shuffle } from \"../Util\";\r\n\r\nexport class AnyBedSleepingStrategy extends SleepingStrategy {\r\n    canApply(): boolean {\r\n        if (!this.pawn.isTired) {\r\n            return false\r\n        }\r\n\r\n        let bedtime = this.planet.hour > 21 || this.planet.hour < 4\r\n        return bedtime\r\n    }\r\n\r\n    protected async apply() {\r\n        // find a bed\r\n        let bed = shuffle(this.devices).find(d => d.machine instanceof Bed && !d.inUse)\r\n        if (bed) {\r\n            bed.inUse = true\r\n            await this.visitDevice(bed)\r\n        }\r\n        await this.pawn.takeRest() //1000 * 24)\r\n        if (bed) { \r\n            bed.inUse = false\r\n        }\r\n        return true\r\n    }\r\n\r\n}","import { Strategy } from \"./Strategy\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { containsUniq } from \"../Util\";\r\n\r\nexport abstract class ConstructionStrategy extends Strategy {\r\n    canApply(): boolean {\r\n        return !!this.unbuiltDevice\r\n    }\r\n\r\n    get unbuiltDevice() {\r\n        const isUnbuilt = (d: Device) => !d.built && !d.inUse && d.building.isActive &&\r\n          // the player can TRY to build it, we don't have to hang forever on it though\r\n          containsUniq(this.planet.storedResources, d.machine.cost)\r\n        return this.planet.colony.findAllDevices().find(isUnbuilt)\r\n    }\r\n}","import { ConstructionStrategy } from \"./ConstructionStrategy\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nexport class ProxmityBasedConstruction extends ConstructionStrategy {\r\n    async apply() {\r\n        if (this.unbuiltDevice && this.unbuiltDevice.building) {\r\n            await this.constructDevice(this.unbuiltDevice)\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n    private async constructDevice(device: Device) {\r\n        device.inUse = true\r\n        let resources = device.machine.cost\r\n        if (await this.gatherIngredients(resources)) {\r\n            await this.visitDevice(device)\r\n            await device.assemble(this.pawn)\r\n        } \r\n\r\n        device.inUse = false\r\n    }\r\n}","import { ResourceBlock } from \"../models/Economy\";\r\n\r\nimport { Recipe } from \"../models/MechanicalOperation\";\r\n\r\nexport interface RetrieveResource {\r\n    type: 'retrieve'\r\n    resource: ResourceBlock\r\n    // count: number\r\n}\r\n\r\nexport interface WorkRecipe {\r\n    type: 'work'\r\n    recipe: Recipe\r\n}\r\n\r\nexport interface StoreResource {\r\n    type: 'store'\r\n    resource: ResourceBlock\r\n}\r\n\r\nexport function retrieveResource(res: ResourceBlock): RetrieveResource {\r\n    return {\r\n        type: 'retrieve',\r\n        resource: res,\r\n        // count: 1\r\n    }\r\n}\r\n\r\n\r\nexport type InteractionRequest = StoreResource | RetrieveResource | WorkRecipe; // | ...\r\n\r\n","import { Device } from \"../actors/Device\";\r\nimport { MechanicalOperation, Recipe } from \"../models/MechanicalOperation\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class ProductionStrategy extends Strategy {\r\n\r\n\r\n    protected async storeBlock(res: ResourceBlock) {\r\n        let storesDesiredBlock = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) && //operation.capacity &&\r\n            d.operation.stores.includes(res)\r\n        let openStore = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n        let stored = false\r\n        if (openStore) {\r\n            await this.visitDevice(openStore)\r\n            if (await openStore.interact(this.pawn, { type: 'store', resource: res })) {\r\n                stored = true\r\n            }\r\n        }\r\n\r\n        if (!stored) {\r\n            await this.pause()\r\n            await this.storeBlock(res)\r\n        }\r\n    }\r\n\r\n}\r\n","import { shuffle, containsUniq } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Recipe, ResourceStorage } from \"../models/MechanicalOperation\";\r\nimport { ProductionStrategy } from \"./ProductionStrategy\";\r\n\r\nexport class CapacityBasedProduction extends ProductionStrategy {\r\n    private findStore() {\r\n        const storeWithCapacity = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) //&&\r\n            // !d.inUse\r\n            // containsUniq(this.planet.storedResources, d.operation)\r\n        let store: Device = shuffle(this.devices).find(storeWithCapacity)\r\n        return store\r\n    }\r\n\r\n    canApply(): boolean {\r\n        // throw new Error(\"Method not implemented.\");\r\n        return !!this.findStore()\r\n    }\r\n\r\n    async apply() {\r\n        let store = this.findStore()\r\n\r\n        if (store && store.operation.type === 'store') {\r\n            // store.inUse = true\r\n            const storage: ResourceStorage = store.operation\r\n            const recipeForStoredResource = (r: Recipe) => storage.stores.some(stored => r.produces === stored)\r\n            let recipe: Recipe = shuffle(this.recipes).find(recipeForStoredResource)\r\n            if (recipe && containsUniq(this.planet.storedResources, recipe.consumes)) {\r\n                if (await this.workRecipe(recipe)) {\r\n                    await this.storeBlock(recipe.produces)\r\n                }\r\n            }\r\n            // store.inUse = false\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons, deleteByValueOnce, sleep, containsUniq, deleteByValue } from \"../Util\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { ProductionStrategy } from \"../strategies/ProductionStrategy\";\r\nimport { CapacityBasedProduction } from \"../strategies/CapacityBasedProduction\";\r\nimport { drawStar, drawRect } from \"../Painting\";\r\nimport { ConstructionStrategy } from \"../strategies/ConstructionStrategy\";\r\nimport { ProxmityBasedConstruction } from \"../strategies/ProximityBasedConstruction\";\r\nimport { SleepingStrategy } from \"../strategies/SleepingStrategy\";\r\nimport { AnyBedSleepingStrategy } from \"../strategies/AnyBedSleepingStrategy\";\r\nimport { EatingStrategy } from \"../strategies/EatingStrategy\";\r\nimport { WhenHungryEatingStrategy } from \"../strategies/WhenHungryEatingStrategy\";\r\n\r\nexport class Citizen extends Actor {\r\n    isPlanning: boolean = false // \r\n\r\n    // walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock[] = [] // null\r\n    path: Vector[] = []\r\n\r\n    private workInProgress: boolean = false\r\n    private workStarted: number\r\n    private workDuration: number\r\n    private progress: number\r\n\r\n    private sleeping: boolean = false\r\n\r\n\r\n    private productionStrategy: ProductionStrategy\r\n    private constructionStrategy: ConstructionStrategy\r\n    private sleepingStrategy: SleepingStrategy\r\n    private eatingStrategy: EatingStrategy\r\n\r\n    private hunger: number = 0.0;\r\n    private energy: number = 100\r\n\r\n    constructor(private home: Vector, protected planet: Planet, private elite: boolean = false) {\r\n        super(home.x, home.y, Scale.minor.first, Scale.minor.fourth, Color.White.clone())\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.productionStrategy = new CapacityBasedProduction(this)\r\n        this.constructionStrategy = new ProxmityBasedConstruction(this)\r\n        this.sleepingStrategy = new AnyBedSleepingStrategy(this)\r\n        this.eatingStrategy = new WhenHungryEatingStrategy(this)\r\n    }\r\n\r\n    get isHungry() { return this.hunger > 0.6 }\r\n    get isTired()  { return this.energy < 85 }\r\n\r\n    // get isWorking() { return this.isWorking }\r\n    get currentPlanet() { return this.planet }\r\n\r\n    get walkSpeed() {\r\n        let speedMultiplier = this.planet.timeFactor * (this.elite ? 1.6 : 1)\r\n        return Game.citizenSpeed * speedMultiplier\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // make sure we are busy!\r\n        this.work()\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = \r\n              Math.min(\r\n                  (now - this.workStarted) / this.workDuration,\r\n                  1\r\n              )\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        ctx.save()\r\n        // ctx.globalAlpha = 1.0\r\n        ctx.translate(this.x, this.y - this.getHeight()/2 - 5)\r\n        if (this.sleeping) {\r\n            ctx.rotate(-Math.PI / 2);\r\n            ctx.translate(-10, -10)\r\n        }\r\n        // ctx.globalAlpha = 1.0 //?\r\n        drawRect(\r\n            ctx,\r\n            { x: 0, y: 0, width: this.getWidth(), height: this.getHeight() },\r\n            0,\r\n            Color.White\r\n        )\r\n\r\n        if (this.elite) {\r\n            // draw a little star?\r\n            drawStar(ctx, 8, -5)\r\n        }\r\n\r\n        // super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            let dx = 5\r\n            // if (this.vel.x < 0) { dx = -5 }\r\n            this.carrying.forEach((carried, idx) => {\r\n                ctx.fillStyle = blockColor(carried).clone().saturate(0.2).toRGBA()\r\n                ctx.fillRect(dx, 2 - 4 * idx, 5, 5)\r\n            })\r\n        }\r\n        ctx.restore()\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            ctx.strokeRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n        }\r\n\r\n        // let debugPath = true\r\n        if (this.path && Game.debugPath) {\r\n            let c = Color.White.clone().lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 4\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        this.workInProgress = false\r\n    }\r\n\r\n\r\n    carry(c: ResourceBlock) {\r\n        this.carrying.push(c);\r\n    }\r\n\r\n    isCarryingUnique(resources: ResourceBlock[]): boolean {\r\n        let isCarrying = containsUniq(this.carrying, resources)\r\n        return isCarrying\r\n    }\r\n\r\n    drop(res: ResourceBlock): ResourceBlock {\r\n        if (this.carrying.length > 0) {\r\n            if (this.carrying.find(r => r === res)) {\r\n                deleteByValueOnce(this.carrying, res)\r\n                return res\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    currentBuilding: Building = null\r\n    async visit(device: Device) {\r\n        if (this.currentBuilding != device.building) {\r\n            const path = this.planet.pathBetweenPoints(this.pos.clone(), device.pos.add(device.building.pos))\r\n            await this.followPath(path)\r\n        }\r\n        let target = device.pos.add(device.building.pos)\r\n        await this.glideTo(target)\r\n        this.currentBuilding = device.building\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        if (pos) {\r\n            return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n        }\r\n    }\r\n\r\n    async followPath(path: Vector[]) {\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = []\r\n        }\r\n    }\r\n    \r\n    protected get strategies() {\r\n        return [\r\n            this.sleepingStrategy,\r\n            this.eatingStrategy,\r\n            this.constructionStrategy,\r\n            this.productionStrategy\r\n        ]\r\n    }\r\n\r\n    async work() {\r\n        if (this.isPlanning || this.sleeping) { return }\r\n\r\n        this.isPlanning = true\r\n        // just get rid of it??\r\n        if (this.carrying.length > 0) { this.carrying = [] }\r\n        let choice = this.strategies.find(strat => strat.canApply())\r\n        if (choice) {\r\n            await choice.attempt()\r\n            this.energy -= 5\r\n            this.hunger += 0.04\r\n        }\r\n        this.isPlanning = false\r\n    }\r\n\r\n    async takeRest(duration: number = 8 * 60 * Game.minuteTickMillis) {\r\n        console.log(\"Citizen taking a well-deserved rest!!\")\r\n        this.sleeping = true\r\n        await this.progressBar(duration)\r\n        this.energy = 100\r\n        this.sleeping = false\r\n    }\r\n\r\n    async eat() {\r\n        console.log(\"Citizen eating a meal!\")\r\n        // this.eating = true\r\n        let thirtyMinuteTimer = 30 * Game.minuteTickMillis\r\n        await this.progressBar(thirtyMinuteTimer)\r\n        deleteByValueOnce(this.carrying, ResourceBlock.Meal)\r\n        this.hunger = 0\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(pos, elite: boolean = false) {\r\n        let citizen = new Citizen(pos, this.planet, elite);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { Game } from '../../Game';\r\n\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = Game.debugPath\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.placed = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0] //.length > 1 ? destination.nodes()[1] : destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination; //.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        // console.log(\"PATH FOUND BTWN POINTS\", { srcNode, destNode, path })\r\n        return path;\r\n    }\r\n\r\n\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findPoweredDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d.pos.add(d.building.pos))\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings[0] //.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices(): Device[] {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n\r\n    findPoweredDevices(): Device[] {\r\n        return flatSingle(this.activeBuildings.map(b => b.getDevices()))\r\n            .filter(d => d.built) /// ....\r\n    }\r\n\r\n    protected get activeBuildings() {\r\n        return this.buildings.filter(b => b.isActive)\r\n    }\r\n}\r\n","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range, flatSingle, mixColors } from '../../Util';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { MechanicalOperation } from '../../models/MechanicalOperation';\r\nimport { World } from '../../models/World';\r\nimport { Colorize } from 'excalibur/dist/Drawing/SpriteEffects';\r\nimport { SkyLayers } from './SkyLayers';\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n    // baseColor: Color\r\n    sky: Actor\r\n    skyLayers: SkyLayers\r\n\r\n    constructor(\r\n        public world: World,\r\n        public hud: Hud,\r\n        // public color: Color,\r\n        private onBuildingHover: (b: Building) => any,\r\n        private onDeviceHover: (d: Device) => any,\r\n        private w: number = 150000,\r\n        private depth: number = 50000,\r\n    ) {\r\n        super(0, depth / 2, w, depth, world.color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        this.sky = new Actor(0, -depth, w, depth, world.skyColor)\r\n        this.add(this.sky)\r\n\r\n        let yBase = -depth / 2\r\n        let crustHeight = 24\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.45))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount\r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight / 2) + (layerHeight * (i + 1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n        let c = this.color.clone()\r\n\r\n        this.skyLayers =new SkyLayers(\r\n            -depth/2,\r\n            this.getWidth(),\r\n            this.color.lighten(0.2),\r\n            world.skyColor,\r\n            2\r\n        )\r\n        this.add(this.skyLayers)\r\n\r\n        this.colony = new Colony(0, -depth / 2)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n\r\n    }\r\n\r\n\r\n    private currentHour: number\r\n    get hour() { return this.currentHour }\r\n\r\n    setTime(time: number) {\r\n        this.hour = (Math.floor(time / 60)) % 24\r\n\r\n        let nextHour = this.hour + 1\r\n\r\n        let minute = Math.floor(time % 60)\r\n        let inc = (minute / 60)\r\n        // console.log({ hour: this.hour, nextHour: nextHour, minute, inc })\r\n\r\n        let oldC = this.skyColorForHour(this.hour),\r\n            newC = this.skyColorForHour(nextHour)\r\n\r\n        let mixC = mixColors(newC, oldC, inc)\r\n\r\n        this.assignColors(mixC)\r\n    }\r\n\r\n    private assignColors(skyColor: Color) {\r\n        this.sky.color = skyColor\r\n\r\n        let inc = 0.04\r\n\r\n        let c = mixColors(\r\n            this.sky.color.lighten(3 * inc), //.lighten(3*inc).saturate(5*inc),\r\n            this.color.lighten(3 * inc), //.lighten(2*inc)\r\n            0.7\r\n        )\r\n\r\n        this.skyLayers.setHi(c)\r\n\r\n        // this.skyLayer.mountainLayers.color = this.color.lighten(inc) //0.1)\r\n        // this.skyLayer.mountainLayers.skyColor = c.lighten(inc)\r\n        // this.skyLayer.mountains.color = c.lighten(inc)\r\n        // this.skyLayer.backMountainLayers.color = c.lighten(inc)\r\n        // this.skyLayer.backMountainLayers.skyColor = c.lighten(inc * 3).desaturate(inc)\r\n    }\r\n\r\n    skyColorForHour(hour: number) {\r\n        let c = this.world.skyColor.clone().darken(0.2).desaturate(0.1)\r\n\r\n        let colorMap = {\r\n            night: c.darken(0.7),\r\n            dawn: c.darken(0.2),\r\n            morning: c.lighten(0.1),\r\n            afternoon: c.lighten(0.2).desaturate(0.1),\r\n            evening: c,\r\n        }\r\n\r\n        let result: Color = null\r\n        if (hour >= 5 && hour < 8) { // dawn\r\n            let inc = (hour - 6) / 5\r\n            result = colorMap.dawn.lighten(inc)\r\n        } else if (hour >= 8 && hour < 12) { // morning\r\n            let inc = (hour - 8) / 24\r\n            result = colorMap.morning.lighten(inc)\r\n        } else if (hour >= 12 && hour < 14) { // early afternoon\r\n            result = colorMap.afternoon //.darken(inc)\r\n        } else if (hour >= 14 && hour < 18) {  // late afternoon\r\n            let inc = (hour - 14) / 16\r\n            result = colorMap.afternoon.darken(inc)\r\n        } else if (hour >= 18 && hour < 23) { // evening\r\n            let inc = (hour - 18) / 10\r\n            result = colorMap.evening.darken(inc)\r\n        } else if (hour >= 23) { // late night\r\n            result = colorMap.night\r\n        } else if (hour < 5) { // early morning\r\n            result = colorMap.night\r\n        }\r\n        return result\r\n    }\r\n\r\n    set hour(hour: number) {\r\n        this.currentHour = hour\r\n    }\r\n\r\n    set currentlyViewing(buildingOrDevice: Building | Device) {\r\n        if (buildingOrDevice instanceof Building) {\r\n            let b: Building = buildingOrDevice\r\n            this.onBuildingHover(b)\r\n        } else if (buildingOrDevice instanceof Device) {\r\n            let d: Device = buildingOrDevice\r\n            this.onDeviceHover(d)\r\n        }\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        // let devices = this.colony.findPoweredDevices()\r\n        // let economies = devices.map((d: Device) => d.machine.economy)\r\n\r\n        let buildings = this.colony.buildings\r\n        let economies = buildings.map(b => b.economy())\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    spend(resource: ResourceBlock): any {\r\n        this.hud.resourceExpended(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector, elite: boolean = false) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            // console.log(\"POPULATIN'!\")\r\n            // let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(pos, elite) //home)\r\n        } else {\r\n            console.warn(\"too many citizens already to populate more!\")\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [PureValue.Shelter, PureValue.Water, PureValue.Oxygen]\r\n        return Math.max(0, Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        ))\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = () => true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n        return this.colony.pathBetweenPoints(origin, destination)\r\n    }\r\n\r\n    get timeFactor() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let ops: MechanicalOperation[] = devices.map(d => d.operation) //.filter(op => op.type === 'accelerate')\r\n        return ops\r\n            .map(op => op.type === 'accelerate' ? op.factor : 1)\r\n            .reduce((acc, val) => val * acc, 1.0)\r\n    }\r\n\r\n    get storedResources(): ResourceBlock[] {\r\n        let devices = this.colony.findAllDevices()\r\n        return flatSingle(devices.map(d => d.product))\r\n    }\r\n}","import { Color } from \"excalibur\";\r\nimport { EntityKind } from \"../../values/Entity\";\r\n\r\nclass PaletteGroup {\r\n\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(private name: string, private all: EntityKind[], private comprehend = true) {\r\n    }\r\n}\r\n\r\nexport class Palette {\r\n    private _element: HTMLDivElement;\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(\r\n        private name: string,\r\n        private x: number,\r\n        private y: number,\r\n        private all: EntityKind[],\r\n        private onButtonClick: (EntityKind) => any = null,\r\n        private onButtonEnter: (EntityKind) => any = null,\r\n        private comprehend = true \r\n    ) {\r\n        this.makePalette();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    updateBuilt(built: (EntityKind)[]) {\r\n        this.built = built;\r\n        if (this.comprehend) {\r\n            this.comprehended = this.all.filter((e: EntityKind) => {\r\n                let s = new e();\r\n                let prereqs: (EntityKind)[] = s.prereqs;\r\n                return prereqs.every((prereq: EntityKind) => {\r\n                    let built = this.built.some((s: EntityKind) => s === prereq);\r\n                    return built;\r\n                });\r\n            });\r\n        } else {\r\n            this.comprehended = this.built\r\n        }\r\n        this.makePalette();\r\n    }\r\n\r\n    dragging: boolean = false\r\n    private makePalette() {\r\n        if (this._element) {\r\n            this._element.parentElement.removeChild(this._element);\r\n        }\r\n        if (!(this.comprehended.length > 0)) { return }\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.display = 'flex';\r\n        this._element.style.flexWrap = 'wrap';\r\n        this._element.style.width = '200px';\r\n        this._element.style.border = 'none'; //1px solid black'; //0.5px solid white';\r\n\r\n        this._element.addEventListener('mousedown', (e) => { //.onmousedown = (e) => {\r\n            // alert('click palette')\r\n            this.dragging = true\r\n            console.log(\"START DRAG\")\r\n        })\r\n        document.addEventListener('onmousemove', (e: MouseEvent) => {\r\n            if (this.dragging) {\r\n                this.x = e.clientX\r\n                this.y = e.clientY\r\n            }\r\n        })\r\n\r\n        document.addEventListener('onmouseup', (e) => {\r\n            if (this.dragging) { this.dragging = false }\r\n        })\r\n        // title.onmousemove = (e) => {\r\n        //     if (this.dragging) {\r\n        //         this.x = e.clientX\r\n        //         this.y = e.clientY\r\n        //     }\r\n        // }\r\n        // this._element.onmouseup = (e) => {\r\n        //     this.dragging = false\r\n        //     console.log(\"DRAG END\") \r\n        // }\r\n\r\n        document.body.appendChild(this._element);\r\n\r\n        if (this.name) {\r\n            let title = document.createElement('div')\r\n            title.textContent = this.name\r\n            title.style.fontFamily = 'Verdana'\r\n            title.style.fontSize = '7pt'\r\n            title.style.fontWeight = '400'\r\n            title.style.width = '200px'\r\n            title.style.color = Color.White.toRGBA()\r\n            title.style.backgroundColor = Color.Violet.darken(0.92).toRGBA()\r\n            title.style.padding = '4px'\r\n            title.style.margin = '0px'\r\n            \r\n            this._element.appendChild(\r\n                title\r\n            )\r\n        }\r\n\r\n        this.comprehended\r\n            .map((elem: EntityKind) => new elem())\r\n            .sort((a, b) => a.color > b.color ? -1 : 1)\r\n            .forEach(elem => {\r\n                if (elem.hide) { return }\r\n                let label = elem.name;\r\n                if (!this.built.map(m => new m().name).includes(elem.name)) {\r\n                    label += ' *';\r\n                }\r\n                let clr = elem.color;\r\n                let btn = this.buttonFactory(label, clr);\r\n                this._element.appendChild(btn);\r\n                if (this.onButtonEnter) {\r\n                    btn.onmouseenter = () => { this.onButtonEnter(elem); };\r\n                }\r\n                if (this.onButtonClick) {\r\n                    btn.onclick = () => { this.onButtonClick(elem); };\r\n                }\r\n            });\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.5).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = label;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '6pt';\r\n        paletteButton.style.fontFamily = 'Verdana';\r\n        paletteButton.style.fontWeight = '500';\r\n        paletteButton.style.padding = '2px';\r\n        paletteButton.style.width = '100px';\r\n        paletteButton.style.textTransform = 'uppercase';\r\n        paletteButton.style.border = 'none' //1px solid rgba(255,255,255,0.08)';\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA();\r\n            paletteButton.style.color = fg.toRGBA();\r\n        };\r\n        return paletteButton;\r\n    }\r\n}\r\n","import { Label, Actor, FontStyle, Color } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { PureValue, Economy, ResourceBlock } from \"../../models/Economy\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nimport { countOccurrences, flatSingle } from \"../../Util\";\r\n\r\nexport class CardBody extends Actor {\r\n    description: Label\r\n    values: Label\r\n    notes: Label\r\n    footer: Label\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 0, 0)\r\n        // resources / recipes\r\n\r\n        this.values = new Label('')\r\n        this.values.fontSize = 10\r\n        this.add(this.values)\r\n\r\n        this.notes = new Label('behavioral notes', 0, 30)\r\n        this.notes.fontSize = 11\r\n        this.add(this.notes)\r\n\r\n        this.description = new Label('description', 0, 60)\r\n        this.description.fontSize = 12\r\n        this.description.fontStyle = FontStyle.Italic\r\n        this.description.color = Color.DarkGray\r\n        this.add(this.description)\r\n\r\n        this.footer = new Label('footer', 20, 80)\r\n        this.footer.fontSize = 10\r\n        this.footer.fontStyle = FontStyle.Italic\r\n        this.add(this.footer)\r\n\r\n        this.show(entity)\r\n    }\r\n\r\n    describeResources = (arr: ResourceBlock[]) => {\r\n        let freqs = countOccurrences(arr)\r\n        return Object.keys(freqs)\r\n            .map(elem => `${elem} x${freqs[elem]}`)\r\n            .join(' + ')\r\n    }\r\n\r\n    show(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        if (entity) {\r\n            this.description.text = entity.description;\r\n\r\n            if (entity instanceof Machine || entity instanceof Device) {\r\n                this.values.text =  this.describeEconomy(entity.economy)\r\n                // let footerNotes = []\r\n                let resourceDescription = entity instanceof Machine\r\n                    ? `Cost: ${this.describeResources(entity.cost)}`\r\n                    : (entity.built ? this.describeResources(entity.product) : 'under construction')\r\n                let forDome = entity instanceof Machine ? entity.forDome : entity.machine.forDome\r\n                let domeStatus = `For Dome: ${forDome ? 'Yes' : 'No'}`\r\n                this.footer.text = resourceDescription === ''\r\n                    ? domeStatus\r\n                    : [resourceDescription, domeStatus].join(' | ') \r\n                this.notes.text = '' //\r\n                let op = entity.operation\r\n                if (op) {\r\n                    if (op.type === 'recipe') {\r\n                        this.notes.text = `Turns ${op.consumes.join(' + ')} -> ${op.produces}.`\r\n                    } else if (op.type === 'generator') {\r\n                        this.notes.text = `Generates ${op.generates}.`\r\n                    } else if (op.type === 'store') {\r\n                        this.notes.text = `Stores ${op.stores.join(' + ')}`\r\n                    } else if (op.type === 'spawn') {\r\n                        this.notes.text = 'Decants clones.'\r\n                    }\r\n                }\r\n            } else if (entity instanceof SpaceFunction) {\r\n                let { capacity, workSpeed } = entity.bonuses\r\n                let bonusMessages = [];\r\n                if (capacity > 0) {\r\n                    bonusMessages.push(`+${capacity} cap`)\r\n                }\r\n                if (workSpeed > 1.0) {\r\n                    bonusMessages.push(`+${Math.floor((workSpeed*100)-100)}% efficiency` )\r\n                }\r\n                this.values.text = bonusMessages.join('; ') \r\n                this.notes.text = entity.machines.map(m => (new m()).name).join(' + ')\r\n                this.footer.text = ''\r\n            } else if (entity instanceof Building) {\r\n                this.values.text =  this.describeEconomy(entity.economy(false))\r\n                this.notes.text = entity.getDevices().map(d => d.machine.name).join(' + ')\r\n\r\n                let product = entity.getDevices()\r\n                    .map(d => d.product)\r\n                    .reduce((a, b) => a.concat(b), [])\r\n                this.footer.text = product.length > 0\r\n                    ? \"Currently contains: \" + this.describeResources(product)\r\n                    : ''\r\n            } else {\r\n                this.values.text = ''\r\n                this.notes.text = ''\r\n                this.footer.text = ''\r\n            }\r\n\r\n        }\r\n        // other bonuses? behaviors?\r\n    }\r\n\r\n    private describeEconomy(e: Economy): string {\r\n        let values = []\r\n        let econ = e // entity.economy\r\n        for (let value in PureValue) {\r\n            let { supply, demand } = econ[value]\r\n            let delta = supply - demand\r\n            if (delta > 0) {\r\n                values.push(`+${delta} ${value}`)\r\n            } else if (delta < 0) {\r\n                values.push(`${delta} ${value}`)\r\n            }\r\n        }\r\n        return values.join(' | ')\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nexport class CardTitle extends Actor {\r\n    \r\n    name: Label;\r\n    type: Label;\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 14, 32, entity && entity.color || Color.Gray);\r\n        this.name = new Label(entity && entity.name || '..', 20, 16)\r\n        this.name.fontSize = 28\r\n        this.name.color = Color.Black\r\n        this.add(this.name)\r\n\r\n        this.type = new Label('..', 220, 18)\r\n        this.type.fontSize = 10\r\n        this.type.color = Color.Gray\r\n        this.type.fontStyle = FontStyle.Italic\r\n        this.add(this.type)\r\n\r\n        if (entity) {\r\n            this.announce(entity)\r\n        }\r\n    }\r\n\r\n    announce(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.name.text = entity.name\r\n        this.color = entity.color.desaturate(0.5).darken(0.2)\r\n        if (entity instanceof Machine) { this.type.text = `${DeviceSize[entity.size]} Machine Type` }\r\n        if (entity instanceof Structure) { this.type.text = 'Structure' }\r\n        if (entity instanceof SpaceFunction) { this.type.text = 'Function' }\r\n        if (entity instanceof Building) { this.type.text = 'Building' }\r\n        if (entity instanceof Device) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { CardTitle } from \"./CardTitle\";\r\nimport { CardBody } from \"./CardBody\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\n\r\nexport class Card extends Actor {\r\n    title: CardTitle\r\n    cardBody: CardBody\r\n    image: HTMLImageElement\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x + 160, y + 90, 320, 180, Color.White);\r\n        let x0 = -150, y0 = -50;\r\n        this.title = new CardTitle(entity, x0 - 3, y0); //x, y)\r\n        this.add(this.title);\r\n        this.cardBody = new CardBody(entity, x0 + 14, y0 + 40)\r\n        this.add(this.cardBody)\r\n\r\n        this.image = new Image();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        if (this.entity) {\r\n            if (this.entity instanceof Machine || this.entity instanceof Device) {\r\n                // if (this.image.src !== null) {\r\n                    let ix = this.pos.x + 48, iy = this.pos.y - 16\r\n                    let isz = 92\r\n                    ctx.drawImage(this.image, ix, iy, isz, isz)\r\n                // }\r\n            }\r\n        }\r\n    }\r\n\r\n    present(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.title.announce(entity)\r\n        this.cardBody.show(entity)\r\n\r\n        this.entity = entity\r\n        let src = null\r\n        if (this.entity instanceof Machine) { //} || this.entity instanceof Device) {\r\n            src = this.entity.image\r\n        } else if (this.entity instanceof Device) {\r\n            src = this.entity.machine.image\r\n        }\r\n        // console.log(\"img src\", { src })\r\n        this.image.src = src\r\n    }\r\n\r\n}\r\n","import { Sound, Color } from \"excalibur\";\r\nimport { sample } from \"../../Util\";\r\n\r\ninterface MusicPlayerPlay { type: 'play'}\r\ninterface MusicPlayerPause { type: 'pause'}\r\ninterface MusicPlayerStop { type: 'stop'}\r\ninterface MusicPlayerNext { type: 'next'}\r\ntype MusicPlayerAction = MusicPlayerPlay | MusicPlayerPause | MusicPlayerStop | MusicPlayerNext\r\n\r\nexport class MusicPlayer {\r\n    private _wrapper: HTMLDivElement;\r\n    private _element: HTMLDivElement;\r\n    private _titleElem: HTMLSpanElement;\r\n\r\n    currentTrack: string\r\n    paused: boolean = false\r\n\r\n    constructor(private x: number, private y: number, private playlist: {\r\n        [track: string]: Sound;\r\n    }) {\r\n        this.makePlayer();\r\n        setTimeout(() => { this.startMusic() }, 3000)\r\n        this._titleElem.textContent = `Getting ready...`;\r\n        this.currentTrack = sample(Object.keys(this.playlist)); //[0];\r\n    }\r\n\r\n    startMusic() {\r\n        this._titleElem.textContent = `Playing: ${this.currentTrack}`;\r\n        this.playlist[this.currentTrack].play()\r\n        .then(() => {\r\n                this.advancePlaylist()\r\n        })\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._wrapper.style.left = `${left + this.x}px`;\r\n            this._wrapper.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    private makePlayer() {\r\n        this._wrapper = document.createElement('div')\r\n        this._wrapper.style.position = 'absolute'\r\n        this._wrapper.style.width = '20%'\r\n        this._wrapper.style.textAlign = 'left'\r\n        this._wrapper.style.border = 'none';\r\n        document.body.appendChild(this._wrapper);\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.display = 'inline-block';\r\n        this._element.style.border = 'none';\r\n        this._wrapper.appendChild(this._element)\r\n\r\n        this._titleElem = document.createElement('span');\r\n        this._titleElem.style.fontFamily = 'Verdana';\r\n        this._titleElem.style.fontSize = '7pt';\r\n        this._titleElem.style.padding = '24px'\r\n        this._titleElem.style.color = 'white';\r\n        this._wrapper.appendChild(this.inlineBlock(this._titleElem));\r\n\r\n        let play = this.iconFactory({ type: 'play' }, '&#9655;')\r\n        this._wrapper.appendChild(this.inlineBlock(play));\r\n\r\n        let pause = this.iconFactory({ type: 'pause' }, '&#10072; &#10072;')\r\n        this._wrapper.appendChild(this.inlineBlock(pause))\r\n\r\n        let next = this.iconFactory({ type: 'next' }, '&rarr;')\r\n        this._wrapper.appendChild(this.inlineBlock(next))\r\n\r\n    }\r\n\r\n    handleAction(action: MusicPlayerAction) {\r\n        if (action.type === 'pause') {\r\n            this.song.pause()\r\n            this.paused = true\r\n            this._titleElem.textContent = `Paused: ${this.currentTrack}`;\r\n        } else if (action.type === 'play') {\r\n            this.song.play()\r\n            this.paused = false\r\n            this._titleElem.textContent = `Playing: ${this.currentTrack}`;\r\n        } else if (action.type === 'next') {\r\n            if (this.paused) {\r\n                this.song.play()\r\n                this.paused = false\r\n            }\r\n            this.song.stop()\r\n        }\r\n    }\r\n\r\n    advancePlaylist() {\r\n        let ndx = this.trackNames.indexOf(this.currentTrack)\r\n        ndx = (ndx + 1) % this.trackNames.length\r\n        this.currentTrack = this.trackNames[ndx]\r\n        this.startMusic()\r\n    }\r\n\r\n    get trackNames() { return Object.keys(this.playlist) }\r\n    get song() { return this.playlist[this.currentTrack] }\r\n\r\n    private inlineBlock(elem) {\r\n        let block = document.createElement('div');\r\n        block.style.display = 'inline-block';\r\n        block.style.border = 'none';\r\n        block.append(elem)\r\n        return block\r\n    }\r\n\r\n    private iconFactory(\r\n        action: MusicPlayerAction,\r\n        iconContent: string,\r\n    ) {\r\n        let bg = Color.Transparent\r\n        let fg = Color.White\r\n        let icon = document.createElement('button')\r\n        icon.innerHTML = iconContent\r\n        icon.style.display = 'block';\r\n        icon.style.fontSize = '7pt';\r\n        icon.style.fontFamily = 'Verdana';\r\n        icon.style.border = 'none'\r\n        icon.style.padding = '4px'\r\n        icon.style.background = bg.toRGBA();\r\n        icon.style.color = fg.toRGBA();\r\n        icon.onclick = () => { this.handleAction(action) }\r\n        return icon\r\n    }\r\n\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor, Color } from \"excalibur\";\r\nimport { Economy, PureValue, availableCapacity, allValues } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\nimport { eachChunk } from \"../../Util\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0) //Color.DarkGray.clone().darken(0.5));\r\n\r\n        let index = 0\r\n        for (let [val1, val2] of eachChunk(allValues, 2)) {\r\n            this.addValue(index * 32, 0, val1)\r\n            this.addValue(index * 32, 7, val2)\r\n            index += 1\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    private addValue(x: number, y: number, value: PureValue) {\r\n        let valueLabel: EconomicValue = new EconomicValue(value, x, y)\r\n        this.valueLabels[value] = valueLabel\r\n        this.add(valueLabel)\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value of allValues) {\r\n            this.valueLabels[value].setCount(\r\n                availableCapacity(market, value)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor, UIActor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nclass Tooltip extends Actor {\r\n    messageLabel: Label\r\n    constructor(x: number, y: number, message: string) {\r\n        super(x, y, 60, 16, Color.Black)\r\n        this.messageLabel = new Label(message, -16, 6, 'Verdana')\r\n        this.messageLabel.color = Color.White\r\n        this.add(this.messageLabel)\r\n    }\r\n}\r\n\r\nexport class ResourceListEntry extends UIActor {\r\n    icon: Actor;\r\n    count: Label;\r\n    hovering: boolean = false\r\n    tooltip: Tooltip\r\n\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x-5, y-5, 20, 10)\r\n        let icon = new Actor(5, 5, 10, 10, blockColor(resourceBlock));\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, 15, 10, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n\r\n        this.tooltip = new Tooltip(0, 5, ResourceBlock[resourceBlock])\r\n        this.tooltip.visible = false\r\n        this.add(this.tooltip)\r\n\r\n\r\n        this.on('pointerenter', () => {\r\n            this.tooltip.visible = true\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.tooltip.visible = false\r\n        })\r\n    }\r\n\r\n\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n\r\n    debit(amt: number) {\r\n        this.value -= amt\r\n        this.count.text = `x${this.value}`\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nimport { eachCons, eachChunk } from \"../../Util\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            [ResourceBlock.Biomass]: null,\r\n            [ResourceBlock.Idea]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n            [ResourceBlock.Alloy]: null,\r\n            [ResourceBlock.Bioplasma]: null,\r\n            [ResourceBlock.Algorithm]: null,\r\n            [ResourceBlock.Argent]: null,\r\n            [ResourceBlock.Aurum]: null,\r\n            [ResourceBlock.Omnium]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x,y,0,0); // 200, 60, Color.Green.clone().darken(0.8));\r\n        let rx0 = 0, ry0 = -5;\r\n        let resources = [\r\n            ResourceBlock.Meal,\r\n            ResourceBlock.Bioplasma,\r\n\r\n            ResourceBlock.Data,\r\n            ResourceBlock.Algorithm,\r\n\r\n            ResourceBlock.Mineral,\r\n            ResourceBlock.Alloy,\r\n\r\n            ResourceBlock.Argent,\r\n            ResourceBlock.Aurum,\r\n        ];\r\n\r\n        eachChunk(resources, 2).forEach(([res1, res2], index) => {\r\n            let rx = rx0 + index * 36, ry = ry0 + index * 0;\r\n            this.addEntry(rx, ry, res1)\r\n            this.addEntry(rx, ry + 14, res2)\r\n        });\r\n    }\r\n\r\n    private addEntry(x: number, y: number, res: ResourceBlock) {\r\n        let entry = new ResourceListEntry(x, y, res, 0);\r\n        this.add(entry);\r\n        this.entries[res] = entry;\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n\r\n    decrement(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.debit(1)\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\nimport { MusicPlayer } from \"./MusicPlayer\";\r\nimport { Resources } from \"../../Resources\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n    private musicPlayer: MusicPlayer\r\n    private clock: Label\r\n\r\n    constructor(market: Economy, w: number, h: number) {\r\n        super(0,0, w*2,h, Color.DarkGray.clone().darken(0.92));\r\n\r\n        let ty = 14\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+18)\r\n        brand.fontSize = 28\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.1\", 100, ty + 14)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(130, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 280, ty)\r\n        this.add(this.economy)\r\n\r\n        this.clock = new Label('current time', 600, ty, 'Verdana')\r\n        this.clock.color = Color.White // 'white'\r\n        this.add(this.clock)\r\n\r\n        this.popLabel = new Label(\"\", 600, ty + 14, 'Verdana')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 750, ty, 'Verdana')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.messageLabel.fontStyle = FontStyle.Italic\r\n        this.add(this.messageLabel)\r\n\r\n        this.musicPlayer = new MusicPlayer(726, 12, {\r\n            'Crater Rock': Resources.CraterRock,\r\n            'Indivision': Resources.Indivision,\r\n            'Future Tense': Resources.FutureTense,\r\n            // 'Isomer': Resources.Isomer,\r\n            'Understanding': Resources.Understanding,\r\n            // 'Outbound': Resources.Outbound,\r\n            'Assembler': Resources.Assembler,\r\n        })\r\n// // enable propagating pointer events\r\n// this.enableCapturePointer = true;\r\n// // // enable move events, warning: performance intensive!\r\n// this.capturePointer.captureMoveEvents = true;\r\n//         this.on('pointerenter', () => { alert('hover!')})\r\n    }\r\n\r\n    draw(ctx, delta) {\r\n        super.draw(ctx, delta)\r\n        this.musicPlayer.draw(ctx)\r\n        // drawRect(\r\n        //     ctx,\r\n        //     {x: this.x, y: this.y, width: this.getWidth(), height: this.getHeight() },\r\n        //     0,\r\n        //     Color.Magenta\r\n        // )\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    decrementResource(res: ResourceBlock) {\r\n        this.resources.decrement(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n\r\n    setClock(time: number = 0) {\r\n        let days = (Math.floor(time / (60 * 24))+1).toString()\r\n        let hh = Math.floor(time / 60) % 24\r\n        let hours = Math.floor((hh + 11) % 12 + 1).toString()\r\n        let minutes = Math.floor(time % 60).toString()\r\n        let ampm = hh < 12 ? 'AM' : 'PM'\r\n        this.clock.text = `Day ${days}. ${hours}:${minutes.padStart(2, '0')} ${ampm}`\r\n    }\r\n    \r\n}\r\n","import { UIActor, Label, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, PureValue } from \"../../models/Economy\";\r\nimport { Machine, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Card } from \"./Card\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Palette } from \"./Palette\";\r\nimport { Building } from \"../Building\";\r\n\r\nclass Tabs { //extends UIActor {\r\n    //private structurePalette: Palette\r\n    //private machinePalette: Palette\r\n    //private functionPalette: Palette\r\n    // private active: number = null\r\n\r\n    _rootElement: HTMLDivElement\r\n    private tabs: {name: string, element: HTMLDivElement}[] = []\r\n\r\n    constructor(private x: number, private y: number, private title: string) { //}, x: number, y: number) {\r\n        // super(0,0,300,300)\r\n        this._rootElement = this.makeRootElement()\r\n    }\r\n\r\n    addTab(name: string, element: HTMLDivElement) {\r\n        this.tabs.push({ name, element })\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        if (this._rootElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._rootElement.style.left = `${left + this.x}px`;\r\n            this._rootElement.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    private makeRootElement() {\r\n        let root = document.createElement('div')\r\n        root.style.position = 'absolute'\r\n        root.style.width = '240px'\r\n        root.style.padding = '10px'\r\n\r\n        let title = document.createElement('h2')\r\n        title.style.fontSize = '14pt'\r\n        root.appendChild(title)\r\n\r\n        return root\r\n    }\r\n    \r\n}\r\n\r\nexport class Hud extends UIActor {\r\n    // private hint: Label\r\n\r\n    private hidePalettes: boolean = true\r\n\r\n    private structurePalette: Palette\r\n    private machinePalette: Palette\r\n    private functionPalette: Palette\r\n    private card: Card\r\n\r\n    private status: StatusAnalysisView\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n    static machinesForPalette = allMachines\r\n    static functionsForPalette = allSpaceFunctions\r\n\r\n    constructor(\r\n        game: Game,\r\n        protected onBuildingSelect = null,\r\n        protected onMachineSelect = null,\r\n        protected onFunctionSelect = null\r\n    ) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.status = new StatusAnalysisView(emptyMarket(), game.canvasWidth, 64);\r\n        this.add(this.status)\r\n\r\n        let displayInfo = (e) => this.showCard(e)\r\n        this.machinePalette = new Palette('Machine', 20, 55, allMachines, onMachineSelect, displayInfo) // (e) => this.showCard(e))\r\n        this.structurePalette = new Palette('Structure', 20, 300, Hud.structuresForPalette, onBuildingSelect, displayInfo)\r\n        this.functionPalette = new Palette('Function', 20, 435, Hud.functionsForPalette, onFunctionSelect, displayInfo, false)\r\n\r\n        this.card = new Card(null, 20, game.canvas.height - 200)\r\n        this.add(this.card)\r\n\r\n\r\n    }\r\n\r\n    showPalettes() {\r\n        this.hidePalettes = false\r\n    }\r\n\r\n    setMessage(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (!this.hidePalettes) {\r\n            this.structurePalette.draw(ctx)\r\n            this.machinePalette.draw(ctx)\r\n            this.functionPalette.draw(ctx)\r\n        }\r\n    }\r\n\r\n    update(game: Game, delta: number) {\r\n        super.update(game, delta)\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    resourceExpended(resource: ResourceBlock) {\r\n        this.status.decrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true, time: number = 0) {\r\n        if (!planet) { return }\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n\r\n        this.status.setClock(time)\r\n    }\r\n\r\n    showCard(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        this.card.present(entity)\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n        this.updateFunctionPalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        let builtStructures =\r\n            Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n        if (!builtStructures.every(s => this.structurePalette.built.includes(s))) {\r\n            this.structurePalette.updateBuilt(builtStructures)\r\n        }\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let devices = colony.findAllDevices()\r\n        let builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine && d.built))\r\n        if (!builtMachines.every(machine => this.machinePalette.built.includes(machine))) {\r\n            this.machinePalette.updateBuilt(builtMachines)\r\n        }\r\n    }\r\n\r\n    private updateFunctionPalette(colony: Colony) {\r\n        let builtReifiedFunctions = flatSingle(colony.buildings.map(b => b.spaceFunction))\r\n        let builtFunctions = Hud.functionsForPalette.filter((fn) => builtReifiedFunctions.some(rf => rf instanceof fn))\r\n        if (!builtFunctions.every(fn => this.functionPalette.built.includes(fn))) {\r\n            this.functionPalette.updateBuilt(builtFunctions)\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawPatternedRect, drawRect, drawPatternedPoly, drawPoly } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\n// import { drawPatternedRect, drawRect } from \"../../Util\";\r\n\r\nexport class MediumSurfaceRoomView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n    // hideLabe\r\n\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n    get floorHeight() { return this.getHeight() / 6 }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        // draw from left slot to each device place to right slot?\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n\r\n        if (this.isGroundFloor) {\r\n            let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length - 1])\r\n            g.edge(leftSlot, devices[0])\r\n            g.edge(devices[devices.length - 1], rightSlot)\r\n        } else {\r\n            let topSlot = find(slots[1])\r\n            g.edge(devices[1], topSlot)\r\n        }\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        // g.edge(devices[1], find(slots[1]))\r\n\r\n        return g\r\n    }\r\n\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        let slotY = this.getHeight() - this.floorHeight;\r\n\r\n        if (this.isGroundFloor) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, this.pos.y + slotY,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight() + 1, // + (2*this.floorHeight),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y - 1, // + this.getHeight(),\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n\r\n        if (this.isGroundFloor) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    this.pos.y + slotY,\r\n                    Orientation.Right\r\n                )\r\n            )\r\n        }\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    get isGroundFloor() {\r\n        return !this.parentSlot || !(this.parentSlot.parent instanceof MediumSurfaceRoomView)\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.planet.colony.buildings.length === 0) {\r\n            cursor.y = this.planet.getTop();\r\n        } // else {\r\n            // this.alignToSlot(cursor)\r\n        // }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.planet.colony.buildings.length === 0) {\r\n            this.pos = cursor\r\n            this.pos.y -= this.getHeight() - 2 - this.floorHeight // hm\r\n        } else {\r\n            this.alignToSlot(cursor)\r\n\r\n        }\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor()\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n\r\n        // ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n        // let rect = \r\n            // { x: this.pos.x, y: this.pos.y, width: this.getWidth(), height: this.getHeight() };\r\n        drawPatternedPoly(\r\n            ctx,\r\n            this.angledRoofPoly(),\r\n            this.backgroundPattern,\r\n            this.mainColor()\r\n        )\r\n\r\n\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black.clone()\r\n            c.a = 0.6\r\n            drawPoly(ctx, this.angledRoofPoly(), c)\r\n        }\r\n\r\n        // floor\r\n        let floorColor = this.planet.color.darken(0.6)\r\n        let floorEdgeHeight = 12 // 6\r\n        let floorOff = -5\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorEdgeHeight,\r\n              width: this.getWidth(), height: floorEdgeHeight - floorOff },\r\n              0,\r\n              floorColor.lighten(0.4)\r\n        )\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorOff,\r\n              width: this.getWidth(), height: this.floorHeight + floorOff },\r\n              0,\r\n              floorColor\r\n        )\r\n\r\n        // a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n\r\n        ctx.fillStyle = Color.Black.fillStyle()\r\n        ctx.fillRect(flagX, flagY-1, 1, flagpoleHeight+1)\r\n        drawPatternedRect(\r\n            ctx,\r\n            { x: flagX, y: flagY, width: 10, height: 6 },\r\n            BackgroundPattern.USSF\r\n        )\r\n        // ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.clone(); }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MediumRoomThreeView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    poly() { return this.angledRoofPoly() }\r\n\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Huge\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Large\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 2\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaceCount = 3\r\n    poly() { return this.angledRoofPoly() }\r\n    //devicePlaces() {\r\n    //    let w = this.getWidth()/2\r\n    //    let x = this.pos.x + w;\r\n    //    let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n    //    let ds = [\r\n    //        new Vector(x - w / 2, y),\r\n    //        new Vector(x, y),\r\n    //        new Vector(x + w / 2, y),\r\n    //    ]\r\n\r\n    //    return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    //}\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    minHeight: number = 50\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(this.minHeight, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(this.minHeight, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { range, eachCons, measureDistance } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.planet.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        // super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            // this.alignToSlot(cursor)\r\n        } else {\r\n            // cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        // this.pos.y = this.planet.getTop() + 2\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n          this.setHeight(\r\n             (100 * Math.floor(Math.abs(cursor.y - this.planet.getTop()) / 100)) - 5\r\n          )\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length-1])\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n\r\n        return g\r\n\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.clone().darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector, Color } from \"excalibur\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n// import { drawRect, drawPatternedRect } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { drawPatternedRect, drawRect, drawPatternedPoly, drawPoly } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    get floorHeight() { return this.getHeight() / 6 }\r\n    // floorHeight: number = 10\r\n    edgeWidth: number = 0 //.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    poly() { return this.aabbPoly() } //angledRoofPoly() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n\r\n        drawPatternedPoly(\r\n            ctx,\r\n            this.poly(),\r\n            this.backgroundPattern,\r\n            this.mainColor()\r\n        )\r\n\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black.clone()\r\n            c.a = 0.6\r\n            drawPoly(ctx, this.poly(), c)\r\n        }\r\n\r\n        let floorEdgeHeight = 12 // 6\r\n        let floorColor = this.planet.color.darken(0.6)\r\n        let floorOff = -5\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorEdgeHeight,\r\n              width: this.getWidth(), height: floorEdgeHeight - floorOff },\r\n              0,\r\n              floorColor.lighten(0.4)\r\n        )\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight - floorOff,\r\n              width: this.getWidth(), height: this.floorHeight + floorOff },\r\n              0,\r\n              floorColor\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let slots: Slot[] = this.slots()\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        // draw from left slot to each device place to right slot?\r\n        let leftSlot = find(slots[0].pos), rightSlot = find(slots[1].pos)\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        return g\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    devicePlaceSize: DeviceSize = DeviceSize.Small\r\n    devicePlaceCount: number = 2\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"0a266eded2bf27831b18735ffc081448.png\";","module.exports = __webpack_public_path__ + \"2475589a97ba4901bfa7ab53b5487778.png\";","module.exports = __webpack_public_path__ + \"98240dde9344ac8d071d076ac951e15d.png\";","module.exports = __webpack_public_path__ + \"da31cf43235263c1c3e0ad45a46360a1.png\";","module.exports = __webpack_public_path__ + \"a6a38278ac501400c6199e0df9e1bf84.png\";","module.exports = __webpack_public_path__ + \"ece1d5d5858bc048d2d949ecc3f5e9bc.png\";","module.exports = __webpack_public_path__ + \"3654f0489813e0668743efde017c9653.png\";","module.exports = __webpack_public_path__ + \"3abbdabf07943966f102ac7345a59986.png\";","module.exports = __webpack_public_path__ + \"d1b4690b9f5fa4957f98602afc8cfdb6.png\";","module.exports = __webpack_public_path__ + \"0eb7a15ea04678b14a2b88b5965aabeb.png\";","module.exports = __webpack_public_path__ + \"dfe6e4db2f0c22d18befa85c1e163369.svg\";","module.exports = __webpack_public_path__ + \"9a947d50110c1d1db07c76a4bba2e653.svg\";","module.exports = __webpack_public_path__ + \"4976b6042ef557ca6085c8d0168251f4.svg\";","module.exports = __webpack_public_path__ + \"46418cf15643d9b1b171c1b64160a5af.svg\";","module.exports = __webpack_public_path__ + \"36a02c2483b688be86ce07bea4bd7295.svg\";","module.exports = __webpack_public_path__ + \"29c5f1be64c99bbc14d5063eea2f0953.svg\";","module.exports = __webpack_public_path__ + \"502f86b65239e20806bbae8bc77a6116.svg\";","module.exports = __webpack_public_path__ + \"5289b20985e3c3a98081267a2da1772e.svg\";","module.exports = __webpack_public_path__ + \"1d893905e4eea3bbc48b0e129e318ea6.svg\";","module.exports = __webpack_public_path__ + \"bd556d00e484db4e52d198d0bf39d0f2.svg\";","module.exports = __webpack_public_path__ + \"650cd431226df0755357c71d61bef1f2.svg\";","module.exports = __webpack_public_path__ + \"f12c591f538ab3026bf13e93f3fa9485.svg\";","module.exports = __webpack_public_path__ + \"3aeb9dd24809ba3fbd4eeb31a28c3b19.svg\";","module.exports = __webpack_public_path__ + \"6cc6f6773bb6eb26fcef87b9629f7b87.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"24611230ec712ba7ee38b99561aedd87.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { ResourceBlock } from \"./Economy\";\r\n\r\nexport type MechanicalOperation =\r\n    Recipe |\r\n    ResourceGenerator |\r\n    ResourceStorage |\r\n    SpawnClone |\r\n    AccelerateTime |\r\n    Noop\r\n\r\nexport interface Noop {\r\n    type: 'noop'\r\n}\r\n\r\nexport interface Recipe {\r\n    type: 'recipe'\r\n    consumes: ResourceBlock[]\r\n    produces: ResourceBlock\r\n    workTime: number\r\n}\r\n\r\nexport interface ResourceGenerator {\r\n    type: 'generator'\r\n    generates: ResourceBlock\r\n    generationTime: number\r\n    capacity: number\r\n}\r\n\r\nexport interface ResourceStorage {\r\n    type: 'store'\r\n    stores: ResourceBlock[]\r\n    capacity: number\r\n}\r\n\r\nexport interface SpawnClone {\r\n    type: 'spawn'\r\n}\r\n\r\nexport interface AccelerateTime {\r\n    type: 'accelerate'\r\n    factor: number\r\n}\r\n\r\nfunction store(res: ResourceBlock[], capacity: number = 10): ResourceStorage {\r\n    return {\r\n        type: 'store',\r\n        stores: res,\r\n        capacity\r\n    }\r\n}\r\n\r\nfunction generate(res: ResourceBlock, cap: number = 4): ResourceGenerator {\r\n    return {\r\n        type: 'generator',\r\n        generates: res,\r\n        generationTime: 1000,\r\n        capacity: cap\r\n    }\r\n}\r\n\r\nfunction recipe(input: ResourceBlock[], output: ResourceBlock): Recipe {\r\n    return {\r\n        type: 'recipe',\r\n        consumes: input,\r\n        produces: output,\r\n        workTime: 1000,\r\n    }\r\n}\r\n\r\nfunction spawn(): SpawnClone {\r\n    return {\r\n        type: 'spawn',\r\n    }\r\n}\r\n\r\nfunction accelerateTime(): AccelerateTime {\r\n    return {\r\n        type: 'accelerate',\r\n        factor: 2\r\n    }\r\n}\r\n\r\nexport const mechanicalOperations = {\r\n    store,\r\n    generate,\r\n    recipe,\r\n    spawn,\r\n    accelerateTime,\r\n}","import { Input, Scene, Timer, Vector } from \"excalibur\";\r\nimport { Building, structureViews } from \"../actors/Building\";\r\nimport { DevicePlace } from \"../actors/Building/Building\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Game } from \"../Game\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { LivingQuarters, MissionControl, SolarArray, SpaceFunction, CloneReception, Kitchen, Workshop, Archive, Refinery, Mine } from \"../models/SpaceFunction\";\r\nimport { Corridor, HugeRoom, LargeRoom, MainTunnel, MediumRoomThree, SmallDome, SmallRoomThree, Structure, SurfaceRoad } from \"../models/Structure\";\r\nimport { flatSingle, zip } from \"../Util\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { Orientation } from \"../values/Orientation\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    placingFunction: SpaceFunction = null\r\n\r\n    time: number = Game.startHour*60\r\n\r\n    static requiredStructuresAndFunctions: (typeof SpaceFunction | typeof Structure)[] = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        SolarArray,\r\n        // LifeSupportPod,\r\n        MainTunnel,\r\n        Corridor,\r\n        LivingQuarters,\r\n        // CloneMatrix,\r\n        // CloneReception,\r\n        // Kitchen,\r\n        // Workshop,\r\n        // // Study,\r\n        // // Library,\r\n        // Archive,\r\n        // Refinery,\r\n        // Mine,\r\n        // ComputerCore,\r\n        \r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, true, this.time)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        let buildIt = (e) => this.startConstructing(e)\r\n\r\n        this.hud = new Hud(game, buildIt, buildIt, buildIt)\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(\r\n            game.world,\r\n            this.hud,\r\n            (b) => this.hud.showCard(b),\r\n            (d) => this.hud.showCard(d)\r\n        )\r\n\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.pos.y = this.planet.getTop() - 1000\r\n        this.camera.zoom(0.01)\r\n        this.camera.zoom(0.125, 10000)\r\n\r\n        this.addTimer(\r\n            new Timer(() => { this.stepTime() }, this.timeStepIntervalMillis, true)\r\n        )\r\n    }\r\n\r\n    timeStepIntervalMillis: number = 50\r\n    private stepTime() { \r\n        this.time += this.timeStepIntervalMillis / Game.minuteTickMillis  /// this.timeStepIntervalMillis //  0.125 //.25\r\n        this.planet.setTime(this.time) \r\n    }\r\n\r\n    public onActivate() {\r\n        // this.game.controller.activate()\r\n\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n\r\n                // this.camera.pos.x = Math.max(\r\n                //     this.camera.pos.x,\r\n                //     -this.planet.getWidth() ///4\r\n                // )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n\r\n                            if (this.placingFunction) {\r\n                                let fn = this.placingFunction\r\n                                // console.log({ fn, bldg: buildingUnderConstruction })\r\n                                zip(fn.machines, buildingUnderConstruction.devicePlaces()).forEach(([machine, place]: [typeof Machine, DevicePlace]) => {\r\n                                    console.log(\"would add machine\", { machine, place })\r\n                                    let m = (new machine()).concretize()\r\n                                    let device = new Device(m, place.position)\r\n                                    buildingUnderConstruction.addDevice(device)\r\n                                })\r\n                                this.placingFunction = null\r\n                            }\r\n\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            // this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            // this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        let { Up, Down, Left, Right } = Orientation;\r\n        let moveCam = (direction: Orientation) => {\r\n            let camMoveSpeed = 10 * (1/this.camera.getZoom())\r\n            let dv = new Vector(0,0)\r\n            switch(direction) {\r\n            case Left: dv.x = -camMoveSpeed; break\r\n            case Right: dv.x = camMoveSpeed; break\r\n            case Up: dv.y = -camMoveSpeed; break\r\n            case Down: dv.y = camMoveSpeed; break\r\n            }\r\n            // console.log(\"MOVING CAM\", { direction, dv, camMoveSpeed })\r\n            this.camera.move(this.camera.pos.add(dv), 0) //pos.addEqual(dv)\r\n        }\r\n\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                this.planet.colony.currentlyConstructing = null\r\n                this.placingFunction = null\r\n                this.hud.setMessage(this.defaultMessage); //'Welcome to the Colony, Commander.')\r\n            } else if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                moveCam(Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                moveCam(Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                moveCam(Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                moveCam(Right)\r\n            }\r\n        })\r\n        this.game.input.keyboard.on('hold', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                moveCam(Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                moveCam(Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                moveCam(Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                moveCam(Right)\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingStructureOrFunction(): Structure | SpaceFunction {\r\n        let reqs = Construct.requiredStructuresAndFunctions.map(req => new req())\r\n\r\n        let actualStructureNames = this.buildings.map(building => building.structure.name)\r\n        let actualFunctionNames = flatSingle(\r\n            this.buildings.map(building => building.spaceFunction && building.spaceFunction.name)\r\n        )\r\n        let actualNames = [...actualStructureNames, ...actualFunctionNames]\r\n        return reqs.find(req => !actualNames.includes(req.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingStructureOrFunction() //this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.showPalettes()\r\n        }\r\n    }\r\n\r\n    firstBuilding: boolean = true\r\n    startConstructing(structureOrMachine: Structure | Machine | SpaceFunction, pos: Vector = new Vector(0, 0)) {\r\n        this.hud.showCard(structureOrMachine)\r\n        \r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            this.hud.setMessage(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            if (this.firstBuilding) {\r\n                this.camera.zoom(structure.zoom, 250)\r\n                this.camera.pos = theNextOne.pos\r\n                this.firstBuilding = false\r\n            } \r\n        } else if (structureOrMachine instanceof Machine) {\r\n            let machine = structureOrMachine\r\n            this.hud.setMessage(`Install ${machine.name} (${machine.description})`)\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            // this.camera.zoom(1.5, 250)\r\n        } else if (structureOrMachine instanceof SpaceFunction) {\r\n            let fn: SpaceFunction = structureOrMachine\r\n            this.hud.setMessage(`Place ${fn.name} (${fn.description})`)\r\n            theNextOne = this.spawnFunction(fn, pos)\r\n            this.placingFunction = fn\r\n\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        if (device.snap(this.planet)) {\r\n            this.camera.pos = device.pos\r\n \r\n        }\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n\r\n    protected spawnFunction(fn: SpaceFunction, pos: Vector): Building {\r\n        let theStructure: Structure = (fn.structure && new fn.structure()) // || new SmallRoomThree()\r\n        if (!theStructure) {\r\n            theStructure = new SmallRoomThree()\r\n            let machines = fn.machines.map(m => new m())\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Medium)) {\r\n                theStructure = new MediumRoomThree()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Large)) {\r\n                theStructure = new LargeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Huge)) {\r\n                theStructure = new HugeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.forDome)) {\r\n                theStructure = new SmallDome()\r\n            }\r\n        }\r\n\r\n        // console.log(\"SPAWN FUNCTION\", { fn, structure: theStructure })\r\n        let building = this.assembleBuildingFromStructure(theStructure, pos)\r\n        building.reshape(building.constrainCursor(building.pos))\r\n        return building\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Orange, Color.Red, Color.Blue, Color.Green] //, Color.Violet] //, Color.White]\r\n\r\n  color: Color = sample(World.colors).\r\n      clone().\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample(\r\n    //   [ Color.Blue ]\r\n      [Color.Cyan, Color.Vermillion, Color.Violet, Color.Chartreuse, Color.Orange, Color.Rose]\r\n  ).\r\n        clone().\r\n        lighten(0.15).\r\n        desaturate(0.8) //65)\r\n\r\n}","module.exports = __webpack_public_path__ + \"37914c496c3c503f7a53d7c9a1457b53.mp3\";","module.exports = __webpack_public_path__ + \"1b8e735649248c4c552a84996e61f241.mp3\";","module.exports = __webpack_public_path__ + \"1a607294aebce07746d6f25ffa517d80.mp3\";","module.exports = __webpack_public_path__ + \"22bdefc1e8515661fdeb8e8076820641.mp3\";","module.exports = __webpack_public_path__ + \"cf150ab26eba01503f4f6dc3d9ab47f7.mp3\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\nimport { Resources } from './Resources';\r\nimport { Sound } from 'excalibur';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n  // setTimeout(() => {\r\n  //   console.log(\"let's jam!\");\r\n  //   let jam: Sound = Resources.CraterRock //play();\r\n  //   jam.play()\r\n  // }, 1500)\r\n  // jam.oncomplete = () => jam.play()\r\n});\r\n"],"sourceRoot":""}