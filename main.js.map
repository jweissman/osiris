{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Util.ts","webpack:///./src/values/DeviceSize.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/models/Economy.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/models/Machine.ts","webpack:///./src/Painting.ts","webpack:///./src/models/Structure.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/actors/Device.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Building/BackgroundPatterns.ts","webpack:///./src/values/Scale.ts","webpack:///./src/strategies/Strategy.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Resources.ts","webpack:///./src/actors/Hud/MusicPlayer.ts","webpack:///./src/actors/Hud/Palette.ts","webpack:///./src/actors/Hud/CardBody.ts","webpack:///./src/actors/Hud/CardTitle.ts","webpack:///./src/actors/Hud/Card.ts","webpack:///./src/actors/Hud/EconomicValue.ts","webpack:///./src/actors/Hud/EconomyView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/StatusAnalysisView.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/player.ts","webpack:///./src/strategies/ConstructionStrategy.ts","webpack:///./src/strategies/ProximityBasedConstruction.ts","webpack:///./src/values/InteractionRequest.ts","webpack:///./src/strategies/ProductionStrategy.ts","webpack:///./src/strategies/CapacityBasedProduction.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Building/MediumSurfaceRoomView.ts","webpack:///./src/actors/Building/MediumRoomThreeView.ts","webpack:///./src/actors/Building/HugeRoomView.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Building/BigDomeView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallDomeThreeView.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/images/window-bg.png","webpack:///./src/images/beige-bg.png","webpack:///./src/images/checker-bg.png","webpack:///./src/images/tech-bg.png","webpack:///./src/images/poster-wall-bg.png","webpack:///./src/images/books-bg.png","webpack:///./src/images/leafy-bg.png","webpack:///./src/images/raised-square-bg.png","webpack:///./src/images/fabricator-plain.svg","webpack:///./src/images/mega-console-plain.svg","webpack:///./src/images/console-red-plain.svg","webpack:///./src/images/console-green-plain.svg","webpack:///./src/images/console-purple-plain.svg","webpack:///./src/images/console-plain.svg","webpack:///./src/images/workstation-plain.svg","webpack:///./src/images/houseplant-plain.svg","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/models/MechanicalOperation.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/sounds/understanding.mp3","webpack:///./src/sounds/indivision.mp3","webpack:///./src/sounds/assembler.mp3","webpack:///./src/sounds/crater-rock.mp3","webpack:///./src/images/sword.png","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","deleteByValueOnce","index","indexOf","eachCons","measureDistance","b","sleep","ms","Promise","resolve","setTimeout","shuffle","sort","zip","countOccurrences","counts","forEach","containsUniq","testElems","doesContain","arrCopy","missingItem_1","testElem","find","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","Huge","getVisibleDeviceSize","size","sz","third","fifth","eighth","Building_1","Building","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","SurfaceRoadView_1","SurfaceRoadView","SmallDomeThreeView_1","SmallDomeThreeView","MidDomeView_1","MidDomeView","BigDomeView_1","BigDomeView","SmallRoomThreeView_1","SmallRoomThreeView","MediumRoomView_1","MediumRoomView","LargeRoomView_1","LargeRoomView","HugeRoomView_1","HugeRoomView","MediumRoomThreeView_1","MediumRoomThreeView","MediumSurfaceRoomView_1","MediumSurfaceRoomView","structureViews","excalibur_1","Orientation_1","Game_1","Util_1","Graph_1","Economy_1","SpaceFunction_1","DeviceSize_1","BackgroundPatterns_1","Painting_1","DevicePlace","pos","this","_super","structure","planet","_this","x","y","width","height","infra","color","darken","Color","Transparent","edgeWidth","placed","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","devices","active","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","some","currentlyViewing","toggleActive","collisionType","CollisionType","PreventCollision","nameLabel","Label","White","__extends","draw","ctx","delta","drawRect","aabb","processedColor","getCenter","measureText","Game","debugPath","slots","slot","rect","Gray","lighten","nodes","node","Yellow","devicePlaces","place","position","visibleSize","update","engine","device","tryProduce","spaceFunction","description","economy","emptyUnlessActive","isActive","emptyMarket","machineEconomies","buildingEconomy","__assign","Oxygen","demand","supply","sumMarkets","inUse","equilibrium","agg","constrainCursor","clone","reshape","afterConstruct","handleClick","_pos","getWidth","getHeight","graph","supergraph","Graph","g","rootNode","findOrCreate","_i","_a","child","parentSlot","edge","childNode","redeem","res","gather","debit","spend","populate","elite","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","bldg","edgeColor","mainColor","colorBase","clr","Red","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","closestBuildingByType","building","matchingSlot","compass_1","compass","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","subEqual","add","updateFunction","machine","onPlacement","hasPlaceForDevice","nextDevicePlace","getDevices","allSpaceFunctions","spaceFn","matched","unseenDevices","machines","matchingDevice","sf","text","console","warn","background","BackgroundPattern","Grid","Actor","PureValue","availableCapacity","market","Power","Water","Shelter","Hope","Joy","Wisdom","Wealth","Beauty","Wonder","allValues","ea","eb","newMarket","sa","da","_b","every","ResourceBlock","Biomass","Ore","Idea","Meal","Data","Mineral","Bioplasma","Alloy","Algorithm","Argent","Aurum","Omnium","blockColors","Green","Blue","cStep","Viridian","DarkGray","Orange","blockColor","block","desaturate","t","Left","Up","Down","orientation","Error","MechanicalOperation_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","plant","workstation","consolePurple","consoleGreen","consoleRed","megaconsole","fabricator","Violet","store","mechanicalOperations","generate","recipe","spawn","accelerateTime","Machine","LightGray","cost","operation","type","image","prereqs","forDome","hide","concretize","CommandCenter","arguments","built","produceResource","MissionLog","OxygenExtractor","WaterCondensingMachine","SolarCell","StudyMachine","Workstation","Desk","Bookshelf","Fridge","Stove","Bed","Houseplant","PersonnelRegistry","CloningVat","OrientationConsole","productionTime","AlgaeVat","DissolutionVat","PlasmaBank","Fabricator","LifeSciencesConsole","Botany","MetalStorage","ResearchServer","Orchard","Cabin","Arbor","MineralProcessor","ThinkingFountain","MolecularEngine","fromHex","SilverForest","Megafabricator","TimeCrystal","MiningDrill","Mainframe","Preserve","LogicPool","Microcity","LogicCrystal","allMachines","drawLine","lineWidth","beginPath","moveTo","lineTo","strokeStyle","toRGBA","stroke","drawPatternedRect","pattern","gridPattern","getBackgroundPattern","fillStyle","fillRect","setLineDash","strokeRect","rectangle","filled","dashed","main","drawStar","cx","cy","outerRadius","innerRadius","spikes","rot","PI","cos","sin","closePath","Machine_1","smallMachines","mediumMachines","largeMachines","hugeMachines","smallDome","smallBelow","midDome","midBelow","largeDome","largeBelow","hugeDome","hugeBelow","Structure","view","zoom","Corridor","Ladder","MainTunnel","second","MediumSurfaceRoom","SurfaceRoad","first","Dome","CommonArea","SmallRoomThree","sixth","SmallRoomTwo","SmallDome","MediumRoom","MediumRoomThree","LargeRoom","HugeRoom","seventh","SmallDomeThree","MidDome","LargeDome","Arcology","allStructures","Structure_1","SpaceFunction","Beige","bonuses","capacity","workSpeed","MissionControl","Window","LivingQuarters","Barracks","Kitchen","Checker","LifeSupportPod","Retreat","CloneMatrix","CloneReception","ReadingRoom","Library","Books","Study","ComputerLab","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Leafy","Farm","Factory","ComputerCore","Tech","LifeSciencesLab","Refinery","Mine","Device","initialPos","product","imageLoaded","fontSize","Image","onload","src","globalAlpha","drawImage","imageX","imageY","iv","bx","by","yOff","produced","blockSize","assemble","citizen","isCarryingUnique","progressBar","sent","drop","label","interact","request","worked","op","recipe_1","carrying","it","consumes","includes","consumed","workTime","getEffectiveWorkTime","carry","produces","requires","has","store_1","dispense","stores","getEffectiveOperationalCapacity","res_1","stored","bonus","round","resource","generationTime","generates","snap","snapped","Resources_1","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","start","loader","Loader","key","Resources","addResource","citizenSpeed","Engine","raisedSquare","leafy","bookish","posters","tech","checker","beige","loadBg","path","loading","Poster","backgroundPatterns","bg","createPattern","majorUnit","fourth","minorUnit","minorScale","InteractionRequest_1","Strategy","pawn","sleepInterval","currentPlanet","findPoweredDevices","recipes","operations","attempt","pause","gatherBlock","log","gathered","generatesDesiredBlock","gen","closestDeviceByType","storesDesiredBlock","visitDevice","retrieveResource","visit","workRecipe","gatherIngredients","knowsRecipe","maker","performRecipeTask","blocks","blocks_1","ingredient","empty","edges","edgesInverse","isEmpty","newNode","contains","testNode","measure","tolerance","dfs","dst","union","otherGraph","edgeList","theEdges","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","tries","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","steps","srcIndex","reverse","ex","sword","craterRock","assembler","indivision","understanding","Sword","Texture","CraterRock","Sound","Assembler","Indivision","Understanding","MusicPlayer","playlist","makePlayer","startMusic","_titleElem","textContent","currentTrack","keys","play","_element","left","canvas","offsetLeft","top_1","offsetTop","_wrapper","style","top","document","createElement","textAlign","border","body","appendChild","display","fontFamily","padding","inlineBlock","iconFactory","handleAction","action","song","stop","ndx","trackNames","append","iconContent","fg","icon","innerHTML","onclick","Palette","all","onButtonClick","onButtonEnter","comprehend","comprehended","makePalette","updateBuilt","prereq","parentElement","removeChild","title","fontWeight","margin","btn","buttonFactory","onmouseenter","paletteButton","textTransform","onmouseover","saturate","onmouseleave","Device_1","CardBody","entity","describeResources","freqs","join","values","notes","fontStyle","FontStyle","Italic","footer","show","describeEconomy","bonusMessages","econ","CardTitle","Black","announce","CardTitle_1","CardBody_1","Card","x0","cardBody","y0","ix","iy","present","EconomicValue","valueLabel","setCount","count","EconomicValue_1","EconomyView","valueLabels","allValues_1","updateView","updatedEconomy","allValues_2","ResourceListEntry","resourceBlock","credit","amt","ResourceListEntry_1","ResourcesList","entries","rx","ry","entry","increment","decrement","ResourcesList_1","EconomyView_1","StatusAnalysisView","w","h","brand","ty","version","resources","popLabel","messageLabel","incrementResource","decrementResource","setMessage","showEconomy","showPopCap","cap","StatusAnalysisView_1","Card_1","Palette_1","MusicPlayer_1","Hud","game","onBuildingSelect","onMachineSelect","onFunctionSelect","canvasWidth","canvasHeight","hidePalettes","status","displayInfo","showCard","structurePalette","structuresForPalette","machinePalette","functionPalette","functionsForPalette","card","musicPlayer","Crater Rock","showPalettes","resourceGathered","resourceExpended","updateDetails","rebuildPalettes","updatePalettes","updateEconomy","updateMaxPop","maxPop","updateBuildingPalette","updateMachinePalette","updateFunctionPalette","builtStructures","findAllDevices","builtMachines","machinesForPalette","builtReifiedFunctions","builtFunctions","rf","UIActor","Player","setWidth","setHeight","Strategy_1","ConstructionStrategy","canApply","unbuiltDevice","storedResources","ProxmityBasedConstruction","constructDevice","ProductionStrategy","storeBlock","openStore","CapacityBasedProduction","storeWithCapacity","storage_1","recipeForStoredResource","CapacityBasedProduction_1","ProximityBasedConstruction_1","Citizen","home","isPlanning","workInProgress","currentBuilding","productionStrategy","constructionStrategy","timeFactor","work","now","Date","getTime","progress","workStarted","workDuration","carried","px","pw","py","c_1","duration","reject","pathBetweenPoints","followPath","target","glideTo","actions","walkSpeed","asPromise","Citizen_1","Population","citizens","increase","NavigationTree","seekPath","origin","dest","closestNode","abs","NavigationTree_1","Colony","currentlyConstructing","debugTree","navTree","gradient","createLinearGradient","addColorStop","placeBuilding","buildNavTree","structureTypes","st","pathBetween","destination","srcNode","destNode","machineTypes","ctrl","activeBuildings","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","yBase","peak","mtnWidth","PlanetBackground","devicePlaceSize","devicePlaceCount","sg","leftSlot","rightSlot","right","theSlots","slotY","getTop","backgroundPattern","flagX","flagY","_1","floorHeight","originSlot","pickingOrigin","maxHeight","drawShape","xoff","yoff","bezierCurveTo","halfWidth","slotHeights","heights","y1","btm","lst","slotCount","arc","floorColor","originX","newCursor","input","output","factor","setPrototypeOf","__proto__","constructor","create","PlanetBackground_1","Colony_1","Population_1","Planet","hud","onBuildingHover","onDeviceHover","depth","createLayer","layerHeight","population","set","buildingOrDevice","theLayer","theEconomy","popularDemand","theEconomyWithoutPeople","val","closestDevice","acc","Planet_1","player_1","Hud_1","Construct","dragging","defaultMessage","placingFunction","firstBuilding","buildIt","startConstructing","player","prepareNextBuilding","camera","onActivate","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction_1","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","Esc","onDeactivate","off","nextMissingStructureOrFunction","reqs","requiredStructuresAndFunctions","req","actualStructureNames","actualFunctionNames","actualNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","spawnFunction","anotherBuilding","assembleBuildingFromStructure","theStructure","Scene","World","colors","Cyan","Vermillion","bestowName","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([90,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { getBackgroundPattern, BackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport const deleteByValueOnce = (arr, elem) => {\r\n  let index = arr.indexOf(elem);\r\n  if (index !== -1) arr.splice(index, 1);\r\n}\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function shuffle(arr) {\r\n   return arr.sort(() => Math.random() > 0.5 ? 1 : -1) \r\n}\r\n\r\nexport const zip = (a, b) => a.map((e,i) => [e, b[i]])\r\n\r\nexport const countOccurrences = (arr) => {\r\n  let counts = {}\r\n  arr.forEach((elem) => {\r\n    counts[elem] = counts[elem] || 0\r\n    counts[elem] += 1\r\n  })\r\n  return counts\r\n}\r\n\r\n\r\nexport const containsUniq = (arr, testElems) => {\r\n  let doesContain = false\r\n  let arrCopy = arr.slice()\r\n  if (arr.length > 0) {\r\n    let missingItem = false\r\n    testElems.forEach(testElem => {\r\n      if (arrCopy.find(e => e === testElem)) {\r\n        deleteByValueOnce(arrCopy, testElem)\r\n      } else {\r\n        missingItem = true\r\n      }\r\n    })\r\n    doesContain = !missingItem\r\n  }\r\n  return doesContain\r\n}","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large,\r\n    Huge\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.fifth; break;\r\n        case DeviceSize.Large: sz = major.eighth + major.third; break;\r\n        case DeviceSize.Huge: sz = 6 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\nimport { SmallDomeThreeView } from './SmallDomeThreeView';\r\nimport { MidDomeView } from './MidDomeView';\r\nimport { BigDomeView } from './BigDomeView';\r\nimport { SmallRoomThreeView } from './SmallRoomThreeView';\r\nimport { MediumRoomView } from './MediumRoomView';\r\nimport { LargeRoomView } from './LargeRoomView';\r\nimport { HugeRoomView } from './HugeRoomView';\r\nimport { MediumRoomThreeView } from './MediumRoomThreeView';\r\nimport { MediumSurfaceRoomView } from './MediumSurfaceRoomView';\r\n\r\n\r\nconst structureViews: { [key: string]: typeof Building } = {\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n    MediumSurfaceRoomView,\r\n}\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView,\r\n    LadderView,\r\n    TunnelView,\r\n    SurfaceRoadView,\r\n\r\n    DomeView, // small dome 2\r\n    SmallDomeThreeView,\r\n    MidDomeView,\r\n    BigDomeView,\r\n\r\n    SmallRoomThreeView,\r\n\r\n    CommonAreaView,\r\n    MediumRoomView,\r\n    MediumRoomThreeView,\r\n\r\n    LargeRoomView,\r\n    HugeRoomView,\r\n\r\n    ArcologyView,\r\n\r\n    MediumSurfaceRoomView,\r\n\r\n\r\n    structureViews\r\n\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, deleteByValue } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock, emptyMarket, Economy, sumMarkets, equilibrium } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { World } from \"../../models/World\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { EconomicValue } from \"../Hud/EconomicValue\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0\r\n\r\n    nameLabel: Label\r\n\r\n    placed: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    spaceFunction: SpaceFunction\r\n\r\n    private devices: Device[] = []\r\n    givenName: string\r\n\r\n    private active: boolean = true\r\n    // private built: boolean = false\r\n\r\n    constructor(pos: Vector, public structure: Structure, public planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          structure.infra ? planet.color.darken(0.3) : Color.Transparent\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            if (!this.devices.some(d => d.hover)) {\r\n                this.planet.currentlyViewing = this\r\n            }\r\n        })\r\n\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED BUILDING\", { building: this })\r\n            this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.color = Color.White\r\n\r\n        if (this.structure.infra) { this.active = true }\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        // this.devices.forEach(device => device.draw(ctx, delta))\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n        }\r\n\r\n        // let debug = true;\r\n        if (Game.debugPath) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = true\r\n        if (showDevicePlaces && this.devicePlaces().length > 0) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    0.1,\r\n                    Color.White,\r\n                    false,\r\n                    true\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n\r\n        let tryProduce = this.placed;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.tryProduce(this.step));\r\n        }\r\n\r\n        // this.devices.forEach(d => d.update(engine, delta))\r\n\r\n        this.step += 1\r\n    }\r\n\r\n    get name() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.name\r\n        } else {\r\n            return this.structure.name\r\n        }\r\n    }\r\n\r\n    get description() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.description\r\n        } else {\r\n            return this.structure.description\r\n        }\r\n    }\r\n\r\n    economy(emptyUnlessActive: boolean = true): Economy {\r\n        if (emptyUnlessActive && !this.isActive) {\r\n            return emptyMarket()\r\n        } else {\r\n            let machineEconomies = this.devices.map(d => d.economy)\r\n            //machine.economy)\r\n\r\n            let buildingEconomy = {\r\n                ...emptyMarket(),\r\n                Oxygen: { demand: 1, supply: 0 }, // structural demand\r\n                // Water: { demand: 0.1, supply: 0 },\r\n            }\r\n\r\n            let aggregate = [...machineEconomies, buildingEconomy]\r\n                .reduce(sumMarkets, emptyMarket())\r\n\r\n            return aggregate\r\n        }\r\n    }\r\n\r\n    private toggleActive() {\r\n        if (!this.structure.infra) {\r\n            if (this.active) {\r\n                if (this.devices.some(d => d.inUse)) { return }\r\n                this.active = false\r\n                if (!equilibrium(this.planet.economy)) {\r\n                    this.active = true\r\n                }\r\n            } else { // this.active is false now\r\n                let agg = [\r\n                    this.planet.economy,\r\n                    this.economy(false)\r\n                ].reduce(sumMarkets, emptyMarket())\r\n\r\n                if (equilibrium(agg)) {\r\n                    this.active = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get isActive() { return !!this.active }\r\n\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public debit(res: ResourceBlock) {\r\n        this.planet.spend(res)\r\n    }\r\n\r\n    public populate(pos: Vector, elite: boolean = false) {\r\n        this.planet.populate(pos, elite) //this.pos)\r\n    }\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.placed)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (!this.active) {\r\n            clr = clr.darken(0.8)\r\n        }\r\n\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            // console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        // device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        device.pos.subEqual(this.pos) // = this.devicePlaces()[0].position\r\n        // console.log(\"DEVICE IS AT\", { pos: device.pos })\r\n        this.add(device)\r\n        this.updateFunction()\r\n        device.machine.onPlacement(device)\r\n        this.toggleActive()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices //.filter(d => d.built)\r\n    }\r\n\r\n    private updateFunction() {\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let matched = true;\r\n            let unseenDevices = this.devices.slice()\r\n            let sf = new spaceFn()\r\n            sf.machines.forEach((machine: typeof Machine) => {\r\n                let matchingDevice = unseenDevices.find(d => d.machine instanceof machine)\r\n                if (!matchingDevice) { matched = false; }\r\n                unseenDevices = deleteByValue(unseenDevices, matchingDevice)\r\n            })\r\n            return matched;\r\n        })\r\n        if (fn) {\r\n            // console.log(\"Determined building function\", { fn })\r\n            let sf = new fn()\r\n            this.spaceFunction = sf\r\n            this.nameLabel.text = sf.name\r\n        } else {\r\n            console.warn(\"Could not identify function!\")\r\n        }\r\n    }\r\n\r\n    get backgroundPattern() {\r\n        if (this.spaceFunction) {\r\n            return this.spaceFunction.background\r\n        } else {\r\n            return BackgroundPattern.Grid\r\n        }\r\n    }\r\n}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Oxygen = 'Oxygen',\r\n    Water = 'Water',\r\n    Shelter = 'Shelter',\r\n    Hope = 'Hope',\r\n    Joy = 'Joy',\r\n    Wisdom = 'Wisdom',\r\n    Wealth = 'Wealth',\r\n    Beauty = 'Beauty',\r\n    Wonder = 'Wonder'\r\n}\r\n\r\nexport const allValues: PureValue[] = [\r\n    PureValue.Power,\r\n    PureValue.Oxygen,\r\n    PureValue.Water,\r\n    PureValue.Shelter,\r\n    PureValue.Hope,\r\n    PureValue.Wisdom,\r\n    PureValue.Wealth,\r\n    PureValue.Beauty,\r\n    PureValue.Wonder\r\n]\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport function emptyMarket() : Economy {\r\n    return {\r\n        Power: { supply: 0, demand: 0 },\r\n        Oxygen: { supply: 0, demand: 0 },\r\n        Water: { supply: 0, demand: 0 },\r\n        Shelter: { supply: 0, demand: 0 },\r\n        Hope: { supply: 0, demand: 0 },\r\n        Joy: { supply: 0, demand: 0 },\r\n        Wealth: { supply: 0, demand: 0 },\r\n        Wisdom: { supply: 0, demand: 0 },\r\n        Beauty: { supply: 0, demand: 0 },\r\n        Wonder: { supply: 0, demand: 0 },\r\n    }\r\n}\r\n\r\nexport function availableCapacity(market: Economy, value: PureValue) {\r\n    return Math.floor(market[value].supply - market[value].demand)\r\n}\r\n\r\nexport const sumMarkets: (ea: Economy, eb: Economy) => Economy = (ea, eb) => {\r\n    let newMarket = emptyMarket();\r\n    for (let value in PureValue) {\r\n        let { supply: sa, demand: da } = ea[value]\r\n        let { supply: sb, demand: db } = eb[value]\r\n        let supply = sa + sb\r\n        let demand = da + db\r\n        newMarket[value] = {\r\n            supply,\r\n            demand,\r\n        }\r\n    }\r\n    return newMarket\r\n}\r\n\r\nexport const equilibrium: (e: Economy) => boolean = (e) => {\r\n    return allValues.every(value => availableCapacity(e, value) >= 0)\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Biomass = 'Biomass',\r\n    Ore = 'Ore',\r\n    Idea = 'Idea',\r\n\r\n    // derived\r\n    Meal = 'Meal',\r\n    Data = 'Data',\r\n    Mineral = 'Mineral',\r\n    Bioplasma = 'Bioplasma',\r\n\r\n    // higher-order\r\n    Alloy = \"Alloy\",\r\n    Algorithm = \"Algorithm\",\r\n\r\n    // superb\r\n    Argent = \"Argent\",\r\n    Aurum = \"Aurum\",\r\n\r\n    // hyperbolic\r\n    Omnium = \"Omnium\",\r\n}\r\n\r\nlet cStep = 0.3\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Biomass: Color.Green,\r\n    Data: Color.Blue.lighten(cStep),\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(cStep),\r\n    Idea: Color.Blue.lighten(cStep*2), //.desaturate(cStep),\r\n    Ore: Color.Red.darken(cStep),\r\n\r\n    Bioplasma: Color.Viridian,\r\n\r\n    Alloy: Color.DarkGray.darken(cStep), //(cStep),\r\n    Algorithm: Color.Blue.darken(cStep), //.desaturate(cStep),\r\n\r\n    Argent: Color.Gray.lighten(cStep),\r\n    Aurum: Color.Orange.lighten(cStep),\r\n\r\n    Omnium: Color.White,\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    return baseColor.desaturate(0.1) //.lighten(0.1) //.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { ResourceBlock, Economy, emptyMarket } from \"./Economy\";\r\nimport { Color, FontStyle, Resource } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\nimport { MechanicalOperation, mechanicalOperations } from \"./MechanicalOperation\";\r\nimport { shuffle, range } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\nconst plant = require('../images/houseplant-plain.svg')\r\nconst workstation = require('../images/workstation-plain.svg')\r\n\r\nconst console = require('../images/console-plain.svg')\r\nconst consolePurple = require('../images/console-purple-plain.svg')\r\nconst consoleGreen = require('../images/console-green-plain.svg')\r\nconst consoleRed = require('../images/console-red-plain.svg')\r\nconst megaconsole = require('../images/mega-console-plain.svg')\r\n\r\nconst fabricator = require('../images/fabricator-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n    plant,\r\n    workstation,\r\n\r\n    console,\r\n    consolePurple,\r\n    consoleGreen,\r\n    consoleRed,\r\n    megaconsole,\r\n\r\n    fabricator,\r\n}\r\n\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nlet { store, generate, recipe, spawn, accelerateTime } = mechanicalOperations\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n\r\n    cost: ResourceBlock[] = [ResourceBlock.Mineral]\r\n\r\n    size: DeviceSize = DeviceSize.Small\r\n    operation: MechanicalOperation = { type: 'noop' }\r\n    image = images.vat\r\n    prereqs: (typeof Machine)[] = []\r\n    economy: Economy = emptyMarket()\r\n    forDome: boolean = false\r\n    hide: boolean = false\r\n\r\n    capacity: boolean\r\n\r\n\r\n    concretize(): Machine { return this; } \r\n\r\n    onPlacement(device: Device) {\r\n        // ...whatever we need to script here?\r\n    }\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command Console'\r\n    description = 'commander, we need your help'\r\n    operation = store(\r\n        [ResourceBlock.Mineral], //,ResourceBlock.Biomass],\r\n        24\r\n    )\r\n    image = images.megaconsole\r\n    size = DeviceSize.Medium\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 6, demand: 0 },\r\n        Oxygen: { supply: 20, demand: 0 },\r\n        Water: { supply: 10, demand: 0 },\r\n        Hope: { supply: 1, demand: 0 },\r\n        Shelter: { supply: 2, demand: 0}\r\n    }\r\n\r\n    onPlacement(device: Device) {\r\n        device.built = true\r\n        for (let i in range(20)) {\r\n            device.produceResource(ResourceBlock.Mineral)\r\n        }\r\n        let { building } = device\r\n        building.populate(device.pos.add(building.pos), true)\r\n    }\r\n}\r\n\r\nexport class MissionLog extends Machine {\r\n    name = 'Mission Log'\r\n    description = 'gather data'\r\n    operation = store(\r\n        [ResourceBlock.Data],\r\n        8\r\n    )\r\n    image = images.consolePurple\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n//export class Energon extends Machine {\r\n//    name = 'Energon'\r\n//    description = 'food paste'\r\n//}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 3, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 5, demand: 0 },\r\n    }\r\n}\r\n\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H20 Condenser'\r\n    description = 'have a drink'\r\n    prereqs = [ SolarCell ]\r\n\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 4, demand: 0 },\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n/// small subsurface\r\n\r\nexport class StudyMachine extends Machine {\r\n    operation = recipe(\r\n        [ ResourceBlock.Idea, ResourceBlock.Idea, ResourceBlock.Idea ],\r\n        ResourceBlock.Data\r\n    )\r\n    color = Blue\r\n    concretize(): Machine { return new (shuffle([Workstation, Desk])[0])() }\r\n}\r\n\r\nexport class Desk extends StudyMachine {\r\n    name = 'Desk'\r\n    description = 'get to work'\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n    concretize() { return this }\r\n}\r\n\r\nexport class Workstation extends StudyMachine {\r\n    name = 'Workstation'\r\n    description = 'hackety hack'\r\n    prereqs = [ Bookshelf ]\r\n    image = images.workstation\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n    concretize() { return this }\r\n}\r\n\r\n\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    operation = generate(ResourceBlock.Idea)\r\n    image = images.bookshelf\r\n    prereqs = [ OxygenExtractor, Desk ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    operation = store([ResourceBlock.Meal], 6)\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    operation = recipe(\r\n        [ResourceBlock.Biomass, ResourceBlock.Biomass],\r\n        ResourceBlock.Meal\r\n    )\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    description = 'sweet dreams'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Shelter: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    description = 'so nice'\r\n    prereqs = [ Bed ]\r\n    // produces = ResourceBlock.Food\r\n    cost = [ ResourceBlock.Biomass ]\r\n    operation = generate(ResourceBlock.Biomass, 1)\r\n    color = Green\r\n    image = images.plant\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Oxygen: { supply: 1, demand: 0 },\r\n        Water: { supply: 0, demand: 0.1 },\r\n    }\r\n}\r\n\r\nexport class PersonnelRegistry extends Machine {\r\n    name = 'Personnel Registry'\r\n    description = 'track everybody'\r\n    prereqs = [ CloningVat ]\r\n    operation = store([ResourceBlock.Data], 4)\r\n    color = Yellow\r\n    image = images.console\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Wisdom: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class OrientationConsole extends Machine {\r\n    name = 'Orientation Console'\r\n    description = 'welcome to the colony'\r\n    prereqs = [CloningVat]\r\n    operation = generate(ResourceBlock.Data, 1)\r\n    image = images.consoleRed\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.1 },\r\n        Hope: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'we all grow'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = spawn()\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class DissolutionVat extends Machine {\r\n    name = 'Dissolution Vat'\r\n    description = 'back to basics'\r\n    // behavior = MachineOperation.SpawnCitizen \r\n    operation = recipe(\r\n        [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n        ResourceBlock.Bioplasma\r\n    )\r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [PlasmaBank]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class PlasmaBank extends Machine {\r\n    name = 'Bioplasm Bank'\r\n    description = 'hold on'\r\n    operation = store([ ResourceBlock.Bioplasma ])\r\n    prereqs = [AlgaeVat]\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    description = 'you made that'\r\n    operation = recipe(\r\n        [ResourceBlock.Mineral, ResourceBlock.Mineral],\r\n         ResourceBlock.Alloy\r\n    )\r\n    size = DeviceSize.Small\r\n    color = Red\r\n    prereqs = [Workstation]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n    }\r\n    image = images.fabricator\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    description = 'where there is a will'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Small\r\n    color = Violet\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class LifeSciencesConsole extends Machine {\r\n    name = 'Life Sciences Console'\r\n    description = 'mind and body together'\r\n    operation = store([ResourceBlock.Biomass, ResourceBlock.Data], 5)\r\n    prereqs = [Houseplant, Botany]\r\n    color = Green\r\n    image = images.consoleGreen\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 0.2 },\r\n    }\r\n}\r\n\r\n// medium\r\n\r\nexport class MetalStorage extends Machine {\r\n    name = 'Metal Storage'\r\n    description = 'contain minerals and alloys?'\r\n    operation = store([ResourceBlock.Mineral, ResourceBlock.Alloy], 8)\r\n    prereqs = [Bookshelf]\r\n    color = Red\r\n    size = DeviceSize.Medium\r\n}\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    operation = store([ResourceBlock.Data, ResourceBlock.Algorithm], 10)\r\n    image = images.server\r\n    prereqs = [Bookshelf]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 4 },\r\n    }\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   operation = generate(ResourceBlock.Biomass)\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Oxygen: { supply: 2, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   description = 'home on the plains'\r\n   operation = recipe(\r\n       [ ResourceBlock.Biomass, ResourceBlock.Biomass ],\r\n       ResourceBlock.Meal\r\n   )\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n        Water: { supply: 0, demand: 1 },\r\n        Shelter: { supply: 4, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    description = 'arbor around the clock'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    forDome = true\r\n}\r\n\r\n\r\nexport class Botany extends Machine {\r\n    name = 'Botany'\r\n    description = 'plant lab'\r\n    operation = generate(ResourceBlock.Biomass)\r\n    prereqs = [ OxygenExtractor, Bookshelf ]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\n\r\nexport class MineralProcessor extends Machine {\r\n    name = 'Mineral Processor'\r\n    description = 'wheat from the chaff'\r\n    operation = recipe(\r\n        [ResourceBlock.Ore, ResourceBlock.Ore, ResourceBlock.Ore],\r\n         ResourceBlock.Mineral\r\n    )\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    prereqs = [Workstation, Fabricator]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 2 },\r\n    }\r\n}\r\n\r\nexport class ThinkingFountain extends Machine {\r\n    name = 'Thinking Fountain'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = generate(ResourceBlock.Aurum, 8)\r\n    cost = [ResourceBlock.Aurum]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\nexport class SilverForest extends Machine {\r\n    name = 'Silver Forest'\r\n    size = DeviceSize.Medium\r\n    prereqs = [ Megafabricator ]\r\n    color = Color.fromHex('c0c0c0')\r\n    operation = store([ResourceBlock.Argent], 12)\r\n    cost = [ResourceBlock.Argent]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Beauty: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n    forDome = true\r\n}\r\n\r\nexport class TimeCrystal extends Machine {\r\n    name = 'Time Crystal'\r\n    size = DeviceSize.Medium\r\n    color = Color.fromHex('e5e4e2')\r\n    operation = accelerateTime()\r\n    cost = [ResourceBlock.Omnium]\r\n    prereqs = []\r\n    // onPlacement(device: Device) {\r\n        // device.building.planet.updateSpeeds()\r\n    // }\r\n}\r\n\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    description = 'ore away'\r\n    operation = generate(ResourceBlock.Ore)\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 5 },\r\n    }\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n    operation = recipe(\r\n        [ResourceBlock.Alloy, ResourceBlock.Algorithm],\r\n        ResourceBlock.Argent\r\n    )\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 8 },\r\n    }\r\n}\r\n\r\nexport class MolecularEngine extends Machine {\r\n    name = 'Molecular Engine'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Megafabricator ]\r\n    color = Violet\r\n    operation = recipe(\r\n        [ResourceBlock.Bioplasma, ResourceBlock.Algorithm],\r\n        ResourceBlock.Aurum\r\n    )\r\n    image = images.megaconsole\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 3 },\r\n        Water: { supply: 0, demand: 1 },\r\n    }\r\n}\r\n\r\nexport class Mainframe extends Machine {\r\n    name = 'Mainframe'\r\n    size = DeviceSize.Large\r\n    color = Blue\r\n    prereqs = [ResearchServer]\r\n    cost = [ ResourceBlock.Mineral, ResourceBlock.Mineral ]\r\n    operation = recipe(\r\n        [ ResourceBlock.Data, ResourceBlock.Data ],\r\n        ResourceBlock.Algorithm\r\n    )\r\n    image = images.server\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Power: { supply: 0, demand: 6 },\r\n    }\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n    forDome = true\r\n    // operation = generate()\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 4 },\r\n        Oxygen: { supply: 12, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicPool extends Machine {\r\n    name = 'Logic Pool'\r\n    size = DeviceSize.Large\r\n    prereqs = [ MolecularEngine ]\r\n    color = Color.fromHex('daa520')\r\n    operation = store([ResourceBlock.Algorithm, ResourceBlock.Aurum], 18)\r\n    cost = [ResourceBlock.Aurum]\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Wisdom: { supply: 2, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 }\r\n    }\r\n}\r\n\r\n\r\n\r\n/// huge devices\r\n\r\nexport class Microcity extends Machine {\r\n    name = 'Microcity'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Orange\r\n    forDome = true\r\n    economy = {\r\n        ...emptyMarket(),\r\n        Water: { supply: 0, demand: 2 },\r\n        Power: { supply: 0, demand: 2 },\r\n        Joy: { supply: 5, demand: 0 },\r\n        Hope: { supply: 5, demand: 0 },\r\n        Beauty: { supply: 1, demand: 0 },\r\n        Wonder: { supply: 1, demand: 0 },\r\n    }\r\n}\r\n\r\nexport class LogicCrystal extends Machine {\r\n    name = 'Logic Crystal'\r\n    size = DeviceSize.Huge\r\n    prereqs = [ Megafabricator ]\r\n    color = Blue\r\n}\r\n\r\n// export class MiniSun extends Machine {}\r\n\r\nexport const allMachines = [\r\n    AlgaeVat,\r\n    Arbor,\r\n    Bed,\r\n    Bookshelf,\r\n    Cabin,\r\n    CloningVat,\r\n    Desk,\r\n    Fabricator,\r\n    Fridge,\r\n    Houseplant,\r\n    Megafabricator,\r\n    MiningDrill,\r\n    Orchard,\r\n    OxygenExtractor,\r\n    Preserve,\r\n    ResearchServer,\r\n    SolarCell,\r\n    Stove,\r\n    WaterCondensingMachine,\r\n    Workstation,\r\n    Microcity,\r\n    LogicCrystal,\r\n    Botany,\r\n\r\n    MineralProcessor,\r\n    PlasmaBank,\r\n    DissolutionVat,\r\n    MetalStorage,\r\n    Mainframe,\r\n\r\n    PersonnelRegistry,\r\n    MolecularEngine,\r\n    ThinkingFountain,\r\n    SilverForest,\r\n\r\n    OrientationConsole,\r\n    LifeSciencesConsole,\r\n    // TimeCrystal,\r\n\r\n]","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\nimport { BackgroundPattern, getBackgroundPattern } from \"./actors/Building/BackgroundPatterns\";\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\n// let gridPattern;\r\n// let loadingPattern  = false\r\nexport function drawPatternedRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rect: Rectangle,\r\n  pattern: BackgroundPattern = BackgroundPattern.Grid\r\n) {\r\n  const gridPattern = getBackgroundPattern(ctx, pattern) // BackgroundPattern.Grid)\r\n  if (gridPattern) {\r\n    let { x, y, width, height } = rect;\r\n    ctx.fillStyle = gridPattern\r\n    ctx.fillRect(x,y,width,height)\r\n\r\n    ctx.lineWidth = 2\r\n    ctx.setLineDash([])\r\n    ctx.strokeStyle = Color.White.toRGBA()\r\n    ctx.strokeRect(x,y,width,height)\r\n  }\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true,\r\n  dashed: boolean = false\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  // if (edgeWidth > 0) {\r\n  //   let edge = Color.White;\r\n  //   ctx.fillStyle = edge.toRGBA();\r\n  //   ctx.fillRect(x, y, width, height)\r\n  // }\r\n\r\n  if (filled) {\r\n    let main = color;\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x, //+ edgeWidth,\r\n      y, //+ edgeWidth,\r\n      width, // - edgeWidth * 2,\r\n      height // - edgeWidth * 2\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White;\r\n    ctx.strokeStyle = edge.toRGBA();\r\n    ctx.lineWidth=edgeWidth\r\n    if (dashed) { ctx.setLineDash([5, 10]) } //ctx.lineDashOffset = 5 }\r\n    else { ctx.setLineDash([]) }\r\n    // ctx.strokeStyle = Stroke.So\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}\r\n\r\nexport function drawStar(ctx, cx, cy, outerRadius=3.6, innerRadius=1.4, spikes=5, ) {\r\n  // console.warn(\"DRAW STAR\")\r\n    var rot = Math.PI / 2 * 3;\r\n    var x = cx;\r\n    var y = cy;\r\n    var step = Math.PI / spikes;\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(cx, cy - outerRadius)\r\n    for (let i = 0; i < spikes; i++) {\r\n        x = cx + Math.cos(rot) * outerRadius;\r\n        y = cy + Math.sin(rot) * outerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n\r\n        x = cx + Math.cos(rot) * innerRadius;\r\n        y = cy + Math.sin(rot) * innerRadius;\r\n        ctx.lineTo(x, y)\r\n        rot += step\r\n    }\r\n    ctx.lineTo(cx, cy - outerRadius);\r\n    ctx.closePath();\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = 'yellow';\r\n    ctx.stroke();\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.fill();\r\n}","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator, LogicCrystal, Microcity, allMachines } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\nimport { DeviceSize } from '../values/DeviceSize';\r\n\r\nconst { major, minor } = Scale\r\n\r\nconst smallMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Small)\r\nconst mediumMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Medium)\r\nconst largeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Large)\r\nconst hugeMachines = allMachines.filter(machine => (new machine()).size === DeviceSize.Huge)\r\n\r\nconst smallDome = smallMachines.filter(machine => (new machine()).forDome)\r\nconst smallBelow = smallMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst midDome = mediumMachines.filter(machine => (new machine()).forDome)\r\nconst midBelow = mediumMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst largeDome = largeMachines.filter(machine => (new machine()).forDome)\r\nconst largeBelow = largeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nconst hugeDome = hugeMachines.filter(machine => (new machine()).forDome)\r\nconst hugeBelow = hugeMachines.filter(machine => !(new machine()).forDome)\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    color: Color = Color.Gray\r\n    infra: boolean = false\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n\r\n    hide: boolean = false\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MediumSurfaceRoom ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MediumSurfaceRoom ],\r\n        [Orientation.Right]: [  Dome, MediumSurfaceRoom ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    infra = true\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n    infra = true\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n    infra = true\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    description: string = 'Biome sweet biome';\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.sixth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = []\r\n\r\n    prereqs = [\r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Sm. Room (2)'\r\n    width = major.eighth\r\n    prereqs = [ SmallDome ]\r\n    machines = smallBelow\r\n    // two small slots\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Sm. Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n    machines = smallBelow\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Mid Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view = 'MediumRoomView'\r\n    width = 2 * major.eighth\r\n    height = 2 * major.third\r\n    // two medium slots...\r\n    \r\n    machines = midBelow\r\n}\r\n\r\nexport class MediumRoomThree extends CommonArea {\r\n    name = 'Mid Room (3)'\r\n    prereqs = [ MediumRoom ]\r\n    view = 'MediumRoomThreeView'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.third\r\n\r\n    machines = midBelow\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Lg. Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 4 * major.eighth\r\n    height = 3 * major.fifth\r\n\r\n    // two big slots?\r\n    machines = largeBelow\r\n}\r\n\r\nexport class HugeRoom extends CommonArea {\r\n    name = 'Huge Room'\r\n    view = 'HugeRoomView'\r\n    width = 10 * major.eighth\r\n    height = 8 * major.eighth\r\n\r\n    prereqs = [LargeRoom]\r\n    machines = hugeBelow\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class MediumSurfaceRoom extends Dome {\r\n    name = 'Mid Surf Bldg'\r\n    description = 'home away from home';\r\n\r\n    view: string = 'MediumSurfaceRoomView';\r\n\r\n    width: number = 6 * major.eighth\r\n    height: number = 1 * major.sixth\r\n\r\n    zoom = 0.1\r\n\r\n    prereqs = [ SmallDome ]\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = midBelow\r\n\r\n    hide = true // need another one which cares about connecting to roads\r\n}\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Sm. Dome'\r\n    width = 2 * major.seventh\r\n    height = major.seventh\r\n    machines = smallDome\r\n}\r\n\r\nexport class SmallDomeThree extends Dome {\r\n    name = 'Sm. Dome (3)'\r\n    view = 'SmallDomeThreeView'\r\n    width = 3 * major.fifth\r\n    height = 2 * major.fifth\r\n    machines = smallDome\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 3 * major.seventh\r\n    height = 2 * major.seventh\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = midDome\r\n}\r\n\r\nexport class LargeDome extends Dome {\r\n    name = 'Lg. Dome'\r\n    view = 'BigDomeView'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    prereqs = [MidDome, LargeRoom]\r\n    machines = largeDome\r\n}\r\n\r\nexport class Arcology extends Dome {\r\n    name = 'Arcology'\r\n    view = 'ArcologyView'\r\n    width = 12 * major.eighth\r\n    height = 36 * major.eighth\r\n    prereqs = [LargeDome, HugeRoom]\r\n    machines = hugeDome\r\n\r\n}\r\n\r\n//////\r\n\r\n// export class MissionControl extends Structure {\r\n//     name: string = 'Mission Control';\r\n//     description: string = 'Keeping everything on track';\r\n//     view: string = 'MissionControlView';\r\n//     width: number = 6 * major.eighth\r\n//     height: number = 1 * major.sixth\r\n//     zoom = 0.1\r\n//     connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n//         [Orientation.Left]: [ SurfaceRoad ],\r\n//         [Orientation.Right]: [ SurfaceRoad ],\r\n//         [Orientation.Up]: [ MainTunnel ],\r\n//         [Orientation.Down]: [ MainTunnel ],\r\n//     }\r\n\r\n//     machines = [ CommandCenter ]\r\n// }\r\n\r\nexport const allStructures =\r\n    [\r\n        SmallDome,\r\n        SmallDomeThree,\r\n        MidDome,\r\n        LargeDome,\r\n        Arcology,\r\n        MediumSurfaceRoom,\r\n\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        MediumRoomThree,\r\n        LargeRoom,\r\n        HugeRoom,\r\n    ]\r\n\r\n\r\n","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator, StudyMachine, Mainframe, CommandCenter, MissionLog, Botany, OrientationConsole, PersonnelRegistry, MineralProcessor, MiningDrill } from './Machine';\r\nimport { Color } from 'excalibur';\r\nimport { Structure, MediumSurfaceRoom } from './Structure';\r\nimport { BackgroundPattern } from '../actors/Building/BackgroundPatterns';\r\n\r\nexport class SpaceFunction {\r\n     name: string = '(generic)'\r\n     description: string = '(generic description)'\r\n     machines: (typeof Machine)[] = []\r\n     color: Color = Color.Gray\r\n\r\n     prereqs: (typeof SpaceFunction)[] =  [] \r\n\r\n     structure: typeof Structure = null\r\n     hide: boolean = false\r\n     background: BackgroundPattern = BackgroundPattern.Beige\r\n\r\n     bonuses: {\r\n          capacity: number, // every store/generator gets this??\r\n          workSpeed: number, // 2 should double work speed (dur *= 1/multiplier)\r\n     } = {\r\n          capacity: 0, // boost cap by one\r\n          workSpeed: 1.00 // 20% bonus to work speed\r\n     }\r\n}\r\n\r\nexport class MissionControl extends SpaceFunction {\r\n     hide = true\r\n     name = 'Mission Control'\r\n     description = 'keeping everything on track'\r\n     structure = MediumSurfaceRoom\r\n     prereqs = [] //ComputerCore, Factory, Farm ]\r\n     machines = [ CommandCenter, MissionLog ]\r\n     background = BackgroundPattern.Window\r\n}\r\n\r\n\r\nexport class LivingQuarters extends SpaceFunction {\r\n     name = 'Living Quarters'\r\n     description = 'good night'\r\n     machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n     name = 'Barracks'\r\n     description = 'sleep tight'\r\n     machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nexport class Kitchen extends SpaceFunction {\r\n     name = 'Kitchen'\r\n     description = 'stay together'\r\n     machines = [ Stove, Fridge ]\r\n     bonuses = {\r\n          capacity: 2,\r\n          workSpeed: 1.1\r\n     }\r\n     background = BackgroundPattern.Checker\r\n}\r\n\r\nexport class LifeSupportPod extends SpaceFunction {\r\n     name = 'Life Support'\r\n     description = 'keep it going'\r\n     machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n     name = 'Retreat'\r\n     description = 'take it easy'\r\n     machines = [ Cabin, Cabin ]\r\n}\r\n\r\nexport class CloneMatrix extends SpaceFunction {\r\n     name = 'Clone Matrix'\r\n     description = 'clone home'\r\n     machines = [ CloningVat, CloningVat ]\r\n}\r\n\r\nexport class CloneReception extends SpaceFunction {\r\n     name = 'Clone Reception'\r\n     description = 'welcome clone'\r\n     machines = [ CloningVat, OrientationConsole, PersonnelRegistry ]\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n     name = 'Reading Room'\r\n     description = 'butterflies in the sky'\r\n     machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nexport class Library extends SpaceFunction {\r\n     name = 'Library'\r\n     description = 'take a look'\r\n     machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n     background = BackgroundPattern.Books\r\n}\r\n\r\nexport class Study extends SpaceFunction {\r\n     name = 'Study'\r\n     description = 'plan it out'\r\n     machines = [ StudyMachine, Bookshelf ]\r\n}\r\n\r\nclass ComputerLab extends SpaceFunction {\r\n     name = 'Computer Lab'\r\n     description = 'make it happen'\r\n     machines = [ Workstation, Workstation, Workstation ]\r\n}\r\n\r\nexport class Archive extends SpaceFunction {\r\n     name = 'Archive'\r\n     description = 'write it down'\r\n     machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n     name = 'Arboretum'\r\n     description = 'walk it out'\r\n     machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n     name = 'Algae Farm'\r\n     description = 'make do'\r\n     machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nexport class SolarArray extends SpaceFunction {\r\n     name = 'Solar Array'\r\n     description = 'warm up'\r\n     machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nexport class Workshop extends SpaceFunction {\r\n     name = 'Workshop'\r\n     description = 'take form'\r\n     machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\nclass Nursery extends SpaceFunction {\r\n     name = 'Nursery'\r\n     description = 'quiet please'\r\n     machines = [ Houseplant, Houseplant, Houseplant ]\r\n     background = BackgroundPattern.Leafy\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n     name = 'Farm'\r\n     description = 'food for the masses'\r\n     machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n     name = 'Factory'\r\n     description = 'production lines'\r\n     machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\n\r\nexport class ComputerCore extends SpaceFunction {\r\n     name = 'Computer Core'\r\n     description = 'let us calculate'\r\n     machines = [ Mainframe, Mainframe ]\r\n     background = BackgroundPattern.Tech\r\n}\r\n\r\nexport class LifeSciencesLab extends SpaceFunction {\r\n     name = 'Life Sciences Lab'\r\n     description = 'where do i come from'\r\n     machines = [ Botany, Botany ]\r\n}\r\n\r\nexport class Refinery extends SpaceFunction {\r\n     name = 'Refinery'\r\n     description = 'separation'\r\n     machines = [ MineralProcessor ]\r\n}\r\n\r\nexport class Mine extends SpaceFunction {\r\n     name = 'Mine'\r\n     description = 'ore from the stone'\r\n     machines = [ MiningDrill ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n    ComputerLab,\r\n\r\n    ComputerCore,\r\n\r\n    MissionControl,\r\n    LifeSciencesLab,\r\n\r\n    CloneReception,\r\n    \r\n    Refinery,\r\n    Mine\r\n]","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { Building } from \"./Building\";\r\nimport { ResourceBlock, blockColor, emptyMarket } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { allStructures } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\nimport { Recipe, ResourceStorage, MechanicalOperation, ResourceGenerator } from \"../models/MechanicalOperation\";\r\nimport { range, deleteByValueOnce } from \"../Util\";\r\nimport { drawRect } from \"../Painting\";\r\nimport { InteractionRequest } from \"../values/InteractionRequest\";\r\n\r\nexport class Device extends Actor {\r\n    // constructionMaterials: ResourceBlock[] = []\r\n\r\n    // could also use for storage?\r\n    product: ResourceBlock[] = []\r\n    nameLabel: Label\r\n    image: any\r\n    building: Building\r\n    inUse: boolean = false\r\n    hover: boolean = false\r\n\r\n    imageLoaded: boolean = false\r\n\r\n    built: boolean = false\r\n\r\n    constructor(\r\n        public machine: Machine,\r\n        initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = () => { this.imageLoaded = true }\r\n        this.image.src = machine.image\r\n\r\n        this.on('pointerenter', () => {\r\n            // console.log(\"HOVER ON\", { device: this })\r\n            this.hover = true\r\n            if (this.building) {\r\n                // setInterval(() => {\r\n                this.building.planet.currentlyViewing = this\r\n                // }, 75)\r\n            }\r\n        })\r\n\r\n        this.on('pointerdown', () => {\r\n            // console.log(\"CLICKED DEVICE\", { device: this })\r\n            // this.toggleActive();\r\n        })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n            if (this.building) {\r\n                this.building.planet.currentlyViewing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    get imageX() { return this.pos.x - this.getWidth() / 2 }\r\n    get imageY() { return this.pos.y - this.getHeight() / 2 - 10 }\r\n\r\n    get economy() { return this.built ? this.machine.economy : emptyMarket() }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (this.imageLoaded) {\r\n            if (!this.built) { ctx.globalAlpha = 0.5 }\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.imageX,\r\n                this.imageY,\r\n\r\n                this.getWidth(),\r\n                this.getHeight()\r\n            )\r\n            if (!this.built) { ctx.globalAlpha = 1.0 }\r\n\r\n            if (this.hover) {\r\n                let c = Color.White\r\n                c.a = 0.6\r\n                drawRect(\r\n                    ctx,\r\n                    { x: this.imageX, y: this.imageY, width: this.getWidth(), height: this.getHeight() },\r\n                    0,\r\n                    c\r\n                )\r\n            }\r\n        }\r\n\r\n        let iv = new Vector(this.imageX, this.imageY)\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = iv\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let { x: bx, y: by } = iv\r\n        let blockSize = 5\r\n        let yOff = this.nameLabel.fontSize\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).toRGBA()\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize + yOff, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get name() { return this.machine.name }\r\n    get description() { return this.machine.description }\r\n    get size() { return this.machine.size }\r\n    get operation() { return this.machine.operation }\r\n\r\n    async assemble(citizen: Citizen) {\r\n        if (citizen.isCarryingUnique(this.machine.cost)) {\r\n            for (let res of this.machine.cost) {\r\n                await citizen.progressBar(1000)\r\n                citizen.drop(res)\r\n            }\r\n            this.built = true\r\n        }\r\n    }\r\n\r\n    async interact(citizen: Citizen, request: InteractionRequest): Promise<boolean> {\r\n        if (this.inUse || !this.built) {\r\n            return false\r\n        }\r\n\r\n        let worked = false\r\n        let op = this.operation\r\n        if (op.type === 'recipe' && request.type === 'work') {\r\n            let recipe: Recipe = op\r\n            // do we have all the things?\r\n            if (citizen.carrying.some(it => recipe.consumes.includes(it))) {\r\n                this.inUse = true\r\n                if (citizen.isCarryingUnique(recipe.consumes)) {\r\n                    recipe.consumes.forEach(consumed => citizen.drop(consumed))\r\n                    let workTime = this.getEffectiveWorkTime(recipe)\r\n                    await citizen.progressBar(workTime) // recipe.workTime)\r\n                    citizen.carry(recipe.produces)\r\n\r\n                    worked = true\r\n                } else {\r\n                    console.warn(\"not carrying all requirements?\", { requires: recipe.consumes, has: citizen.carrying })\r\n                }\r\n                this.inUse = false\r\n            }\r\n        } else if (op.type === 'store') {\r\n            // accept it! (whatever you have that matches...?)\r\n            let store: ResourceStorage = op\r\n            if (request && request.type === 'retrieve') { // assume dispense request for now?\r\n                this.inUse = true\r\n                worked = this.dispense(citizen, request)\r\n                if (worked) {\r\n                    await citizen.progressBar(500)\r\n                }\r\n                this.inUse = false\r\n            } else if (request && request.type === 'store' &&\r\n                citizen.carrying.some(it => store.stores.includes(it))) { // maybe trying to store?\r\n                if (this.product.length < this.getEffectiveOperationalCapacity(store)) { // store.capacity) {\r\n                    let res = null\r\n                    if (store.stores.some(stored => { res = citizen.drop(stored); return res })) {\r\n                        if (res) {\r\n                            this.produceResource(res)\r\n                            // this.product.push(res)\r\n                            // this.building.redeem(res)\r\n                            worked = true\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.warn(\"no capacity in this store!!\")\r\n                    worked = false\r\n                }\r\n            }\r\n        } else if (op.type === 'generator') {\r\n            this.inUse = true\r\n            worked = this.dispense(citizen, request)\r\n            if (worked) {\r\n                await citizen.progressBar(500)\r\n            }\r\n            this.inUse = false\r\n        }\r\n\r\n        return worked\r\n    }\r\n\r\n    getEffectiveOperationalCapacity(op: ResourceGenerator | ResourceStorage) {\r\n        let bonus = this.building.spaceFunction\r\n        ? this.building.spaceFunction.bonuses.capacity \r\n        : 0\r\n        return op.capacity + bonus\r\n    }\r\n\r\n    getEffectiveWorkTime(op: Recipe) {\r\n        let bonus = this.building.spaceFunction \r\n         ? this.building.spaceFunction.bonuses.workSpeed\r\n         : 1\r\n\r\n        return Math.round(op.workTime * (1/bonus))\r\n    } \r\n\r\n\r\n    private dispense(citizen: Citizen, request: InteractionRequest) {\r\n        if (request && request.type === 'retrieve') {\r\n            let canFulfill = this.product.find(p => p === request.resource)\r\n            if (canFulfill) {\r\n                deleteByValueOnce(this.product, request.resource)\r\n                citizen.carry(request.resource)\r\n                this.building.debit(request.resource)\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    public tryProduce(step: number) {\r\n        if (this.building.isActive && this.built) {\r\n            if (this.machine.operation.type === 'generator') {\r\n                if (step % this.machine.operation.generationTime === 0) {\r\n                    if (this.product.length < this.machine.operation.capacity) {\r\n                        this.produceResource(this.machine.operation.generates)\r\n                    }\r\n                }\r\n\r\n            } else if (this.machine.operation.type === 'spawn') {\r\n                if (step % 1000 == 0) {\r\n                    // console.log(\"WOULD SPAWN\")\r\n                    setTimeout(() => this.building.populate(this.pos.add(this.building.pos)), 100)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public produceResource(res: ResourceBlock) {\r\n        this.product.push(res)\r\n        this.building.redeem(res)\r\n    }\r\n\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            allStructures,\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        let snapped = false\r\n        if (bldg) {\r\n            let spot = bldg.nextDevicePlace().position\r\n            let d = spot.distance(pos)\r\n            snapped = d < 150\r\n        }\r\n\r\n        if (snapped) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n        } else {\r\n            this.pos = pos\r\n        }\r\n\r\n        return snapped\r\n    }\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 283\r\n    static debugPath: boolean = false\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","const raisedSquare = require('../../images/raised-square-bg.png')\r\nconst leafy = require('../../images/leafy-bg.png')\r\nconst bookish = require('../../images/books-bg.png')\r\nconst posters = require('../../images/poster-wall-bg.png')\r\nconst tech = require('../../images/tech-bg.png')\r\nconst checker = require('../../images/checker-bg.png')\r\nconst beige = require('../../images/beige-bg.png')\r\nconst window = require('../../images/window-bg.png')\r\n\r\ninterface Background {\r\n    image: HTMLImageElement\r\n    pattern: CanvasPattern\r\n    loading: boolean\r\n}\r\n\r\nconst loadBg = (path) => {\r\n    let background: Background = { image: null, pattern: null, loading: true }\r\n    background.image = new Image();\r\n    background.image.src = path\r\n    background.image.onload = function () {\r\n      background.loading = false\r\n    }\r\n    return background\r\n}\r\n\r\nexport enum BackgroundPattern {\r\n    Leafy = 'Leafy',\r\n    Grid = 'Grid',\r\n    Books = 'Books',\r\n    Poster = 'Poster',\r\n    Tech = 'Tech',\r\n    Checker = 'Checker',\r\n    Beige = 'Beige',\r\n    Window = 'Window',\r\n}\r\n\r\nconst backgroundPatterns: { [ key in BackgroundPattern ]: Background } = {\r\n    Leafy: loadBg(leafy),\r\n    Grid: loadBg(raisedSquare),\r\n    Books: loadBg(bookish),\r\n    Poster: loadBg(posters),\r\n    Tech: loadBg(tech),\r\n    Checker: loadBg(checker),\r\n    Beige: loadBg(beige),\r\n    Window: loadBg(window)\r\n}\r\n\r\nexport const getBackgroundPattern = (ctx, pattern: BackgroundPattern) => {\r\n    let bg = backgroundPatterns[pattern]\r\n    if (!bg.loading) {\r\n        if (!bg.pattern) {\r\n            // bg.image.\r\n            bg.pattern = ctx.createPattern(bg.image, 'repeat');\r\n        }\r\n        return bg.pattern\r\n    }\r\n}","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { Citizen } from \"../actors/Citizen\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { sleep } from \"../Util\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Recipe, MechanicalOperation } from \"../models/MechanicalOperation\";\r\n\r\nexport abstract class Strategy {\r\n    private sleepInterval: number = 250\r\n    protected isActive: boolean = false;\r\n    constructor(protected pawn: Citizen) { }\r\n    protected abstract async apply();\r\n    protected get planet(): Planet { return this.pawn.currentPlanet; }\r\n    protected get devices(): Device[] { return this.planet.colony.findPoweredDevices(); }\r\n    protected get operations(): MechanicalOperation[] { return this.devices.map(d => d.operation); }\r\n    protected get recipes(): Recipe[] {\r\n        let recipes: Recipe[] = [];\r\n        this.operations.forEach(op => {\r\n            if (op.type === 'recipe') {\r\n                recipes.push(op);\r\n            }\r\n        });\r\n        return recipes;\r\n    }\r\n\r\n\r\n    async attempt(): Promise<void> {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n        if (!this.isActive) {\r\n            this.isActive = true\r\n            // note apply will need to set this.isActive around its critical section\r\n            await this.apply();\r\n            this.isActive = false\r\n        }\r\n\r\n        await this.pause()\r\n        // setInterval(() => { this.attempt() }, this.sleepInterval)\r\n    }\r\n\r\n    protected async pause() {\r\n        await sleep(this.sleepInterval)\r\n    }\r\n\r\n    protected async gatherBlock(res: ResourceBlock): Promise<boolean> {\r\n        console.log(\"GATHER BLOCK\", { res })\r\n        let gathered = false\r\n        let generatesDesiredBlock = (d: Device) => (d.operation.type === 'generator') &&\r\n            d.product.some(stored => res === stored)\r\n        let gen: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], generatesDesiredBlock)\r\n\r\n        let storesDesiredBlock = (d: Device) => (d.operation.type === 'store') &&\r\n              d.product.some(stored => res === stored)\r\n        let store: Device = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n\r\n        let device: Device = gen || store\r\n\r\n        if (device) {\r\n            console.log(\"Found device to gather, visting...\")\r\n            await this.visitDevice(device)\r\n            console.log(\"Attempt to interact with device...\")\r\n            if (await device.interact(this.pawn, retrieveResource(res))) {\r\n                console.log(\"Interacted successfully!\")\r\n                gathered = true\r\n            }\r\n        } else {\r\n            console.log(\"Didn't gather...\")\r\n            // don't work sub-recipes??\r\n            // let recipe = this.recipes.find(recipe => recipe.produces === res);\r\n            // if (recipe) {\r\n                // gathered = await this.workRecipe(recipe);\r\n                // gathered = true\r\n            // }\r\n        }\r\n\r\n        return gathered\r\n    }\r\n\r\n    protected async visitDevice(device: Device) {\r\n        await this.pawn.visit(device)\r\n    }\r\n\r\n\r\n    protected async workRecipe(recipe: Recipe): Promise<boolean> {\r\n        console.log(\"Working recipe\", { product: recipe.produces })\r\n        if (await this.gatherIngredients(recipe.consumes)) {\r\n            let knowsRecipe = (d: Device) => d.operation === recipe\r\n            let maker = this.planet.colony.closestDeviceByType(this.pawn.pos, [], knowsRecipe)\r\n            if (maker) {\r\n                await this.visitDevice(maker)\r\n                if (await this.performRecipeTask(maker, recipe)) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        // await this.pause()\r\n        // await this.workRecipe(recipe);\r\n        return false\r\n    }\r\n\r\n    protected async gatherIngredients(blocks: ResourceBlock[]): Promise<boolean> {\r\n        if (!this.pawn.isCarryingUnique(blocks)) {\r\n            console.log(\"Gathering blocks...\")\r\n            for (let ingredient of blocks) {\r\n                console.log(\"attempting to gather\", { ingredient })\r\n                if (await this.gatherBlock(ingredient)) {\r\n                    console.log(\"gathered!\", { ingredient })\r\n                } else {\r\n                    console.warn(\"didn't gather it!\")\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    protected async performRecipeTask(maker: Device, recipe: Recipe) {\r\n        console.log(\"Try to perform recipe task...\", { produces: recipe.produces })\r\n        let worked = await maker.interact(this.pawn, { type: 'work', recipe })\r\n        if (!worked) {\r\n            // await this.pause()\r\n            console.warn(\"NOT waiting for machine to become available...\")\r\n            // await this.performRecipeTask(maker, recipe)\r\n        }\r\n        return worked\r\n    }\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        let tries = 0\r\n        while (visited.length < this.nodes.length && tries++ < this.nodes.length * 20) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\nconst craterRock = require('./sounds/crater-rock.mp3')\r\nconst assembler = require('./sounds/assembler.mp3')\r\nconst indivision = require('./sounds/indivision.mp3')\r\nconst understanding = require('./sounds/understanding.mp3')\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword),\r\n\r\n    CraterRock: new ex.Sound(craterRock),\r\n    Assembler: new ex.Sound(assembler),\r\n    Indivision: new ex.Sound(indivision),\r\n    Understanding: new ex.Sound(understanding),\r\n\r\n\r\n}\r\n\r\nexport { Resources }\r\n","import { Sound, Color } from \"excalibur\";\r\nimport { sample } from \"../../Util\";\r\n\r\ninterface MusicPlayerPlay { type: 'play'}\r\ninterface MusicPlayerPause { type: 'pause'}\r\ninterface MusicPlayerStop { type: 'stop'}\r\ninterface MusicPlayerNext { type: 'next'}\r\ntype MusicPlayerAction = MusicPlayerPlay | MusicPlayerPause | MusicPlayerStop | MusicPlayerNext\r\n\r\nexport class MusicPlayer {\r\n    private _wrapper: HTMLDivElement;\r\n    private _element: HTMLDivElement;\r\n    private _titleElem: HTMLSpanElement;\r\n\r\n    currentTrack: string\r\n\r\n    constructor(private x: number, private y: number, private playlist: {\r\n        [track: string]: Sound;\r\n    }) {\r\n        this.makePlayer();\r\n        // this.song.isLoaded\r\n        setTimeout(() => { this.startMusic() }, 2000)\r\n        this._titleElem.textContent = `Please wait, the jams are on their way...`;\r\n        this.currentTrack = sample(Object.keys(this.playlist)); //[0];\r\n    }\r\n\r\n    startMusic() {\r\n        // this.currentTrack = Object.keys(this.playlist)[0];\r\n        this._titleElem.textContent = `Playing: ${this.currentTrack}`;\r\n\r\n        this.playlist[this.currentTrack].play()\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._wrapper.style.left = `${left + this.x}px`;\r\n            this._wrapper.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    private makePlayer() {\r\n        this._wrapper = document.createElement('div')\r\n        this._wrapper.style.position = 'absolute'\r\n        this._wrapper.style.width = '20%'\r\n        this._wrapper.style.textAlign = 'center'\r\n        this._wrapper.style.border = 'none';\r\n        document.body.appendChild(this._wrapper);\r\n\r\n        this._element = document.createElement('div');\r\n        // this._element.style.position = 'absolute';\r\n        this._element.style.display = 'inline-block';\r\n        this._element.style.border = 'none';\r\n        this._wrapper.appendChild(this._element)\r\n\r\n        // document.body.appendChild(this._element);\r\n        // let track = Object.keys(this.playlist)[0];\r\n        // if (track) {\r\n            // console.log(\"WOULD DISPLAY TRACK INFO\", { track })\r\n            this._titleElem = document.createElement('span');\r\n            // this._titleElem.textContent = `Currently Playing: ${track}`;\r\n            this._titleElem.style.fontFamily = 'Verdana';\r\n            this._titleElem.style.fontSize = '7pt';\r\n            this._titleElem.style.padding = '24px'\r\n            this._titleElem.style.color = 'white';\r\n            this._wrapper.appendChild(this.inlineBlock(this._titleElem));\r\n        // }\r\n\r\n        let play = this.iconFactory({ type: 'play' }, '&#9655;') //, this.handleAction)\r\n        // this._element.appendChild(play)\r\n        this._wrapper.appendChild(this.inlineBlock(play));\r\n\r\n        let pause = this.iconFactory({ type: 'pause' }, '&#10072; &#10072;') //, this.handleAction)\r\n        this._wrapper.appendChild(this.inlineBlock(pause))\r\n\r\n        let next = this.iconFactory({ type: 'next' }, '&#9288;')\r\n        this._wrapper.appendChild(this.inlineBlock(next))\r\n\r\n    }\r\n\r\n    handleAction(action: MusicPlayerAction) {\r\n        // console.warn(\"WOULD HANDLE MUSIC PLAYER ACTION\", { action })\r\n        if (action.type === 'pause') {\r\n            this.song.pause() //.play()\r\n        } else if (action.type === 'play') {\r\n            this.song.play()\r\n        } else if (action.type === 'next') {\r\n            this.song.stop()\r\n            let ndx = this.trackNames.indexOf(this.currentTrack)\r\n            ndx = (ndx + 1) % this.trackNames.length\r\n            console.log(\"NEW SONG INDEX\", { ndx })\r\n            this.currentTrack = this.trackNames[ndx]\r\n            this.startMusic() // play() and set title...\r\n            // this.song.play()\r\n            // this.currentTrac\r\n        }\r\n    }\r\n\r\n    get trackNames() { return Object.keys(this.playlist) }\r\n    get song() { return this.playlist[this.currentTrack] }\r\n\r\n    private inlineBlock(elem) {\r\n        let block = document.createElement('div');\r\n        block.style.display = 'inline-block';\r\n        block.style.border = 'none';\r\n        block.append(elem)\r\n        return block\r\n    }\r\n\r\n    private iconFactory(\r\n        action: MusicPlayerAction,\r\n        iconContent: string,\r\n        // handleClick: (action: MusicPlayerAction) => any\r\n    ) {\r\n        let bg = Color.DarkGray.darken(0.5)\r\n        let fg = Color.White\r\n        let icon = document.createElement('button')\r\n        icon.innerHTML = iconContent\r\n        icon.style.display = 'block';\r\n        icon.style.fontSize = '7pt';\r\n        icon.style.fontFamily = 'Verdana';\r\n        icon.style.background = bg.toRGBA();\r\n        icon.style.color = fg.toRGBA();\r\n        icon.onclick = () => { this.handleAction(action) }\r\n        return icon\r\n    }\r\n\r\n}\r\n","import { Color } from \"excalibur\";\r\nimport { EntityKind } from \"../../values/Entity\";\r\n\r\nexport class Palette {\r\n    private _element: HTMLDivElement;\r\n    built: EntityKind[] = [];\r\n    comprehended: EntityKind[] = [];\r\n    constructor(\r\n        private name: string,\r\n        private x: number,\r\n        private y: number,\r\n        private all: EntityKind[],\r\n        private onButtonClick: (EntityKind) => any = null,\r\n        private onButtonEnter: (EntityKind) => any = null,\r\n        private comprehend = true \r\n    ) {\r\n        this.makePalette();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): any {\r\n        if (this._element) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._element.style.left = `${left + this.x}px`;\r\n            this._element.style.top = `${top + this.y}px`;\r\n        }\r\n    }\r\n\r\n    updateBuilt(built: (EntityKind)[]) {\r\n        this.built = built;\r\n        if (this.comprehend) {\r\n            this.comprehended = this.all.filter((e: EntityKind) => {\r\n                let s = new e();\r\n                let prereqs: (EntityKind)[] = s.prereqs;\r\n                return prereqs.every((prereq: EntityKind) => {\r\n                    let built = this.built.some((s: EntityKind) => s === prereq);\r\n                    return built;\r\n                });\r\n            });\r\n        } else {\r\n            this.comprehended = this.built\r\n        }\r\n        this.makePalette();\r\n    }\r\n\r\n    private makePalette() {\r\n        if (this._element) {\r\n            this._element.parentElement.removeChild(this._element);\r\n        }\r\n        if (!(this.comprehended.length > 0)) { return }\r\n\r\n        this._element = document.createElement('div');\r\n        this._element.style.position = 'absolute';\r\n        this._element.style.border = 'none'; //1px solid black'; //0.5px solid white';\r\n        document.body.appendChild(this._element);\r\n\r\n        if (this.name) {\r\n            let title = document.createElement('h2')\r\n            title.textContent = this.name\r\n            title.style.fontFamily = 'Verdana'\r\n            title.style.fontSize = '7pt'\r\n            title.style.fontWeight = '400'\r\n            title.style.color = Color.White.toRGBA()\r\n            title.style.backgroundColor = Color.Violet.darken(0.92).toRGBA()\r\n            title.style.padding = '4px'\r\n            title.style.margin = '0px'\r\n            this._element.appendChild(\r\n                title\r\n            )\r\n        }\r\n\r\n        this.comprehended\r\n            .map((elem: EntityKind) => new elem())\r\n            .sort((a, b) => a.color > b.color ? -1 : 1)\r\n            .forEach(elem => {\r\n                if (elem.hide) { return }\r\n                let label = elem.name;\r\n                if (!this.built.map(m => new m().name).includes(elem.name)) {\r\n                    label += ' *';\r\n                }\r\n                let clr = elem.color;\r\n                let btn = this.buttonFactory(label, clr);\r\n                this._element.appendChild(btn);\r\n                if (this.onButtonEnter) {\r\n                    btn.onmouseenter = () => { this.onButtonEnter(elem); };\r\n                }\r\n                if (this.onButtonClick) {\r\n                    btn.onclick = () => { this.onButtonClick(elem); };\r\n                }\r\n            });\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) {\r\n        let bg = color.darken(0.5).desaturate(0.5).clone();\r\n        bg.a = 0.8;\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone();\r\n        let paletteButton = document.createElement('button');\r\n        paletteButton.textContent = label;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '7pt';\r\n        paletteButton.style.fontFamily = 'Verdana';\r\n        paletteButton.style.fontWeight = '500';\r\n        paletteButton.style.padding = '3px';\r\n        paletteButton.style.width = '124px';\r\n        paletteButton.style.textTransform = 'uppercase';\r\n        paletteButton.style.border = 'none' //1px solid rgba(255,255,255,0.08)';\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA();\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA();\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA();\r\n        };\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA();\r\n            paletteButton.style.color = fg.toRGBA();\r\n        };\r\n        return paletteButton;\r\n    }\r\n}\r\n","import { Label, Actor, FontStyle, Color } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { PureValue, Economy, ResourceBlock } from \"../../models/Economy\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nimport { countOccurrences } from \"../../Util\";\r\n\r\nexport class CardBody extends Actor {\r\n    description: Label\r\n    values: Label\r\n    notes: Label\r\n    footer: Label\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 0, 0)\r\n        // resources / recipes\r\n\r\n        this.values = new Label('')\r\n        this.values.fontSize = 10\r\n        this.add(this.values)\r\n\r\n        this.notes = new Label('behavioral notes', 0, 30)\r\n        this.notes.fontSize = 11\r\n        this.add(this.notes)\r\n\r\n        this.description = new Label('description', 0, 60)\r\n        this.description.fontSize = 12\r\n        this.description.fontStyle = FontStyle.Italic\r\n        this.description.color = Color.DarkGray\r\n        this.add(this.description)\r\n\r\n        this.footer = new Label('footer', 20, 80)\r\n        this.footer.fontSize = 10\r\n        this.footer.fontStyle = FontStyle.Italic\r\n        this.add(this.footer)\r\n\r\n        this.show(entity)\r\n    }\r\n\r\n    describeResources = (arr: ResourceBlock[]) => {\r\n        let freqs = countOccurrences(arr)\r\n        return Object.keys(freqs)\r\n            .map(elem => `${elem} x${freqs[elem]}`)\r\n            .join(' + ')\r\n    }\r\n\r\n    show(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        if (entity) {\r\n            this.description.text = entity.description;\r\n\r\n            if (entity instanceof Machine || entity instanceof Device) {\r\n                this.values.text =  this.describeEconomy(entity.economy)\r\n                this.footer.text = entity instanceof Machine\r\n                    ? `Cost: ${this.describeResources(entity.cost)}`\r\n                    : (entity.built ? this.describeResources(entity.product) : 'under construction')\r\n\r\n                this.notes.text = ''\r\n                let op = entity.operation\r\n                if (op) {\r\n                    if (op.type === 'recipe') {\r\n                        this.notes.text = `Turns ${op.consumes.join(' + ')} -> ${op.produces}.`\r\n                    } else if (op.type === 'generator') {\r\n                        this.notes.text = `Generates ${op.generates}.`\r\n                    } else if (op.type === 'store') {\r\n                        this.notes.text = `Stores ${op.stores.join(' + ')}`\r\n                    } else if (op.type === 'spawn') {\r\n                        this.notes.text = 'Decants clones.'\r\n                    }\r\n                }\r\n            } else if (entity instanceof SpaceFunction) {\r\n                let { capacity, workSpeed } = entity.bonuses\r\n                let bonusMessages = [];\r\n                if (capacity > 0) {\r\n                    bonusMessages.push(`+${capacity} cap`)\r\n                }\r\n                if (workSpeed > 1.0) {\r\n                    bonusMessages.push(`+${Math.floor((workSpeed*100)-100)}% efficiency` )\r\n                }\r\n                this.values.text = bonusMessages.join('; ') \r\n                this.notes.text = entity.machines.map(m => (new m()).name).join(' + ')\r\n                this.footer.text = ''\r\n            } else if (entity instanceof Building) {\r\n                this.values.text =  this.describeEconomy(entity.economy(false))\r\n                this.notes.text = entity.getDevices().map(d => d.machine.name).join(' + ')\r\n\r\n                let product = entity.getDevices()\r\n                    .map(d => d.product)\r\n                    .reduce((a, b) => a.concat(b), [])\r\n                this.footer.text = product.length > 0\r\n                    ? \"Currently contains: \" + this.describeResources(product)\r\n                    : ''\r\n            } else {\r\n                this.values.text = ''\r\n                this.notes.text = ''\r\n                this.footer.text = ''\r\n            }\r\n\r\n        }\r\n        // other bonuses? behaviors?\r\n    }\r\n\r\n    private describeEconomy(e: Economy): string {\r\n        let values = []\r\n        let econ = e // entity.economy\r\n        for (let value in PureValue) {\r\n            let { supply, demand } = econ[value]\r\n            let delta = supply - demand\r\n            if (delta > 0) {\r\n                values.push(`+${delta} ${value}`)\r\n            } else if (delta < 0) {\r\n                values.push(`${delta} ${value}`)\r\n            }\r\n        }\r\n        return values.join(' | ')\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\nexport class CardTitle extends Actor {\r\n    \r\n    name: Label;\r\n    type: Label;\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x, y, 14, 32, entity && entity.color || Color.Gray);\r\n        this.name = new Label(entity && entity.name || '..', 20, 16)\r\n        this.name.fontSize = 28\r\n        this.name.color = Color.Black\r\n        this.add(this.name)\r\n\r\n        this.type = new Label('..', 232, 16)\r\n        this.type.fontSize = 10\r\n        this.type.color = Color.Gray\r\n        this.type.fontStyle = FontStyle.Italic\r\n        this.add(this.type)\r\n\r\n        if (entity) {\r\n            this.announce(entity)\r\n        }\r\n    }\r\n\r\n    announce(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.name.text = entity.name\r\n        this.color = entity.color.desaturate(0.5).darken(0.2)\r\n        if (entity instanceof Machine) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n        if (entity instanceof Structure) { this.type.text = 'Structure' }\r\n        if (entity instanceof SpaceFunction) { this.type.text = 'Function' }\r\n        if (entity instanceof Building) { this.type.text = 'Building' }\r\n        if (entity instanceof Device) { this.type.text = `${DeviceSize[entity.size]} Machine` }\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { Structure } from \"../../models/Structure\";\r\nimport { Machine } from \"../../models/Machine\";\r\nimport { CardTitle } from \"./CardTitle\";\r\nimport { CardBody } from \"./CardBody\";\r\nimport { SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Building } from \"../Building\";\r\nimport { Device } from \"../Device\";\r\n\r\nexport class Card extends Actor {\r\n    title: CardTitle\r\n    cardBody: CardBody\r\n    image: any\r\n\r\n    constructor(private entity: Machine | Structure | SpaceFunction | Building | Device, x: number, y: number) {\r\n        super(x + 160, y + 90, 320, 180, Color.White);\r\n        let x0 = -150, y0 = -50;\r\n        this.title = new CardTitle(entity, x0 - 3, y0); //x, y)\r\n        this.add(this.title);\r\n        this.cardBody = new CardBody(entity, x0 + 14, y0 + 40)\r\n        this.add(this.cardBody)\r\n\r\n        this.image = new Image();\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n        if (this.entity) {\r\n            if (this.entity instanceof Machine) {\r\n                let ix = this.pos.x + 48, iy = this.pos.y - 16\r\n                let isz = 92\r\n                ctx.drawImage(this.image, ix, iy, isz, isz)\r\n            }\r\n        }\r\n    }\r\n\r\n    present(entity: Machine | Structure | SpaceFunction | Building | Device): any {\r\n        this.title.announce(entity)\r\n        this.cardBody.show(entity)\r\n\r\n        this.entity = entity\r\n        if (this.entity instanceof Machine) {\r\n            this.image.src = this.entity.image\r\n        }\r\n    }\r\n\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nexport class EconomicValue extends Actor {\r\n    private nameLabel: Label;\r\n    private valueLabel: Label;\r\n    constructor(name: string, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n        this.nameLabel = new Label(name, x, y);\r\n        this.nameLabel.fontSize = 10;\r\n        this.nameLabel.color = Color.White.darken(0.2);\r\n        this.add(this.nameLabel);\r\n        this.valueLabel = new Label('0', x + 40, y);\r\n        this.valueLabel.fontSize = 10;\r\n        this.valueLabel.color = Color.White.darken(0.2);\r\n        this.add(this.valueLabel);\r\n    }\r\n    setCount(count: number) {\r\n        this.valueLabel.text = `${count}`;\r\n        let c = Color.Gray;\r\n        if (count > 0) {\r\n            c = Color.Green;\r\n        }\r\n        else if (count < 0) {\r\n            c = Color.Red;\r\n        }\r\n        this.valueLabel.color = c;\r\n    }\r\n}\r\n","import { Actor } from \"excalibur\";\r\nimport { Economy, PureValue, availableCapacity, allValues } from \"../../models/Economy\";\r\nimport { EconomicValue } from \"./EconomicValue\";\r\n\r\nexport class EconomyView extends Actor {\r\n    private valueLabels: { [key in PureValue]: EconomicValue } = {\r\n        Power: null,\r\n        Oxygen: null,\r\n        Water: null,\r\n        Shelter: null,\r\n        Hope: null,\r\n        Joy: null,\r\n        Wisdom: null,\r\n        Wealth: null,\r\n        Beauty: null,\r\n        Wonder: null\r\n    }\r\n\r\n    constructor(market: Economy, x: number, y: number) {\r\n        super(x, y, 0, 0);\r\n\r\n        let index = 0\r\n        for (let value of allValues) {\r\n            let valueLabel: EconomicValue =  new EconomicValue(value, (index++ * 34), 0)\r\n            this.valueLabels[value] = valueLabel\r\n            this.add(valueLabel)\r\n        }\r\n\r\n        this.updateView(market);\r\n    }\r\n\r\n    updateView(updatedEconomy: Economy): void {\r\n        let market = updatedEconomy;\r\n\r\n        for (let value of allValues) {\r\n            this.valueLabels[value].setCount(\r\n                availableCapacity(market, value)\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 6, 'Helvetica');\r\n        this.count.fontSize = 10;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n\r\n    debit(amt: number) {\r\n        this.value -= amt\r\n        this.count.text = `x${this.value}`\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            [ResourceBlock.Biomass]: null,\r\n            [ResourceBlock.Idea]: null,\r\n            [ResourceBlock.Ore]: null,\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n            [ResourceBlock.Alloy]: null,\r\n            [ResourceBlock.Bioplasma]: null,\r\n            [ResourceBlock.Algorithm]: null,\r\n            [ResourceBlock.Argent]: null,\r\n            [ResourceBlock.Aurum]: null,\r\n            [ResourceBlock.Omnium]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0, Color.DarkGray.darken(0.8));\r\n        let rx0 = 0, ry0 = -2.5;\r\n        let resources = [\r\n            ResourceBlock.Meal,\r\n            ResourceBlock.Data,\r\n            ResourceBlock.Mineral,\r\n\r\n            ResourceBlock.Bioplasma,\r\n            ResourceBlock.Alloy,\r\n            ResourceBlock.Algorithm,\r\n\r\n            ResourceBlock.Argent,\r\n            ResourceBlock.Aurum,\r\n        ];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0 + index * 18, ry = ry0 + index * 0;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n\r\n    decrement(resource: ResourceBlock) {\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.debit(1)\r\n        }\r\n    }\r\n}\r\n","import { Label, Color, Actor, FontStyle, FontUnit } from \"excalibur\";\r\nimport { Economy, ResourceBlock, PureValue } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { EconomyView } from \"./EconomyView\";\r\n\r\nexport class StatusAnalysisView extends Actor {\r\n    private messageLabel: Label\r\n    private popLabel: Label\r\n\r\n    private resources: ResourcesList\r\n    private economy: EconomyView\r\n\r\n\r\n    constructor(market: Economy, w: number = 10000, h: number = 36) {\r\n        super(0,0, w, h, Color.DarkGray.darken(0.8));\r\n\r\n        let ty = 14\r\n\r\n        let brand = new Label(\"OSIRIS\", 5, ty+2)\r\n        brand.fontSize = 12\r\n        brand.color = Color.Gray\r\n        brand.fontStyle = FontStyle.Italic\r\n        this.add(brand)\r\n\r\n        let version = new Label(\"v0.0.1\", 48, ty + 2)\r\n        version.fontSize = 7\r\n        version.color = Color.Gray.darken(0.4)\r\n        this.add(version)\r\n\r\n\r\n        this.resources = new ResourcesList(80, ty)\r\n        this.add(this.resources)\r\n\r\n        this.economy = new EconomyView(market, 400, ty)\r\n        this.add(this.economy)\r\n\r\n        this.popLabel = new Label(\"\", 1000, ty, 'Helvetica')\r\n        this.popLabel.fontSize = 10\r\n        this.popLabel.color = Color.White\r\n        this.add(this.popLabel)\r\n\r\n        this.messageLabel = new Label('hi', 1080, ty, 'Helvetica')\r\n        this.messageLabel.fontSize = 10\r\n        this.messageLabel.color = Color.White\r\n        this.messageLabel.fontStyle = FontStyle.Italic\r\n        this.add(this.messageLabel)\r\n    }\r\n\r\n    incrementResource(res: ResourceBlock) {\r\n        this.resources.increment(res)\r\n    }\r\n\r\n    decrementResource(res: ResourceBlock) {\r\n        this.resources.decrement(res)\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    showEconomy(updatedEconomy: Economy): any {\r\n        this.economy.updateView(updatedEconomy)\r\n    }\r\n\r\n    showPopCap(curr: any, cap: any): any {\r\n        this.popLabel.text = `Pop: ${curr}/${cap}`\r\n    }\r\n    \r\n}\r\n","import { UIActor } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, allStructures } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket, PureValue } from \"../../models/Economy\";\r\nimport { Machine, allMachines } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\nimport { StatusAnalysisView } from \"./StatusAnalysisView\";\r\nimport { Device } from \"../Device\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Card } from \"./Card\";\r\nimport { allSpaceFunctions, SpaceFunction } from \"../../models/SpaceFunction\";\r\nimport { Palette } from \"./Palette\";\r\nimport { Building } from \"../Building\";\r\nimport { Resources } from \"../../Resources\";\r\nimport { MusicPlayer } from \"./MusicPlayer\";\r\n\r\nexport class Hud extends UIActor {\r\n    private musicPlayer: MusicPlayer\r\n\r\n    private hidePalettes: boolean = true\r\n    private structurePalette: Palette //<Structure> \r\n    private machinePalette: Palette //<Machine>\r\n    private functionPalette: Palette\r\n    private card: Card\r\n\r\n    private status: StatusAnalysisView\r\n    static structuresForPalette = [\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n        ...allStructures\r\n    ];\r\n    static machinesForPalette = allMachines\r\n    static functionsForPalette = allSpaceFunctions\r\n\r\n\r\n\r\n    constructor(\r\n        game: Game,\r\n        protected onBuildingSelect = null,\r\n        protected onMachineSelect = null,\r\n        protected onFunctionSelect = null\r\n    ) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.status = new StatusAnalysisView(emptyMarket());\r\n        this.add(this.status)\r\n\r\n        let displayInfo = (e) => this.showCard(e)\r\n        this.structurePalette = new Palette('Structure', 20, 35, Hud.structuresForPalette, onBuildingSelect, displayInfo)\r\n        this.machinePalette = new Palette('Machine', 20, 300, allMachines, onMachineSelect, displayInfo) // (e) => this.showCard(e))\r\n        this.functionPalette = new Palette('Function', 220, 35, Hud.functionsForPalette, onFunctionSelect, displayInfo, false)\r\n\r\n        this.card = new Card(null, 20, 800) // game.canvasHeight - 200)\r\n        this.add(this.card)\r\n\r\n        this.musicPlayer = new MusicPlayer(1360, 0, {\r\n            'Crater Rock': Resources.CraterRock,\r\n            'Assembler': Resources.Assembler,\r\n            'Indivision': Resources.Indivision,\r\n            'Understanding': Resources.Understanding,\r\n        })\r\n        // this.add(this.musicPlayer)\r\n    }\r\n\r\n    showPalettes() {\r\n        this.hidePalettes = false\r\n    }\r\n\r\n    setMessage(text: string) { this.status.setMessage(text) }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        this.musicPlayer.draw(ctx)\r\n        if (!this.hidePalettes) {\r\n            this.structurePalette.draw(ctx)\r\n            this.machinePalette.draw(ctx)\r\n            this.functionPalette.draw(ctx)\r\n        }\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.status.incrementResource(resource)\r\n    }\r\n\r\n    resourceExpended(resource: ResourceBlock) {\r\n        this.status.decrementResource(resource)\r\n    }\r\n\r\n    updateDetails(planet: Planet, rebuildPalettes: boolean = true) {\r\n        if (rebuildPalettes) {\r\n            this.updatePalettes(planet.colony)\r\n        }\r\n        this.updateEconomy(planet)\r\n        this.updateMaxPop(planet.economy[PureValue.Shelter].demand, planet.maxPop)\r\n    }\r\n\r\n    showCard(entity: Machine | Structure | SpaceFunction | Building | Device) {\r\n        this.card.present(entity)\r\n    }\r\n\r\n    private updateMaxPop(curr, cap) {\r\n        this.status.showPopCap(curr, cap)\r\n    }\r\n\r\n    private updateEconomy(planet: Planet) {\r\n        this.status.showEconomy(planet.economy)\r\n    }\r\n\r\n    private updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n        this.updateFunctionPalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) {\r\n        let builtStructures =\r\n            Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n\r\n        this.structurePalette.updateBuilt(builtStructures)\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) {\r\n        let devices = colony.findAllDevices()\r\n        let builtMachines = Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine))\r\n        this.machinePalette.updateBuilt(builtMachines)\r\n    }\r\n\r\n    private updateFunctionPalette(colony: Colony) {\r\n        let builtReifiedFunctions = flatSingle(colony.buildings.map(b => b.spaceFunction))\r\n        let builtFunctions = Hud.functionsForPalette.filter((fn) => builtReifiedFunctions.some(rf => rf instanceof fn))\r\n        this.functionPalette.updateBuilt(builtFunctions)\r\n    }\r\n\r\n}","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Strategy } from \"./Strategy\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { containsUniq } from \"../Util\";\r\n\r\nexport abstract class ConstructionStrategy extends Strategy {\r\n    canApply(): boolean {\r\n        console.log(\"Any unbuilt devices?\", !!this.unbuiltDevice)\r\n        return !!this.unbuiltDevice\r\n    }\r\n\r\n    get unbuiltDevice() {\r\n        const isUnbuilt = (d: Device) => !d.built && !d.inUse && d.building.isActive &&\r\n          // the player can TRY to build it, we don't have to hang forever on it though\r\n          containsUniq(this.planet.storedResources, d.machine.cost)\r\n          //.every(res => )\r\n        //   this.planet.\r\n        return this.planet.colony.findAllDevices().find(isUnbuilt)\r\n    }\r\n}","import { ConstructionStrategy } from \"./ConstructionStrategy\";\r\nimport { Device } from \"../actors/Device\";\r\n\r\nexport class ProxmityBasedConstruction extends ConstructionStrategy {\r\n    async apply() {\r\n        console.log(\"Applying prox-based construction...\")\r\n        if (this.unbuiltDevice && this.unbuiltDevice.building) {\r\n            console.log(\"Okay, let's build it!\", { device: this.unbuiltDevice.machine })\r\n            await this.constructDevice(this.unbuiltDevice)\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n    private async constructDevice(device: Device) {\r\n        device.inUse = true\r\n        let resources = device.machine.cost\r\n        if (await this.gatherIngredients(resources)) {\r\n            await this.visitDevice(device)\r\n            await device.assemble(this.pawn)\r\n        } else {\r\n            // await this.storeCarrying() // ?\r\n        }\r\n\r\n        device.inUse = false\r\n    }\r\n}","import { ResourceBlock } from \"../models/Economy\";\r\n\r\nimport { Recipe } from \"../models/MechanicalOperation\";\r\n\r\nexport interface RetrieveResource {\r\n    type: 'retrieve'\r\n    resource: ResourceBlock\r\n    // count: number\r\n}\r\n\r\nexport interface WorkRecipe {\r\n    type: 'work'\r\n    recipe: Recipe\r\n}\r\n\r\nexport interface StoreResource {\r\n    type: 'store'\r\n    resource: ResourceBlock\r\n}\r\n\r\nexport function retrieveResource(res: ResourceBlock): RetrieveResource {\r\n    return {\r\n        type: 'retrieve',\r\n        resource: res,\r\n        // count: 1\r\n    }\r\n}\r\n\r\n\r\nexport type InteractionRequest = StoreResource | RetrieveResource | WorkRecipe; // | ...\r\n\r\n","import { Device } from \"../actors/Device\";\r\nimport { MechanicalOperation, Recipe } from \"../models/MechanicalOperation\";\r\nimport { ResourceBlock } from \"../models/Economy\";\r\nimport { retrieveResource } from \"../values/InteractionRequest\";\r\nimport { Strategy } from \"./Strategy\";\r\n\r\nexport abstract class ProductionStrategy extends Strategy {\r\n\r\n\r\n    protected async storeBlock(res: ResourceBlock) {\r\n        let storesDesiredBlock = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) && //operation.capacity &&\r\n            d.operation.stores.includes(res)\r\n        let openStore = this.planet.colony.closestDeviceByType(this.pawn.pos, [], storesDesiredBlock)\r\n        let stored = false\r\n        if (openStore) {\r\n            await this.visitDevice(openStore)\r\n            if (await openStore.interact(this.pawn, { type: 'store', resource: res })) {\r\n                stored = true\r\n            }\r\n        }\r\n\r\n        if (!stored) {\r\n            await this.pause()\r\n            await this.storeBlock(res)\r\n        }\r\n    }\r\n\r\n}\r\n","import { shuffle, containsUniq } from \"../Util\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Recipe, ResourceStorage } from \"../models/MechanicalOperation\";\r\nimport { ProductionStrategy } from \"./ProductionStrategy\";\r\n\r\nexport class CapacityBasedProduction extends ProductionStrategy {\r\n    async apply() {\r\n        const storeWithCapacity = (d: Device) => d.operation.type === 'store' &&\r\n            d.product.length < d.getEffectiveOperationalCapacity(d.operation) // && //operation.capacity\r\n            // containsUniq(this.planet.storedResources, d.operation)\r\n        const store: Device = shuffle(this.devices).find(storeWithCapacity)\r\n        if (store && store.operation.type === 'store') {\r\n            const storage: ResourceStorage = store.operation\r\n            const recipeForStoredResource = (r: Recipe) => storage.stores.some(stored => r.produces === stored)\r\n            let recipe: Recipe = shuffle(this.recipes).find(recipeForStoredResource)\r\n            if (recipe && containsUniq(this.planet.storedResources, recipe.consumes)) {\r\n                if (await this.workRecipe(recipe)) {\r\n                    await this.storeBlock(recipe.produces)\r\n                }\r\n            }\r\n        }\r\n        await this.pause()\r\n    }\r\n\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons, deleteByValueOnce, sleep, containsUniq } from \"../Util\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { ProductionStrategy } from \"../strategies/ProductionStrategy\";\r\nimport { CapacityBasedProduction } from \"../strategies/CapacityBasedProduction\";\r\nimport { drawStar } from \"../Painting\";\r\nimport { ConstructionStrategy } from \"../strategies/ConstructionStrategy\";\r\nimport { ProxmityBasedConstruction } from \"../strategies/ProximityBasedConstruction\";\r\n\r\nexport class Citizen extends Actor {\r\n    isPlanning: boolean = false // \r\n\r\n    // walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock[] = [] // null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    private productionStrategy: ProductionStrategy\r\n    private constructionStrategy: ConstructionStrategy\r\n\r\n    constructor(private home: Vector, protected planet: Planet, private elite: boolean = false) {\r\n        super(home.x, home.y, Scale.minor.first, Scale.minor.fourth, Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.productionStrategy = new CapacityBasedProduction(this)\r\n        this.constructionStrategy = new ProxmityBasedConstruction(this)\r\n    }\r\n\r\n    // get isWorking() { return this.isWorking }\r\n    get currentPlanet() { return this.planet }\r\n\r\n    get walkSpeed() {\r\n        return this.planet.timeFactor * Game.citizenSpeed\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // make sure we are busy!\r\n        this.work()\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = \r\n              Math.min(\r\n                  (now - this.workStarted) / this.workDuration,\r\n                  1\r\n              )\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.elite) {\r\n            // draw a little star?\r\n            drawStar(ctx, this.pos.x + 6, this.pos.y - 9)\r\n        }\r\n\r\n        if (this.carrying) {\r\n            this.carrying.forEach((carried, idx) => {\r\n                ctx.fillStyle = blockColor(carried).toRGBA()\r\n                ctx.fillRect(this.x + 4, this.y - 3 * idx, 5, 5)\r\n            })\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            ctx.strokeRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n        }\r\n\r\n        // let debugPath = true\r\n        if (this.path && Game.debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 4\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        this.workInProgress = false\r\n    }\r\n\r\n\r\n    carry(c: ResourceBlock) {\r\n        this.carrying.push(c);\r\n    }\r\n\r\n    isCarryingUnique(resources: ResourceBlock[]): boolean {\r\n        let isCarrying = containsUniq(this.carrying, resources)\r\n        return isCarrying\r\n    }\r\n\r\n    drop(res: ResourceBlock): ResourceBlock {\r\n        if (this.carrying.length > 0) {\r\n            if (this.carrying.find(r => r === res)) {\r\n                deleteByValueOnce(this.carrying, res)\r\n                return res\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    currentBuilding: Building = null\r\n    async visit(device: Device) {\r\n        if (this.currentBuilding != device.building) {\r\n            // let path = this.planet.pathBetween\r\n\r\n            console.log(\"VISIT (find path)\", { device })\r\n            // const path = this.planet.pathBetween(this.pos.clone(), device.building) //pos.add(device.building.pos))\r\n            const path = this.planet.pathBetweenPoints(this.pos.clone(), device.pos.add(device.building.pos))\r\n            // path.pop()\r\n            // path.shift()\r\n            // path.shift()\r\n            console.log(\"VISIT (path found!)\", { path })\r\n            await this.followPath(path)\r\n            console.log(\"VISIT (path follow done, moving to target)\")\r\n        }\r\n        let target = device.pos.add(device.building.pos)\r\n        await this.glideTo(target)\r\n        this.currentBuilding = device.building\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        if (pos) {\r\n            return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n        }\r\n    }\r\n\r\n    async followPath(path: Vector[]) {\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            // path.pop()\r\n            // path.shift()\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = []\r\n        }\r\n    }\r\n\r\n    // currentBuilding: Building\r\n    // async pathTo(building: Building) {\r\n    //     if (this.path.length > 0) { throw new Error(\"Already pathing!!\") }\r\n    //     let path = this.planet.pathBetween(this.pos.clone(), building)\r\n    //     await this.followPath(path)\r\n    //     return true;\r\n    // }\r\n\r\n    async work() {\r\n        if (this.isPlanning) {\r\n            // console.log(\"---> Don't re-enter work, already planning\")\r\n            return // nope\r\n        }\r\n\r\n        this.isPlanning = true\r\n        if (this.constructionStrategy.canApply()) {\r\n            console.log(\"Constructing...\")\r\n            await this.constructionStrategy.attempt()\r\n        } else {\r\n            console.log(\"Producing...\")\r\n            await this.productionStrategy.attempt()\r\n        }\r\n        this.isPlanning = false\r\n        console.log(\"Done planning...\")\r\n    }\r\n\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(pos, elite: boolean = false) {\r\n        let citizen = new Citizen(pos, this.planet, elite);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { Game } from '../../Game';\r\n\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = Game.debugPath\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    placeBuilding(building: Building) {\r\n        building.placed = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0] //.length > 1 ? destination.nodes()[1] : destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination; //.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        console.log(\"PATH FOUND BTWN POINTS\", { srcNode, destNode, path })\r\n        return path;\r\n    }\r\n\r\n\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findPoweredDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d.pos.add(d.building.pos))\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings[0] //.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices(): Device[] {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n\r\n    findPoweredDevices(): Device[] {\r\n        return flatSingle(this.activeBuildings.map(b => b.getDevices()))\r\n            .filter(d => d.built) /// ....\r\n    }\r\n\r\n    protected get activeBuildings() {\r\n        return this.buildings.filter(b => b.isActive)\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawPatternedRect, drawRect } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n// import { drawPatternedRect, drawRect } from \"../../Util\";\r\n\r\nexport class MediumSurfaceRoomView extends Building {\r\n    hideBox = true\r\n\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() //- this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        // draw from left slot to each device place to right slot?\r\n        let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length-1])\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        // g.edge(devices[1], find(slots[1]))\r\n\r\n        return g\r\n    }\r\n  \r\n    // afterConstruct() {\r\n    //     let { machines } = this.structure;\r\n    //     if (machines && machines.length > 0) {\r\n    //         let machine = new machines[0]();\r\n    //         this.devicePlaces().forEach(place => {\r\n    //             let theDevice = new Device(machine, place.position)\r\n    //             this.addDevice(theDevice)\r\n    //         })\r\n    //     }\r\n\r\n    // }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor()\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n\r\n        // ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n        // let rect = \r\n            // { x: this.pos.x, y: this.pos.y, width: this.getWidth(), height: this.getHeight() };\r\n        drawPatternedRect(\r\n            ctx,\r\n            this.aabb(),\r\n            this.backgroundPattern\r\n        )\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black\r\n            c.a = 0.6\r\n            drawRect(ctx, this.aabb(), 0, c)\r\n        }\r\n\r\n        // a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomThreeView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 3\r\n\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class HugeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Huge\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Huge)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Large\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    devicePlaceSize = DeviceSize.Medium\r\n    devicePlaceCount = 2\r\n    // devicePlaces() {\r\n    //     let w = this.getWidth()/2\r\n    //     let x = this.pos.x + w;\r\n    //     let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Medium)/3\r\n    //     let ds = [\r\n    //         new Vector(x - w/3, y),\r\n    //         new Vector(x + w/3, y),\r\n    //     ]\r\n\r\n    //     return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    // }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaceCount = 3\r\n    //devicePlaces() {\r\n    //    let w = this.getWidth()/2\r\n    //    let x = this.pos.x + w;\r\n    //    let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n    //    let ds = [\r\n    //        new Vector(x - w / 2, y),\r\n    //        new Vector(x, y),\r\n    //        new Vector(x + w / 2, y),\r\n    //    ]\r\n\r\n    //    return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    //}\r\n}","import { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DomeView } from \".\";\r\n\r\nexport class BigDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallDomeThreeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color, Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = 3*this.getWidth()/5\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight()/2\r\n        let ds = [\r\n            new Vector(x, y-800),\r\n            new Vector(x, y),\r\n            new Vector(x, y+800),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Huge))\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n        this.getDevices().forEach(device => device.draw(ctx, delta))\r\n\r\n    }\r\n\r\n    private drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { range, eachCons, measureDistance } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { drawRect } from \"../../Painting\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.planet.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n\r\n        let slots: Vector[] = this.slots().map(s => s.pos)\r\n        let leftSlot = find(slots[0]), rightSlot = find(slots[slots.length-1])\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n\r\n        return g\r\n\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector, Color } from \"excalibur\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n// import { drawRect, drawPatternedRect } from \"../../Util\";\r\nimport { BackgroundPattern } from \"./BackgroundPatterns\";\r\nimport { drawPatternedRect, drawRect } from \"../../Painting\";\r\nimport { measureDistance, eachCons } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 12\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        // let wallColor = this.processedColor() //.darken(0.4)\r\n        let floorColor = this.planet.color.darken(0.6) //Color.Violet.darken(0.92)\r\n\r\n        // drawRect(ctx, this.aabb(), 0.5, wallColor)\r\n        drawPatternedRect(ctx, this.aabb(), this.backgroundPattern)\r\n        if (!this.isActive) {\r\n            // draw overlay rect that darkens\r\n            let c = Color.Black\r\n            c.a = 0.6\r\n            drawRect(ctx, this.aabb(), 0, c)\r\n        }\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight,\r\n              width: this.getWidth(), height: this.floorHeight },\r\n              0.2,\r\n              floorColor\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y))\r\n        ];\r\n    }\r\n\r\n    graph(sg) {\r\n        let g = super.graph(sg)\r\n        let slots: Slot[] = this.slots()\r\n        let find = (s: Vector) => g.findOrCreate(s, measureDistance)\r\n        // draw from left slot to each device place to right slot?\r\n        let leftSlot = find(slots[0].pos), rightSlot = find(slots[1].pos)\r\n        let devices = this.devicePlaces().map(d => find(d.position))\r\n        g.edge(leftSlot, devices[0])\r\n        eachCons(devices, 2).forEach(([left, right]) => g.edge(left, right))\r\n        g.edge(devices[devices.length-1], rightSlot)\r\n\r\n        let node = this.nodes()[0]\r\n        devices.forEach(device => g.edge(device, find(node)))\r\n        return g\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight // - 10 \r\n        y -= getVisibleDeviceSize(this.devicePlaceSize) / 3.5 ///2\r\n\r\n        let ds = [\r\n            new Vector(x - w/2, y),\r\n            ...(this.devicePlaceCount > 2 ? [new Vector(x,y)] : []),\r\n            new Vector(x + w/2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, this.devicePlaceSize)) \r\n        //DeviceSize.Small))\r\n    }\r\n\r\n    devicePlaceSize: DeviceSize = DeviceSize.Small\r\n    devicePlaceCount: number = 2\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"98240dde9344ac8d071d076ac951e15d.png\";","module.exports = __webpack_public_path__ + \"da31cf43235263c1c3e0ad45a46360a1.png\";","module.exports = __webpack_public_path__ + \"a6a38278ac501400c6199e0df9e1bf84.png\";","module.exports = __webpack_public_path__ + \"ece1d5d5858bc048d2d949ecc3f5e9bc.png\";","module.exports = __webpack_public_path__ + \"3654f0489813e0668743efde017c9653.png\";","module.exports = __webpack_public_path__ + \"3abbdabf07943966f102ac7345a59986.png\";","module.exports = __webpack_public_path__ + \"d1b4690b9f5fa4957f98602afc8cfdb6.png\";","module.exports = __webpack_public_path__ + \"0eb7a15ea04678b14a2b88b5965aabeb.png\";","module.exports = __webpack_public_path__ + \"29c5f1be64c99bbc14d5063eea2f0953.svg\";","module.exports = __webpack_public_path__ + \"502f86b65239e20806bbae8bc77a6116.svg\";","module.exports = __webpack_public_path__ + \"5289b20985e3c3a98081267a2da1772e.svg\";","module.exports = __webpack_public_path__ + \"1d893905e4eea3bbc48b0e129e318ea6.svg\";","module.exports = __webpack_public_path__ + \"bd556d00e484db4e52d198d0bf39d0f2.svg\";","module.exports = __webpack_public_path__ + \"650cd431226df0755357c71d61bef1f2.svg\";","module.exports = __webpack_public_path__ + \"f12c591f538ab3026bf13e93f3fa9485.svg\";","module.exports = __webpack_public_path__ + \"3aeb9dd24809ba3fbd4eeb31a28c3b19.svg\";","module.exports = __webpack_public_path__ + \"6cc6f6773bb6eb26fcef87b9629f7b87.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"24611230ec712ba7ee38b99561aedd87.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { ResourceBlock } from \"./Economy\";\r\n\r\nexport type MechanicalOperation =\r\n    Recipe |\r\n    ResourceGenerator |\r\n    ResourceStorage |\r\n    SpawnClone |\r\n    AccelerateTime |\r\n    Noop\r\n\r\nexport interface Noop {\r\n    type: 'noop'\r\n}\r\n\r\nexport interface Recipe {\r\n    type: 'recipe'\r\n    consumes: ResourceBlock[]\r\n    produces: ResourceBlock\r\n    workTime: number\r\n}\r\n\r\nexport interface ResourceGenerator {\r\n    type: 'generator'\r\n    generates: ResourceBlock\r\n    generationTime: number\r\n    capacity: number\r\n}\r\n\r\nexport interface ResourceStorage {\r\n    type: 'store'\r\n    stores: ResourceBlock[]\r\n    capacity: number\r\n}\r\n\r\nexport interface SpawnClone {\r\n    type: 'spawn'\r\n}\r\n\r\nexport interface AccelerateTime {\r\n    type: 'accelerate'\r\n    factor: number\r\n}\r\n\r\nfunction store(res: ResourceBlock[], capacity: number = 10): ResourceStorage {\r\n    return {\r\n        type: 'store',\r\n        stores: res,\r\n        capacity\r\n    }\r\n}\r\n\r\nfunction generate(res: ResourceBlock, cap: number = 4): ResourceGenerator {\r\n    return {\r\n        type: 'generator',\r\n        generates: res,\r\n        generationTime: 1000,\r\n        capacity: cap\r\n    }\r\n}\r\n\r\nfunction recipe(input: ResourceBlock[], output: ResourceBlock): Recipe {\r\n    return {\r\n        type: 'recipe',\r\n        consumes: input,\r\n        produces: output,\r\n        workTime: 1000,\r\n    }\r\n}\r\n\r\nfunction spawn(): SpawnClone {\r\n    return {\r\n        type: 'spawn',\r\n    }\r\n}\r\n\r\nfunction accelerateTime(): AccelerateTime {\r\n    return {\r\n        type: 'accelerate',\r\n        factor: 2\r\n    }\r\n}\r\n\r\nexport const mechanicalOperations = {\r\n    store,\r\n    generate,\r\n    recipe,\r\n    spawn,\r\n    accelerateTime,\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range, flatSingle } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock, Economy, sumMarkets, emptyMarket, availableCapacity, PureValue } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nimport { AccelerateTime, MechanicalOperation } from '../../models/MechanicalOperation';\r\n\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n\r\n    constructor(\r\n        public hud: Hud,\r\n        public color: Color,\r\n        private onBuildingHover: (b: Building) => any,\r\n        private onDeviceHover: (d: Device) => any,\r\n        private w: number = 2000000,\r\n        private depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, w, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n    }\r\n\r\n    set currentlyViewing(buildingOrDevice: Building | Device) {\r\n        if (buildingOrDevice instanceof Building) {\r\n            let b: Building = buildingOrDevice\r\n            this.onBuildingHover(b)\r\n        } else if (buildingOrDevice instanceof Device) {\r\n            let d: Device = buildingOrDevice\r\n            this.onDeviceHover(d)\r\n        }\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    get economy(): Economy {\r\n        // let devices = this.colony.findPoweredDevices()\r\n        // let economies = devices.map((d: Device) => d.machine.economy)\r\n\r\n        let buildings = this.colony.buildings\r\n        let economies = buildings.map(b => b.economy())\r\n        let theEconomy = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let popularDemand = this.population.citizens.length\r\n        theEconomy['Shelter'].demand = popularDemand\r\n        theEconomy['Oxygen'].demand += popularDemand\r\n        theEconomy['Water'].demand += popularDemand\r\n        return theEconomy\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    spend(resource: ResourceBlock): any {\r\n        this.hud.resourceExpended(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector, elite: boolean = false) {\r\n        if (this.population.citizens.length < this.maxPop) {\r\n            // console.log(\"POPULATIN'!\")\r\n            // let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(pos, elite) //home)\r\n        } else {\r\n            console.warn(\"too many citizens already to populate more!\")\r\n        }\r\n    }\r\n\r\n    get maxPop() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let economies = devices.map((d: Device) => d.machine.economy)\r\n        let theEconomyWithoutPeople = economies.reduce(sumMarkets, emptyMarket())\r\n\r\n        let values = [ PureValue.Shelter, PureValue.Water, PureValue.Oxygen ]\r\n        return Math.max(0, Math.min(\r\n            ...values.map(val => availableCapacity(theEconomyWithoutPeople, val))\r\n        ))\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n\r\n    pathBetweenPoints(origin: Vector, destination: Vector): Vector[] {\r\n       return this.colony.pathBetweenPoints(origin, destination)\r\n    }\r\n\r\n    get timeFactor() {\r\n        let devices = this.colony.findPoweredDevices()\r\n        let ops: MechanicalOperation[] = devices.map(d => d.operation) //.filter(op => op.type === 'accelerate')\r\n        return ops\r\n            .map(op => op.type === 'accelerate' ? op.factor : 1)\r\n            .reduce((acc, val) => val * acc, 1.0)\r\n    }\r\n\r\n    get storedResources(): ResourceBlock[] {\r\n        let devices = this.colony.findAllDevices()\r\n        return flatSingle(devices.map(d => d.product))\r\n    }\r\n}","import { Scene, Input, Vector } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MainTunnel, Corridor, SurfaceRoad, SmallDome, SmallRoomThree, MediumRoomThree, LargeRoom, HugeRoom } from \"../models/Structure\";\r\nimport { Building, structureViews, } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { SpaceFunction, CloneMatrix, Kitchen, LivingQuarters, LifeSupportPod, Library, Archive, ComputerCore, MissionControl, SolarArray, CloneReception, Workshop, Study } from \"../models/SpaceFunction\";\r\nimport { flatSingle, zip } from \"../Util\";\r\nimport { DevicePlace } from \"../actors/Building/Building\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    defaultMessage: string = 'Welcome to the Colony, Commander.'\r\n\r\n    placingFunction: SpaceFunction = null\r\n\r\n\r\n    static requiredStructuresAndFunctions: (typeof SpaceFunction | typeof Structure)[] = [\r\n        MissionControl,\r\n        SurfaceRoad,\r\n        SolarArray,\r\n        // LifeSupportPod,\r\n        MainTunnel,\r\n        Corridor,\r\n        LivingQuarters,\r\n        // CloneMatrix,\r\n        // CloneReception,\r\n        Kitchen,\r\n        Workshop,\r\n        Study,\r\n        // Library,\r\n        // Archive,\r\n        // ComputerCore,\r\n        \r\n    ]\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.hud.updateDetails(this.planet, false)\r\n    }\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n        let buildIt = (e) => this.startConstructing(e)\r\n\r\n        this.hud = new Hud(game, buildIt, buildIt, buildIt)\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(\r\n            this.hud,\r\n            game.world.color,\r\n            (b) => this.hud.showCard(b),\r\n            (d) => this.hud.showCard(d)\r\n        )\r\n\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(1.5, 10000)\r\n        // this.camera.pos.y = this.planet.getTop()\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n\r\n                            if (this.placingFunction) {\r\n                                let fn = this.placingFunction\r\n                                // console.log({ fn, bldg: buildingUnderConstruction })\r\n                                zip(fn.machines, buildingUnderConstruction.devicePlaces()).forEach(([machine, place]: [typeof Machine, DevicePlace]) => {\r\n                                    console.log(\"would add machine\", { machine, place })\r\n                                    let m = (new machine()).concretize()\r\n                                    let device = new Device(m, place.position)\r\n                                    buildingUnderConstruction.addDevice(device)\r\n                                })\r\n                                this.placingFunction = null\r\n                            }\r\n\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.setMessage(this.defaultMessage)\r\n                            this.hud.updateDetails(this.planet)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                this.planet.colony.currentlyConstructing = null\r\n                this.placingFunction = null\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingStructureOrFunction(): Structure | SpaceFunction {\r\n        let reqs = Construct.requiredStructuresAndFunctions.map(req => new req())\r\n\r\n        let actualStructureNames = this.buildings.map(building => building.structure.name)\r\n        let actualFunctionNames = flatSingle(\r\n            this.buildings.map(building => building.spaceFunction && building.spaceFunction.name)\r\n        )\r\n        let actualNames = [...actualStructureNames, ...actualFunctionNames]\r\n        return reqs.find(req => !actualNames.includes(req.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingStructureOrFunction() //this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.showPalettes()\r\n        }\r\n    }\r\n\r\n    firstBuilding: boolean = true\r\n    startConstructing(structureOrMachine: Structure | Machine | SpaceFunction, pos: Vector = new Vector(0, 0)) {\r\n        this.hud.showCard(structureOrMachine)\r\n        \r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            this.hud.setMessage(`Place ${structure.name} (${structure.description})`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            if (this.firstBuilding) {\r\n                this.camera.zoom(structure.zoom, 250)\r\n                this.camera.pos = theNextOne.pos\r\n                this.firstBuilding = false\r\n            } \r\n        } else if (structureOrMachine instanceof Machine) {\r\n            let machine = structureOrMachine\r\n            this.hud.setMessage(`Install ${machine.name} (${machine.description})`)\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            // this.camera.zoom(1.5, 250)\r\n        } else if (structureOrMachine instanceof SpaceFunction) {\r\n            let fn: SpaceFunction = structureOrMachine\r\n            this.hud.setMessage(`Place ${fn.name} (${fn.description})`)\r\n            theNextOne = this.spawnFunction(fn, pos)\r\n            this.placingFunction = fn\r\n\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = null\r\n        if (theNextOne) {\r\n            this.planet.colony.currentlyConstructing = theNextOne\r\n            // this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        let device = new Device(machine, pos)\r\n        if (device.snap(this.planet)) {\r\n            this.camera.pos = device.pos\r\n \r\n        }\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n\r\n    protected spawnFunction(fn: SpaceFunction, pos: Vector): Building {\r\n        let theStructure: Structure = (fn.structure && new fn.structure()) // || new SmallRoomThree()\r\n        if (!theStructure) {\r\n            theStructure = new SmallRoomThree()\r\n            let machines = fn.machines.map(m => new m())\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Medium)) {\r\n                theStructure = new MediumRoomThree()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Large)) {\r\n                theStructure = new LargeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.size === DeviceSize.Huge)) {\r\n                theStructure = new HugeRoom()\r\n            }\r\n\r\n            if (machines.some(m => m.forDome)) {\r\n                theStructure = new SmallDome()\r\n            }\r\n        }\r\n\r\n        console.log(\"SPAWN FUNCTION\", { fn, structure: theStructure })\r\n        let building = this.assembleBuildingFromStructure(theStructure, pos)\r\n        building.reshape(building.constrainCursor(building.pos))\r\n        return building\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Orange] //Red, Color.Blue, Color.Green]\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ).\r\n        lighten(0.15).\r\n        desaturate(0.65)\r\n\r\n  \r\n    static bestowName(): any {\r\n        let nameList = [\r\n            'Aragorn',\r\n            'Anodyne',\r\n            'Carolyn',\r\n            'Exeter',\r\n            'Colwreath',\r\n            'India',\r\n            'Comma',\r\n            'Terabithia'\r\n        ]\r\n        return sample(nameList)\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"1b8e735649248c4c552a84996e61f241.mp3\";","module.exports = __webpack_public_path__ + \"1a607294aebce07746d6f25ffa517d80.mp3\";","module.exports = __webpack_public_path__ + \"22bdefc1e8515661fdeb8e8076820641.mp3\";","module.exports = __webpack_public_path__ + \"cf150ab26eba01503f4f6dc3d9ab47f7.mp3\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\nimport { Resources } from './Resources';\r\nimport { Sound } from 'excalibur';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n  // setTimeout(() => {\r\n  //   console.log(\"let's jam!\");\r\n  //   let jam: Sound = Resources.CraterRock //play();\r\n  //   jam.play()\r\n  // }, 1500)\r\n  // jam.oncomplete = () => jam.play()\r\n});\r\n"],"sourceRoot":""}