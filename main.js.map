{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Util.ts","webpack:///./src/actors/Building/Building.ts","webpack:///./src/values/DeviceSize.ts","webpack:///./src/actors/Building/index.ts","webpack:///./src/values/Orientation.ts","webpack:///./src/models/Machine.ts","webpack:///./src/models/Economy.ts","webpack:///./src/models/Structure.ts","webpack:///./src/values/Scale.ts","webpack:///./src/actors/Building/SurfaceRoadView.ts","webpack:///./src/actors/Device.ts","webpack:///./src/values/Graph.ts","webpack:///./src/Game.ts","webpack:///./src/actors/Building/LargeRoomView.ts","webpack:///./src/actors/Building/MediumRoomView.ts","webpack:///./src/actors/Building/MidDomeView.ts","webpack:///./src/actors/Building/SmallRoomThreeView.ts","webpack:///./src/actors/Hud/ResourceListEntry.ts","webpack:///./src/actors/Hud/ResourcesList.ts","webpack:///./src/actors/Hud/Hud.ts","webpack:///./src/actors/Building/MineView.ts","webpack:///./src/actors/Building/LadderView.ts","webpack:///./src/actors/Building/ArcologyView.ts","webpack:///./src/actors/Building/TunnelView.ts","webpack:///./src/actors/Building/MissionControlView.ts","webpack:///./src/actors/Building/DomeView.ts","webpack:///./src/actors/Building/CommonAreaView.ts","webpack:///./src/actors/Building/CorridorView.ts","webpack:///./src/models/SpaceFunction.ts","webpack:///./src/actors/player.ts","webpack:///./src/actors/Citizen.ts","webpack:///./src/actors/Planet/Population.ts","webpack:///./src/actors/Planet/NavigationTree.ts","webpack:///./src/images/research-server-plain.svg","webpack:///./src/images/fridge-plain.svg","webpack:///./src/images/bed-plain.svg","webpack:///./src/images/cooking-fire-plain.svg","webpack:///./src/images/cabin-plain.svg","webpack:///./src/images/stove-plain.svg","webpack:///./src/images/bench-simple-plain.svg","webpack:///./src/images/vat-plain.svg","webpack:///./src/images/bookshelf-plain.svg","webpack:///./src/actors/Planet/Colony.ts","webpack:///./src/actors/Planet/PlanetBackground.ts","webpack:///./src/actors/Planet/Planet.ts","webpack:///./src/scenes/Construct.ts","webpack:///./src/models/World.ts","webpack:///./src/images/bookshelf.png","webpack:///./src/images/sword.png","webpack:///./src/Resources.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","excalibur_1","extremumBy","arr","pluck","extremum","reduce","best","next","pair","_ecRange","a","minBy","fn","Math","min","maxBy","max","sample","floor","random","range","Array","fill","map","_val","idx","closest","cursor","getVector","predicate","matching","filter","elem","distance","flatSingle","concat","deleteByValue","e","eachCons","measureDistance","b","drawLine","ctx","lineWidth","Color","White","beginPath","moveTo","x","y","lineTo","strokeStyle","toRGBA","stroke","drawRect","rectangle","edgeWidth","color","filled","width","height","main","fillStyle","fillRect","edge","strokeRect","Orientation_1","Util_1","Graph_1","SpaceFunction_1","DeviceSize_1","DevicePlace","pos","size","this","getVisibleDeviceSize","Building","_super","structure","planet","_this","built","hover","showLabel","facing","Orientation","Right","hideBox","childrenBuildings","level","devices","step","anchor","Vector","setup","traits","trait","Traits","OffscreenCulling","on","console","log","building","collisionType","CollisionType","PreventCollision","nameLabel","Label","levelLabel","fontSize","darken","__extends","levelUp","text","draw","delta","aabb","processedColor","forEach","device","getCenter","measureText","update","engine","produce","constrainCursor","clone","reshape","afterConstruct","handleClick","_pos","slots","nodes","getWidth","getHeight","devicePlaces","graph","supergraph","Graph","g","rootNode","findOrCreate","_i","_a","child","slot","parentSlot","childNode","redeem","res","gather","populate","overlaps","other","rect1","rect2","overlapsAny","colony","buildings","find","bldg","edgeColor","lighten","mainColor","colorBase","clr","Red","connections","findSlot","validConnections","slotList","dir","validStructures","flipped","flip","closestBuildingByType","matchingSlot","compass_1","compass","warn","alignToSlot","theSlot","offset","sub","addEqual","buildSlot","parent","addDevice","finalize","updateName","hasPlaceForDevice","nextDevicePlace","getDevices","allSpaceFunctions","spaceFn","matched","unseenDevices","machines","machine","matchingDevice","label","Actor","DeviceSize","Scale_1","major","Scale","minor","Small","Medium","Large","sz","third","sixth","eighth","Building_1","CorridorView_1","CorridorView","CommonAreaView_1","CommonAreaView","DomeView_1","DomeView","MissionControlView_1","MissionControlView","TunnelView_1","TunnelView","ArcologyView_1","ArcologyView","LadderView_1","LadderView","MineView_1","MineView","SurfaceRoadView_1","SurfaceRoadView","Left","Up","Down","orientation","Error","MachineOperation","Economy_1","images","bookshelf","vat","bench","stove","cabin","fire","bed","fridge","server","Green","Blue","Orange","Violet","Yellow","Work","SpawnCitizen","CollectResource","CollectMeals","CollectData","Machine","description","LightGray","consumes","produces","generationTime","workTime","capacity","behavior","image","prereqs","CommandCenter","arguments","OxygenExtractor","WaterCondensingMachine","SolarCell","Desk","ResourceBlock","Hypothesis","Data","Bookshelf","Fridge","Stove","Food","Meal","Bed","Workstation","Houseplant","ResearchServer","Orchard","AlgaeVat","Cabin","Arbor","CloningVat","productionTime","Fabricator","Mineral","Alloy","MiningDrill","Megafabricator","Preserve","PureValue","Power","Hope","Shelter","Oxygen","emptyMarket","supply","demand","Ore","blockColors","blockColor","block","desaturate","t","setPrototypeOf","__proto__","constructor","create","Machine_1","Structure","view","zoom","dominantColor","Gray","Corridor","Ladder","MainTunnel","second","MissionControl","SurfaceRoad","fifth","first","Dome","CommonArea","SmallRoomThree","SmallRoomTwo","SmallDome","MediumRoom","LargeRoom","MidDome","majorUnit","fourth","seventh","minorUnit","minorScale","Structure_1","Device","initialPos","product","imageLoaded","inUse","Image","onload","src","drawImage","bx","by","produced","index","blockSize","interact","citizen","waitToUse","pop","progressBar","sent","carry","carrying","resource","drop","setTimeout","snap","some","position","empty","edges","edgesInverse","isEmpty","node","newNode","contains","testNode","includes","measure","tolerance","dfs","dst","indexOf","union","otherGraph","edgeList","theEdges","_b","_c","otherIndex","otherNode","adjacent","adjacentIndices","testNodeIndex","es","esInv","root","visited","rIndex","dfsIndex","rootIndex","childIndex","bfs","cb","bfsIndex","halt","visited_1","visitedNode","adj_1","adjacentNode","shortestPath","maxStep","prevStep","dstIndex","prev","curr","path","steps","srcIndex","reverse","Resources_1","Game","world","displayMode","DisplayMode","FullScreen","backgroundColor","skyColor","start","loader","Loader","key","Resources","addResource","citizenSpeed","Engine","_1","LargeRoomView","w","floorHeight","MediumRoomView","MidDomeView","SmallRoomThreeView","ResourceListEntry","resourceBlock","icon","add","count","credit","amt","ResourceListEntry_1","ResourcesList","DarkGray","entries","ry","entry","increment","ResourcesList_1","Hud","game","onBuildingSelect","onMachineSelect","canvasWidth","canvasHeight","comprehendedStructures","builtStructures","comprehendedMachines","builtMachines","messageLabel","_makeStructurePalette","_makeMachinePalette","resources","setMessage","_structurePaletteElement","left","canvas","offsetLeft","top_1","offsetTop","style","top","_machinePaletteElement","top_2","resourceGathered","updatePalettes","updateBuildingPalette","updateMachinePalette","structuresForPalette","every","prereq","comprehended","parentElement","removeChild","bldgs","availableMachines","findAllDevices","machinesForPalette","document","createElement","border","body","appendChild","_paletteButton","buttonFactory","onclick","sort","btn","bg","fg","paletteButton","textContent","display","fontFamily","fontWeight","padding","textTransform","background","onmouseover","saturate","onmouseleave","UIActor","originSlot","pickingOrigin","maxHeight","getTop","h","setHeight","drawShape","xoff","yoff","bezierCurveTo","rect","halfWidth","slotHeights","heights","y0","y1","btm","lst","right","slotCount","theSlots","Device_1","machine_1","place","theDevice","slotY","flagX","flagY","arc","PI","closePath","leftSlot","rightSlot","originX","newCursor","setWidth","abs","SpaceFunction","LivingQuarters","Barracks","Kitchen","LifeSupportPod","Retreat","CloneMatrix","ReadingRoom","Library","Study","Archive","Arboretum","AlgaeFarm","SolarArray","Workshop","Nursery","Farm","Factory","ex","Player","Game_1","Citizen","walkSpeed","workInProgress","now","Date","getTime","progress","workStarted","workDuration","px","pw","py","vel","glideTo","actions","asPromise","duration","Promise","resolve","reject","pathTo","pathBetween","all","work","item_1","sink","closestDevice","source","Citizen_1","Population","citizens","increase","home","NavigationTree","seekPath","origin","dest","closestNode","NavigationTree_1","Colony","currentlyConstructing","maxPop","navTree","placeBuilding","buildNavTree","structureTypes","st","destination","srcNode","destNode","closestDeviceByType","machineTypes","ctrl","Mountains","peaks","onInitialize","xOff","peakDistance","times","heightRange","drift","baseColor","brightColor","yBase","peak","mtnWidth","PlanetBackground","PlanetBackground_1","Colony_1","Population_1","Planet","hud","depth","createLayer","layerHeight","population","theLayer","Planet_1","player_1","Hud_1","SmallRoomThreeView_1","MidDomeView_1","MediumRoomView_1","LargeRoomView_1","Construct","dragging","startConstructing","player","prepareNextBuilding","camera","onActivate","input","pointers","primary","dragOrigin","currentlyBuilding","constrained","button","Input","PointerButton","buildingUnderConstruction","placementValid","deviceUnderConstruction","Middle","z","getZoom","deltaY","keyboard","Keys","H","move","Esc","onDeactivate","off","nextMissingRequiredStructure","requiredStructures","requiredStructureList","actualStructureNames","nextMissing","structureOrMachine","theNextOne","spawnBuilding","spawnDevice","anotherBuilding","assembleBuildingFromStructure","structureViews","Scene","World","colors","Cyan","Vermillion","sword","Sword","Texture","World_1","Construct_1","theWorld","construct","then","goToScene"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([51,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Vector, Color } from \"excalibur\";\r\nimport { Rectangle } from \"./values/Rectangle\";\r\n\r\nconst extremumBy = (arr, pluck, extremum) => {\r\n  return arr.reduce(function(best, next) {\r\n    var pair = [ pluck(next), next ];\r\n    if (!best) {\r\n       return pair;\r\n    } else if (extremum.apply(null, [ best[0], pair[0] ]) == best[0]) {\r\n       return best;\r\n    } else {\r\n       return pair;\r\n    }\r\n  },null)[1];\r\n}\r\n\r\nexport const minBy = (arr, fn) => extremumBy(arr, fn, Math.min)\r\nexport const maxBy = (arr, fn) => extremumBy(arr, fn, Math.max)\r\n\r\n\r\nexport const sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\r\n\r\nexport const range = (n) => Array(n).fill(0).map((_val,idx) => idx)\r\n\r\nexport function closest<T>(cursor: Vector, arr: Array<T>, getVector: (T) => Vector, predicate?: (T) => boolean) {\r\n   let matching: Array<T> = arr;\r\n   if (predicate) { arr = arr.filter(predicate) }\r\n   if (matching) {\r\n      let distanceToCursor = (elem: T) => cursor.distance(getVector(elem))\r\n      return minBy(matching, distanceToCursor)\r\n   }\r\n}\r\n\r\nexport const flatSingle = arr => [].concat(...arr);\r\n\r\nexport const deleteByValue = (arr, elem) => arr.filter(e => e !== elem)\r\n\r\nexport function eachCons(a, n) {\r\n  var r = []\r\n  for (var i = 0; i < a.length - n + 1; i++) {\r\n    r.push(_ecRange(a, i, n))\r\n  }\r\n  return r\r\n}\r\n\r\nfunction _ecRange (a, i, n) {\r\n  var r = []\r\n  for (var j = 0; j < n; j++) {\r\n    r.push(a[i + j])\r\n  }\r\n  return r\r\n}\r\n\r\nexport const measureDistance = (a: Vector, b: Vector) => a.distance(b)\r\n\r\n\r\n// tiny rendering lib\r\nexport function drawLine(ctx: CanvasRenderingContext2D, a: Vector, b: Vector, c: Color = Color.White, lineWidth: number = 1) {\r\n  c.a = 0.5\r\n  ctx.beginPath()\r\n  ctx.moveTo(a.x, a.y)\r\n  ctx.lineTo(b.x, b.y)\r\n  ctx.strokeStyle = c.toRGBA()\r\n  ctx.lineWidth = lineWidth\r\n  ctx.stroke()\r\n}\r\n\r\nexport function drawRect(\r\n  ctx: CanvasRenderingContext2D,\r\n  rectangle: Rectangle,\r\n  edgeWidth: number = 0,\r\n  color: Color = Color.White,\r\n  filled: boolean = true\r\n) {\r\n  let { x, y, width, height } = rectangle;\r\n\r\n  // if (edgeWidth > 0) {\r\n  //   let edge = Color.White;\r\n  //   ctx.fillStyle = edge.toRGBA();\r\n  //   ctx.fillRect(x, y, width, height)\r\n  // }\r\n\r\n  if (filled) {\r\n    let main = color;\r\n    ctx.fillStyle = main.toRGBA();\r\n    ctx.fillRect(\r\n      x, //+ edgeWidth,\r\n      y, //+ edgeWidth,\r\n      width, // - edgeWidth * 2,\r\n      height // - edgeWidth * 2\r\n    )\r\n  }\r\n\r\n  if (edgeWidth > 0) {\r\n    let edge = Color.White;\r\n    ctx.strokeStyle = `${edgeWidth}px solid ${edge.toRGBA()}`;\r\n    // ctx.strokeStyle = Stroke.So\r\n    ctx.strokeRect(\r\n      x, y, width, height\r\n    )\r\n  }\r\n}","import { Actor, Vector, CollisionType, Color, Label, Traits } from \"excalibur\";\r\nimport { Planet } from \"../Planet/Planet\";\r\nimport { Structure, } from \"../../models/Structure\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip, compass } from \"../../values/Orientation\";\r\nimport { Game } from \"../../Game\";\r\nimport { Rectangle } from \"../../values/Rectangle\";\r\nimport { closest, measureDistance, drawRect, deleteByValue } from \"../../Util\";\r\nimport { Graph } from \"../../values/Graph\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { Device } from \"../Device\";\r\nimport { allSpaceFunctions } from \"../../models/SpaceFunction\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DevicePlace {\r\n    constructor(private pos: Vector, private size: DeviceSize) {}\r\n    get position() { return this.pos }\r\n    get visibleSize() { return getVisibleDeviceSize(this.size) }\r\n\r\n}\r\n\r\nexport class Building extends Actor {\r\n    edgeWidth: number = 0 //.1\r\n\r\n    nameLabel: Label\r\n    levelLabel: Label\r\n\r\n    built: boolean = false\r\n    hover: boolean = false\r\n    showLabel: boolean = false\r\n    facing: Orientation = Orientation.Right\r\n    hideBox: boolean = false\r\n    parentSlot: Slot\r\n    childrenBuildings: Building[] = []\r\n\r\n    level: number = 1\r\n\r\n    private devices: Device[] = []\r\n\r\n    constructor(pos: Vector, public structure: Structure, protected planet: Planet) {\r\n        super(\r\n          pos.x,\r\n          pos.y,\r\n          structure.width,\r\n          structure.height,\r\n          planet.color\r\n        )\r\n        this.anchor = new Vector(0,0)\r\n\r\n        this.setup();\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n\r\n        this.on('pointerenter', () => {\r\n            this.hover = true\r\n            console.log(\"HOVER ON\", { building: this })\r\n        })\r\n\r\n        // this.on('pointerdown', () => {\r\n        //     console.log(\"CLICKED BUILDING\", { building: this })\r\n        //     this.levelUp();\r\n        // })\r\n\r\n        this.on('pointerleave', () => {\r\n            this.hover = false\r\n        })\r\n\r\n        this.collisionType = CollisionType.PreventCollision\r\n\r\n        this.nameLabel = new Label(this.structure.name, 0, 0, 'Helvetica')\r\n        // this.nameLabel.fontSize = 11\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.levelLabel = new Label(`Lvl. ${this.level}`, 0, 0, 'Helvetica')\r\n        this.levelLabel.fontSize = 6\r\n        this.levelLabel.color = Color.White.darken(0.2)\r\n    }\r\n\r\n    levelUp() {\r\n        this.level += 1\r\n        this.levelLabel.text = `Lvl. ${this.level}`\r\n    }\r\n\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        if (!this.hideBox) {\r\n            drawRect(ctx, this.aabb(), this.edgeWidth, this.processedColor())\r\n        }\r\n        this.devices.forEach(device => device.draw(ctx, delta))\r\n\r\n        if (this.showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= ctx.measureText(this.structure.name).width / 2\r\n            this.nameLabel.draw(ctx, delta)\r\n\r\n            // this.levelLabel.text = `Lvl. ${this.level}`\r\n            // this.levelLabel.pos = this.getCenter()\r\n            // this.levelLabel.pos.y += 10\r\n            // this.levelLabel.pos.x -= ctx.measureText(this.structure.name).width / 4\r\n            // this.levelLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let debug = false;\r\n        if (debug) {\r\n            if (this.slots().length > 0) {\r\n                // draw slots\r\n                this.slots().forEach((slot: Slot) => {\r\n                    let rect: Rectangle = { x: slot.pos.x, y: slot.pos.y, width: 3, height: 3 }\r\n                    drawRect(ctx, rect, 1, Color.Gray.lighten(0.5))\r\n                })\r\n            }\r\n         if (this.nodes().length > 0) {\r\n                // draw nodes\r\n                this.nodes().forEach((node: Vector) => {\r\n                    let rect: Rectangle = { x: node.x, y: node.y, width: 4, height: 4 }\r\n                    drawRect(ctx, rect, 1, Color.Yellow.lighten(0.5))\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        let showDevicePlaces = false\r\n        if (showDevicePlaces && this.devicePlaces().length > 0) {\r\n            this.devicePlaces().forEach(p => {\r\n                let place = p.position\r\n                let sz = p.visibleSize\r\n                drawRect(ctx,\r\n                    { x: place.x - sz/2, y: place.y - sz/2, width: sz, height: sz },\r\n                    1,\r\n                    Color.White,\r\n                    false\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n    step: number = 0\r\n    update(engine: Game, delta: number) {\r\n        super.update(engine, delta)\r\n        let tryProduce = this.built;\r\n        if (tryProduce) {\r\n            this.devices.forEach(device => device.produce(this.step));\r\n        }\r\n        this.step += 1\r\n    }\r\n\r\n    setup(): void { }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        return cursor.clone();\r\n    }\r\n    reshape(cursor: Vector): void {\r\n        this.pos = cursor.clone()\r\n    }\r\n\r\n    afterConstruct(): void {}\r\n\r\n    handleClick(_pos): boolean { return true; }\r\n\r\n    slots(): Slot[] {\r\n        return []\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    devicePlaces(): DevicePlace[] {\r\n        return []; //this.nodes();\r\n    }\r\n    \r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph\r\n        // assemble subgraph\r\n        let nodes = this.nodes()\r\n        let rootNode = g.findOrCreate(nodes[0], measureDistance)\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            g.edge(rootNode, slot)\r\n\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n        return g\r\n    }\r\n\r\n    // just a patch through to planet -- but could animate something here?\r\n    public redeem(res: ResourceBlock) {\r\n        this.planet.gather(res)\r\n    }\r\n\r\n    public populate(pos: Vector) {\r\n        this.planet.populate(pos) //this.pos)\r\n    }\r\n\r\n\r\n    protected aabb(): Rectangle {\r\n        return {\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            width: this.getWidth(),\r\n            height: this.getHeight()\r\n        }\r\n    }\r\n\r\n    protected overlaps(other: Building): boolean {\r\n        let rect1 = this.aabb(), rect2 = other.aabb();\r\n        let doesOverlap = (\r\n            rect1.x < rect2.x + rect2.width &&\r\n            rect1.x + rect1.width > rect2.x &&\r\n            rect1.y < rect2.y + rect2.height &&\r\n            rect1.y + rect1.height > rect2.y\r\n        )\r\n        return(!!doesOverlap);\r\n    }\r\n\r\n    public overlapsAny(): boolean {\r\n        return !!this.planet.colony.buildings.find(bldg => bldg !== this && this.overlaps(bldg))\r\n    }\r\n\r\n    protected edgeColor(): Color {\r\n        let edge = this.processedColor().lighten(0.85);\r\n        return edge;\r\n    }\r\n\r\n    protected mainColor(): Color {\r\n        let main = this.processedColor().darken(0.08);\r\n        return main;\r\n    }\r\n\r\n    protected colorBase(): Color {\r\n        return this.color;\r\n    }\r\n\r\n    protected processedColor(): Color {\r\n        let clr = this.colorBase().clone();\r\n        if (!this.built)  { \r\n            if (this.overlapsAny()) { clr = Color.Red }\r\n            clr.a = 0.8\r\n        }\r\n        if (this.hover) { clr.a = 0.5 }\r\n        return clr;\r\n    }\r\n\r\n    get connections() {\r\n        return this.structure.connections;\r\n    }\r\n\r\n\r\n    protected findSlot(\r\n        pos: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ): Slot {\r\n        let slotList = []\r\n            for (let dir of compass) {\r\n                const validStructures = validConnections[dir];\r\n                let flipped = flip(dir)\r\n                const buildings = validStructures.map(structure =>\r\n                    this.planet.closestBuildingByType(pos, [structure])\r\n                )\r\n                buildings.forEach(building => {\r\n                    if (building) {\r\n                        let neighborSlots = building.slots()\r\n                        neighborSlots.filter(slot => slot.facing === flipped)\r\n                        .forEach(matchingSlot => {\r\n                            slotList.push(matchingSlot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n        if (slotList.length > 0) {\r\n            return closest(pos, slotList, (slot) => slot.pos)\r\n        } else {\r\n            console.warn('no conecting structures found')\r\n        }\r\n    }\r\n\r\n    protected alignToSlot(\r\n        cursor: Vector,\r\n        validConnections: { [key in Orientation]: (typeof Structure)[] } = this.connections\r\n    ) {\r\n        let theSlot = this.findSlot(cursor, validConnections)\r\n        if (theSlot) {\r\n            let matchingSlot = this.slots()\r\n                .find(s => s.facing == flip(theSlot.facing))\r\n            if (matchingSlot) {\r\n                let offset = theSlot.pos.sub(matchingSlot.pos)\r\n                this.pos.addEqual(offset)\r\n\r\n                this.parentSlot = theSlot;\r\n                return theSlot;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected buildSlot(x: number, y: number, facing: Orientation = Orientation.Right): Slot {\r\n        return {\r\n            pos: new Vector(x,y),\r\n            facing,\r\n            parent: this\r\n        }\r\n    }\r\n\r\n    public addDevice(device: Device) {\r\n        device.finalize()\r\n        if (device.building !== this) {\r\n            device.building = this\r\n        }\r\n        this.devices.push(device)\r\n        this.updateName()\r\n    }\r\n\r\n    public hasPlaceForDevice() {\r\n        return this.devices.length < this.devicePlaces().length\r\n    }\r\n\r\n    public nextDevicePlace(): DevicePlace {\r\n        // could throw an err if we have no place\r\n        return this.devicePlaces()[\r\n            this.devices.length\r\n        ]\r\n    }\r\n\r\n    public getDevices() {\r\n        return this.devices\r\n    }\r\n\r\n    private updateName() {\r\n        let fn = allSpaceFunctions.find(spaceFn => {\r\n            let matched = true;\r\n            let unseenDevices = this.devices.slice() // clone?\r\n            spaceFn.machines.forEach(machine => {\r\n                let matchingDevice = unseenDevices.find(d => d.machine instanceof machine)\r\n                if (!matchingDevice) { matched = false; }\r\n                unseenDevices = deleteByValue(unseenDevices, matchingDevice)\r\n            })\r\n            return matched;\r\n        })\r\n        if (fn) {\r\n            this.nameLabel.text = fn.label\r\n        }\r\n    }\r\n}","import { Scale } from \"./Scale\";\r\nlet { major, minor } = Scale\r\n\r\nexport enum DeviceSize {\r\n    Small,\r\n    Medium,\r\n    Large\r\n}\r\n\r\n\r\nexport function getVisibleDeviceSize(size: DeviceSize): number {\r\n    let sz = 10;\r\n    switch (size) {\r\n        case DeviceSize.Small: sz = major.third; break;\r\n        case DeviceSize.Medium: sz = major.sixth; break;\r\n        case DeviceSize.Large: sz = 2 * major.eighth; break;\r\n    }\r\n    return sz;\r\n}","import { Building } from './Building';\r\n\r\nimport { CorridorView } from './CorridorView';\r\nimport { CommonAreaView } from './CommonAreaView';\r\nimport { DomeView } from './DomeView';\r\nimport { MissionControlView } from './MissionControlView';\r\nimport { TunnelView } from './TunnelView';\r\nimport { ArcologyView } from './ArcologyView';\r\nimport { LadderView } from './LadderView';\r\nimport { MineView } from './MineView';\r\nimport { SurfaceRoadView } from './SurfaceRoadView';\r\n\r\n\r\n// import { LivingQuartersView } from './LivingQuartersView';\r\n\r\nexport {\r\n    Building,\r\n\r\n    CorridorView, // as AccessTunnelView,\r\n    CommonAreaView,\r\n    DomeView,\r\n    MissionControlView,\r\n    TunnelView,\r\n    ArcologyView,\r\n    LadderView,\r\n    MineView,\r\n    SurfaceRoadView,\r\n\r\n}","\r\nexport enum Orientation { Left, Up, Right, Down } //, Angle }\r\n\r\nexport const compass = [\r\n    Orientation.Left,\r\n    Orientation.Right,\r\n    Orientation.Up,\r\n    Orientation.Down,\r\n]\r\n\r\n\r\nexport function flip(orientation: Orientation): Orientation {\r\n    switch (orientation) {\r\n        case Orientation.Left: return Orientation.Right\r\n        case Orientation.Right: return Orientation.Left\r\n        case Orientation.Up: return Orientation.Down\r\n        case Orientation.Down: return Orientation.Up\r\n    }\r\n    throw new Error(`Don't know orientation ${ orientation }`)\r\n}","import { ResourceBlock } from \"./Economy\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { Color } from \"excalibur\";\r\nimport { DeviceSize } from \"../values/DeviceSize\";\r\n\r\n\r\nconst bookshelfSvg = require('../images/bookshelf-plain.svg');\r\nconst vatSvg = require('../images/vat-plain.svg');\r\nconst benchSimple = require('../images/bench-simple-plain.svg');\r\nconst stove = require('../images/stove-plain.svg');\r\nconst cabin = require('../images/cabin-plain.svg');\r\nconst fire = require('../images/cooking-fire-plain.svg')\r\nconst bed = require('../images/bed-plain.svg')\r\nconst fridge = require('../images/fridge-plain.svg')\r\nconst server = require('../images/research-server-plain.svg')\r\n\r\nconst images = {\r\n    bookshelf: bookshelfSvg,\r\n    vat: vatSvg,\r\n    bench: benchSimple,\r\n    stove,\r\n    cabin,\r\n    fire,\r\n    bed,\r\n    fridge,\r\n    server,\r\n}\r\n\r\nconst { Red, Green, Blue, Orange, Violet, Yellow } = Color;\r\n\r\nexport enum MachineOperation {\r\n    // generic functioning: consuming a block to produce a new block\r\n    Work,\r\n    // more interesting functions\r\n    SpawnCitizen,\r\n    CollectResource,\r\n    CollectMeals,\r\n    CollectData\r\n}\r\n\r\nexport class Machine {\r\n    name: string = '(machine name)'\r\n    description: string = '(machine description)'\r\n    color: Color = Color.LightGray\r\n\r\n    size: DeviceSize = DeviceSize.Small\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n\r\n    // need to stop using this both for work time and 'generation' time\r\n    // productionTime: number = 500\r\n    generationTime: number = 5000\r\n    workTime: number = 2000\r\n    capacity: number = 2\r\n\r\n    behavior: MachineOperation = MachineOperation.Work\r\n\r\n    image = images.vat\r\n\r\n    prereqs: (typeof Machine)[] = []\r\n\r\n}\r\n\r\nexport class CommandCenter extends Machine {\r\n    name = 'Command'\r\n    description = 'gather resources...'\r\n    behavior = MachineOperation.CollectResource\r\n    image = images.bench\r\n\r\n    size = DeviceSize.Medium\r\n}\r\n\r\n// small\r\n/// small surface\r\n\r\nexport class OxygenExtractor extends Machine {\r\n    name = 'O2 Extractor'\r\n    description = 'breathe deep'\r\n    image = images.vat\r\n    prereqs = [ WaterCondensingMachine, SolarCell ]\r\n}\r\n\r\nexport class SolarCell extends Machine {\r\n    name = 'Solar Cell'\r\n    description = 'feel the warmth'\r\n}\r\n\r\nexport class WaterCondensingMachine extends Machine {\r\n    name = 'H20 Condenser'\r\n    prereqs = [ SolarCell ]\r\n}\r\n\r\n/// small subsurface\r\nexport class Desk extends Machine {\r\n    name = 'Desk'\r\n    consumes = ResourceBlock.Hypothesis\r\n    produces = ResourceBlock.Data\r\n    image = images.bench\r\n    prereqs = [ OxygenExtractor ]\r\n    // color = Blue\r\n}\r\n\r\nexport class Bookshelf extends Machine {\r\n    name = 'Shelf'\r\n    description = 'brainstorm'\r\n    produces = ResourceBlock.Hypothesis\r\n    image = images.bookshelf\r\n    prereqs = [ OxygenExtractor, Desk ]\r\n    color = Blue\r\n}\r\n\r\n\r\nexport class Fridge extends Machine {\r\n    name = 'Fridge'\r\n    description = 'store meals'\r\n    behavior = MachineOperation.CollectMeals\r\n    image = images.fridge\r\n    prereqs = [Bookshelf]\r\n    color = Yellow\r\n}\r\n\r\nexport class Stove extends Machine {\r\n    name = 'Stove'\r\n    description = 'make a meal'\r\n    consumes = ResourceBlock.Food\r\n    produces = ResourceBlock.Meal\r\n    image = images.stove\r\n\r\n    prereqs = [Bookshelf, Fridge]\r\n    color = Yellow\r\n}\r\n\r\nexport class Bed extends Machine {\r\n    name = 'Bed'\r\n    image = images.bed\r\n    prereqs = [ OxygenExtractor ]\r\n    color = Orange\r\n}\r\n\r\nexport class Workstation extends Machine {\r\n    name = 'Workstation'\r\n    prereqs = [ Bookshelf ]\r\n    color = Blue\r\n}\r\n\r\nexport class Houseplant extends Machine {\r\n    name = 'House Plant'\r\n    prereqs = [ Bed ]\r\n    produces = ResourceBlock.Food\r\n    capacity = 1\r\n    color = Green\r\n}\r\n\r\n// medium\r\n\r\n\r\nexport class ResearchServer extends Machine {\r\n    name = 'Research Server'\r\n    description = 'hold data'\r\n    produces = ResourceBlock.Hypothesis\r\n    behavior = MachineOperation.CollectData\r\n    image = images.server\r\n    prereqs = [Bookshelf]\r\n    size = DeviceSize.Medium\r\n    color = Blue\r\n}\r\n\r\nexport class Orchard extends Machine {\r\n   name = 'Orchard'\r\n   description = 'grow some food'\r\n   produces = ResourceBlock.Food\r\n   size = DeviceSize.Medium\r\n   prereqs = [AlgaeVat]\r\n   color = Green\r\n}\r\n\r\nexport class Cabin extends Machine {\r\n   name = 'Cabin'\r\n   consumes = ResourceBlock.Food\r\n   produces = ResourceBlock.Meal\r\n   image = images.cabin\r\n   prereqs = [Orchard]\r\n   size = DeviceSize.Medium\r\n   color = Orange\r\n}\r\n\r\nexport class Arbor extends Machine {\r\n    name = 'Arbor'\r\n    produces = ResourceBlock.Food\r\n    prereqs = [Orchard]\r\n    size = DeviceSize.Medium\r\n    color = Green\r\n}\r\n\r\nexport class AlgaeVat extends Machine {\r\n    name = 'Algae Vat'\r\n    produces = ResourceBlock.Food\r\n    prereqs = [ OxygenExtractor, Bookshelf, Fridge ]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n}\r\n\r\nexport class CloningVat extends Machine {\r\n    name = 'Cloning Vat'\r\n    description = 'grow some replacements'\r\n    behavior = MachineOperation.SpawnCitizen \r\n    productionTime = 1500\r\n    image = images.vat\r\n    prereqs = [AlgaeVat]\r\n    size = DeviceSize.Medium\r\n    color = Violet\r\n}\r\n\r\n    \r\nexport class Fabricator extends Machine {\r\n    name = 'Fabricator'\r\n    consumes = ResourceBlock.Mineral\r\n    produces = ResourceBlock.Alloy\r\n    size = DeviceSize.Medium\r\n    color = Red\r\n    // ...\r\n}\r\n\r\n// large devices!\r\n\r\nexport class MiningDrill extends Machine {\r\n    name = 'Mining Drill'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n//\r\n}    \r\n\r\nexport class Megafabricator extends Machine {\r\n    name = 'Mega-Fabricator'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Fabricator ]\r\n    color = Red\r\n}\r\n\r\nexport class Preserve extends Machine {\r\n    name = 'Preserve'\r\n    size = DeviceSize.Large\r\n    prereqs = [ Arbor ]\r\n    color = Green\r\n}\r\n\r\n// providence (power, life support...)\r\n\r\n\r\n// export class AirScrubber extends Machine {\r\n//     name = 'Air Scrubber'\r\n// }\r\n\r\n// export class HypermnesisApparatus extends Machine {\r\n//     name = 'Mind Upgrade'\r\n// }\r\n\r\n// export class AtomicCompiler extends Machine {\r\n//     name = 'Atomic Compiler'\r\n// }\r\n\r\n// export class Icicle extends Machine {\r\n//     name = 'Cryo Coffin'\r\n// }\r\n\r\n// export class TimeCrystal extends Machine {\r\n//     name = 'Quantum Portal'\r\n// }\r\n\r\n// export class GamingRotunda extends Machine {\r\n//     name = 'Gaming Rotunda'\r\n// }\r\n\r\n// export class MineralWorkshop extends Machine {\r\n//     name = 'Workshop'\r\n// }\r\n\r\n// export class SingularityFountain extends Machine {\r\n//     name = 'Singularity Fountain'\r\n// }\r\n\r\n// maybe library node 'stores' data?\r\n//export class LibraryNode {\r\n//    name = 'Library Node'\r\n//\r\n//    consumes = ResourceBlock.\r\n//}","import { Color } from \"excalibur\";\r\n\r\n// an abstract/intangible thing (or at least something we don't represent)\r\nexport enum PureValue {\r\n    Power = 'Power',\r\n    Hope = 'Hope',\r\n    Shelter = 'Shelter',\r\n    Oxygen = 'Oxygen',\r\n}\r\n\r\nexport type Economy = { [key in PureValue]: {\r\n    supply: number,\r\n    demand: number\r\n} }\r\n\r\nexport const emptyMarket : Economy = {\r\n    Power: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n    Hope: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n    Shelter: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n    Oxygen: {\r\n        supply: 0,\r\n        demand: 0\r\n    },\r\n}\r\n\r\nexport enum ResourceBlock {\r\n    // base\r\n    Food = 'Food',\r\n    Ore = 'Ore',\r\n    Data = 'Data',\r\n    // derived\r\n    Meal = 'Meal',\r\n    Hypothesis = 'Hypothesis',\r\n    Mineral = 'Mineral',\r\n    Alloy = \"Alloy\"\r\n}\r\n\r\nconst blockColors: { [key in ResourceBlock]: Color } = {\r\n    Food: Color.Green,\r\n    Data: Color.Blue,\r\n    Mineral: Color.Red,\r\n\r\n    Meal: Color.Yellow.darken(0.2),\r\n    Hypothesis: Color.Violet.darken(0.4),\r\n    Ore: Color.Red.darken(0.5),\r\n\r\n    Alloy: Color.LightGray.darken(0.2),\r\n}\r\n\r\nexport function blockColor(block: ResourceBlock) {\r\n    let baseColor = blockColors[block]\r\n    //Color.Violet\r\n    //switch(block) {\r\n    //    case ResourceBlock.Food: baseColor = Color.Green; break\r\n    //    case ResourceBlock.Ore:  baseColor = Color.Red; break\r\n    //    case ResourceBlock.Data: baseColor = Color.Blue; break\r\n    //    case ResourceBlock.Meal: baseColor = Color.Yellow; break\r\n    //}\r\n    return baseColor.desaturate(0.25).lighten(0.125)\r\n}\r\n\r\n","import { Color } from 'excalibur';\r\nimport { ResourceBlock } from './Economy';\r\nimport { Scale } from '../values/Scale';\r\nimport { Orientation } from '../values/Orientation';\r\nimport { Machine, Bookshelf, CommandCenter, CloningVat, OxygenExtractor, WaterCondensingMachine, Desk, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Orchard, Cabin, SolarCell, Arbor, Megafabricator, MiningDrill, Preserve, Workstation, Houseplant, Fabricator } from './Machine';\r\nimport { SpaceFunction } from './SpaceFunction';\r\n\r\nconst { major, minor } = Scale\r\n\r\nexport class Structure {\r\n    name: string = '(structure name)';\r\n    description: string = '(structure description)';\r\n    view: string = '<structure (room) view>';\r\n    width: number = 10\r\n    height: number = 10\r\n    zoom: number = 1\r\n    dominantColor: Color = Color.Gray\r\n\r\n    consumes: ResourceBlock = null\r\n    produces: ResourceBlock = null\r\n    productionTime: number = 500\r\n\r\n    // constructor(public origin: Vector = new Vector(0, 0)) { }\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines: (typeof Machine)[] = []\r\n\r\n    prereqs: (typeof Structure)[] = []\r\n\r\n    // slotSize\r\n}\r\n\r\n\r\nexport class MainTunnel extends Structure {\r\n    name: string = 'Main Tunnel';\r\n    description: string = 'Elevating';\r\n    view: string = 'TunnelView';\r\n    width: number = major.second\r\n    height: number = major.eighth\r\n    zoom = 0.25\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Corridor ],\r\n        [Orientation.Right]: [ Corridor ],\r\n        [Orientation.Up]: [ MissionControl ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\n\r\nexport class SurfaceRoad extends Structure {\r\n    name: string = 'Road'\r\n    description: string = 'go for a walk'\r\n    view: string = 'SurfaceRoadView'\r\n    width: number = minor.fifth\r\n    height: number = minor.first\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ Dome, MissionControl ],\r\n        [Orientation.Right]: [  Dome, MissionControl ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n}\r\n\r\nexport class Corridor extends Structure {\r\n    name: string = 'Corridor'\r\n    description: string = 'in the hallway'\r\n    view: string = 'CorridorView'\r\n    width: number = minor.fifth\r\n    height: number = minor.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Right]: [\r\n            MainTunnel,\r\n            CommonArea\r\n        ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n    prereqs = [SurfaceRoad] //MainTunnel]\r\n}\r\n\r\nexport class Ladder extends Structure {\r\n    name = 'Ladder'\r\n    description = 'connect vertically'\r\n    view = 'LadderView'\r\n    width = minor.third\r\n    height = 100 + major.third\r\n    zoom = 0.5\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Up]: [ CommonArea ],\r\n        [Orientation.Down]: [ CommonArea ],\r\n        [Orientation.Left]: [ ],\r\n        [Orientation.Right]: [ ],\r\n    }\r\n    prereqs = [Corridor, SmallRoomThree]\r\n}\r\n\r\n// 'abstract' structure...\r\n\r\nclass Dome extends Structure {\r\n    // name: string = 'Biodome';\r\n    description: string = 'Biome sweet biome';\r\n    // dominantColor = Color.Green\r\n\r\n    view: string = 'DomeView';\r\n    width: number  = 2 * major.eighth\r\n    height: number = major.eighth\r\n    zoom = 0.2\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ ],\r\n        [Orientation.Down]: [ ],\r\n    }\r\n\r\n    machines = [\r\n        SolarCell,\r\n        OxygenExtractor, WaterCondensingMachine,\r\n        // Cabin, CookingFire\r\n    ]\r\n}\r\n\r\n// common subsurface room...\r\nclass CommonArea extends Structure {\r\n    name: string = 'Commons'\r\n    description: string = 'hallway cap'\r\n    view: string = 'CommonAreaView'\r\n    width: number = major.eighth\r\n    height: number = major.fifth\r\n\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [\r\n            Corridor, CommonArea\r\n            ],\r\n        [Orientation.Right]: [\r\n            Corridor,\r\n            CommonArea,\r\n        ],\r\n        [Orientation.Up]: [ Ladder ],\r\n        [Orientation.Down]: [ Ladder ],\r\n    }\r\n\r\n    machines = [\r\n        Stove,\r\n        Bed,\r\n        Desk,\r\n        Bookshelf,\r\n        Fridge,\r\n        Workstation,\r\n        Houseplant,\r\n    ]\r\n\r\n    prereqs = [\r\n        // Dome \r\n    ]\r\n}\r\n\r\nexport class SmallRoomTwo extends CommonArea {\r\n    name = 'Small Room (2)'\r\n    width = major.eighth\r\n    prereqs = [ SmallDome ]\r\n    // two small slots\r\n}\r\n\r\nexport class SmallRoomThree extends CommonArea {\r\n    name = 'Small Room (3)'\r\n    prereqs = [SmallRoomTwo]\r\n    view = 'SmallRoomThreeView'\r\n    width = 2 * major.eighth\r\n}\r\n\r\nexport class MediumRoom extends CommonArea {\r\n    name = 'Medium Room'\r\n    prereqs = [ SmallRoomThree ]\r\n    view: string = 'MediumRoomView'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.third\r\n    // two medium slots...\r\n    machines = [\r\n        ResearchServer,\r\n        AlgaeVat,\r\n        CloningVat,\r\n        Fabricator,\r\n    ]\r\n}\r\n\r\nexport class LargeRoom extends CommonArea {\r\n    name = 'Large Room'\r\n    view = 'LargeRoomView'\r\n    prereqs = [ MediumRoom ]\r\n    width = 6 * major.eighth\r\n    height = 4 * major.fifth\r\n\r\n    // two big slots?\r\n    machines = [\r\n        MiningDrill,\r\n        Megafabricator,\r\n        Preserve,\r\n    ]\r\n}\r\n\r\n/// surface bldgs\r\n\r\nexport class SmallDome extends Dome {\r\n    name = 'Small Dome'\r\n    width = 3 * major.eighth\r\n    height = 2 * major.eighth\r\n}\r\n\r\nexport class MidDome extends Dome {\r\n    name = 'Mid Dome'\r\n    view = 'MidDomeView'\r\n    width = 4 * major.eighth\r\n    height = 3 * major.eighth\r\n    prereqs = [ SmallDome, MediumRoom ]\r\n    machines = [\r\n        Cabin,\r\n        Orchard,\r\n        Arbor,\r\n        // Campfir\r\n    ]\r\n}\r\n\r\n//////\r\n\r\nexport class MissionControl extends Structure {\r\n    name: string = 'Mission Control';\r\n    description: string = 'Keeping everything on track';\r\n    view: string = 'MissionControlView';\r\n    width: number = 6 * major.eighth\r\n    height: number = 1 * major.sixth\r\n    zoom = 0.1\r\n    connections: { [key in Orientation]: (typeof Structure)[] } = {\r\n        [Orientation.Left]: [ SurfaceRoad ],\r\n        [Orientation.Right]: [ SurfaceRoad ],\r\n        [Orientation.Up]: [ MainTunnel ],\r\n        [Orientation.Down]: [ MainTunnel ],\r\n    }\r\n\r\n    machines = [ CommandCenter ]\r\n}\r\n","const majorUnit = 16\r\nconst minorUnit = 4\r\n\r\nconst majorScale = {\r\n    first: majorUnit,\r\n    second: majorUnit * 2,\r\n    third: majorUnit * 3,\r\n    fourth: majorUnit * 4,\r\n    fifth: majorUnit * 5,\r\n    sixth: majorUnit * 6,\r\n    seventh: majorUnit * 7,\r\n    eighth: majorUnit * 8,\r\n}\r\n\r\nconst minorScale = {\r\n    first:   minorUnit,\r\n    second:  minorUnit * 2,\r\n    third:   minorUnit * 3,\r\n    fourth:  minorUnit * 4,\r\n    fifth:   minorUnit * 5,\r\n    sixth:   minorUnit * 6,\r\n    seventh: minorUnit * 7,\r\n    eighth:  minorUnit * 8,\r\n}\r\n\r\nexport const Scale = {\r\n    major: majorScale,\r\n    minor: minorScale\r\n}","import { CorridorView } from \".\";\r\n\r\nexport class SurfaceRoadView extends CorridorView {\r\n    edgeWidth: 0 //.5\r\n    colorBase() { return this.color.lighten(0.1); }\r\n\r\n}","import { Actor, Label, Color, Vector } from \"excalibur\";\r\nimport { Machine, MachineOperation } from \"../models/Machine\";\r\nimport { Building, CommonAreaView } from \"./Building\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Citizen } from \"./Citizen\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { SmallRoomThree, SmallRoomTwo, MediumRoom, SmallDome, MidDome, LargeRoom } from \"../models/Structure\";\r\nimport { getVisibleDeviceSize } from \"../values/DeviceSize\";\r\n\r\nexport class Device extends Actor {\r\n    product: ResourceBlock[] = []\r\n    // capacity: number = 4\r\n\r\n    nameLabel: Label\r\n\r\n    image: any\r\n    imageLoaded: boolean = false\r\n\r\n    building: Building // set once built?\r\n\r\n    inUse: boolean = false\r\n\r\n    constructor(\r\n        // public building: Building,\r\n        public machine: Machine,\r\n        private initialPos: Vector\r\n    ) {\r\n        super(\r\n            initialPos.x,\r\n            initialPos.y,\r\n            getVisibleDeviceSize(machine.size),\r\n            getVisibleDeviceSize(machine.size),\r\n            // machine.height,\r\n            machine.color\r\n        )\r\n\r\n        this.nameLabel = new Label(this.machine.name, 0, 0, 'Helvetica')\r\n        this.nameLabel.fontSize = 6\r\n        this.nameLabel.color = Color.White\r\n\r\n        this.image = new Image();\r\n        this.image.onload = function () {\r\n             this.imageLoaded = true\r\n        }\r\n        this.image.src = machine.image\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        // super.draw(ctx, delta)\r\n        ctx.drawImage(\r\n            this.image,\r\n            this.pos.x - this.getWidth() / 2,\r\n            this.pos.y - this.getHeight() / 2 - 10,\r\n            this.getWidth(), this.getHeight()\r\n        )\r\n\r\n        let showLabel = true\r\n        if (showLabel) {\r\n            this.nameLabel.pos = this.getCenter()\r\n            this.nameLabel.pos.x -= 10 //ctx.measureText(this.machine.name).width / 2\r\n            this.nameLabel.pos.y += 8 + this.getHeight()/2\r\n            this.nameLabel.draw(ctx, delta)\r\n        }\r\n\r\n        let bx = this.x - this.getWidth()/2 + 5, by = this.y - 23\r\n        let blockSize = 5\r\n        this.product.forEach((produced, index) => {\r\n            ctx.fillStyle = blockColor(produced).desaturate(0.3).lighten(0.2).toRGBA();\r\n            ctx.fillRect(bx + blockSize * index, by - blockSize, blockSize-1, blockSize-1)\r\n        })\r\n    }\r\n\r\n    get produces()       { return this.machine.produces }\r\n    get consumes()       { return this.machine.consumes }\r\n    get workTime()       { return this.machine.workTime }\r\n    get generationTime() { return this.machine.generationTime }\r\n    // get productionTime() { return this.machine.productionTime }\r\n    get capacity()       { return this.machine.capacity }\r\n\r\n    async interact(citizen: Citizen) {\r\n        if (this.inUse) {\r\n            citizen.waitToUse(this)\r\n            return\r\n        }\r\n\r\n        if (this.product.length > 0) {\r\n            this.product.pop()\r\n            this.inUse = true\r\n            await citizen.progressBar(500) //this.productionTime)\r\n            this.inUse = false\r\n            citizen.carry(this.produces)\r\n        } else {\r\n            if (this.consumes && citizen.carrying === this.consumes) {\r\n                this.inUse = true\r\n                await citizen.progressBar(this.workTime)\r\n                citizen.carry(this.produces)\r\n                this.inUse = false\r\n            }\r\n        }\r\n\r\n        if (this.machine.behavior === MachineOperation.Work) {\r\n            // ...\r\n\r\n        } else if (this.machine.behavior === MachineOperation.CollectResource) {\r\n            // generic redeem..\r\n            let resource = citizen.drop()\r\n            if (resource) {\r\n                this.building.redeem(resource)\r\n            }\r\n        } else if (this.machine.behavior === MachineOperation.CollectMeals) {\r\n            // store a meal...\r\n            if (citizen.carrying === ResourceBlock.Meal) {\r\n                let resource = citizen.drop()\r\n                if (resource) {\r\n                    this.building.redeem(resource)\r\n                }\r\n            }\r\n        } else if (this.machine.behavior === MachineOperation.CollectData) {\r\n            // store research\r\n            if (citizen.carrying === ResourceBlock.Data) {\r\n                let resource = citizen.drop()\r\n                if (resource) {\r\n                    this.building.redeem(resource)\r\n                }\r\n            }\r\n        } else {\r\n            console.warn(\"no handler for this interaction\", { device: this })\r\n        }\r\n    }\r\n\r\n    public produce(step: number) {\r\n        if (step % this.generationTime === 0) {\r\n            if (this.machine.behavior === MachineOperation.Work) {\r\n\r\n                if (this.produces && !this.consumes && this.product.length < this.capacity) {\r\n                    this.product.push(this.produces)\r\n                }\r\n            } else if (this.machine.behavior === MachineOperation.SpawnCitizen) {\r\n                setTimeout(() => this.building.populate(this.pos), 100)\r\n            }\r\n        }\r\n    }\r\n\r\n    // todo only snap when close enough? try to prevent some mis-clicks?\r\n    snap(planet: Planet, pos: Vector = this.pos) {\r\n        let bldg = planet.colony.closestBuildingByType(pos,\r\n            // hmmm\r\n            [SmallDome, MidDome, SmallRoomTwo, SmallRoomThree, MediumRoom, LargeRoom],\r\n            // machines count < device slots count\r\n            (bldg: Building) => {\r\n                let hasSpace = bldg.hasPlaceForDevice()\r\n                return hasSpace && bldg.structure.machines.some(Machine => this.machine instanceof Machine)\r\n\r\n            }\r\n        )\r\n\r\n        if (bldg) {\r\n            this.building = bldg;\r\n            this.pos = this.building.nextDevicePlace().position\r\n            //devicePlaces()[\r\n            //    this.building.devices.length\r\n            //]\r\n        }\r\n\r\n        return !!bldg;\r\n    }\r\n\r\n    finalize() {\r\n        // this.building.devices.push(this)\r\n    }\r\n}","import { minBy } from \"../Util\";\r\n\r\nexport class Graph<T> {\r\n    private empty: boolean = true\r\n    public nodes: T[] = []\r\n    private edges: { [key: number]: number[] } = {}\r\n    private edgesInverse: { [key: number]: number[] } = {}\r\n\r\n    public isEmpty(): boolean {\r\n        return this.empty;\r\n    }\r\n\r\n    public get size() { return this.nodes.length }\r\n\r\n    public node(newNode: T) {\r\n        this.empty = false;\r\n        if (!this.contains(newNode)) {\r\n            this.nodes.push(newNode)\r\n        }\r\n    }\r\n\r\n    public contains(testNode: T) {\r\n        return this.nodes.includes(testNode)\r\n    }\r\n\r\n    public findOrCreate(testNode: T, measure: (a: T, b: T) => number, tolerance: number = 5): T {\r\n        let nodes = this.dfs();\r\n        let closest = minBy(nodes, (node: T) => measure(testNode, node))\r\n        if (closest && measure(closest, testNode) < tolerance) {\r\n            return closest;\r\n        }\r\n        return testNode;\r\n    }\r\n\r\n    public edge(src: T, dst: T) {\r\n        this.node(src)\r\n        this.node(dst)\r\n\r\n        let s = this.indexOf(src), d = this.indexOf(dst)\r\n        this.edges[s] = this.edges[s] || []\r\n        this.edges[s].push(d)\r\n\r\n        this.edgesInverse[d] = this.edgesInverse[d] || []\r\n        this.edgesInverse[d].push(s)\r\n    }\r\n\r\n    public union(otherGraph: Graph<T>) {\r\n       otherGraph.edgeList().forEach(([a,b]) => this.edge(a,b))\r\n    }\r\n\r\n    public edgeList(): [T,T][] {\r\n        let theEdges = []\r\n        for (let node of this.nodes) {\r\n            let index = this.indexOf(node)\r\n            if (this.edges[index]) {\r\n                for (let otherIndex of this.edges[index]) {\r\n                    let otherNode = this.nodes[otherIndex]\r\n                    if (!theEdges.includes([otherNode, node])) {\r\n                        theEdges.push([node, otherNode])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return theEdges\r\n    }\r\n\r\n    public adjacent(testNode: T): T[] {\r\n        let index = this.indexOf(testNode)\r\n        let vertex = this.adjacentIndices(index)\r\n        return vertex.map((n) => this.nodes[n])\r\n    }\r\n\r\n    private adjacentIndices(testNodeIndex: number): number[] {\r\n        let es = this.edges[testNodeIndex] || []\r\n        let esInv = this.edgesInverse[testNodeIndex] || []\r\n        let vertex = [...es, ...esInv ]\r\n        return vertex\r\n    }\r\n\r\n    public dfs(root:T=null, visited=[]): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.dfsIndex(rIndex).map(n => this.nodes[n])\r\n    }\r\n\r\n    private dfsIndex(rootIndex:number=0, visited:number[]=[]) {\r\n        visited.push(rootIndex)\r\n        let children = this.adjacentIndices(rootIndex)\r\n        children.forEach((childIndex: number) => {\r\n            if (!visited.includes(childIndex)) {\r\n                this.dfsIndex(childIndex, visited)\r\n            }\r\n        })\r\n\r\n        return visited\r\n    }\r\n\r\n    public bfs(root:T=null, cb: (x: number,y: number)=>boolean = ()=>true): T[] {\r\n        let rIndex = root ? this.indexOf(root) : 0\r\n        return this.bfsIndex(rIndex, cb).map(n => this.nodes[n])\r\n    }\r\n\r\n    private bfsIndex(rootIndex:number=null, cb: (x: number, y: number) => boolean = () => true): number[] {\r\n        let halt = false;\r\n        let visited: number[] = []\r\n        visited.push(rootIndex)\r\n        while (visited.length < this.nodes.length) {\r\n            for (let visitedNode of visited) {\r\n                let adj: number[] = this.adjacentIndices(visitedNode)\r\n                for (let adjacentNode of adj) {\r\n                    if (!visited.includes(adjacentNode)) {\r\n                        if (!cb(visitedNode, adjacentNode)) {\r\n                            halt = true;\r\n                            break;\r\n                        }\r\n                        visited.push(adjacentNode)\r\n                    }\r\n                }\r\n                if (halt) break;\r\n            }\r\n            if (halt) break;\r\n        }\r\n        return visited\r\n    }\r\n\r\n    public shortestPath(src: T, dst: T, maxStep: number = 256): T[] {\r\n        let prevStep = {}\r\n        let dstIndex = this.indexOf(dst)\r\n        this.bfs(src, (prev, curr) => {\r\n            prevStep[curr] = prev;\r\n            return curr !== dstIndex\r\n        })\r\n        let path = []\r\n        let curr = dstIndex\r\n        let steps = 0\r\n        let srcIndex = this.indexOf(src)\r\n        while (!path.includes(srcIndex) && steps < maxStep) {\r\n            path.push(curr)\r\n            curr = prevStep[curr]\r\n            steps += 1\r\n        }\r\n        let pathNodes = path.map(n => this.nodes[n])\r\n        return pathNodes.reverse()\r\n    }\r\n\r\n    private indexOf(node: T) {\r\n        return this.nodes.indexOf(node)\r\n    }\r\n\r\n}","import { Engine, DisplayMode, Loader } from 'excalibur';\r\nimport { World } from './models/World';\r\nimport { Resources } from './Resources';\r\n\r\nexport class Game extends Engine {\r\n\r\n  static citizenSpeed: number = 100\r\n\r\n  constructor(public world: World) {\r\n    super({\r\n      width: 800,\r\n      height: 600,\r\n      displayMode: DisplayMode.FullScreen,\r\n      backgroundColor: world.skyColor\r\n    });\r\n  }\r\n  public start() { //loader: ex.Loader) {\r\n    let loader = new Loader();\r\n    for (let key in Resources) {\r\n      loader.addResource(Resources[key]);\r\n    }\r\n    return super.start(loader);\r\n  }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize, getVisibleDeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class LargeRoomView extends CommonAreaView {\r\n    // device nodes are large sized...\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - getVisibleDeviceSize(DeviceSize.Large)/2 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Large))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class MediumRoomView extends CommonAreaView {\r\n    // device nodes are medium sized...\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 20 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MidDomeView extends DomeView {\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 20\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Medium))\r\n    }\r\n}","import { CommonAreaView } from \".\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DevicePlace } from \"./Building\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class SmallRoomThreeView extends CommonAreaView {\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 10\r\n        let ds = [\r\n            new Vector(x - w / 2, y),\r\n            new Vector(x, y),\r\n            new Vector(x + w / 2, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Label, Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock, blockColor } from \"../../models/Economy\";\r\nexport class ResourceListEntry extends Actor {\r\n    icon: Actor;\r\n    count: Label;\r\n    constructor(x: number, y: number, resourceBlock: ResourceBlock, protected value: number) {\r\n        super(x, y, 10, 10); // 10,10,blockColor(resourceBlock))\r\n        let icon = new Actor(x, y, 10, 10, blockColor(resourceBlock)); //ResourceBlock.Meal))\r\n        this.add(icon);\r\n        this.count = new Label(`x${value}`, x + 10, y + 8, 'Helvetica');\r\n        this.count.fontSize = 12;\r\n        this.count.color = Color.White;\r\n        this.add(this.count);\r\n    }\r\n    credit(amt: number) {\r\n        this.value += amt;\r\n        this.count.text = `x${this.value}`;\r\n    }\r\n}\r\n","import { Color, Actor } from \"excalibur\";\r\nimport { ResourceBlock } from \"../../models/Economy\";\r\nimport { ResourceListEntry } from \"./ResourceListEntry\";\r\nexport class ResourcesList extends Actor {\r\n    entries: {\r\n        [block in ResourceBlock]: ResourceListEntry;\r\n    } = {\r\n            // non-accruable\r\n            [ResourceBlock.Food]: null,\r\n            [ResourceBlock.Hypothesis]: null,\r\n            [ResourceBlock.Ore]: null,\r\n\r\n            // displayed/accruable\r\n            [ResourceBlock.Meal]: null,\r\n            [ResourceBlock.Mineral]: null,\r\n            [ResourceBlock.Data]: null,\r\n\r\n            // derived/accurable\r\n            [ResourceBlock.Alloy]: null,\r\n        };\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 60, 60, Color.DarkGray.darken(0.8));\r\n        let rx0 = -8, ry0 = -10;\r\n        let resources = [ResourceBlock.Meal, ResourceBlock.Data, ResourceBlock.Mineral];\r\n        resources.forEach((resource, index) => {\r\n            let rx = rx0, ry = ry0 + index * 10;\r\n            let entry = new ResourceListEntry(rx, ry, resource, 0);\r\n            this.add(entry);\r\n            this.entries[resource] = entry;\r\n        });\r\n    }\r\n\r\n    increment(resource: ResourceBlock) {\r\n        console.log(\"INCREMENT\", { resource })\r\n        let res = this.entries[resource]\r\n        if (res) {\r\n            res.credit(1);\r\n        }\r\n    }\r\n}\r\n","import { Label, UIActor, Color } from \"excalibur\";\r\nimport { Structure, Corridor, SurfaceRoad, Ladder, SmallRoomThree, SmallRoomTwo, MediumRoom, MidDome, SmallDome, LargeRoom } from \"../../models/Structure\";\r\nimport { Game } from \"../../Game\";\r\nimport { ResourceBlock, emptyMarket } from \"../../models/Economy\";\r\nimport { ResourcesList } from \"./ResourcesList\";\r\nimport { Desk, Bookshelf, Machine, CloningVat, WaterCondensingMachine, OxygenExtractor, AlgaeVat, Stove, Bed, Fridge, ResearchServer, Cabin, Orchard, SolarCell, Megafabricator, Arbor, Fabricator, MiningDrill, Preserve, Workstation, Houseplant } from \"../../models/Machine\";\r\nimport { flatSingle } from \"../../Util\";\r\nimport { Colony } from \"../Planet/Colony\";\r\n\r\nexport class Hud extends UIActor {\r\n    private messageLabel: Label\r\n\r\n\r\n    private resources: ResourcesList\r\n\r\n    private _structurePaletteElement: HTMLDivElement\r\n    private _machinePaletteElement: HTMLDivElement\r\n\r\n    static structuresForPalette = [\r\n        // infra\r\n        SurfaceRoad,\r\n        Corridor,\r\n        Ladder,\r\n\r\n        // surface\r\n        SmallDome,\r\n        MidDome,\r\n\r\n        // subsurface\r\n        SmallRoomTwo,\r\n        SmallRoomThree,\r\n        MediumRoom,\r\n        LargeRoom,\r\n\r\n    ];\r\n\r\n    comprehendedStructures: (typeof Structure)[] = []\r\n    builtStructures: (typeof Structure)[] = []\r\n\r\n    static machinesForPalette = [\r\n        AlgaeVat,\r\n        Arbor,\r\n        Bed,\r\n        Bookshelf,\r\n        Cabin,\r\n        CloningVat,\r\n        Desk,\r\n        Fabricator,\r\n        Fridge,\r\n        Houseplant,\r\n        Megafabricator,\r\n        MiningDrill,\r\n        Orchard,\r\n        OxygenExtractor,\r\n        Preserve,\r\n        ResearchServer,\r\n        SolarCell,\r\n        Stove,\r\n        WaterCondensingMachine,\r\n        Workstation,\r\n    ]\r\n\r\n    comprehendedMachines: (typeof Machine)[] = []\r\n    builtMachines: (typeof Machine)[] = []\r\n\r\n    constructor(private game: Game, protected onBuildingSelect = null, protected onMachineSelect = null) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n\r\n        this.messageLabel = new Label('hi', 20, game.canvasHeight - 64, 'Verdana')\r\n        this.messageLabel.fontSize = 24\r\n        this.messageLabel.color = Color.White\r\n        this.add(this.messageLabel)\r\n\r\n        this._makeStructurePalette(onBuildingSelect)\r\n        this._makeMachinePalette(onMachineSelect)\r\n\r\n        this.resources = new ResourcesList(50, 40)\r\n        this.add(this.resources)\r\n\r\n        // this.add(this.status)\r\n\r\n    }\r\n\r\n    setMessage(text: string) { this.messageLabel.text = text }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this._structurePaletteElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._structurePaletteElement.style.left = `${left + 20}px`;\r\n            this._structurePaletteElement.style.top = `${top + 100}px`;\r\n        }\r\n        if (this._machinePaletteElement) {\r\n            let left = ctx.canvas.offsetLeft;\r\n            let top = ctx.canvas.offsetTop;\r\n            this._machinePaletteElement.style.left = `${left + this.game.canvasWidth - 180}px`;\r\n            this._machinePaletteElement.style.top = `${top + 100}px`;\r\n        }\r\n    }\r\n\r\n    resourceGathered(resource: ResourceBlock) {\r\n        this.resources.increment(resource)\r\n\r\n    }\r\n\r\n    updatePalettes(colony: Colony) {\r\n        this.updateBuildingPalette(colony)\r\n        this.updateMachinePalette(colony)\r\n    }\r\n\r\n    private updateBuildingPalette(colony: Colony) { //bldgs: Building[]) {\r\n        this.builtStructures = //bldgs\r\n          Hud.structuresForPalette.filter((structure) => colony.buildings.some(b => b.structure instanceof structure))\r\n\r\n\r\n        this.comprehendedStructures = Hud.structuresForPalette.filter((structure: typeof Structure) => {\r\n            let s = new structure()\r\n            let prereqs: (typeof Structure)[] = s.prereqs\r\n            // console.log(\"can i build\", { name: s.name, prereqs })\r\n            return prereqs.every((prereq: (typeof Structure)) => {\r\n                let built = this.builtStructures.some((s: (typeof Structure)) => s === prereq)\r\n                // console.log(\"do i have any\", { prereq, built })\r\n                return built\r\n            })\r\n        })\r\n\r\n        console.log(\"Built\", { built: this.builtStructures, comprehended: this.comprehendedStructures })\r\n\r\n          // rebuild palette with updated available buildings\r\n        this._structurePaletteElement.parentElement.removeChild(this._structurePaletteElement)\r\n          this._makeStructurePalette(this.onBuildingSelect)\r\n    }\r\n\r\n    private updateMachinePalette(colony: Colony) { //bldgs: Building[]) {\r\n        let bldgs = colony.buildings\r\n        let availableMachines = flatSingle(bldgs.map(b => b.structure.machines))\r\n        let devices = colony.findAllDevices() //flatSingle(bldgs.map(b => b.devices))\r\n\r\n        this.builtMachines = //flatSingle(bldg.map(b => b.devices))\r\n        Hud.machinesForPalette.filter((machine) => devices.some(d => d.machine instanceof machine))\r\n        // console.log(\"available machines\", { availableMachines })\r\n        this.comprehendedMachines = Hud.machinesForPalette.filter((machine: typeof Machine) => {\r\n            let canBuild = availableMachines.includes(machine);\r\n            // let m = new machine()\r\n            return canBuild && (new machine()).prereqs.every((prereq: (typeof Machine)) => {\r\n                return this.builtMachines.some((m: (typeof Machine)) => m === prereq)\r\n            })\r\n\r\n        }) //availableMachines\r\n        this._machinePaletteElement.parentElement.removeChild(this._machinePaletteElement)\r\n        this._makeMachinePalette(this.onMachineSelect)\r\n    }\r\n\r\n\r\n    protected _makeStructurePalette(fn: (Structure) => any) {\r\n        this._structurePaletteElement = document.createElement('div') \r\n        // this._structurePaletteElement.id = '_thePalette'\r\n        this._structurePaletteElement.style.position = 'absolute'\r\n        this._structurePaletteElement.style.border = '1px solid white'\r\n        document.body.appendChild(this._structurePaletteElement)\r\n\r\n        this.comprehendedStructures\r\n        .map(structure => new structure())\r\n        // .sort((a,b) => a.dominantColor > b.dominantColor ? -1 : 1)\r\n        .forEach((structure: Structure) => {\r\n            let label = structure.name\r\n            if (!this.builtStructures.map(s => new s().name).includes(structure.name)) {\r\n                label += ' *';\r\n            }\r\n            let clr = structure.dominantColor\r\n            let _paletteButton = this.buttonFactory(label, clr); //structure);\r\n            this._structurePaletteElement.appendChild(\r\n                _paletteButton\r\n            )\r\n            if (fn) {\r\n                _paletteButton.onclick = () => { fn(structure) }\r\n            }\r\n        });\r\n    }\r\n\r\n    protected _makeMachinePalette(fn: (Machine) => any) {\r\n        this._machinePaletteElement = document.createElement('div')\r\n        // this._machinePaletteElement.id =\r\n        this._machinePaletteElement.style.position = 'absolute'\r\n        this._machinePaletteElement.style.border = '1px solid white'\r\n        document.body.appendChild(this._machinePaletteElement)\r\n\r\n        // Hud.machinesForPalette\r\n        this.comprehendedMachines\r\n            .map(Machine => new Machine())\r\n            .sort((a,b) => a.color > b.color ? -1 : 1)\r\n            .forEach(machine => {\r\n                let label = machine.name\r\n                if (!this.builtMachines.map(m => new m().name).includes(machine.name)) {\r\n                    label += ' *'\r\n                }\r\n                let clr = machine.color\r\n                let btn = this.buttonFactory(label, clr)\r\n                this._machinePaletteElement.appendChild(btn)\r\n                if (fn) {\r\n                    btn.onclick = () => { fn(machine) }\r\n                }\r\n            })\r\n        // this.machin\r\n\r\n    }\r\n\r\n    private buttonFactory(label: string, color: Color) { //s: Structure) {\r\n        let bg = color.darken(0.6).desaturate(0.5).clone()\r\n        bg.a = 0.8\r\n        let fg = color.lighten(0.8).desaturate(0.4).clone()\r\n        let paletteButton = document.createElement('button');\r\n\r\n        paletteButton.textContent = label; // `${s.name}`;\r\n\r\n        paletteButton.style.display = 'block';\r\n        paletteButton.style.fontSize = '12pt';\r\n\r\n        paletteButton.style.fontFamily = 'Helvetica';\r\n        paletteButton.style.fontWeight = '600';\r\n        paletteButton.style.padding = '8px';\r\n        paletteButton.style.width = '160px';\r\n        paletteButton.style.textTransform = 'uppercase'\r\n        paletteButton.style.border = '1px solid rgba(255,255,255,0.08)'\r\n\r\n        paletteButton.style.background = bg.toRGBA();\r\n        paletteButton.style.color = fg.toRGBA()\r\n        paletteButton.onmouseover = () => {\r\n            paletteButton.style.background = bg.saturate(0.5).lighten(0.95).toRGBA()\r\n            paletteButton.style.color = fg.lighten(0.9).toRGBA()\r\n        }\r\n        paletteButton.onmouseleave = () => {\r\n            paletteButton.style.background = bg.toRGBA()\r\n            paletteButton.style.color = fg.toRGBA()\r\n        }\r\n\r\n        return paletteButton;\r\n    }\r\n}","import { CommonAreaView } from '.'\r\nimport { Vector } from 'excalibur';\r\n// import { Corridor, Refinery, Mine } from '../../models/Structure';\r\n\r\nexport class MineView extends CommonAreaView {\r\n    floorHeight = 150\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    // validConnectingStructures() { return [ Corridor, Mine, Refinery ]}\r\n}","import { TunnelView } from \".\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\n\r\nexport class LadderView extends TunnelView {\r\n    // edgeWidth = 1\r\n    originSlot: Slot = null\r\n    constrainCursor(cursor: Vector): Vector {\r\n       if (this.pickingOrigin) {\r\n\r\n       } else {\r\n           cursor.x = this.pos.x\r\n       }\r\n       return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        if (this.pickingOrigin) { \r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot) {\r\n                    this.originSlot = theSlot\r\n                }\r\n            }\r\n        } else {\r\n            if (this.facing === Orientation.Up) {\r\n                let maxHeight = this.originSlot.pos.y - this.planet.getTop() - 25\r\n\r\n                let h = Math.min(maxHeight, Math.max(100, this.originSlot.pos.y - cursor.y))\r\n                this.setHeight((h/50)*50)\r\n                this.pos.y = this.originSlot.pos.y - this.getHeight()\r\n            } else {\r\n                let h = Math.max(100, cursor.y - this.originSlot.pos.y)\r\n                this.setHeight((h/50)*50) // - cursor.y))\r\n            }\r\n        }\r\n    }\r\n}","import { DomeView } from \".\";\r\nimport { Color } from \"excalibur\";\r\n\r\nexport class ArcologyView extends DomeView {\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n        this.drawShape(ctx, this.pos.x, this.pos.y)\r\n\r\n    }\r\n\r\n    drawShape(ctx, xoff, yoff) {\r\n        let h = this.getHeight()\r\n        let w = this.getWidth()\r\n        ctx.beginPath();\r\n        ctx.moveTo(0 + xoff, h + yoff);\r\n        // ctx.bezierCurveTo(-3 + xoff, 514 + yoff, 1 + xoff, 406 + yoff, 1 + xoff, 391 + yoff);\r\n        ctx.bezierCurveTo(1 + xoff, h - 150 + yoff, 121 + xoff, 70 + yoff, w - 80 + xoff, 8 + yoff);\r\n        ctx.bezierCurveTo(w - 40 + xoff, 2 + yoff, w - 5 + xoff, 11 + yoff, w - 10 + xoff, 25 + yoff);\r\n        ctx.bezierCurveTo(w - 5 + xoff, 10 + yoff, w + xoff, (h-10) + yoff, w + xoff, h + yoff);\r\n        ctx.lineTo(0 + xoff, h + yoff);\r\n        ctx.fillStyle = this.mainColor().toRGBA()\r\n        ctx.fill();\r\n    }\r\n}","import { Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { MissionControl } from \"../../models/Structure\";\r\nimport { range, eachCons, measureDistance, drawRect } from \"../../Util\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Orientation, flip } from \"../../values/Orientation\";\r\nimport { Graph } from \"../../values/Graph\";\r\n\r\nexport class TunnelView extends Building {\r\n    pickingOrigin: boolean = true\r\n    hideBox = true\r\n    // edgeWidth = 0.2\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    draw(ctx, delta) {\r\n        let rect = this.aabb()\r\n        drawRect(ctx, rect, 0, this.color.darken(0.1)) \r\n\r\n        let n = 5\r\n        rect.x = rect.x + this.getWidth() / n\r\n        rect.width -= (2) * (this.getWidth() / n)\r\n        drawRect(ctx, rect, 0, this.color.darken(0.2)) \r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y\r\n        return [\r\n            new Vector(Math.floor(x), y) //, Math.floor(y)-4)\r\n        ];\r\n    }\r\n\r\n    graph(supergraph: Graph<Vector> = new Graph()): Graph<Vector> {\r\n        let g = supergraph;\r\n\r\n        let halfWidth = this.getWidth()/2\r\n        let x = this.pos.x + halfWidth\r\n\r\n        // connect node to first slot...\r\n        let root = g.findOrCreate(this.nodes()[0], measureDistance)\r\n        let first = g.findOrCreate(new Vector(x,this.slotHeights()[0]), measureDistance)\r\n        g.edge(root,first)\r\n\r\n        let heights = this.slotHeights()\r\n\r\n        eachCons(heights, 2).forEach(([y0,y1]: [number,number]) => {\r\n            let top = g.findOrCreate(new Vector(x,y0), measureDistance)\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n            g.edge(top, btm)\r\n        })\r\n\r\n        let btm = g.findOrCreate(new Vector(x, this.pos.y + this.getHeight()), measureDistance)\r\n        let lst = g.findOrCreate(new Vector(x, heights[heights.length-1]), measureDistance)\r\n        g.edge(btm,lst)\r\n\r\n        heights.forEach(y1 => {\r\n            let btm = g.findOrCreate(new Vector(x,y1), measureDistance)\r\n\r\n            let left = g.findOrCreate(new Vector(x-halfWidth,y1), measureDistance)\r\n            g.edge(left,btm)\r\n\r\n            let right = g.findOrCreate(new Vector(x+halfWidth,y1), measureDistance)\r\n            g.edge(btm,right)\r\n        });\r\n\r\n        for (let child of this.childrenBuildings) {\r\n            let slot = g.findOrCreate(child.parentSlot.pos, measureDistance)\r\n            let childNode = g.findOrCreate(child.nodes()[0], measureDistance)\r\n            g.edge(childNode, slot)\r\n            g.edge(slot, childNode)\r\n\r\n            child.graph(g)\r\n        }\r\n\r\n        return g;\r\n    }\r\n\r\n    private slotHeights() {\r\n        let slotSize = 50\r\n        let slotCount = Math.floor((this.getHeight()) / slotSize)\r\n        let heights = []\r\n        for (let i of range(slotCount)) {\r\n            heights.push(\r\n                50 + this.pos.y + i * slotSize,\r\n            )\r\n        }\r\n        return heights\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        for (let y of this.slotHeights()) {\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x, y,\r\n                    Orientation.Left\r\n                )\r\n            )\r\n\r\n            theSlots.push(\r\n                this.buildSlot(\r\n                    this.pos.x + this.getWidth(),\r\n                    y,\r\n                    Orientation.Right,\r\n                )\r\n            )\r\n        }\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    } \r\n\r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        if (this.pickingOrigin) {\r\n            this.alignToSlot(cursor)\r\n        } else {\r\n            // we're determining depth of tunnel\r\n            cursor.y = Math.max(this.planet.getTop() + 100, cursor.y)\r\n        }\r\n        return cursor;\r\n    }\r\n\r\n    // expand\r\n    reshape(cursor: Vector) {\r\n        this.pos.y = this.planet.getTop() + 2\r\n        if (!this.pickingOrigin) {\r\n          this.setHeight(cursor.y - this.planet.getTop())\r\n        }\r\n    }\r\n\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Device } from \"../Device\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class MissionControlView extends Building {\r\n    hideBox = true\r\n\r\n    devicePlaces() {\r\n        return this.nodes().map(n => {\r\n            n.y -= 20\r\n            return new DevicePlace(n, DeviceSize.Medium)\r\n        }) \r\n    }\r\n\r\n    afterConstruct() {\r\n        // build devices?\r\n        let { machines } = this.structure;\r\n        if (machines && machines.length > 0) {\r\n            let machine = new machines[0]();\r\n            this.devicePlaces().forEach(place => {\r\n                let theDevice = new Device(machine, place.position)\r\n                this.addDevice(theDevice)\r\n                // this.devices.push(theDevice)\r\n                // theDevice.building = this;\r\n                // this.add(theDevice)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    slots() {\r\n        let theSlots: Slot[] = []\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth() / 2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n\r\n        let slotY = this.getHeight();\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n\r\n        return theSlots;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        cursor.y = this.planet.getTop();\r\n        return cursor;\r\n    }\r\n\r\n    reshape(cursor: Vector) {\r\n        this.pos = cursor\r\n        this.pos.y -= this.getHeight() - 2 // + 1\r\n    }\r\n\r\n    //async interact(citizen: Citizen) {\r\n    //}\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color = this.mainColor();\r\n\r\n        ctx.fillStyle = color.toRGBA()\r\n        // y is going to be surface height\r\n        ctx.fillRect(this.pos.x, this.pos.y, this.getWidth(), this.getHeight())\r\n\r\n        // could draw a little flag :)\r\n        let flagpoleHeight = 18\r\n        let flagX = this.pos.x + 3 * (this.getWidth() / 4)\r\n        let flagY = this.pos.y - flagpoleHeight\r\n        ctx.fillRect(flagX, flagY, 2, flagpoleHeight)\r\n        ctx.fillRect(flagX, flagY, 10, 5)\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White; }\r\n}","import { Color, Vector } from \"excalibur\";\r\nimport { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\n\r\nexport class DomeView extends Building {\r\n    hideBox = true\r\n    showLabel = true\r\n\r\n    slots() {\r\n        let theSlots = [];\r\n        let slotY = this.getHeight();\r\n\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    reshape(cursor: Vector) {\r\n        this.alignToSlot(cursor)\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let color: Color = this.mainColor()\r\n\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.pos.x + this.getWidth()/2,\r\n            this.pos.y + this.getHeight(),\r\n            this.getHeight()/1.5,\r\n            0,\r\n            Math.PI,\r\n            true\r\n        )\r\n        ctx.closePath()\r\n        ctx.fillStyle = color.toRGBA()\r\n        ctx.fill()\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    colorBase() { return Color.White.darken(0.05); } \r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - 6\r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building, DevicePlace } from \"./Building\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\nimport { Vector } from \"excalibur\";\r\nimport { DeviceSize } from \"../../values/DeviceSize\";\r\nimport { drawRect } from \"../../Util\";\r\n\r\nexport class CommonAreaView extends Building {\r\n    floorHeight: number = 10\r\n    edgeWidth: number = 0.5 //.1\r\n    showLabel = true\r\n    hideBox = true\r\n    // maybe you can set height AND width of common area view??\r\n    // maybe just width...\r\n    colorBase() { return this.color.darken(0.3); }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n\r\n\r\n        drawRect(ctx, this.aabb(), 0.125, this.processedColor())\r\n\r\n        drawRect(\r\n            ctx,\r\n            { x: this.x, y: this.y + this.getHeight() - this.floorHeight,\r\n              width: this.getWidth(), height: this.floorHeight },\r\n              0,\r\n              this.colorBase().lighten(0.7)\r\n        )\r\n\r\n        super.draw(ctx, delta)\r\n    }\r\n\r\n    slots() {\r\n        let theSlots = []\r\n        let slotY = this.getHeight() - this.floorHeight\r\n        let leftSlot: Slot = this.buildSlot(\r\n            this.pos.x,\r\n            this.pos.y + slotY,\r\n            Orientation.Left,\r\n        )\r\n        theSlots.push(leftSlot)\r\n\r\n        let rightSlot: Slot = this.buildSlot(\r\n            this.pos.x + this.getWidth(),\r\n            this.pos.y + slotY,\r\n            Orientation.Right,\r\n        )\r\n        theSlots.push(rightSlot)\r\n\r\n        // top slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y,\r\n                Orientation.Up\r\n            )\r\n        )\r\n\r\n        // bottom slot\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth()/2,\r\n                this.pos.y + this.getHeight(),\r\n                Orientation.Down\r\n            )\r\n        )\r\n        return theSlots;\r\n    }\r\n\r\n    nodes(): Vector[] {\r\n        let x = this.pos.x + this.getWidth()/2;\r\n        let y = this.pos.y + this.getHeight()-this.floorHeight\r\n        return [\r\n            new Vector(Math.floor(x), Math.floor(y)) //-16)\r\n        ];\r\n    }\r\n  \r\n    reshape(cursor) {\r\n        this.alignToSlot(cursor);\r\n    }\r\n\r\n    devicePlaces() {\r\n        let w = this.getWidth()/2\r\n        let x = this.pos.x + w;\r\n        let y = this.pos.y + this.getHeight() - this.floorHeight - 10 \r\n        let ds = [\r\n            new Vector(x - w/3, y),\r\n            // new Vector(x, y),\r\n            new Vector(x + w/3, y),\r\n        ]\r\n\r\n        return ds.map(d => new DevicePlace(d, DeviceSize.Small))\r\n    }\r\n}","import { Building } from \"./Building\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Orientation } from \"../../values/Orientation\";\r\nimport { Slot } from \"../../values/Slot\";\r\n\r\nexport class CorridorView extends Building {\r\n    edgeWidth: number = 0\r\n\r\n    pickingOrigin: boolean = true\r\n    facing: Orientation = Orientation.Left\r\n\r\n    colorBase() { return this.color.darken(0.2); }\r\n\r\n    slots() {\r\n        // left slot -- right slot\r\n        let theSlots: Slot[] = [];\r\n        let slotY = this.getHeight() / 2;\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x, this.pos.y + slotY,\r\n                Orientation.Left\r\n            )\r\n        )\r\n\r\n        theSlots.push(\r\n            this.buildSlot(\r\n                this.pos.x + this.getWidth(),\r\n                this.pos.y + slotY,\r\n                Orientation.Right\r\n            )\r\n        )\r\n\r\n        return theSlots;\r\n    } \r\n\r\n    \r\n    handleClick(cursor: Vector) {\r\n        if (this.pickingOrigin) {\r\n            this.pickingOrigin = false;\r\n            this.reshape(this.constrainCursor(cursor))\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    constrainCursor(cursor: Vector): Vector {\r\n        let newCursor = cursor.clone();\r\n        if (this.pickingOrigin) {\r\n        } else {\r\n            newCursor.y = this.pos.y\r\n        }\r\n\r\n        return newCursor;\r\n    }\r\n\r\n    originX: number = 0\r\n    reshape(cursor: Vector) {\r\n\r\n        if (this.pickingOrigin) {\r\n            let theSlot = this.alignToSlot(cursor)\r\n            if (theSlot) {\r\n                this.facing = theSlot.facing\r\n\r\n                if (theSlot && this.facing === Orientation.Left) {\r\n                    this.originX = theSlot.pos.x\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.facing === Orientation.Left) {\r\n                this.setWidth(Math.abs(this.originX - cursor.x))\r\n                this.pos.x = this.originX - this.getWidth()\r\n            } else {\r\n                this.setWidth(Math.abs(this.pos.x - cursor.x))\r\n            }\r\n        }\r\n    }\r\n}","import { Machine, OxygenExtractor, WaterCondensingMachine, CloningVat, Bookshelf, Desk, Bed, Stove, AlgaeVat, ResearchServer, Fridge, SolarCell, Arbor, Cabin, Workstation, Fabricator, Houseplant, Orchard, Megafabricator } from './Machine';\r\n\r\nexport class SpaceFunction {\r\n    static label: string = '(generic)';\r\n    static machines: (typeof Machine)[] = [];\r\n}\r\n\r\nclass LivingQuarters extends SpaceFunction {\r\n    static label = 'Living Quarters'\r\n    static machines = [ Bed ]\r\n}\r\n\r\nclass Barracks extends SpaceFunction {\r\n    static label = 'Barracks'\r\n    static machines = [ Bed, Bed, Bed ]\r\n}\r\n\r\nclass Kitchen extends SpaceFunction {\r\n    static label = 'Kitchen'\r\n    static machines = [ Stove, Fridge ]\r\n}\r\n\r\nclass LifeSupportPod extends SpaceFunction {\r\n    static label = 'Life Support Module'\r\n    static machines = [ OxygenExtractor, WaterCondensingMachine ]\r\n}\r\n\r\nclass Retreat extends SpaceFunction {\r\n    static label = 'Retreat'\r\n    static machines = [ Cabin, Cabin ]\r\n}\r\n\r\nclass CloneMatrix extends SpaceFunction {\r\n    static label = 'Clone Matrix'\r\n    static machines = [ CloningVat, CloningVat ] //\r\n}\r\n\r\nclass ReadingRoom extends SpaceFunction {\r\n    static label = 'Reading Room'\r\n    static machines = [ Bookshelf, Bookshelf ]\r\n}\r\n\r\nclass Library extends SpaceFunction {\r\n    static label = 'Library'\r\n    static machines = [ Bookshelf, Bookshelf, Bookshelf ]\r\n}\r\n\r\nclass Study extends SpaceFunction {\r\n    static label = 'Study'\r\n    static machines = [ Workstation, Desk ]\r\n}\r\n\r\nclass Archive extends SpaceFunction {\r\n    static label = 'Archive'\r\n    static machines = [ ResearchServer, ResearchServer ]\r\n}\r\n\r\nclass Arboretum extends SpaceFunction {\r\n    static label = 'Arboretum'\r\n    static machines = [ Arbor, Arbor ]\r\n}\r\n\r\nclass AlgaeFarm extends SpaceFunction {\r\n    static label = 'Algae Farm'\r\n    static machines = [ AlgaeVat, AlgaeVat ]\r\n}\r\n\r\nclass SolarArray extends SpaceFunction {\r\n    static label = 'Solar Array'\r\n    static machines = [ SolarCell, SolarCell ]\r\n}\r\n\r\nclass Workshop extends SpaceFunction {\r\n    static label = 'Workshop'\r\n    static machines = [ Fabricator, Fabricator ]\r\n}\r\n\r\n// 3 house plants => nursery?\r\nclass Nursery extends SpaceFunction {\r\n    static label = 'Nursery'\r\n    static machines = [ Houseplant, Houseplant, Houseplant ]\r\n}\r\n\r\nclass Farm extends SpaceFunction {\r\n    static label = 'Farm'\r\n    static machines = [ Orchard, Orchard ]\r\n}\r\n\r\nclass Factory extends SpaceFunction {\r\n    static label = 'Factory'\r\n    static machines = [ Megafabricator, Megafabricator ]\r\n}\r\n\r\nexport const allSpaceFunctions = [\r\n    Library,\r\n    Barracks,\r\n    LifeSupportPod,\r\n    CloneMatrix,\r\n    LivingQuarters,\r\n    Kitchen,\r\n    AlgaeFarm,\r\n    Archive,\r\n    Arboretum,\r\n    SolarArray,\r\n    Retreat,\r\n    Study,\r\n    Workshop,\r\n    ReadingRoom,\r\n    Nursery,\r\n    Farm,\r\n    Factory,\r\n]","import * as ex from 'excalibur';\r\n\r\nexport class Player extends ex.Actor {\r\n  constructor() {\r\n    super();\r\n    this.setWidth(5);\r\n    this.setHeight(5);\r\n    this.x = 5;\r\n    this.y = 5;\r\n    this.color = new ex.Color(255, 255, 255);\r\n  }\r\n}\r\n","import { Actor, Color, Traits, Vector } from \"excalibur\";\r\nimport { Building } from \"./Building\";\r\nimport { Planet } from \"./Planet/Planet\";\r\nimport { ResourceBlock, blockColor } from \"../models/Economy\";\r\nimport { Game } from \"../Game\";\r\nimport { eachCons } from \"../Util\";\r\n// import { Machine, Stove, ExperimentBench, MineralProcessor, CommandCenter, Orchard, MiningDrill, Bookshelf, CookingFire, Cabin } from \"../models/Machine\";\r\nimport { Device } from \"./Device\";\r\nimport { Scale } from \"../values/Scale\";\r\nimport { MachineOperation } from \"../models/Machine\";\r\nimport { worker } from \"cluster\";\r\n// import { Machine, Stove, CommandCenter } from \"../models/Machine\";\r\n\r\nexport class Citizen extends Actor {\r\n\r\n    walkSpeed: number = Game.citizenSpeed\r\n    carrying: ResourceBlock = null\r\n    path: Vector[] = []\r\n\r\n    workInProgress: boolean = false\r\n    workStarted: number\r\n    workDuration: number\r\n    progress: number\r\n\r\n    constructor(private device: Device, protected planet: Planet) {\r\n        super(device.x, device.y, Scale.minor.first, Scale.minor.third, Color.White)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling))\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        // check wip\r\n        if (this.workInProgress) {\r\n            let now = (new Date()).getTime()\r\n            this.progress = (now - this.workStarted) / this.workDuration //0.5\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta)\r\n        if (this.carrying) {\r\n            ctx.fillStyle = blockColor(this.carrying).toRGBA()\r\n            ctx.fillRect(this.x+4, this.y-3, 5, 5)\r\n        }\r\n\r\n        if (this.workInProgress) {\r\n            ctx.lineWidth = 1\r\n            let pw = 10, ph = 3\r\n            let px = this.x - pw/2, py = this.y - 10;\r\n            // draw progress bar?\r\n            ctx.strokeStyle = Color.White.toRGBA()\r\n            // ctx.stroke(20)\r\n            ctx.strokeRect(px, py, pw, ph)\r\n\r\n            ctx.fillStyle = Color.Violet.darken(0.9).toRGBA()\r\n            ctx.fillRect(px, py, pw, ph)\r\n            ctx.fillStyle = Color.Violet.toRGBA()\r\n            ctx.fillRect(px, py, this.progress * pw, ph)\r\n\r\n            this.vel.x += (Math.random())-0.5 // * 10.0)\r\n        }\r\n\r\n        let debugPath = false\r\n        if (this.path && debugPath) {\r\n            let c = Color.White.lighten(0.5)\r\n            c.a = 0.5\r\n            eachCons(this.path, 2).forEach(([a,b]) => {\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x,a.y)\r\n                ctx.lineTo(b.x,b.y)\r\n                ctx.strokeStyle = c.toRGBA()\r\n                ctx.lineWidth = 10\r\n                ctx.stroke()\r\n            })\r\n        }\r\n    }\r\n\r\n    carry(c: ResourceBlock) { //c: Color) {\r\n        this.carrying = c;\r\n    }\r\n\r\n    drop(): ResourceBlock {\r\n        if (this.carrying) {\r\n            let c = this.carrying; //.clone();\r\n            this.carrying = null;\r\n            return c\r\n        }\r\n        return null\r\n    }\r\n\r\n    glideTo(pos: Vector) {\r\n        return this.actions.moveTo(pos.x, pos.y, this.walkSpeed).asPromise()\r\n    }\r\n\r\n    async progressBar(duration: number) {\r\n        // console.log(\"PROGRESS BAR\")\r\n        this.workInProgress = true\r\n        this.workStarted = (new Date()).getTime()\r\n        this.workDuration = duration\r\n        await new Promise((resolve, reject) => setTimeout(resolve, duration));\r\n        // console.log(\"PROGRESS BAR DONE!\")\r\n        this.workInProgress = false\r\n    }\r\n\r\n    async pathTo(building: Building) { //}, onArrival: (Building) => any) {\r\n        // let building = this.planet.closestBuildingByType(this.pos, structure)\r\n\r\n        let path = this.planet.pathBetween(this.pos.clone(), building)\r\n\r\n        if (path.length > 0) {\r\n            this.path = path\r\n            path.pop()\r\n            path.shift()\r\n            await Promise.all(\r\n                path.map(step => this.glideTo(step))\r\n            )\r\n            this.path = null\r\n            // onArrival(building);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    waitToUse(device) {\r\n        setTimeout(() => device.interact(this), 250)\r\n    }\r\n\r\n    async work() {\r\n        if (this.carrying) {\r\n            let item: ResourceBlock = this.carrying;\r\n            let sink: Device = this.planet.closestDevice(this.pos,\r\n                [],\r\n                (device) => \r\n                        device.machine.consumes === item ||\r\n                        device.machine.behavior === MachineOperation.CollectResource ||\r\n                        item === ResourceBlock.Meal && device.machine.behavior === MachineOperation.CollectMeals ||\r\n                        item === ResourceBlock.Data && device.machine.behavior === MachineOperation.CollectData\r\n            )\r\n\r\n            if (sink) {\r\n                await this.pathTo(sink.building)\r\n                await this.glideTo(sink.pos)\r\n                await sink.interact(this)\r\n            } else {\r\n                console.log(\"nowhere to deliver it\", this.carrying)\r\n            }\r\n        } else {\r\n            let source: Device = this.planet.closestDevice(this.pos,\r\n                [],\r\n                // [ Cabin, Orchard, MiningDrill, Bookshelf ],\r\n                (d) => d.product.length > 0\r\n            )\r\n\r\n            if (source) {\r\n                await this.pathTo(source.building)\r\n                await this.glideTo(source.pos)\r\n                await source.interact(this)\r\n            } else {\r\n                console.log(\"i guess i can try again? (sleep for a bit first)\")\r\n                await new Promise((resolve, reject) => setTimeout(resolve, 150));\r\n            }\r\n        }\r\n\r\n        setTimeout(() => this.work(), 100)\r\n    }\r\n}","import { Actor, Traits } from 'excalibur';\r\nimport { Citizen } from '../Citizen';\r\nimport { Planet } from './Planet';\r\nimport { Device } from '../Device';\r\n\r\nexport class Population extends Actor {\r\n    citizens: Citizen[] = [];\r\n    constructor(private planet: Planet) {\r\n        super(0, -planet.getHeight() / 2, 0, 0);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    increase(home: Device) {\r\n        let citizen = new Citizen(home, this.planet);\r\n        citizen.work();\r\n        this.citizens.push(citizen);\r\n        this.add(citizen);\r\n    }\r\n}\r\n","import { Graph } from \"../../values/Graph\";\r\nimport { Vector } from \"excalibur\";\r\nimport { Building } from \"../Building\";\r\nimport { minBy } from \"../../Util\";\r\n\r\nexport class NavigationTree {\r\n   graph: Graph<Vector>\r\n\r\n   constructor(root: Building) {\r\n       this.graph = root.graph()\r\n   }\r\n\r\n   seekPath(origin: Vector, dest: Vector): Vector[] {\r\n      return this.graph.shortestPath(origin, dest)\r\n   }\r\n\r\n   closestNode(testNode: Vector) {\r\n       let nodes = this.graph.dfs()\r\n       let closest = minBy(nodes,\r\n           (node: Vector) => Math.abs(testNode.distance(node))\r\n       )\r\n       if (closest) {\r\n           return closest\r\n       }\r\n       return false\r\n   }\r\n}","module.exports = __webpack_public_path__ + \"cffe40698a3b47b52ca0ff90a2c86ddf.svg\";","module.exports = __webpack_public_path__ + \"43062e54318df93f49e2be9a4281eb4a.svg\";","module.exports = __webpack_public_path__ + \"86e09b7a9e4997af44c45206eb8694ad.svg\";","module.exports = __webpack_public_path__ + \"c4ab2ceb2f61e18493fc776770c65654.svg\";","module.exports = __webpack_public_path__ + \"bbd50a175546bd70d21c5eadbc30d479.svg\";","module.exports = __webpack_public_path__ + \"7441c2ab240d0f733451d75204ac0792.svg\";","module.exports = __webpack_public_path__ + \"91a8cce06c3c05ce6e4b176afafd7b0a.svg\";","module.exports = __webpack_public_path__ + \"0ce4f9c3384680565b6bb16495b64233.svg\";","module.exports = __webpack_public_path__ + \"1db542acabeb82ec8da785e77afd4dca.svg\";","import { Actor, Vector, Traits, Color } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { minBy, flatSingle } from '../../Util';\r\nimport { Structure, MissionControl } from '../../models/Structure';\r\nimport { NavigationTree } from './NavigationTree';\r\nimport { Machine } from '../../models/Machine';\r\nimport { Device } from '../Device';\r\nexport class Colony extends Actor {\r\n    navTree: NavigationTree;\r\n    buildings: Building[] = [];\r\n    currentlyConstructing: Building | Device = null;\r\n    maxPop: number = 8\r\n\r\n    constructor(x: number, y: number) {\r\n        super(x, y, 0, 0); // 1000, 1000);\r\n        this.traits = this.traits.filter(trait => !(trait instanceof Traits.OffscreenCulling));\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        super.draw(ctx, delta);\r\n\r\n        let debugTree = false\r\n        if (this.navTree && debugTree) {\r\n            let edges = this.navTree.graph.edgeList();\r\n            edges.forEach((edge) => {\r\n                let [a,b] = edge;\r\n                var gradient = ctx.createLinearGradient(a.x,a.y+this.pos.y,b.x,b.y+this.pos.y);\r\n\r\n                gradient.addColorStop(0, 'green');\r\n                gradient.addColorStop(1, 'blue');\r\n\r\n                ctx.beginPath()\r\n                ctx.moveTo(a.x, a.y + this.pos.y)\r\n                ctx.lineTo(b.x, b.y + this.pos.y)\r\n                ctx.closePath()\r\n                ctx.strokeStyle = gradient\r\n                ctx.lineWidth = 0.5\r\n                ctx.stroke()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        building.built = true;\r\n        if (building.parentSlot) {\r\n            building.parentSlot.parent.childrenBuildings.push(building);\r\n            this.buildNavTree();\r\n        }\r\n        this.buildings.push(building);\r\n        building.afterConstruct();\r\n        this.add(building);\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[] = [], predicate: (Building) => boolean = () => true): Building {\r\n        let matching = this.buildings\r\n        .filter(building => //predicate(building) &&\r\n            (structureTypes.length > 0\r\n            ? structureTypes.some(st => building.structure instanceof st)\r\n            : true)\r\n             && predicate(building)\r\n        )\r\n\r\n        if (matching && matching.length > 0) {\r\n            let distanceToCursor = (building) => cursor.distance(building.nodes()[0]);\r\n            return minBy(matching, distanceToCursor);\r\n        }\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        if (!this.navTree) {\r\n            this.buildNavTree();\r\n        }\r\n        let srcNode = this.navTree.closestNode(origin);\r\n        let dest = destination.nodes()[0];\r\n        let destNode = this.navTree.closestNode(dest);\r\n        let path = this.navTree.seekPath(srcNode, destNode);\r\n        return path;\r\n    }\r\n\r\n    closestDeviceByType(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        let devices = this.findAllDevices()\r\n        devices = devices.filter(d => \r\n            (machineTypes.length > 0 ? machineTypes.some(machine => d.machine instanceof machine) : true)\r\n             && predicate(d)\r\n        )\r\n\r\n        if (devices && devices.length > 0) {\r\n            let proximity = (d) => cursor.distance(d)\r\n            return minBy(devices, proximity)\r\n        }\r\n    }\r\n\r\n    private buildNavTree() {\r\n        let ctrl = this.buildings.find(building => building.structure instanceof MissionControl);\r\n        if (ctrl) {\r\n            this.navTree = new NavigationTree(ctrl);\r\n        }\r\n    }\r\n\r\n    findAllDevices() {\r\n        return flatSingle(this.buildings.map(b => b.getDevices()))\r\n    }\r\n}\r\n","import { Actor, Color } from 'excalibur';\r\nimport { range } from '../../Util';\r\n\r\nclass PlanetBackground extends Actor {\r\n    constructor(y: number, width: number, color: Color) {\r\n        super(0, y, width, 500, color); // y + size, size, layerSize, color.darken(0.2))\r\n    }\r\n}\r\n\r\nexport class Mountains extends PlanetBackground {\r\n    peaks: {\r\n        x: number;\r\n        height: number;\r\n    }[] = [];\r\n    onInitialize() {\r\n        let peakCount = 20; // Math.floor(this.getWidth() / 2000)\r\n        let peakHeight = 3000;\r\n        // let mtnWidth = 180\r\n        // figure out mountain peaks?\r\n        // let yBase = this.pos.y //-1000 //this.pos.y //this.getHeight()\r\n        let xOff = this.getWidth() / 2;\r\n        let peakDistance = this.getWidth() / peakCount;\r\n        for (let times of range(5)) {\r\n            let heightRange = 100*times;\r\n            let drift = 3 * times * (peakDistance / 2);\r\n            for (let i of range(peakCount)) { //} / 2)) {\r\n                this.peaks.push({\r\n                    x: -xOff + i * peakDistance + ((Math.random() * drift) - (drift / 2)),\r\n                    height: Math.max(10, 1000 + (Math.random()*peakHeight) + ((Math.random() * heightRange)-(heightRange/2))) //(Util.randomIntInRange(-160,160))\r\n                    // y = yBase - peakHeight\r\n                });\r\n            }\r\n        }\r\n        // console.log({ peaks: this.peaks });\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        let baseColor = this.color.desaturate(0.25); //.toRGB\r\n        // baseColor.a = 0.6\r\n        let brightColor = this.color.saturate(0.2).lighten(0.5)\r\n        // super.draw(ctx, delta)\r\n        ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n        //let peakHeight = 250\r\n        // let mtnWidth = 180\r\n        let yBase = this.pos.y-3; //-1000 //this.pos.y //this.getHeight()\r\n        // let xOff = this.getWidth() / 2\r\n        this.peaks.forEach(peak => {\r\n            let y0 = yBase - peak.height;\r\n            let mtnWidth = peak.height * 3.4;\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x - mtnWidth, yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n\r\n            ctx.fillStyle = baseColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(peak.x, y0);\r\n            ctx.lineTo(peak.x + 3*(mtnWidth/4), yBase);\r\n            ctx.lineTo(peak.x + mtnWidth, yBase);\r\n            ctx.fillStyle = brightColor.toRGBA() // this.color.desaturate(0.45).lighten(0.15).toRGBA();\r\n            ctx.fill();\r\n\r\n        });\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Actor, Color, Vector, Util, EdgeArea } from 'excalibur';\r\nimport { Building } from '../Building';\r\nimport { range } from '../../Util';\r\nimport { Mountains } from './PlanetBackground';\r\nimport { Structure } from '../../models/Structure';\r\nimport { Hud } from '../Hud/Hud';\r\nimport { ResourceBlock } from '../../models/Economy';\r\nimport { Colony } from './Colony';\r\nimport { Population } from './Population';\r\nimport { Machine, CloningVat } from '../../models/Machine';\r\n\r\n\r\nexport class Planet extends Actor {\r\n    colony: Colony\r\n    population: Population\r\n\r\n    constructor(\r\n        public hud: Hud,\r\n        public color: Color,\r\n        public width: number = 2000000,\r\n        public depth: number = 10000000,\r\n        ) {\r\n        super(0, depth/2, width, depth, color)\r\n        this.traits = this.traits.filter(trait => !(trait instanceof ex.Traits.OffscreenCulling))\r\n\r\n        let yBase = -depth/2\r\n        // crust\r\n        let crustHeight = 20\r\n        this.createLayer(yBase, crustHeight, this.color.lighten(0.25))\r\n\r\n\r\n        let layerCount = 10\r\n        let layerHeight = depth / layerCount \r\n        for (let i of range(layerCount)) {\r\n            this.createLayer(\r\n                yBase + crustHeight + (layerHeight/2) + (layerHeight * (i+1)),\r\n                layerHeight,\r\n                this.color.darken(0.05 + 0.01 * i)\r\n            )\r\n        }\r\n\r\n        this.add(new Mountains(-depth/2, this.getWidth(), this.color.lighten(0.15)))\r\n\r\n        this.colony = new Colony(0,-depth/2) //yBase)\r\n        this.add(this.colony)\r\n\r\n        this.population = new Population(this)\r\n        this.add(this.population)\r\n    }\r\n\r\n    private createLayer(y: number, size: number, color: Color) {\r\n        let theLayer = new Actor(0, y, this.getWidth(), size, color);\r\n        this.add(theLayer);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta) {\r\n        super.draw(ctx, delta)\r\n\r\n        if (this.currentlyConstructing) {\r\n            this.currentlyConstructing.draw(ctx, delta)\r\n        }\r\n    }\r\n\r\n    update(engine, delta) {\r\n        super.update(engine, delta)\r\n\r\n        this.colony.buildings.forEach(building => building.update(engine, delta))\r\n        this.population.citizens.forEach(citizen => citizen.update(engine, delta))\r\n    }\r\n\r\n    get currentlyConstructing() {\r\n        return this.colony.currentlyConstructing\r\n    }\r\n\r\n    gather(resource: ResourceBlock): any {\r\n        this.hud.resourceGathered(resource)\r\n    }\r\n\r\n    placeBuilding(building: Building) {\r\n        this.colony.placeBuilding(building)\r\n    }\r\n\r\n    populate(pos: Vector) {\r\n        // we could have a colony pop limit for now?\r\n        if (this.population.citizens.length < this.colony.maxPop) {\r\n            // let home = this.closestBuildingByType(pos, [CloneMatrix])\r\n            let home = this.closestDevice(pos, [CloningVat])\r\n            this.population.increase(home)\r\n        }\r\n    }\r\n\r\n    closestBuildingByType(cursor: Vector, structureTypes: (typeof Structure)[], predicate: (Building) => boolean = ()=>true): Building {\r\n        return this.colony.closestBuildingByType(cursor, structureTypes, predicate)\r\n    }\r\n\r\n    closestDevice(cursor: Vector, machineTypes: (typeof Machine)[] = [], predicate: (Device) => boolean = () => true) {\r\n        return this.colony.closestDeviceByType(cursor, machineTypes, predicate);\r\n    }\r\n\r\n    pathBetween(origin: Vector, destination: Building): Vector[] {\r\n        return this.colony.pathBetween(origin, destination)\r\n    }\r\n}","import { Scene, Input, Vector } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { Planet } from \"../actors/Planet/Planet\";\r\nimport { Player } from \"../actors/player\";\r\nimport { Structure, MissionControl, MainTunnel, Corridor, SurfaceRoad } from \"../models/Structure\";\r\nimport { Building, DomeView, CorridorView, CommonAreaView, TunnelView, MissionControlView, LadderView, } from \"../actors/Building\";\r\nimport { Hud } from \"../actors/Hud/Hud\";\r\nimport { SurfaceRoadView } from \"../actors/Building/SurfaceRoadView\";\r\nimport { Device } from \"../actors/Device\";\r\nimport { Machine } from \"../models/Machine\";\r\nimport { SmallRoomThreeView } from \"../actors/Building/SmallRoomThreeView\";\r\nimport { MidDomeView } from \"../actors/Building/MidDomeView\";\r\nimport { MediumRoomView } from \"../actors/Building/MediumRoomView\";\r\nimport { LargeRoomView } from \"../actors/Building/LargeRoomView\";\r\n\r\n\r\nexport class Construct extends Scene {\r\n    game: Game\r\n    planet: Planet\r\n    hud: Hud\r\n    player: Player\r\n\r\n    dragging: boolean = false\r\n    dragOrigin: Vector\r\n\r\n    static structureViews: { [key: string]: typeof Building } = {\r\n        CommonAreaView,\r\n        CorridorView,\r\n        DomeView,\r\n        LadderView,\r\n        MidDomeView,\r\n        MissionControlView,\r\n        SmallRoomThreeView,\r\n        SurfaceRoadView,\r\n        TunnelView,\r\n        MediumRoomView,\r\n        LargeRoomView,\r\n    }\r\n    ////\r\n    static requiredStructureList: Array<typeof Structure> = [\r\n        MissionControl,\r\n\r\n        SurfaceRoad,\r\n        // OxygenAccumulator,\r\n        // Dome,\r\n        MainTunnel,\r\n        Corridor,\r\n        // Kitchen,\r\n        // Study,\r\n        // CloneMatrix,\r\n    ]\r\n\r\n    public onInitialize(game: Game) {\r\n        this.game = game\r\n\r\n\r\n        this.hud = new Hud(game, (structure) => {\r\n            this.startConstructing(structure)\r\n        }, (device) => {\r\n            this.startConstructing(device)\r\n        });\r\n        this.add(this.hud)\r\n\r\n        this.planet = new Planet(this.hud, game.world.color);\r\n        this.add(this.planet)\r\n  \r\n        this.player = new Player()\r\n        this.add(this.player)\r\n\r\n        this.prepareNextBuilding()\r\n        this.camera.zoom(0.001)\r\n        this.camera.zoom(2, 10000)\r\n    }\r\n\r\n    public onActivate() {\r\n        this.game.input.pointers.primary.on('move', (e: Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                this.camera.pos = this.camera.pos.add(\r\n                    this.dragOrigin.sub(e.pos)\r\n                )\r\n            } else {\r\n                this.player.pos = e.pos\r\n\r\n                let currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding instanceof Building) {\r\n\r\n                    let constrained = currentlyBuilding.constrainCursor(this.player.pos)\r\n                    this.player.pos = constrained\r\n\r\n                    currentlyBuilding.reshape(this.player.pos)\r\n                } else if (currentlyBuilding instanceof Device) {\r\n                    // console.warn(\"would snap device in place!\")\r\n                    currentlyBuilding.snap(this.planet, this.player.pos)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: Input.PointerDownEvent) => {\r\n            if (e.button == Input.PointerButton.Left) {\r\n                const currentlyBuilding = this.planet.currentlyConstructing\r\n                if (currentlyBuilding) {\r\n                    if (currentlyBuilding instanceof Building) {\r\n                        let buildingUnderConstruction = currentlyBuilding\r\n                        let placementValid = !buildingUnderConstruction.overlapsAny()\r\n                        if (buildingUnderConstruction && placementValid && buildingUnderConstruction.handleClick(e.pos)) {\r\n                            this.planet.placeBuilding(buildingUnderConstruction)\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.prepareNextBuilding(e.pos)\r\n                            this.hud.updatePalettes(this.planet.colony)\r\n                        }\r\n                    } else {\r\n                        let deviceUnderConstruction = currentlyBuilding\r\n                        if (deviceUnderConstruction.snap(this.planet)) {\r\n                            let bldg = deviceUnderConstruction.building\r\n\r\n                            bldg.addDevice(deviceUnderConstruction)\r\n\r\n                            // deviceUnderConstruction.finalize()\r\n                            this.planet.colony.currentlyConstructing = null\r\n                            this.hud.updatePalettes(this.planet.colony)\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.button === Input.PointerButton.Middle) {\r\n                this.dragging = true;\r\n                this.dragOrigin = e.pos\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('wheel', (e: Input.WheelEvent) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.05, max = 8\r\n            if (e.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.H) {\r\n                if (this.buildings && this.buildings[0]) {\r\n                    this.camera.move(this.buildings[0].pos, 500)\r\n                    this.camera.zoom(0.5, 1000)\r\n                }\r\n            } else if (e.key === Input.Keys.Esc) {\r\n                // cancel building in progress?\r\n                this.planet.colony.currentlyConstructing = null\r\n            }\r\n        })\r\n    }\r\n\r\n    public onDeactivate() {\r\n        this.game.input.pointers.primary.off('move')\r\n        this.game.input.pointers.primary.off('down')\r\n        this.game.input.pointers.primary.off('up')\r\n        this.game.input.pointers.primary.off('wheel')\r\n    }\r\n\r\n\r\n    get buildings() { return this.planet.colony.buildings }\r\n\r\n\r\n    private nextMissingRequiredStructure(): Structure {\r\n        let requiredStructures: Structure[] = Construct.requiredStructureList.map(s => new s())\r\n        let actualStructureNames: string[] = this.buildings.map(building => building.structure.name)\r\n\r\n        return requiredStructures.find(structure => !actualStructureNames.includes(structure.name))\r\n    }\r\n\r\n    protected prepareNextBuilding(pos: Vector = new Vector(0,0)) {\r\n        let structure = null;\r\n        let nextMissing = this.nextMissingRequiredStructure();\r\n        if (nextMissing) { structure = nextMissing; }\r\n        if (structure) {\r\n            this.startConstructing(structure, pos)\r\n        } else {\r\n            this.hud.setMessage(`Welcome to OSIRIS!`)\r\n        }\r\n    }\r\n\r\n    startConstructing(structureOrMachine: Structure | Machine, pos: Vector = new Vector(0, 0)) {\r\n        let theNextOne = null\r\n        if (structureOrMachine instanceof Structure) {\r\n            let structure = structureOrMachine\r\n            // structure.origin = pos // thread this out somehow??\r\n            this.hud.setMessage(`Place ${structure.name}`)\r\n            theNextOne = this.spawnBuilding(structure, pos)\r\n            this.camera.zoom(structure.zoom, 250)\r\n        } else if (structureOrMachine instanceof Machine) {\r\n            // setup machine?\r\n            let machine = structureOrMachine\r\n            // machine.origin = pos\r\n\r\n            theNextOne = this.spawnDevice(machine, pos)\r\n            this.camera.zoom(1.5, 250)\r\n        }\r\n\r\n        this.planet.colony.currentlyConstructing = theNextOne\r\n        if (theNextOne) {\r\n            console.warn(\"would start constructing\", { theNextOne })\r\n            this.camera.pos = theNextOne.pos\r\n        }\r\n    }\r\n\r\n    protected spawnDevice(machine: Machine, pos: Vector): Device {\r\n        // let bldg = this.planet.closestBuildingByType(pos, [ CommonArea, Biodome ])\r\n        let device = new Device(machine, pos)\r\n        device.snap(this.planet)\r\n        return device\r\n    }\r\n\r\n    protected spawnBuilding(structure: Structure, pos: Vector): Building {\r\n        let anotherBuilding = this.assembleBuildingFromStructure(structure, pos)\r\n        anotherBuilding.reshape(anotherBuilding.constrainCursor(anotherBuilding.pos))\r\n        return anotherBuilding\r\n    }\r\n    \r\n    private assembleBuildingFromStructure(structure: Structure, pos: Vector): Building {\r\n        let View = Construct.structureViews[structure.view]\r\n        let building = new View(pos, structure, this.planet)\r\n        return building;\r\n    }\r\n} \r\n","import { Color } from 'excalibur';\r\nimport { Structure } from './Structure';\r\nimport { sample } from '../Util';\r\nimport { Planet } from '../actors/Planet/Planet';\r\n\r\n\r\nexport class World {\r\n  static colors = [Color.Red, Color.Blue, Color.Green] // Color.Viridian, Color.Magenta, Color.Chartreuse];\r\n\r\n  color: Color = sample(World.colors).\r\n      darken(0.1).\r\n      desaturate(0.8);\r\n  skyColor: Color = sample([ Color.Cyan, Color.Vermillion ] ). // Color.Rose //World.colors).\r\n        lighten(0.15).\r\n        desaturate(0.65) // sample([Color.Blue, Color.Rose,Color.Blue]).lighten(0.1).desaturate(0.8)\r\n//   colony: Colony = new Colony()\r\n\r\n  \r\n}","module.exports = __webpack_public_path__ + \"0f6ac78b40c6bc151aee01b517f49ca1.png\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\r\nconst sword = require('./images/sword.png');\r\nconst bookshelf = require('./images/bookshelf.png');\r\n// const bookshelfSvg = require('./images/bookshelf-plain.svg');\r\n\r\nlet Resources = {\r\n    Sword: new ex.Texture(sword),\r\n\r\n    Bookshelf: new ex.Texture(bookshelf),\r\n\r\n    // BookshelfSVG: new ex.Texture(bookshelfSvg)\r\n}\r\n\r\nexport { Resources }\r\n","import { Game } from './Game';\r\nimport { World } from './models/World';\r\nimport { Construct } from './scenes/Construct';\r\n\r\nconst theWorld = new World();\r\nconst game = new Game(theWorld);\r\n\r\n// scenes\r\nconst construct = new Construct(game);\r\ngame.add('construct', construct);\r\n\r\ngame.start().then(() => {\r\n  game.goToScene('construct');\r\n});\r\n"],"sourceRoot":""}